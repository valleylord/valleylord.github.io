<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[褚哥说|]]></title>
  <subtitle><![CDATA[我想写一些东西]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://valleylord.github.io/"/>
  <updated>2016-05-01T06:44:25.935Z</updated>
  <id>http://valleylord.github.io/</id>
  
  <author>
    <name><![CDATA[Valleylord]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MyCAT Catlet分析]]></title>
    <link href="http://valleylord.github.io/post/201605-mycat-catlet/"/>
    <id>http://valleylord.github.io/post/201605-mycat-catlet/</id>
    <published>2016-05-01T04:41:35.000Z</published>
    <updated>2016-05-01T06:43:53.243Z</updated>
    <content type="html"><![CDATA[<p>Catlet 是 MyCAT 2.0上计划的新功能，预期可以完成多个数据中不同表之间的表连接（JOIN），目前还处于开发阶段。</p>
<p>Catlet 的入口类是在 <code>HintCatletHandler</code>，该类实现了 <code>HintHandler</code> 接口，可以在 <code>RouteService.route()</code> 中有 Hint 的时候使用，可见，Catlet 的调用需要使用注释。<code>HintCatletHandler.route()</code> 方法是该类的主要方法，其重要的代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Catlet catlet = (Catlet) MycatServer.getInstance()</div><div class="line">		.getCatletClassLoader().getInstanceofClass(cateletClass);</div><div class="line">catlet.route(sysConfig, schema, sqlType, realSQL, charset, sc,</div><div class="line">		cachePool);</div><div class="line">catlet.processSQL(realSQL, new EngineCtx(sc.getSession2()));</div></pre></td></tr></table></figure></p>
<p>先初始化一个 <code>Catlet</code> 类，再依次调用其 <code>route()</code> 和 <code>processSQL()</code> 方法，这两个方法也是 Catlet 的入口方法。实际上，<code>Catlet</code> 是一个接口，有多个实现，<code>route()</code> 和 <code>processSQL()</code> 是其中两个重要的抽象方法。对于跨数据的多表连接，目前只有一个开发中的类 <code>ShareJoin</code>，该类文件中定义了3个类，<code>ShareJoin</code>、<code>ShareDBJoinHandler</code> 和 <code>ShareRowOutPutDataHandler</code>。</p>
<p><code>Catlet.route()</code> 的代码并不是特别复杂，重要代码是以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MySqlSelectQueryBlock mysqlSelectQuery = (MySqlSelectQueryBlock)<span class="keyword">st</span>.getSelect().getQuery();</div><div class="line">joinParser=<span class="keyword">new</span> JoinParser(mysqlSelectQuery,realSQL);</div><div class="line">joinParser.parser();</div></pre></td></tr></table></figure></p>
<p>即调用 <code>JoinParser.parser()</code> 方法来解析 SQL。重要的代码基本都在 <code>Catlet.processSQL()</code> 方法中，这个方法相对复杂一些，调用的层次也比较多，会调用到 <code>ShareDBJoinHandler</code> 和 <code>ShareRowOutPutDataHandler</code>，重要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ShareDBJoinHandler joinHandler <span class="subst">=</span> <span class="literal">new</span> ShareDBJoinHandler(this,joinParser<span class="built_in">.</span>getJoinLkey());		</div><div class="line">ctx<span class="built_in">.</span>executeNativeSQLSequnceJob(dataNodes, ssql, joinHandler);</div><div class="line">  		EngineCtx<span class="built_in">.</span>LOGGER<span class="built_in">.</span>info(<span class="string">"Catlet exec:"</span><span class="subst">+</span>getDataNode(getDataNodes())<span class="subst">+</span><span class="string">" sql:"</span> <span class="subst">+</span>ssql);</div><div class="line"></div><div class="line">ctx<span class="built_in">.</span>setAllJobFinishedListener(<span class="literal">new</span> AllJobFinishedListener() {</div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div></pre></td></tr></table></figure></p>
<p>以上代码中，先使用之前 <code>route()</code> 方法中 <code>JoinParser</code> 的结果，获取所有用于表连接列（<code>getJoinLkey()</code>），并以此为参数初始化 <code>ShareDBJoinHandler</code> 类；然后把 <code>ShareDBJoinHandler</code> 作为执行 SQL 的回调类，执行 SQL；最后，设置所有工作都完成之后的监听类 <code>AllJobFinishedListener</code>。因此，<code>ShareDBJoinHandler</code> 是处理 JOIN 的关键类，并且，处理的算法与表连接的列有关。</p>
<p>在 <code>ShareDBJoinHandler</code> 类中，<code>onRowData</code> 方法用于处理收到查询结果，是主要的回调方法，这个方法主要调用了同一个类中的 <code>putDBRow</code> 方法。<code>putDBRow</code> 方法也比较短，主要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int batchSize = <span class="number">999</span>;</div><div class="line"><span class="regexp">//</span> 满<span class="number">1000</span>条，发送一个查询请求</div><div class="line"><span class="input"><span class="prompt">if (ids.size() &gt;</span> batchSize) {</span></div><div class="line">	createQryJob(batchSize);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>先设置了一个批处理的大小，999（实际应该是1000，因为使用的是 <code>&gt;</code> 而不是 <code>&gt;=</code>），然后调用 <code>createQryJob</code>。<code>createQryJob</code> 相对复杂一点，先是使用 <code>StringBuilder sb</code> 做了比较长的一段字符串拼接，然后有几行比较重要的代码，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> sql = <span class="built_in">String</span>.format(joinParser.getChildSQL(), sb);</div><div class="line">  getRoute(sql);</div><div class="line">ctx.executeNativeSQLParallJob(getDataNodes(),sql, <span class="keyword">new</span> ShareRowOutPutDataHandler(<span class="keyword">this</span>,fields,joinindex,joinParser.getJoinRkey(), batchRows));</div></pre></td></tr></table></figure></p>
<p>先根据之前字符串拼接的结果，生成了一个 SQL，然后就是正常的调用路由并执行，执行的回调类是 <code>ShareRowOutPutDataHandler</code>。如果不求甚解的话，感觉是 ShareJoin 把原有的 SQL 按每 1000 个表连接列的值为大小，生成一些子 SQL，并执行这些子 SQL，但并不清楚是如何拆分的。<code>ShareRowOutPutDataHandler</code> 类的 <code>onRowData</code> 方法，用于处理子 SQL 的返回。这个方法里面的代码没有什么特别，基本就是将处理的数据写回。</p>
<p>因此，拆分子 SQL 的方法实际上与字符串拼接有关，字符串拼接部分的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; e: ids.entrySet() ){</div><div class="line">	theId=e.getKey();</div><div class="line">	batchRows.put(theId, rows.remove(theId));</div><div class="line">	<span class="keyword">if</span> (!svalue.equals(e.getValue())){</div><div class="line">		<span class="keyword">if</span>(joinKeyType == Fields.FIELD_TYPE_VAR_STRING </div><div class="line">				|| joinKeyType == Fields.FIELD_TYPE_STRING){ <span class="comment">// joinkey 为varchar</span></div><div class="line">			sb.<span class="keyword">append</span>(<span class="string">"'"</span>).<span class="keyword">append</span>(e.getValue()).<span class="keyword">append</span>(<span class="string">"'"</span>).<span class="keyword">append</span>(<span class="string">','</span>); <span class="comment">// ('digdeep','yuanfang') </span></div><div class="line">		}<span class="keyword">else</span>{ <span class="comment">// 默认joinkey为int/long</span></div><div class="line">			sb.<span class="keyword">append</span>(e.getValue()).<span class="keyword">append</span>(<span class="string">','</span>); <span class="comment">// (1,2,3) </span></div><div class="line">		}</div><div class="line">	}</div><div class="line">	svalue=e.getValue();</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">count</span>++ &gt; batchSize) {</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	}			</div><div class="line">}</div><div class="line">......</div><div class="line">sb.deleteCharAt(sb.length() - <span class="number">1</span>).<span class="keyword">append</span>(<span class="string">')'</span>);</div></pre></td></tr></table></figure></p>
<p>实际上也没有特别复杂，就是根据连接列的类型，如果是 String 的话，就拼接为 <code>('a','b','c')</code> 这样；如果是 int/long 类型，就拼接为 <code>(1,2,3)</code> 这样。然后在生成 SQL 的时候，调用 <code>String sql = String.format(joinParser.getChildSQL(), sb);</code>，<code>joinParser.getChildSQL()</code> 的代码是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//String sql="<span class="operator"><span class="keyword">select</span> <span class="string">"+joinRkey+"</span>,<span class="string">"+sql+"</span> <span class="keyword">from</span> <span class="string">"+mtable+"</span> <span class="keyword">where</span> <span class="string">"+joinRkey+"</span> <span class="keyword">in</span> <span class="string">";</span></span></div><div class="line">String sql=tableFilter.getTableJoin().getSQL();</div><div class="line">return sql;</div></pre></td></tr></table></figure></p>
<p>代码并未深究，从注释来看，是在连接的列上加了 <code>in</code>，也就是说，最后拼成的 SQL 会是类似这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> XXXXXXX <span class="keyword">from</span> XXXXXXXTABLES <span class="keyword">where</span> joinRkey <span class="keyword">in</span> YYYYYYYY</div></pre></td></tr></table></figure></p>
<p>其中的 <code>YYYYYYYY</code> 是之前字符拼接的结果。因此，从此可以得知 Catlet 在处理多表连接算法的大致步骤，假设原先的 SQL 是 <code>select a.name, b.dept from tableA a, tableB b where a.id = b.id</code>，流程是，</p>
<ol>
<li>先将 SQL 改写为 <code>select a.name, a.id from tableA a</code>，然后在相应节点上执行；</li>
<li>将1的返回按 <code>a.id</code> 拆分，每 1000 个值生成一个子 SQL，生成的 SQL 大致是 <code>select b.dept, b.id from tableB b where b.id in (YYYYYYYY)</code>，其中，YYYYYYYY 是 <code>a.id</code> 的值每 1000 个拼出来的逗号分割的字符串；</li>
<li>等待2的返回，并将所有返回的结果拼接，写回；</li>
</ol>
<p>以上是 MyCAT Catlet 的大致处理流程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Catlet 是 MyCAT 2.0上计划的新功能，预期可以完成多个数据中不同表之间的表连接（JOIN），目前还处于开发阶段。</p>
<p>Catlet 的入口类是在 <code>HintCatletHandler</code>，该类实现了 <code>HintHandl]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 代码分析]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-code/"/>
    <id>http://valleylord.github.io/post/201604-mycat-code/</id>
    <published>2016-04-30T11:31:06.000Z</published>
    <updated>2016-05-01T04:12:05.462Z</updated>
    <content type="html"><![CDATA[<p>本文以 MyCAT 2.0-dev 代码为例，分析 MyCAT SQL执行部分的代码。</p>
<h2>系统启动</h2>
<p>系统的入口方法在 <code>io.mycat.MycatStartup</code> 中的 <code>main</code> 方法，主要代码如下两行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MycatServer <span class="keyword">server</span> = MycatServer.getInstance();</div><div class="line"></div><div class="line"><span class="keyword">server</span>.startup();</div></pre></td></tr></table></figure></p>
<p><code>MycatServer</code> 是一个单例类，所以，等于直接调用 <code>MycatServer</code> 中的 <code>startup()</code> 方法。<code>startup()</code> 方法中，除去一些打印 log 的代码，主要初始化了一些系统参数（如网络、datasource）和连接池，重要的代码是以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NIOReactorPool reactorPool = <span class="keyword">new</span> NIOReactorPool(</div><div class="line">		BufferPool.LOCAL_BUF_THREAD_PREX + <span class="string">"NIOREACTOR"</span>, processorCount);</div><div class="line">NIOConnector connector = <span class="keyword">new</span> NIOConnector(</div><div class="line">		BufferPool.LOCAL_BUF_THREAD_PREX + <span class="string">"NIOConnector"</span>, reactorPool);</div><div class="line">connector.start();</div><div class="line">netSystem.setConnector(connector);</div><div class="line"></div><div class="line">MySQLFrontConnectionFactory frontFactory = <span class="keyword">new</span> MySQLFrontConnectionFactory(</div><div class="line">		<span class="keyword">new</span> MySQLFrontConnectionHandler());</div><div class="line">NIOAcceptor server = <span class="keyword">new</span> NIOAcceptor(BufferPool.LOCAL_BUF_THREAD_PREX</div><div class="line">		+ NAME + <span class="string">"Server"</span>, <span class="built_in">system</span>.getBindIp(), <span class="built_in">system</span>.getServerPort(),</div><div class="line">		frontFactory, reactorPool);</div><div class="line">server.start();</div></pre></td></tr></table></figure></p>
<p>首先初始化了一个 NIOReactor 的线程池 <code>NIOReactorPool</code> 和一个 MySQL 连接的工厂类 <code>MySQLFrontConnectionFactory</code>，然后以这两个为参数，构造了 <code>NIOAcceptor</code> 类，并在主线程中启动 <code>start()</code>。其中，<code>NIOReactorPool</code> 主要包含一个 <code>NIOReactor</code> 的数组，每个数组都是一个线程对象，处理每一个客户端网络连接，该类在初始化完成的时候，已经调用了 <code>reactor.startup()</code>，启动了所有 <code>NIOReactorPool</code> 中的所有线程。<code>NIOReactorPool</code>、<code>NIOReactorPool</code> 和 <code>NIOReactor</code> 这3个类组成了 MyCAT 处理客户端连接的几乎全部代码。MyCAT 主要使用 NIO （java.nio）网络模型，对高并发请求有更好的处理，但是其程序结构中有很多回调函数的写法，不是很容易理解和掌握。另外，<code>MySQLFrontConnectionFactory</code> 是工厂类，主要用于生成处理连接的 <code>MySQLFrontConnection</code> 类（该类继承自 <code>GenalMySQLConnection</code>，<code>GenalMySQLConnection</code> 继承自 <code>Connection</code>）。这些类都是之后代码分析中非常重要的类。</p>
<p>至此，主线程已经完成初始化，并启动了 <code>NIOAcceptor</code>，<code>NIOAcceptor</code> 继承了 <code>Thread</code>，下面的代码入口在 <code>NIOAcceptor.run()</code>。</p>
<h2>处理网络连接</h2>
<p>处理网络连接的入口在 <code>NIOAcceptor.run()</code>，该方法中启动了一个无限循环，主要调用了该类中的 <code>accept()</code> 方法，方法的主要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">channel =</span> serverChannel.accept();</div><div class="line">channel.configureBlocking(<span class="constant">false</span>);</div><div class="line">Connection <span class="variable">c =</span> factory.make(channel);</div><div class="line">......</div><div class="line">NIOReactor <span class="variable">reactor =</span> reactorPool.getNextReactor();</div><div class="line">reactor.postRegister(c);</div></pre></td></tr></table></figure></p>
<p>先是调用 <code>serverChannel.accept()</code>，这是 NIO 的调用，用于接受一个新的连接 <code>channel</code>，然后设置连接为 nonblocking 模式。然后以新连接 <code>channel</code>为参数创建 <code>Connection</code>，然后，从线程池中获取一个 <code>NIOReactor</code> 线程，并调用 <code>postRegister(c)</code>，将 <code>Connection</code> 注册在该线程中，所有连接的请求都调用该 <code>Connection</code> 中的方法来处理。由于 <code>NIOReactor</code> 线程已经启动，所以会直接调用其中的 <code>run()</code> 方法。而实际上，<code>NIOReactor</code> 中有一个内部类 <code>RW</code>，线程调用的是 <code>RW.run()</code>。</p>
<p>注意，这里通过工厂类创建的 <code>Connection</code> 实际上是 <code>MySQLFrontConnection</code> 类，因为工厂类是传入的 <code>MySQLFrontConnectionFactory</code> 类。严格来说，该工厂类在设计模式上应该属于抽象工厂，其父类 <code>ConnectionFactory</code> 会通过 <code>Connection make(SocketChannel channel)</code> 方法创建 <code>Connection</code>类，该方法代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">channel.setOption(<span class="type">StandardSocketOptions</span>.<span class="type">SO_REUSEADDR</span>, <span class="built_in">true</span>);</div><div class="line"><span class="comment">// 子类完成具体连接创建工作</span></div><div class="line"><span class="type">Connection</span> <span class="built_in">c</span> = makeConnection(channel);</div><div class="line"><span class="comment">// 设置连接的参数</span></div><div class="line"><span class="type">NetSystem</span>.getInstance().setSocketParams(<span class="built_in">c</span>,<span class="built_in">true</span>);</div><div class="line"><span class="comment">// 设置NIOHandler</span></div><div class="line"><span class="built_in">c</span>.setHandler(getNIOHandler());</div><div class="line"><span class="keyword">return</span> <span class="built_in">c</span>;</div></pre></td></tr></table></figure></p>
<p>该方法中，依次调用 <code>makeConnection()</code> 和 <code>setHandler()</code> 这两个抽象方法用于创建连接，并将请求处理类设置为 <code>NIOHandler</code>，而子工厂类中，需要实现这两个方法用于创建连接实例。在 <code>MySQLFrontConnectionFactory</code> 类中，<code>makeConnection()</code> 方法创建了 <code>MySQLFrontConnection</code>，<code>NIOHandler</code> 设置为初始化该工厂类时的 <code>MySQLFrontConnectionHandler</code>。这两个类是处理 sql 请求的主要类，关于这两个类，后文再详细描述。</p>
<p>在 <code>RW.run()</code> 方法中，主要有一些 NIO 相关的调用，最重要的调用是 <code>con.asynRead();</code>，该方法比较简单，重要代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> got = channel.<span class="keyword">read</span>(readBuffer);</div><div class="line">onReadData(got);</div></pre></td></tr></table></figure></p>
<p>先是将网络数据读入到 <code>readBuffer</code> 中，然后调用 <code>onReadData()</code>。在 <code>onReadData()</code> 方法中，有很多读入字节的代码，重要的代码是调用 <code>handle(readBuffer, offset, length);</code> 方法，实际上是调用 <code>NIOHandler</code> 的 <code>handle()</code> 方法，也就是 <code>MySQLFrontConnectionHandler</code> 类的 <code>handle()</code> 方法。</p>
<p>至此，MyCAT 处理网络连接部分的代码已经完成，对于网络请求的数据已经完成读入到 Buffer，之后的代码入口在 <code>MySQLFrontConnectionHandler.handle()</code>。</p>
<h2>处理 SQL 请求</h2>
<p>处理 SQL 请求的入口在 <code>MySQLFrontConnectionHandler.handle()</code>，其中，根据 Connection 的状态，分别调用了 <code>doConnecting</code> 和 <code>doHandleBusinessMsg</code>，<code>doHandleBusinessMsg</code> 方法主要用来处理 SQL 请求。该方法中，处理一般 SQL 的代码是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MySQLPacket.COM_QUERY:</div><div class="line">	<span class="keyword">source</span>.query(data);</div><div class="line">	<span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>其中的 <code>source</code> 是之前的 <code>MySQLFrontConnection</code> 类，也就是执行其中的 <code>query(byte[])</code> 方法，该方法中做了一些字符处理的操作，最主要的应该是 <code>sql = mm.readString(charset);</code> 这一行，用于处理字符集。最后调用了 <code>query(String)</code> ，该方法先执行了 SQL 的检查，最后开始真正执行 SQL，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="keyword">switch</span> (sqlType) {</div><div class="line"><span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line">	ExplainHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SET:</div><div class="line">	SetHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SHOW:</div><div class="line">	ShowHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SELECT:</div><div class="line">	SelectHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.START:</div><div class="line">	StartHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.BEGIN:</div><div class="line">	BeginHandler.handle(sql, <span class="keyword">this</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SAVEPOINT:</div><div class="line">	SavepointHandler.handle(sql, <span class="keyword">this</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>其中，用于执行一般 SQL 查询的是 <code>SelectHandler.handle(sql, this, rs &gt;&gt;&gt; 8);</code>，该方法中，对 SQL 的类型做了一些判断，一般的 SQL 会执行最后一行的 <code>c.execute(stmt, ServerParse.SELECT);</code>（该方法属于 <code>MySQLFrontConnection</code> 类）。该方法中会检查数据库 Schema 的配置，最后调用 <code>routeEndExecuteSQL(sql, type, schema);</code>，该方法对 SQL 进行路由（即寻找执行 SQL 的数据库），然后执行 SQL（PS：我猜测方法名应该是取错了，应该是 <code>routeAndExecuteSQL</code>，而不是 <code>routeEndExecuteSQL</code>）。其中重要的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="constant">rrs</span> = MycatServer</div><div class="line">	.getInstance()</div><div class="line">	.getRouterservice()</div><div class="line">	.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line">			schema, type, sql, this.charset, this);</div><div class="line">......</div><div class="line">session.execute(rrs, type);</div></pre></td></tr></table></figure></p>
<p>前一个调用是将 SQL 路由到数据库，后一个调用是执行解析之后的 SQL，这两部分的代码都比较独立，可以分别解析。其中，<code>session</code> 是 <code>NonBlockingSession</code> 类，该类有两个比较重要的 field，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> MySQLFrontConnection source;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;RouteResultsetNode, BackendConnection&gt; target;</div></pre></td></tr></table></figure></p>
<p><code>source</code> 是前端连接，表示 MyCAT 面向客户端的连接，<code>target</code> 是后端连接，表示若干个连接到后端 MySQL 上的连接。</p>
<h2>SQL 路由</h2>
<p>SQL 路由的入口在 <code>RouteService.route()</code>，该方法先判断 SQL 路由是否有之前解析的结果，如果有直接使用；否则，开始解析 SQL。解析 SQL 的时候，会先判断该 SQL 有没有 Hint，如果有，按Hint中指定路径进行解析；否则，调用 <code>RouteStrategyFactory.getRouteStrategy().route()</code> 方法寻找合适的路由。<code>RouteStrategyFactory</code> 是一个路由策略的工厂类，目前，MyCAT 中只有一个基于 <code>druidParser</code> 的路由策略，对应 <code>DruidMycatRouteStrategy</code> 类。</p>
<p>MyCAT 中的 SQL 路由相关的类有：<code>RouteResultset</code> 用于保存路由结果；<code>RouteStrategyFactory</code> 是路由工厂，生成 <code>RouteStrategy</code>；<code>RouteStrategy</code> 是路由类最顶层的接口，其中只有一个 <code>route()</code> 抽象方法；<code>AbstractRouteStrategy</code> 是路由类的抽象类，实现了 <code>RouteStrategy</code>，定义了路由的基本步骤，返回 <code>RouteResultset</code>，其中，最重要的抽象方法是 <code>routeNormalSqlWithAST</code>，基于 AST 树来寻找路由；<code>DruidMycatRouteStrategy</code> 继承了 <code>AbstractRouteStrategy</code>，实现了 <code>AbstractRouteStrategy</code> 中的所有抽象方法。</p>
<p><code>DruidMycatRouteStrategy</code> 的 <code>routeNormalSqlWithAST</code> 方法中，有以下一些比较重要的调用，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="variable">statement =</span> parser.parseStatement();</div><div class="line">          <span class="variable">visitor =</span> new MycatSchemaStatVisitor();</div><div class="line">          		......</div><div class="line">checkUnSupportedStatement(statement);</div><div class="line"></div><div class="line">      DruidParser <span class="variable">druidParser =</span> DruidParserFactory.create(schema,statement,visitor);</div><div class="line">druidParser.parser(schema, rrs, statement, stmt,cachePool,visitor);</div></pre></td></tr></table></figure></p>
<p>由于 MyCAT 使用的是第三方的 Druid SQL 解析工具，因此要在 Druid 解析器中加入自己的处理，这里，Druid 解析器使用了 visitor 模式，<code>MycatSchemaStatVisitor</code> 类继承 <code>MySqlSchemaStatVisitor</code> 并实现了其中的多个重载的 <code>visit</code> 方法，在调用 <code>druidParser.parser()</code> 的时候进行计算。<code>routeNormalSqlWithAST</code> 方法的最后，解析之后的 SQL 被路由到若干个分片节点上，并保存在 <code>RouteResultset</code> 中，然后返回。</p>
<h2>SQL 执行</h2>
<p>SQL 执行的入口在 <code>NonBlockingSession.execute()</code>，该方法主要分两个分支，单节点 SQL 执行和多节点 SQL 执行，分别是 <code>SingleNodeHandler</code> 和 <code>MultiNodeQueryHandler</code> 两个类，在每个分支中，依次调用了 <code>setPrepared()</code> 方法和 <code>execute()</code> 方法。</p>
<p>对于单节点情况，<code>SingleNodeHandler.execute()</code> 先获取该单节点的 MySQL 后端连接，然后调用 <code>_execute(conn)</code>，在 <code>_execute(conn)</code> 中，主要代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">conn<span class="built_in">.</span>setResponseHandler(this);</div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div><div class="line">	conn<span class="built_in">.</span>execute(node, session<span class="built_in">.</span>getSource(), session<span class="built_in">.</span>getSource()</div><div class="line">			<span class="built_in">.</span>isAutocommit());</div></pre></td></tr></table></figure></p>
<p>先将 SQL 返回的回调类设为 <code>SingleNodeHandler</code>，也就是自己，然后调用后端连接 <code>BackendConnection</code> 类的 <code>execute</code> 方法，真正的执行 SQL。对于后端是 MySQL 数据库的时候，实际上使用的的是 <code>MySQLBackendConnection</code> 类，该类的 <code>execute</code> 方法调用了 <code>synAndDoExecute</code>，并在 <code>synAndDoExecute</code> 中调用了 <code>sendQueryCmd</code>，向 MySQL 发送 SQL 请求。对于 SQL 的返回，是实现 <code>ResponseHandler</code> 接口来实现的，该接口定义了不同的 SQL 返回处理方法。</p>
<p>对于多节点的情况，<code>MultiNodeQueryHandler</code> 类的基本流程和 <code>SingleNodeHandler</code> 一样，不同之处有几个地方。一个是，在 <code>execute()</code> 方法中，对每一个节点分别调用 <code>_execute(conn)</code> 执行 SQL；还有一个是，回调的接口实现要更加复杂一些，例如，<code>rowEofResponse</code> 接口的实现中，调用了 <code>DataMergeService</code>，用于合并多个数据库上查询返回的结果。</p>
<h2>总体结构图</h2>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文以 MyCAT 2.0-dev 代码为例，分析 MyCAT SQL执行部分的代码。</p>
<h2>系统启动</h2>
<p>系统的入口方法在 <code>io.mycat.MycatStartup</code> 中的 <code>main</code> 方法，主要代码]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 的优缺点]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-drawback/"/>
    <id>http://valleylord.github.io/post/201604-mycat-drawback/</id>
    <published>2016-04-16T03:00:59.000Z</published>
    <updated>2016-04-16T03:16:09.895Z</updated>
    <content type="html"><![CDATA[<p>Mysql 的 proxy 中间件有比较多的工具，例如，mysql-proxy, atlas , cobar, mycat, tddl, tinnydbrouter等等。相比较而言，Mycat并不是最快的，但是功能比较丰富，对读写分离和分库分表都有支持，而且比较易用，对原有的应用系统侵入比较小，系统改造比较易于实现。</p>
<p>如果说Mycat有一些不足的话，那就是，在整个系统中，Mycat会成为一个单点。因为所有的sql都会通过Mycat来路由，在数据库比较多的情况下，Mycat本身的cpu性能压力就会随之增大。因此，在生产系统中，Mycat不可避免的会需要一些多活的高可用手段。同样，由于Mycat本身需要解析sql，也需要合并各个数据库返回的结果，本身的CPU消耗就会比较高，在数据库较多的情况下，CPU可能不堪重负。</p>
<p>因此，在数据库比较多的情况下，生产环境的部署可能是这样的，</p>
<p><img src="/images/201604-mycat-drawback/mycat-drawback.png"></p>
<p>按之前的讨论，Mycat 会成为系统的单点，性能压力比较大。如果，Mycat 可以开发一个嵌入式 Mycat 系统，将 Mycat 代码嵌入在每个客户端中，这样，原先在 Mycat 上的集中压力就分散到了每个客户端上。当然，这样的架构需要对 Mycat 做一些改造，比如需要引入配置中心概念，将原来的分库分表配置集中管理，这样，每个客户端上的配置就一致了。同时，如果配置发生变化，还需要同步给每个客户端。引入嵌入式 Mycat（Mycat Embeded）之后的系统架构可能如下（图中略去了配置中心部分），</p>
<p><img src="/images/201604-mycat-drawback/mycat-drawback2.png"></p>
<p>当然，目前而言，Mycat 的优势还是非常明显的，相比与嵌入式 Mycat，现有的架构对原有系统的侵入非常小，现有架构模拟了 Mysql 数据库的接口，应用系统完全不用引入新的依赖，只需要改写部分 sql 即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mysql 的 proxy 中间件有比较多的工具，例如，mysql-proxy, atlas , cobar, mycat, tddl, tinnydbrouter等等。相比较而言，Mycat并不是最快的，但是功能比较丰富，对读写分离和分库分表都有支持，而且比较易用，对原有]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mycat-eye 安装]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-web-install/"/>
    <id>http://valleylord.github.io/post/201604-mycat-web-install/</id>
    <published>2016-04-10T03:04:11.000Z</published>
    <updated>2016-04-10T05:51:27.869Z</updated>
    <content type="html"><![CDATA[<p>Mycat-web 是对mycat-server提供监控服务。功能不局限于对mycat-server使用。他基于jmx对所有JVM监控。通过JDBC连接对Mycat、Mysql 监控。基于snmp协议，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘。Mycat-web 最近改名 Mycat-eye。</p>
<h1>安装与配置</h1>
<p>Mycat-eye 运行过程中需要依赖 zookeeper，因此需要先安装 zookeeper，我安装的是 zookeeper-3.4.8。</p>
<p>先下载 zookeeper-3.4.8.tar.gz，然后解压，在 <code>conf/</code> 目录下找到 zoo-sample.cfg，将其复制为 zoo.cfg。其内容主要如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">tickTime=</span><span class="number">2000</span></div><div class="line"><span class="variable">initLimit=</span><span class="number">10</span></div><div class="line"><span class="variable">syncLimit=</span><span class="number">5</span></div><div class="line"><span class="variable">dataDir=</span>/tmp/zookeeper</div><div class="line"><span class="variable">clientPort=</span><span class="number">2181</span></div></pre></td></tr></table></figure></p>
<p>要记得的是端口号2181，启动 Mycat-eye 的时候会用到。然后启动 zookeeper，启动的入口在 <code>bin/</code> 目录下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># arnes@Ubuntu-Asus [192.168.2.201] in ~/project/mycat-web/zookeeper-3.4.8 [11:30:51]</span></div><div class="line">$ bin/zkServer.sh start; bin/zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /home/arnes/project/mycat-web/zookeeper-<span class="number">3.4</span><span class="number">.8</span>/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper <span class="keyword">...</span> STARTED</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /home/arnes/project/mycat-web/zookeeper-<span class="number">3.4</span><span class="number">.8</span>/bin/../conf/zoo.cfg</div><div class="line">Mode: standalone</div></pre></td></tr></table></figure></p>
<p>可见，在启动的过程中，读取了刚才配置的 zoo.cfg。由于仅仅是实验，我们这里只使用了 zookeeper 的单机（standalone）模式。</p>
<p>然后安装 Mycat-eye，我安装的是 Mycat-web-1.0-SNAPSHOT-20160331220346-linux.tar.gz，同样需要先解压，解压后得到 mycat-web 目录。Mycat-eye 的配置文件在 <code>mycat-web/WEB-INF/classes/mycat.properties</code>，确认其中配置的 zookeeper 地址正确，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">zookeeper</span>=<span class="string">localhost:2181</span></div></pre></td></tr></table></figure></p>
<p>然后可以启动 Mycat-eye，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># arnes<span class="yardoctag">@Ubuntu</span>-Asus [192.168.2.201] in ~/project/mycat-web/mycat-web [12:44:13]</span></div><div class="line"><span class="variable">$ </span>./start.sh </div><div class="line"><span class="symbol">nohup:</span> 忽略输入并把输出追加到<span class="string">"nohup.out"</span></div></pre></td></tr></table></figure></p>
<h2>使用 Mycat-eye</h2>
<p>首先要登陆 Mycat-eye，浏览器打开页面 <code>http://localhost:8082/mycat/</code>，即可看到初始界面，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web1.png"></p>
<p>登陆之后，可以配置 Mycat 连接，在“mycat服务管理”中点击“新增”，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting1.png"></p>
<p>也可以配置 mysql 连接，在“mysql管理”中点击“新增”，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting2.png"></p>
<p>还可以查看 Mycat 的系统参数和日志，在“mycat系统参数”和“mycat日志管理”中，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting3.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting4.png"></p>
<p>使用之前做压力测试的脚本运行多个类似 <code>select * from travelrecord where id = ?</code> 这样的查询，查看 Mycat-eye 的监控数据。首先是“mycat性能监控”和“mysql性能监控”这两个菜单，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch1.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch2.png"></p>
<p>这两个菜单列出了 Mycat 的线程、TPS、内存等信息的时间变化图，以及 mysql 的缓存命中率、数据发送接收速度、线程、关键事件、临时表、恶性表联接等的统计数据。</p>
<p>还有专门针对 sql 的监控数据，在“SQL统计”、“SQL表分析”、“SQL监控”、“高频SQL”、“慢SQL统计”、“SQL解析”等这几个菜单中。</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch3.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch4.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch5.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch6.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch7.png"></p>
<p>其中，可能比较有用的有：“SQL表分析”可以列出 sql 的读写比例；“高频SQL”可以列出 sql 的使用频率；“慢SQL统计”可以列出执行时间比较长的 sql。另外，“SQL解析”可以在线分析一个 sql 的执行计划，省去了使用 mysql 客户端的麻烦。</p>
<p>此外，在“高频SQL”中，点击“分析”，还可以查看某个 sql 的请求数变化情况，如下，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch8.png"></p>
<p>总而言之，Mycat-eye 还是一款比较不错的监控工具，上手也比较简单。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mycat-web 是对mycat-server提供监控服务。功能不局限于对mycat-server使用。他基于jmx对所有JVM监控。通过JDBC连接对Mycat、Mysql 监控。基于snmp协议，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘。M]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 性能监控]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-performance/"/>
    <id>http://valleylord.github.io/post/201604-mycat-performance/</id>
    <published>2016-04-02T12:10:32.000Z</published>
    <updated>2016-04-03T14:23:31.082Z</updated>
    <content type="html"><![CDATA[<h2>使用 Jconsole 监控 MyCAT 运行</h2>
<p>Jconsole 是 Java 自带的性能监控工具，可以监控 Java 程序在运行过程中的 CPU、内存等的使用情况。</p>
<p>如果要使用 Jconsole 来监控 MyCAT 的运行状况，需要添加 MyCAT 的运行参数，在 <code>conf/wrapper.conf</code> 中，需要修改以下参数，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Java Additional Parameters</span></div><div class="line"><span class="comment">#wrapper.java.additional.1=</span></div><div class="line">wrapper.java.additional.<span class="number">1</span>=<span class="variable">-DMYCAT_HOME=</span>.</div><div class="line">wrapper.java.additional.<span class="number">2</span>=-server</div><div class="line">wrapper.java.additional.<span class="number">3</span>=-XX:<span class="variable">MaxPermSize=</span><span class="number">64</span>M</div><div class="line">wrapper.java.additional.<span class="number">4</span>=-XX:+AggressiveOpts</div><div class="line">wrapper.java.additional.<span class="number">5</span>=-XX:<span class="variable">MaxDirectMemorySize=</span><span class="number">2</span>G</div><div class="line">wrapper.java.additional.<span class="number">6</span>=-Dcom.sun.management.jmxremote</div><div class="line">wrapper.java.additional.<span class="number">7</span>=-Dcom.sun.management.jmxremote.<span class="variable">port=</span><span class="number">1984</span></div><div class="line">wrapper.java.additional.<span class="number">8</span>=-Dcom.sun.management.jmxremote.<span class="variable">authenticate=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">9</span>=-Dcom.sun.management.jmxremote.<span class="variable">ssl=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">10</span>=-Xmx4G</div><div class="line">wrapper.java.additional.<span class="number">11</span>=-Xms1G</div><div class="line">wrapper.java.additional.<span class="number">12</span>=-Djava.rmi.server.<span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">2.201</span></div></pre></td></tr></table></figure></p>
<p>其中，前11个参数是 MyCAT 默认的参数，最后一个参数 <code>-Djava.rmi.server.hostname=192.168.2.201</code> 是我本地的 rmi 监听 IP，即使用 Jconsole 远程连接的 IP。以上参数中，与 Jconsole 监控有关的参数还有以下几个，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wrapper.java.additional.<span class="number">6</span>=-Dcom.sun.management.jmxremote</div><div class="line">wrapper.java.additional.<span class="number">7</span>=-Dcom.sun.management.jmxremote.<span class="variable">port=</span><span class="number">1984</span></div><div class="line">wrapper.java.additional.<span class="number">8</span>=-Dcom.sun.management.jmxremote.<span class="variable">authenticate=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">9</span>=-Dcom.sun.management.jmxremote.<span class="variable">ssl=</span><span class="constant">false</span></div></pre></td></tr></table></figure></p>
<p>其中，<code>-Dcom.sun.management.jmxremote</code> 表示启用远程 jmx 监听；<code>-Dcom.sun.management.jmxremote.port=1984</code> 表示监听端口是1984；<code>-Dcom.sun.management.jmxremote.authenticate=false</code> 表示不启用登陆认证；<code>-Dcom.sun.management.jmxremote.ssl=false</code> 表示不启用 ssl 加密连接。因此，Jconsole 的远程连接地址就是 <code>192.168.2.201:1984</code>。</p>
<p>然后，运行 Jconsole，输入连接地址即可登陆开始监控，如下，</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-jconsole-login.png"></p>
<p>登陆之后，可以看到 MyCAT 进程使用CPU、内存的情况，如下，</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-jconsole-home.png"></p>
<h2>MyCAT 性能监控</h2>
<p>运行 MyCAT 自带的性能测试工具 testtool 来进行此次测试，测试用的表是 travelrecord，共有10个分片，采用主键 mod 10 的算法来执行分片，初始状态是空表，mysql 采用5.7版本，只有1个 mysql 实例，上面有10个数据库，本次测试固定100个连接。</p>
<p>先运行一个10000数据量的插入，得到在我的测试机上，单表插入 tps 大约是1600，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"0-10000"</span></div><div class="line">check JAVA_HOME & java</div><div class="line">---------set HOME_DIR------------</div><div class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM <span class="keyword">warning</span>: ignoring option MaxPermSize=64M; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">create jobs <span class="keyword">...</span></div><div class="line">success ful created connections ,total :<span class="number">100</span></div><div class="line">create jobs finished ,begin run test...</div><div class="line">success create job count: <span class="number">10</span> teset threads: <span class="number">100</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">32</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">33</span> finished records :<span class="number">1010</span> failed:<span class="number">0</span> speed:<span class="number">931.7343173431734</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">34</span> finished records :<span class="number">4444</span> failed:<span class="number">0</span> speed:<span class="number">2129.372304743651</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">35</span> finished records :<span class="number">5858</span> failed:<span class="number">0</span> speed:<span class="number">1897.020725388601</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">36</span> finished records :<span class="number">7171</span> failed:<span class="number">0</span> speed:<span class="number">1754.1585127201565</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">37</span> finished records :<span class="number">9617</span> failed:<span class="number">0</span> speed:<span class="number">1889.762232265671</span></div><div class="line">finishend:<span class="number">10001</span> failed:<span class="number">0</span></div><div class="line">used time total:6seconds</div><div class="line">tps:<span class="number">1639.5081967213116</span></div></pre></td></tr></table></figure></p>
<p>再做一个单表查询的测试，基于之前已经插入的表，qps 大约是5000左右，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$ ./test_stand_select_perf.sh jdbc:mysql://localhost:8066/TESTDB test test 100 1000 file=travelrecord_select.sql</div><div class="line"><span class="operator"><span class="keyword">check</span> JAVA_HOME & java</span></div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> <span class="keyword">Server</span> VM warning: ignoring <span class="keyword">option</span> MaxPermSize=<span class="number">64</span>M; support was removed in 8.0</div><div class="line"><span class="operator"><span class="keyword">execute</span> <span class="keyword">sql</span> times:<span class="number">1000</span></span></div><div class="line"><span class="keyword">create</span> thread <span class="number">0</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">1</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">2</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">3</span></div><div class="line">......</div><div class="line"><span class="keyword">create</span> thread <span class="number">99</span></div><div class="line">success <span class="keyword">create</span> thread <span class="keyword">count</span>: <span class="number">100</span></div><div class="line"><span class="keyword">all</span> thread started,waiting finsh...</div><div class="line">finishend:<span class="number">4052</span> failed:<span class="number">0</span> qps:<span class="number">5346.46</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">99</span>ms,<span class="keyword">avg</span>:<span class="number">9.99</span></div><div class="line">finishend:<span class="number">8619</span> failed:<span class="number">0</span> qps:<span class="number">4972.03</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">117</span>ms,<span class="keyword">avg</span>:<span class="number">13.66</span></div><div class="line">finishend:<span class="number">13011</span> failed:<span class="number">0</span> qps:<span class="number">4787.22</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">18.11</span></div><div class="line">finishend:<span class="number">17134</span> failed:<span class="number">0</span> qps:<span class="number">4623.36</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.28</span></div><div class="line">finishend:<span class="number">21861</span> failed:<span class="number">0</span> qps:<span class="number">4635.94</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.94</span></div><div class="line">finishend:<span class="number">27917</span> failed:<span class="number">0</span> qps:<span class="number">4888.89</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">21.11</span></div><div class="line">finishend:<span class="number">34310</span> failed:<span class="number">0</span> qps:<span class="number">5113.82</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.06</span></div><div class="line">finishend:<span class="number">40371</span> failed:<span class="number">0</span> qps:<span class="number">5237.45</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">19.31</span></div><div class="line">finishend:<span class="number">45614</span> failed:<span class="number">0</span> qps:<span class="number">5239.43</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">19.11</span></div><div class="line">finishend:<span class="number">51195</span> failed:<span class="number">0</span> qps:<span class="number">5274.61</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">18.97</span></div><div class="line">finishend:<span class="number">55691</span> failed:<span class="number">0</span> qps:<span class="number">5200.02</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">168</span>ms,<span class="keyword">avg</span>:<span class="number">19.00</span></div><div class="line">finishend:<span class="number">61247</span> failed:<span class="number">0</span> qps:<span class="number">5228.27</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">19.13</span></div><div class="line">finishend:<span class="number">67327</span> failed:<span class="number">0</span> qps:<span class="number">5295.13</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.89</span></div><div class="line">finishend:<span class="number">73218</span> failed:<span class="number">0</span> qps:<span class="number">5338.11</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.77</span></div><div class="line">finishend:<span class="number">78833</span> failed:<span class="number">0</span> qps:<span class="number">5364.28</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.62</span></div><div class="line">finishend:<span class="number">84058</span> failed:<span class="number">0</span> qps:<span class="number">5378.86</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.60</span></div><div class="line">finishend:<span class="number">89272</span> failed:<span class="number">0</span> qps:<span class="number">5423.15</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.54</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">49</span></div><div class="line">finishend:<span class="number">94340</span> failed:<span class="number">0</span> qps:<span class="number">5515.03</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.38</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">12</span></div><div class="line">finishend:<span class="number">99205</span> failed:<span class="number">0</span> qps:<span class="number">5688.55</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.72</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">0</span></div><div class="line">finishend:<span class="number">100000</span> failed:<span class="number">0</span> qps:<span class="number">5727.72</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.52</span></div><div class="line">finishend:<span class="number">100000</span> failed:<span class="number">0</span> qps:<span class="number">5727.72</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.52</span></div><div class="line">finished <span class="keyword">all</span>,total <span class="keyword">time</span> :<span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>其中，参数1000表示，每个线程执行1000次查询，而非总共执行1000次查询。travelrecord_select.sql 的内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql=<span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">where</span> id = ${<span class="keyword">int</span>(<span class="number">1</span>-<span class="number">10000</span>)}</div></pre></td></tr></table></figure></p>
<p>设计一个实验场景，先执行大约10分钟的插入，再 sleep 30秒，最后执行大约10分钟的查询。根据之前的测试数据，大约需要插入90万（1500<em>60</em>10）条数据，执行300万（5000<em>60</em>10）次查询（每个连接3万次查询），这个估算是根据数据量的增大仍然不影响 tps 和 qps 的基础上来进行的，实际上，数据量大的时候，插入和查询的效率都会受到影响，实验中，执行50万次插入，300万次查询。因此，编写测试脚本 perf-test.sh 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">time ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"1-500000"</span></div><div class="line">sleep <span class="number">30</span></div><div class="line">time ./test_stand_select_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="number">30000</span> file=travelrecord_select.sql</div></pre></td></tr></table></figure></p>
<p>但是，MyCAT 的工具似乎有问题，在100个并发连接下，不能执行16000条数据以上的插入，否则会报错如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</span></div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">40</span> teset threads: <span class="number">100</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">10</span> finished records :<span class="number">0</span> failed:<span class="number">1414</span> speed:-<span class="number">1801.2738853503186</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">11</span> finished records :<span class="number">0</span> failed:<span class="number">5757</span> speed:-<span class="number">3225.2100840336134</span></div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Caused <span class="keyword">by</span>: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: <span class="comment">#HY000</span></div><div class="line">	<span class="keyword">at</span> sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)</div><div class="line">	<span class="keyword">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">422</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">389</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.getInstance(Util.java:<span class="number">372</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">958</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3835</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3771</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:<span class="number">2435</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:<span class="number">2582</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:<span class="number">2535</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:<span class="number">1911</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:<span class="number">2145</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:<span class="number">1777</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:<span class="number">1281</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.insert(TravelRecordInsertJob.java:<span class="number">71</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.<span class="command">run</span>(TravelRecordInsertJob.java:<span class="number">125</span>)</div><div class="line">	... <span class="number">3</span> more</div><div class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed <span class="keyword">after</span> connection closed.</div><div class="line">	<span class="keyword">at</span> sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)</div><div class="line">	<span class="keyword">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">422</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">389</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.getInstance(Util.java:<span class="number">372</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">958</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">937</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">926</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">872</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.throwConnectionClosedException(ConnectionImpl.java:<span class="number">1236</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:<span class="number">1231</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.rollback(ConnectionImpl.java:<span class="number">4574</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.<span class="command">run</span>(TravelRecordInsertJob.java:<span class="number">130</span>)</div><div class="line">	<span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</div><div class="line">	<span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">617</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
<p>怀疑是并发连接数量到达上线的原因，按官方文档的说法，在 schema.xml 中，增大了 minCon 参数，仍然不起效果，因此，实际运行的是如下脚本，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="number">50</span>; ++i))  </div><div class="line"><span class="keyword">do</span>  </div><div class="line">    j=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>*10000"</span> | bc`</div><div class="line">    start=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$j</span>+1"</span> | bc`</div><div class="line">    end=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$j</span>+10000"</span> | bc`</div><div class="line">    <span class="comment"># echo "${start} , ${end}"</span></div><div class="line">    ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"<span class="variable">${start}</span>-<span class="variable">${end}</span>"</span></div><div class="line">    sleep <span class="number">1</span></div><div class="line"><span class="keyword">done</span>  </div><div class="line"></div><div class="line">sleep <span class="number">30</span></div><div class="line"></div><div class="line">time ./test_stand_select_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="number">30000</span> file=travelrecord_select.sql</div></pre></td></tr></table></figure></p>
<p>travelrecord_select.sql 脚本也需要修改查询范围，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql=<span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">where</span> id = ${<span class="keyword">int</span>(<span class="number">1</span>-<span class="number">500000</span>)}</div></pre></td></tr></table></figure></p>
<p>正式执行之前，可以先执行上述脚本一次，然后清空 travelrecord 表，再重启 MyCAT，这主要是用来预热 mysql，并将 MyCAT 重置，最后连接 Jconsole，开始监控。</p>
<p>在运行测试的过程中，使用管理端登陆可以看到进程的信息，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; show @@server;</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line"><span class="header">| UPTIME       | USED_MEMORY | TOTAL_MEMORY | MAX_MEMORY | RELOAD_TIME   | ROLLBACK_TIME | CHARSET | STATUS | AVG_BUFPOOL_ITEM_SIZE |</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line"><span class="header">| 4m 35s 925ms |   298996728 |   1063256064 | 3817865216 | 1459690848717 |            -1 | latin1  | ON     |                    95 |</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@processor;</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line"><span class="header">| NAME       | NET_IN  | NET_OUT | REACT_COUNT | R_QUEUE | W_QUEUE | FREE_BUFFER | TOTAL_BUFFER | BU_PERCENT | BU_WARNS | FC_COUNT | BC_COUNT |</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line">| Processor0 | 7398748 | 7696860 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       12 |       39 |</div><div class="line">| Processor1 | 9560214 | 9409852 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       10 |       44 |</div><div class="line">| Processor2 | 8904692 | 6975814 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       12 |       34 |</div><div class="line"><span class="header">| Processor3 | 6765729 | 8399034 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |        6 |       35 |</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@threadpool;</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line"><span class="header">| NAME             | POOL_SIZE | ACTIVE_COUNT | TASK_QUEUE_SIZE | COMPLETED_TASK | TOTAL_TASK |</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line">| Timer            |         2 |            0 |               0 |            579 |        579 |</div><div class="line"><span class="header">| BusinessExecutor |         8 |            0 |               0 |         223484 |     223484 |</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@datanode;</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line"><span class="header">| NAME | DATHOST            | INDEX | TYPE  | ACTIVE | IDLE | SIZE  | EXECUTE | TOTAL_TIME | MAX_TIME | MAX_SQL | RECOVERY_TIME |</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line">| dn0  | localhost1/dbtest0 |     0 | mysql |      0 |   15 | 10000 |    2209 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn1  | localhost1/dbtest1 |     0 | mysql |      0 |   16 | 10000 |    2275 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn2  | localhost1/dbtest2 |     0 | mysql |      0 |   16 | 10000 |    2210 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn3  | localhost1/dbtest3 |     0 | mysql |      0 |   15 | 10000 |    2193 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn4  | localhost1/dbtest4 |     0 | mysql |      0 |   14 | 10000 |    2203 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn5  | localhost1/dbtest5 |     0 | mysql |      0 |   16 | 10000 |    2226 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn6  | localhost1/dbtest6 |     0 | mysql |      0 |   15 | 10000 |    2211 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn7  | localhost1/dbtest7 |     0 | mysql |      0 |   16 | 10000 |    2231 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn8  | localhost1/dbtest8 |     0 | mysql |      0 |   15 | 10000 |    2211 |          0 |        0 |       0 |            -1 |</div><div class="line"><span class="header">| dn9  | localhost1/dbtest9 |     0 | mysql |      0 |   14 | 10000 |    2212 |          0 |        0 |       0 |            -1 |</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line">10 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>Jconsole 的监控截图如下，这里只做了30分钟的监控，整个测试运行了约26分30秒（包括其中 sleep 的时间），</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-all.png"></p>
<p><img src="/images/201604-mycat-performance/mycat-performance-mem.png"></p>
<p><img src="/images/201604-mycat-performance/mycat-performance-thread.png"></p>
<p>从上述图表可知，内存的使用虽然波动比较剧烈，但是总体比较稳定，线程数量基本没有变化，CPU 的使用上，插入的时候比查询的时候用的要少，这应该是因为查询的 CPU 消耗比较密集，而插入的瓶颈仍然在 IO 部分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2>使用 Jconsole 监控 MyCAT 运行</h2>
<p>Jconsole 是 Java 自带的性能监控工具，可以监控 Java 程序在运行过程中的 CPU、内存等的使用情况。</p>
<p>如果要使用 Jconsole 来监控 MyCAT 的运行状况，需要添加 M]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ku8eye 开发环境部署]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-ku8eye/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-ku8eye/</id>
    <published>2016-03-28T10:28:57.000Z</published>
    <updated>2016-03-28T12:31:10.162Z</updated>
    <content type="html"><![CDATA[<p>ku8eye<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> 是一个谷歌 Kubernetes 的 Web 一站式管理系统，本文介绍其开发环境部署。</p>
<h2>安装 ku8eye</h2>
<p>ku8eye 是使用 docker 镜像来安装运行的。先下载 ku8eye，官方发布在<a href="http://pan.baidu.com/s/1gdYk4CV" target="_blank" rel="external">百度网盘</a>，我下载的是 ku8eye-web-0.6.tar.gz。</p>
<p>用gunzip解压缩后，得到文件ku8eye-web-0.6.tar（2.1G）。导入docker镜像，并给该镜像打上tag <code>ku8eye-web</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 ku8eye]# ls</div><div class="line">ku8eye-web-<span class="number">0.6</span>.tar</div><div class="line">[root@Centos-L410 ku8eye]# docker <span class="built_in">load</span> -i ku8eye-web-<span class="number">0.6</span>.tar </div><div class="line">[root@Centos-L410 ku8eye]# docker images</div><div class="line">REPOSITORY                                            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">registry.access.redhat.com/rhel7/pod-infrastructure   latest              b22dd4643451        <span class="number">5</span> weeks ago         <span class="number">427.6</span> MB</div><div class="line">&lt;none&gt;                                                &lt;none&gt;              <span class="number">7608</span>c10ea730        <span class="number">5</span> weeks ago         <span class="number">125.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/mysql                                       latest              <span class="number">082e0</span>ea24cc0        <span class="number">5</span> weeks ago         <span class="number">361.2</span> MB</div><div class="line">ku8eye-web                                            latest              b45596039ebb        <span class="number">8</span> weeks ago         <span class="number">2.193</span> GB</div><div class="line">registry                                              <span class="number">2</span>                   b2c682ed7e4c        <span class="number">3</span> months ago        <span class="number">224.5</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/guestbook-php-frontend            latest              <span class="number">38658844</span>a359        <span class="number">6</span> months ago        <span class="number">509.6</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      <span class="number">1.0</span>                 <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      <span class="number">2.0</span>                 <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      latest              <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/guestbook-redis-slave             latest              <span class="number">5429</span>ea4e7990        <span class="number">7</span> months ago        <span class="number">109.5</span> MB</div></pre></td></tr></table></figure></p>
<p>实际上，默认情况下，已经是 ku8eye-web 命名了，不需要 tag。</p>
<p>运行开发环境，<code>docker run -tid --name ku8eye-web -p 3306:3306 -p 8080:8080 -p 9001:9001 ku8eye-web</code>，其中 3306 为mysql服务端口，8080 为tomcat服务端口，9001 为supervisor服务端口，均映射到宿主机上。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>ku8eye]<span class="comment"># docker run -tid --name ku8eye-web -p 3306:3306 -p 8081:8080 -p 9001:9001 ku8eye-web</span></div><div class="line"><span class="number">7199979</span>c1d0c53fc17fedc50a73e938addc4703f2b3c14bca6d57dc670aabc97</div><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>ku8eye]<span class="comment"># docker ps </span></div><div class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>                 <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>                                                                   <span class="constant">NAMES</span></div><div class="line"><span class="number">7199979</span>c1d0c        ku8eye-web          <span class="string">"/bin/sh -c /usr/bin/"</span>   <span class="number">8</span> seconds ago       <span class="constant">Up </span><span class="number">4</span> seconds        <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">9001</span>-&gt;<span class="number">9001</span>/tcp, <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp   ku8eye-web</div></pre></td></tr></table></figure></p>
<p>由于我的机器上8080端口已经被占用，这里用8081端口代替。</p>
<h2>安装 kubernetes 集群</h2>
<p>用网页的方式登陆宿主机的8081端口，例如，我的是 http://192.168.2.202:8081，会看到登陆界面，如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-login.png"></p>
<p>还挺好看的。然后用账号密码 <code>guest/123456</code> 登陆即可进行管理，点击左侧“资源管理”菜单，选择“集群安”装进行安装。如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster.png"></p>
<p>我选择的是”All In One Cluster“，因为我没有那么多虚拟机...... 这样就可以在本机安装 Kubernetes Master 等，如下</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster1.png"></p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster2.png"></p>
<p>点击”开始安装“即可。不知道为什么总是提示安装失败，可能与我已经安装过 kubernetes 有关。</p>
<h2>应用管理</h2>
<p>ku8eye 的应用管理功能，感觉上和直接写 kubernetes 的 yaml 文件比较类似，如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-application.png"></p>
<p>将需要的要素填入，即可工作。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/bestcloud/ku8eye/blob/master/doc/ku8eye-web-dev-env.md" target="_blank" rel="external">https://github.com/bestcloud/ku8eye/blob/master/doc/ku8eye-web-dev-env.md</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>ku8eye<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> 是一个谷歌 Kubernetes 的 Web 一站式管理系统，本文介绍其开发环境部署。</p>
<h2>安装 ku8eye</h2>
]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tomcat 的 CLOSE_WAIT 连接过多问题查询笔记]]></title>
    <link href="http://valleylord.github.io/post/201603-tomcat-close-wait/"/>
    <id>http://valleylord.github.io/post/201603-tomcat-close-wait/</id>
    <published>2016-03-27T06:31:47.000Z</published>
    <updated>2016-03-27T06:51:05.383Z</updated>
    <content type="html"><![CDATA[<p>这是一次工作中碰到的，在使用 Tomcat 过程中，服务器后台 TCP 的 CLOSE_WAIT 状态连接过多的问题。本文以真实的问题为蓝本，但并非百分百原样描述。</p>
<h2>问题出现</h2>
<p>项目中的一个系统，即将第一版上线，时间压的比较紧，半个月前刚刚发布到 UAT 环境。除去一些业务上的 bug 不提，发现一个很诡异的现象：系统的一个模块在工作2天之后连不上了。</p>
<p>经过检查，发现是服务器后台 TCP 连接有很多处于 CLOSE_WAIT 状态。问题短时间内无法查明，于是决定重启应用，不耽误测试进度。第二天，问题重现，无解，重启，第三天，仍然重现，周而复始。</p>
<p>完全不知问题所在，一筹莫展。</p>
<h2>系统架构</h2>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一次工作中碰到的，在使用 Tomcat 过程中，服务器后台 TCP 的 CLOSE_WAIT 状态连接过多的问题。本文以真实的问题为蓝本，但并非百分百原样描述。</p>
<h2>问题出现</h2>
<p>项目中的一个系统，即将第一版上线，时间压的比较紧，半个月前刚刚发布]]>
    </summary>
    
      <category term="Tomcat" scheme="http://valleylord.github.io/tags/Tomcat/"/>
    
      <category term="Tomcat" scheme="http://valleylord.github.io/categories/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 MyCAT 的 Oracle 数据迁移]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-oracle-migration/"/>
    <id>http://valleylord.github.io/post/201603-mycat-oracle-migration/</id>
    <published>2016-03-27T01:07:28.000Z</published>
    <updated>2016-03-27T06:29:02.071Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 的应用场景很多，很多应用在数据路由场景，将许多异构的数据库放在一起，使用 MyCAT 做 sql 转发。由于有这样的特性，MyCAT 在去 IOE 中也有比较丰富的应用。例如，将 Oracle 中的数据逐步的迁移到 mysql 中，在逐步迁移的过程中，仍然能保持几乎不间断的对外访问。下面距举例说明。</p>
<h2>配置 MyCAT 连接 Oracle</h2>
<p>数据迁移的第一步就是使用 MyCAT 作为中间件隔离 Oracle，这其中可能涉及到部分 sql 和应用的改写。配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"oradn0"</span> <span class="variable">dataHost=</span><span class="string">"oracle1"</span> <span class="variable">database=</span><span class="string">"scott"</span> /&gt;</div><div class="line"></div><div class="line">&lt;dataHost <span class="variable">name=</span><span class="string">"oracle1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"1"</span> <span class="variable">balance=</span><span class="string">"0"</span> <span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"oracle"</span></div><div class="line">		<span class="variable">dbDriver=</span><span class="string">"jdbc"</span>&gt;</div><div class="line">	&lt;heartbeat&gt;select <span class="number">1</span> from dual&lt;/heartbeat&gt;</div><div class="line">	&lt;connectionInitSql&gt;alter session set <span class="variable">nls_date_format=</span>'yyyy-mm-dd hh24:mi:ss'&lt;/connectionInitSql&gt;</div><div class="line">	&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"jdbc:oracle:thin:@192.168.2.202:1521:orcl"</span> <span class="variable">user=</span><span class="string">"scott"</span> <span class="variable">password=</span><span class="string">"tiger"</span> &gt;</div><div class="line">	&lt;/writeHost&gt;</div><div class="line">&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>完成 MyCAT 的配置之后，应用程序将看不到 Oracle，后续的数据迁移对应用是透明的，此时，架构图如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-migration-architecture.png"></p>
<p>假设有 Oracle 中有3张表，用户表（c_user）、交易表（c_order）、转账表（c_transfer），需要迁移用户表和交易表到 mysql 中。这3张表在当前的 MyCAT 中可以做如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_user"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_order"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_transfer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h2>Oracle 数据导出</h2>
<p>假设 Oracle 中，上述3张表的建表语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_user(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, user_name <span class="built_in">varchar</span>(<span class="number">20</span>), passwd <span class="built_in">varchar</span>(<span class="number">20</span>), nick_name <span class="built_in">varchar</span>(<span class="number">40</span>));</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_order(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, user_id <span class="built_in">number</span>(<span class="number">20</span>), payment <span class="built_in">number</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_transfer(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, from_user_id <span class="built_in">number</span>(<span class="number">20</span>), to_user_id <span class="built_in">number</span>(<span class="number">20</span>), amount <span class="built_in">number</span>);</span></div></pre></td></tr></table></figure></p>
<p>为了便于演示，测试数据库中的数据量比较小，每个表只有1000条，不过这不影响操作结果。另外，为了测试迁移中中文编码可能出现的问题，部分字段使用了中文，数据库字符集是 GBK，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">SQL&gt; <span class="keyword">select</span> count<span class="comment">(*) from c_user;</span></div><div class="line"></div><div class="line">  COUNT(*)</div><div class="line">----------</div><div class="line">      <span class="number">1000</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> c_user <span class="keyword">where</span> rownum&lt;=<span class="number">5</span>;</div><div class="line"></div><div class="line">	ID USER_NAME  PASSWD	 NICK_NAME</div><div class="line">---------- ---------- ---------- ----------</div><div class="line">      <span class="number">1000</span> a1000      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1001</span> a1001      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1002</span> a1002      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1003</span> a1003      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1004</span> a1004      <span class="number">111111</span>     王</div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> count<span class="comment">(*) from c_order;</span></div><div class="line"></div><div class="line">  COUNT(*)</div><div class="line">----------</div><div class="line">      <span class="number">1000</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> c_order <span class="keyword">where</span> rownum&lt;=<span class="number">5</span>;</div><div class="line"></div><div class="line">	ID    USER_ID	 PAYMENT</div><div class="line">---------- ---------- ----------</div><div class="line">     <span class="number">10000</span>	 <span class="number">1000</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10001</span>	 <span class="number">1001</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10002</span>	 <span class="number">1002</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10003</span>	 <span class="number">1003</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10004</span>	 <span class="number">1004</span>	     <span class="number">100</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> nls_database_parameters <span class="keyword">where</span> parameter = <span class="string">'NLS_CHARACTERSET'</span>;</div><div class="line"></div><div class="line">PARAMETER		  VALUE</div><div class="line">------------------------- --------------------</div><div class="line">NLS_CHARACTERSET	  ZHS16GBK</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-datasize.png"></p>
<p>在生产环境中，应该小步前进，对于数据比较多的表，逐个迁移（如果 join 的 sql 不多的话）。实验中，我们采用一次迁移两张表的做法。</p>
<p>将数据从 Oracle 中导出，采用 spool 方法，这主要是方便 MyCAT 后续导入，sqlplus 相关语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SET</span> HEADING OFF  </span></div><div class="line"><span class="keyword">SET</span> ECHO OFF  </div><div class="line"><span class="keyword">SET</span> FEEDBACK OFF  </div><div class="line"><span class="keyword">SET</span> PAGES <span class="number">0</span>  </div><div class="line"><span class="keyword">SET</span> LINESIZE <span class="number">32766</span>  </div><div class="line"><span class="keyword">SET</span> LONG <span class="number">1999999</span>  </div><div class="line"><span class="keyword">SET</span> TRIMOUT <span class="keyword">ON</span></div><div class="line"><span class="keyword">SET</span> TRIMSPOOL <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> NEWPAGE NONE  </div><div class="line"><span class="keyword">SET</span> SQLBLANKLINES OFF  </div><div class="line"><span class="keyword">SET</span> TRIMS <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> TIMING OFF  </div><div class="line"><span class="keyword">SET</span> SERVEROUTPUT <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> VERIFY OFF  </div><div class="line"></div><div class="line">SPOOL c_user.dat    </div><div class="line"><span class="keyword">SELECT</span> <span class="string">'"'</span>||id||<span class="string">'"|"'</span>||user_name||<span class="string">'"|"'</span>||passwd||<span class="string">'"|"'</span>||nick_name||<span class="string">'"'</span> <span class="keyword">FROM</span> c_user;</div><div class="line">spool off  </div><div class="line"></div><div class="line"></div><div class="line">SPOOL c_order.dat  </div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="string">'"'</span>||id||<span class="string">'"|"'</span>||user_id||<span class="string">'"|"'</span>||payment||<span class="string">'"'</span> <span class="keyword">FROM</span> c_order;</span></div><div class="line">spool off</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-spool1.png"></p>
<p>用这样的方法，导出的数据会比较整齐，而且连字符集也统一处理了（只要 sqlplus 的客户端字符集配置的对），如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-spool2.png"></p>
<p>同样的方法可以导出另一个表的数据，在此不再赘述。</p>
<h2>导入 MyCAT</h2>
<p>首先，先要在 MyCAT 中配置将要导入的数据库和表，假设导入的数据要分片到10个 mysql 数据库中，可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">	<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">	&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">	&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">		<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">	&lt;/writeHost&gt;</div><div class="line">&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>迁移的2张表采用 id 取余数算法分片，另外的表不做变动，如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_user"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_order"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_transfer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：此处采用简便的分片方法，实际上，这里应该使用ER分片会更好。参考另一篇文章《MyCAT 分片》。</p>
</blockquote>
<p>然后，重启 MyCAT，或者使用管理端的 <code>reload @@config_all</code>，使用如下语句建表，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_user(id <span class="built_in">bigint</span> <span class="keyword">primary</span> <span class="keyword">key</span>, user_name <span class="built_in">varchar</span>(<span class="number">20</span>), passwd <span class="built_in">varchar</span>(<span class="number">20</span>), nick_name <span class="built_in">varchar</span>(<span class="number">40</span>));</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_order(id <span class="built_in">bigint</span> <span class="keyword">primary</span> <span class="keyword">key</span>, user_id <span class="built_in">bigint</span>, payment <span class="built_in">decimal</span>);</span></div></pre></td></tr></table></figure></p>
<p>MyCAT 支持类似 mysql 的 load data，而且支持在导入的过程中完成数据路由，操作如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$ mysql -hworkstation -utest -DTESTDB -P8066 -ptest --local-infile=1</div><div class="line"></div><div class="line">mysql&gt; SET NAMES <span class="emphasis">'utf8'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; SHOW VARIABLES LIKE 'character%';</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line"><span class="header">| Variable_name            | Value                      |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character<span class="emphasis">_set_</span>client     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>connection | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>database   | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>filesystem | binary                     |</div><div class="line">| character<span class="emphasis">_set_</span>results    | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>server     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>system     | utf8                       |</div><div class="line"><span class="header">| character_sets_dir       | /usr/share/mysql/charsets/ |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; load DATA local INFILE <span class="emphasis">'/home/arnes/project/c_user.dat'</span> IGNORE INTO TABLE c<span class="emphasis">_user CHARACTER SET 'utf8' FIELDS TERMINATED BY '|' ENCLOSED BY '"' LINES TERMINATED BY '\n' (id, user_</span>name, passwd, nick<span class="emphasis">_name) ;</span></div><div class="line">Query OK, 1000 rows affected (0.16 sec)</div><div class="line">Records: 1000  Deleted: 0  Skipped: 0  Warnings: 0</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from c_user limit 5;</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line"><span class="header">| id   | user_name | passwd | nick_name |</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line">| 1001 | a1001     | 111111 | 王       |</div><div class="line">| 1011 | a1011     | 111111 | 王       |</div><div class="line">| 1021 | a1021     | 111111 | 王       |</div><div class="line">| 1031 | a1031     | 111111 | 王       |</div><div class="line"><span class="header">| 1041 | a1041     | 111111 | 王       |</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line">5 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select count(*) from c_user;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| COUNT0 |</span></div><div class="line">+--------+</div><div class="line"><span class="header">|   1000 |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.09 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata1.png"></p>
<p>其中，有一些地方需要特别注意。</p>
<ol>
<li>load data 命令中的 character set 参数，指定文件的编码，<strong>建议跟 mysql 的编码一致</strong>，否则可能乱码。其中字符集编码必项用单引号，否则会解析出错。因为我用的文件在导出的时候已经完成转码，因此这里选择 ‘utf8’；</li>
<li>根据 MyCAT 和 mysql 官方文档，如果用 mysql 客户端登陆执行 load data，必须在 mysql 客户端登陆时增加参数 <code>--local-infile=1</code>，否则不能导入，而 jdbc 不需要加这个参数（我估计没人用 jdbc 做这样的操作）；</li>
<li>MyCAT 的 load data 必须要指定导入的列名放在命令的最后，列名的顺序与数据要一致，而且必须要包含分片字段，如上面的 <code>(id, user_name, passwd, nick_name)</code>；</li>
<li>登陆 MyCAT 后需要检查 mysql 客户端和服务器端的字符集是否相同，如果不同，使用 <code>SET NAMES 'utf8';</code>，将客户端字符集统一设置成 utf-8，如下，</li>
</ol>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-characterset.png"></p>
<p>与上面相同的方法，可以导入另一张表，如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata2.png"></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata3.png"></p>
<p>每个分片上有100条数据，如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-dbtest0.png"></p>
<p>至此，MyCAT 已经可以将数据路由到新的 mysql 服务器上，迁移完成。</p>
<h2>后记</h2>
<p>如果不常用 mysql 的人，做 load data 应该会碰到挺多问题，在加上 MyCAT，估计一下很难发现问题，比如下面这个问题，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; load DATA local INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE INTO TABLE c_user FIELDS TERMINATED BY <span class="string">'|'</span> ENCLOSED BY <span class="string">'"'</span> LINES TERMINATED BY <span class="string">'\n'</span> (id, user_name, passwd, nick_name) ;</div><div class="line">ERROR <span class="number">2027</span> (HY000): Malformed packet</div><div class="line">mysql&gt; load DATA local INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE INTO TABLE c_user CHARACTER SET <span class="string">'utf8'</span> FIELDS TERMINATED BY <span class="string">'|'</span> ENCLOSED BY <span class="string">'"'</span> LINES TERMINATED BY <span class="string">'\n'</span> (id, user_name, passwd, nick_name) ;</div><div class="line">^CCtrl-C -- sending <span class="string">"KILL QUERY 24"</span> to server <span class="keyword">...</span></div><div class="line">Ctrl-C -- query aborted.</div><div class="line">^CCtrl-C -- sending <span class="string">"KILL 24"</span> to server <span class="keyword">...</span></div><div class="line">Ctrl-C -- query aborted.</div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection to MySQL server during query</div></pre></td></tr></table></figure></p>
<p>从字面上感觉是数据格式出错了，实际上是 mysql 客户端登陆的时候没有加 <code>--local-infile=1</code>参数，而且这个问题会导致 mysql 客户端卡死，并断掉连接。还有，如果导入的时候没有加列名，也会提示很诡异的错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql<span class="subst">&gt;</span> load <span class="built_in">DATA</span> <span class="built_in">local</span> INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE <span class="keyword">INTO</span> TABLE c_user  FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span> ENCLOSED <span class="keyword">BY</span> <span class="string">'"'</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">'\n'</span>;</div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection <span class="keyword">to</span> MySQL server during query</div><div class="line">mysql<span class="subst">&gt;</span> load <span class="built_in">DATA</span> <span class="built_in">local</span> INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE <span class="keyword">INTO</span> TABLE c_user  FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span> ENCLOSED <span class="keyword">BY</span> <span class="string">'"'</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">'\n'</span>;</div><div class="line">ERROR <span class="number">2006</span> (HY000): MySQL server has gone away</div><div class="line">No connection<span class="built_in">.</span> Trying <span class="keyword">to</span> reconnect<span class="attribute">...</span></div><div class="line">Connection id:    <span class="number">40</span></div><div class="line">Current database: TESTDB</div><div class="line"></div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection <span class="keyword">to</span> MySQL server during query</div></pre></td></tr></table></figure></p>
<p>这个错误也会导致断掉客户端连接，甚至还会打印很多类似这样的日志，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">03/27 14:11:55.151   WARN [$_NIOREACTOR-2-RW] (ServerConnection.java:209) -ServerConnection [id=40, schema=TESTDB, host=192.168.2.201, user=test,txIsolation=3, autocommit=true, schema=TESTDB]<span class="comment">/*loaddata*/</span><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> C_USER <span class="keyword">values</span> (<span class="string">'1001'</span>,<span class="string">'a1001'</span>,<span class="string">'111111'</span>,<span class="string">'ç'</span>) err:java.<span class="keyword">sql</span>.SQLSyntaxErrorException: <span class="keyword">partition</span> <span class="keyword">table</span>, <span class="keyword">insert</span> must provide ColumnList</span></div><div class="line">java.<span class="keyword">sql</span>.SQLSyntaxErrorException: <span class="keyword">partition</span> <span class="keyword">table</span>, <span class="keyword">insert</span> must provide ColumnList</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidInsertParser.statementParse(DruidInsertParser.java:<span class="number">69</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DefaultDruidParser.parser(DefaultDruidParser.java:<span class="number">63</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.DruidMycatRouteStrategy.routeNormalSqlWithAST(DruidMycatRouteStrategy.java:<span class="number">64</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.AbstractRouteStrategy.route(AbstractRouteStrategy.java:<span class="number">76</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.RouteService.route(RouteService.java:<span class="number">129</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.routeSQL(ServerConnection.java:<span class="number">201</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.ServerLoadDataInfileHandler.parseOneLine(ServerLoadDataInfileHandler.java:<span class="number">391</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.ServerLoadDataInfileHandler.<span class="keyword">end</span>(ServerLoadDataInfileHandler.java:<span class="number">646</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.loadDataInfileEnd(FrontendConnection.java:<span class="number">268</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.rawHandle(FrontendConnection.java:<span class="number">426</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.handle(FrontendConnection.java:<span class="number">417</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.onReadData(AbstractConnection.java:<span class="number">313</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOSocketWR.asynRead(NIOSocketWR.java:<span class="number">186</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.asynRead(AbstractConnection.java:<span class="number">274</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOReactor$RW.run(NIOReactor.java:<span class="number">96</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
<p>如果从日志看的话，可以发现是 sql 里面缺少列名。因此，只有按照 MyCAT 官方文档的步骤，一步一步来，不可逾越。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 的应用场景很多，很多应用在数据路由场景，将许多异构的数据库放在一起，使用 MyCAT 做 sql 转发。由于有这样的特性，MyCAT 在去 IOE 中也有比较丰富的应用。例如，将 Oracle 中的数据逐步的迁移到 mysql 中，在逐步迁移的过程中，仍然能保持]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes 日志]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-log/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-log/</id>
    <published>2016-03-20T03:35:51.000Z</published>
    <updated>2016-03-20T07:23:59.173Z</updated>
    <content type="html"><![CDATA[<h2>iptables在kubernetes proxy中的作用</h2>
<p>当service有了port和nodePort之后，就可以对内/外提供服务。那么其具体是通过什么原理来实现的呢？奥妙就在kube-proxy在本地node上创建的iptables规则。</p>
<p>Kubernetes为每个service分配一个clusterIP（虚拟ip）。不同的service用不同的ip，所以端口也不会冲突。Kubernetes的虚拟ip是通过iptables机制实现的。每个service定义的端口，kube-proxy都会监听一个随机端口对应，然后通过iptables nat规则做转发。比如Kubernetes上有个dns服务，clusterIP:10.254.0.10，端口:53。应用对10.254.0.10:53的请求会被转发到该node的kube-proxy监听的随机端口上，然后再转发给对应的pod。如果该服务的pod不在当前node上，会先在kube-proxy之间进行转发。该转发完全通过iptables实现。</p>
<p>Kube-Proxy 通过配置 DNAT 规则（从容器出来的访问，从本地主机出来的访问两方面），将到这个服务地址的访问映射到本地的kube-proxy端口（随机端口）。然后 Kube-Proxy 会监听在本地的对应端口，将到这个端口的访问给代理到远端真实的 pod 地址上去。</p>
<h2>kubernetes 日志分析</h2>
<p>如果 kubernetes 的启动参数中有 <code>--logtostderr=true</code> 表示使用 systemd 接管 kubernetes 的输出，可以用 journalctl 查看，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]# journalctl -u kube-controller-manager | tail</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: W0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.599523</span>    <span class="number">9359</span> reflector.go:<span class="number">224</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: watch <span class="keyword">of</span> *api.PersistentVolume ended <span class="keyword">with</span>: <span class="number">502</span>:  (unhandled http status [OK] <span class="keyword">with</span> body [<span class="keyword">nil</span>]) [<span class="number">0</span>]</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.912642</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.914766</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.915664</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: W0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.967267</span>    <span class="number">9359</span> reflector.go:<span class="number">224</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: watch <span class="keyword">of</span> *api.<span class="keyword">Namespace</span> ended <span class="keyword">with</span>: <span class="number">502</span>:  (unhandled http status [OK] <span class="keyword">with</span> body [<span class="keyword">nil</span>]) [<span class="number">0</span>]</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">06</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">06.597924</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/redis-master</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">08</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">08.708102</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/redis-slave</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">10</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">10.770278</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/frontend</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">41</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">41.859582</span>    <span class="number">9359</span> <span class="keyword">event</span>.go:<span class="number">216</span>] <span class="keyword">Event</span>(api.ObjectReference<span class="comment">{Kind:"ReplicationController", Namespace:"default", Name:"redis-master", UID:"8e5fcf11-ee58-11e5-a10f-c80aa9c034dc", APIVersion:"v1", ResourceVersion:"8904", FieldPath:""}</span>): reason: <span class="string">'SuccessfulCreate'</span> Created pod: redis-master-xuv93</div></pre></td></tr></table></figure></p>
<p>从 log 中可以发现，刚刚创建了一个 redis-master-xuv93 的 Pod，这个 Pod 中运行了一个 redis。通过 <code>docker ps</code> 可以查看到对应的容器，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                        COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">56</span>f58c6fb142        kubeguide/redis-master:<span class="number">1.0</span>                                   <span class="string">"redis-server /etc/re"</span>   About an <span class="built_in">hour</span> ago   Up About an <span class="built_in">hour</span>                        k8s_master.b7750720_redis-master-xuv93_default_8e614b60-ee58-<span class="number">11e5</span>-a10f-c80aa9c034dc_bb2168d8</div><div class="line">d377dcefdbc5        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   About an <span class="built_in">hour</span> ago   Up About an <span class="built_in">hour</span>                        k8s_POD<span class="number">.4</span>f810ae8_redis-master-xuv93_default_8e614b60-ee58-<span class="number">11e5</span>-a10f-c80aa9c034dc_270230ab</div></pre></td></tr></table></figure></p>
<p>可以发现，当前有2个容器在运行，56f58c6fb142 就是 redis-master-xuv93 这个 Pod 对应的容器；另一个是 kubernetes 的控制节点，是 Pod 网络访问代理。可以用 <code>docker inspect</code> 查看这两个节点的 IP ，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-docker-inspect.png"></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@<span class="variable">Centos</span>-<span class="variable">L410</span> arnes]# docker inspect  <span class="number">56</span>f58c6fb142</div><div class="line">......</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_HOST=10.254.0.1"</span>,</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_PORT=443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT=tcp://10.254.0.1:443"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_SERVICE_HOST=10.254.225.16"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_PROTO=tcp"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_PROTO=tcp"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_PORT=443"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_SERVICE_PORT=6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT=tcp://10.254.225.16:6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP=tcp://10.254.225.16:6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_PORT=6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_ADDR=10.254.225.16"</span>,</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_PORT_HTTPS=443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP=tcp://10.254.0.1:443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_ADDR=10.254.0.1"</span>,</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"HOME=/root"</span></div><div class="line">        ],</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>从容器的信息上来看，redis 容器 56f58c6fb142 本身并没有 IP 地址，但是，通过容器内部互联，监听了 <code>10.254.225.16:6379</code> 这个 虚拟IP+端口，因此，直接访问 10.254.225.16:6379 即可，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]<span class="comment"># telnet 10.254.225.16 6379</span></div><div class="line">Trying <span class="number">10.254</span><span class="number">.225</span><span class="number">.16</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">10.254</span><span class="number">.225</span><span class="number">.16</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>另外，由于 d377dcefdbc5 是 redis 的访问代理，因此，访问这个地址的6379端口，也是可以通的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]<span class="comment"># telnet 172.17.1.22 6379</span></div><div class="line">Trying <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>可以验证，这个 redis 服务的确是在监听 <code>10.254.225.16:6379</code>，只不过这个是 kubernetes service 的虚拟 IP，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">[root@Centos-L410 project]# kubectl get services</span></span></div><div class="line">NAME           CLUSTER_IP      EXTERNAL_IP   PORT(S)    SELECTOR            AGE</div><div class="line">kubernetes     10.254.0.1      &lt;none&gt;        <span class="number">443</span>/<span class="constant">TCP</span>    &lt;none&gt;              <span class="number">20</span>d</div><div class="line"><span class="input"><span class="prompt">redis-master   10.254.225.16   &lt;none&gt;</span>        <span class="number">6379</span>/<span class="constant">TCP</span>   name=redis-master   <span class="number">1</span>h</span></div></pre></td></tr></table></figure></p>
<h2>kubernetes 的客户端负载均衡方式</h2>
<p>通常情况下，kubernetes 的负载均衡方式是如下进行，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-loadbalance.png"></p>
<p>由 kube-proxy 进程负责将请求转发到每个工作 Pod 上，好处是对客户端透明，坏处是多了一次转发，性能上有所损耗。另一种办法是采用客户端负载均衡方式，如下，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-client-loadbalance.png"></p>
<p>客户端先去向 apiserver 询问可以服务的工作 Pod 的地址，然后直接访问该地址，这样的好处是少了一次转发，坏处是客户端需要做一些逻辑判断。</p>
<p>如果使用客户端负载均衡的方式，那么就可以用类似上述的方法来获取服务真正的监听端口。如果需要直接访问该 IP 的话，需要在访问端增加路由规则，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">12</span>:<span class="number">53</span> ~</div><div class="line"><span class="comment"># route add -net 172.17.1.0 netmask 255.255.255.0 gw 192.168.2.202</span></div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">54</span> ~</div><div class="line"><span class="comment"># ip rout</span></div><div class="line">default via <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> dev wlan0  proto static </div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> dev docker0  proto kernel  scope link  src <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> </div><div class="line"><span class="number">172.17</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> via <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span> dev wlan0 </div><div class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> dev wlan0  proto kernel  scope link  src <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>  metric <span class="number">9</span> </div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">56</span> ~</div><div class="line"><span class="comment"># telnet 172.17.1.22 6379</span></div><div class="line">Trying <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]q</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>也可以使用 redis client 来访问，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt"># arnes@Ubuntu-Asus [192.168.2.201] in ~/download/redis-3.0.5/src [15:16:49]</span></span></div><div class="line">$ ./redis-cli -h 172.17.1.22 -p 6379</div><div class="line">172.17.1.22:6379&gt; scan <span class="number">0</span> count <span class="number">100</span></div><div class="line"><span class="input"><span class="prompt">1) "0"</span></span></div><div class="line">2) 1) "messages"</div><div class="line">172.17.1.22:6379&gt; get messages</div><div class="line"><span class="string">"Hello World!"</span></div></pre></td></tr></table></figure></p>
<p>这样，外部系统就可以直接访问 Pod。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2>iptables在kubernetes proxy中的作用</h2>
<p>当service有了port和nodePort之后，就可以对内/外提供服务。那么其具体是通过什么原理来实现的呢？奥妙就在kube-proxy在本地node上创建的iptables规则。</p>
<]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 数据迁移测试]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-migration/"/>
    <id>http://valleylord.github.io/post/201603-mycat-migration/</id>
    <published>2016-03-20T01:08:56.000Z</published>
    <updated>2016-03-20T03:32:28.886Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 在使用过程中可能出现性能不足，需要添加服务器的情况，在增加服务器过程中，需要做数据迁移，难免出现业务中断等情况。本文实现一个最简单的 MyCAT 数据迁移步骤。</p>
<h2>步骤总览</h2>
<p>假定 travelrecord 表共有10个分片，分布在一台mysql的10个数据库中（dbtest0~dbtest9），需要将10个分片中的2个分片（dbtest0、dbtest1）转移到第二台MySQL上。大致步骤如下，</p>
<ol>
<li>将需要迁移的2个分片设置为只读</li>
<li>将2个分片的数据导出，并在新增的数据库上将数据导入；</li>
<li>修改相应的 MyCAT 配置，并重新加载；</li>
</ol>
<p>当然，这样的步骤，业务中断时间会比较长，主要时间浪费在数据导出导入的过程中。实际使用中，应该使用主从复制的方式将数据同步到从数据库中，再以从数据库中的数据为基础，启动第二台 mysql，这样，中断时间会短很多。</p>
<p>假定 travelrecord 表中共有10万条数据，每个分片上1万条，再假定这10个分片数据库中，每个数据库都只有这一个表。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord limit 10;</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                 |</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line">| dn0       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn3       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn4       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn5       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn6       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn7       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn8       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line"><span class="header">| dn9       | SELECT * FROM travelrecord LIMIT 10 |</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line">10 rows in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select count(*) from travelrecord;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| COUNT0 |</span></div><div class="line">+--------+</div><div class="line"><span class="header">| 100000 |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.03 sec)</div></pre></td></tr></table></figure></p>
<h2>设置数据库只读</h2>
<p>先设置 dbtest0 为只读，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span>;</span></div><div class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> read_only = <span class="number">1</span>;</span></div></pre></td></tr></table></figure></p>
<p>设置只读之后，数据库的写操作将被阻塞。如果发现数据迁移的过程中发生错误，可以放弃迁移，恢复数据库可写，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> read_only = <span class="number">0</span>;</span></div><div class="line"><span class="operator"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span></div></pre></td></tr></table></figure></p>
<p>此时，如果 MyCAT 再有数据插入，就会阻塞，直到超时，如下，</p>
<p><img src="/images/201603-mycat-migration/mycat-migration-blocked.png"></p>
<h2>导出和导入数据库</h2>
<p>通常情况下，mysql 数据库可以使用 mysqldump 做导入导出，做全量备份。如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">mysqldump -hworkstation -uroot -P3306 -p111111 dbtest0 &gt;</span> dbtest<span class="number">0</span>.sql</span></div></pre></td></tr></table></figure></p>
<p>再将数据导入到目标数据库中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mysql</span> -hworkstation -uroot -P3316 -p111111 dbtest0 &lt; dbtest0.sql</div></pre></td></tr></table></figure></p>
<p>可以验证一下数据库中的数据是否已经导入成功。</p>
<h2>修改 MyCAT 配置文件</h2>
<p>原先，travelrecord 的分片是如下配置的，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line"></div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>只有一个数据库服务器，上面有10个数据库，实现了10个分片，采用的是 <code>mod-10</code> 算法（按10取余数），如果新增加了数据库服务器，就需要修改配置。修改后的配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line"></div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost2"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost2"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>修改完配置，使用 MyCAT 管理端登陆，重新加载配置，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ mysql -hworkstation -utest -DTESTDB -P9066 -ptest</div><div class="line">Welcome to the MySQL monitor.  Commands <span class="operator"><span class="keyword">end</span> <span class="keyword">with</span> ;</span> or \g.</div><div class="line">Your MySQL connection id is 4</div><div class="line">Server version: 5.5.8-mycat-1.5-<span class="operator"><span class="keyword">RELEASE</span>-<span class="number">20160301083012</span> MyCat <span class="keyword">Server</span> (monitor)</span></div><div class="line"></div><div class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2015</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</div><div class="line"></div><div class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</div><div class="line">affiliates. Other <span class="keyword">names</span> may be trademarks <span class="keyword">of</span> their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> <span class="keyword">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> <span class="keyword">help</span>. Type <span class="string">'\c'</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> <span class="keyword">input</span> statement.</div><div class="line"></div><div class="line">mysql&gt; reload @@config_all;</div><div class="line">Query OK, 1 row affected (0.43 sec)</div><div class="line">Reload config success</div></pre></td></tr></table></figure></p>
<p>此时，再去做插入数据，发现已经是在向新的数据库做插入了。用以上同样的步骤，可以迁移 dbtest1 的数据，在此不再赘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 在使用过程中可能出现性能不足，需要添加服务器的情况，在增加服务器过程中，需要做数据迁移，难免出现业务中断等情况。本文实现一个最简单的 MyCAT 数据迁移步骤。</p>
<h2>步骤总览</h2>
<p>假定 travelrecord 表共有10个分片，分布在一]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flannel 网络组件]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-flannel/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-flannel/</id>
    <published>2016-03-13T05:21:25.000Z</published>
    <updated>2016-03-13T06:26:08.722Z</updated>
    <content type="html"><![CDATA[<p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。其设计目的就是为集群中的所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得“同属一个内网”且”不重复的”IP地址，并让属于不同节点上的容器能够直接通过内网IP通信。</p>
<p>Flannel实质上是一种“覆盖网络(overlay network)”，也就是将TCP数据包装在另一种网络包里面进行路由转发和通信，目前已经支持UDP、VxLAN、AWS VPC和GCE路由等数据转发方式。</p>
<h2>Flannel 是否需要在 Master 节点上安装</h2>
<p>Flannel 为每个节点分配不同的 IP，在每个几点上的 Docker 使用了不同的地址段，因为Flannel通过Etcd分配了每个节点可用的IP地址段后，偷偷的修改了Docker的启动参数，增加了 <code>-bip</code> 参数，从而，不同节点上的容器被限制在了不同的网段。除了 Flannel 需要一个中央的 Etcd 来记录分配了的 IP 地址段，并不需要其他的中央配置，因此，Master 节点上是不需要安装 Flannel 的。</p>
<h2>Flannel 是否控制了容器的 IP 分配</h2>
<p>由于 Flannel 是在 Docker 的启动参数中控制了节点的 IP 地址段，但是并没有控制每一个容器的 IP 的分配。容器的 IP 是由节点上的 Docker Daemon 自动分配的。</p>
<h2>多节点 Flannel 网络路由</h2>
<p>在有3个或3个以上节点的网络中，Flannel 网络的优势相比直接路由方式要简洁很多。</p>
<p>直接路由方式一般会借助 Quagga 来进行配置，Quagga 也是安装在每个节点上，启动之后，会根据本机的 docker0 网卡地址，将这个地址的路由规则加到其他节点的路由表中。也就是说，如果网络中有 N 个节点，那么每个节点上就需要有 N-1 条路由规则，在节点较多的时候，这个路由规则的规模比较庞大。</p>
<p>而 Flannel 网络路由就不同了，它采用了子网的概念。每个节点 docker0 所在的网络都是 flannel0 网络的子网，因此，当子网的 docker0 有数据发出的时候，数据会自然被发生到 flannel0 网卡上。由于 Flannel 统一分配了节点的子网段，数据被路由到指定的子网 docker0 即可。相对于直接路由方式，Flannel 网络少了很多路由规则的配置，而是由中央的 flannel0 来统一路由。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。其设计目的就是为集群中的所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得“同属]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT + Haproxy 集群]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-haproxy/"/>
    <id>http://valleylord.github.io/post/201603-mycat-haproxy/</id>
    <published>2016-03-12T05:50:15.000Z</published>
    <updated>2016-03-13T13:21:18.925Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 在生产环境中，需要解决自身的高可用问题。一种常见的做法是使用 MyCAT + Haproxy 高可用集群<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，这中做法在 mysql 集群中已经很常见了。对于 MyCAT 集群，其大致架构图如下，</p>
<p><img src="/images/201603-mycat-haproxy/mycat-haproxy-architect.png"></p>
<h2>环境介绍</h2>
<p>出于简便考虑，本文的搭建环境在单台服务器上，MyCAT、Haproxy 均安装在这个服务器上，操作系统是 Ubuntu14.04。MyCAT 的 mysql 数据库采用 docker 容器，监听本地端口3306。本机 IP 192.168.2.201，并配置了 hosts 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192.168.2.201    ubuntu-haproxy1</div><div class="line">192.168.2.201    ubuntu-haproxy2</div><div class="line"></div><div class="line">192.168.2.201    ubuntu-mycat1</div><div class="line">192.168.2.201    ubuntu-mycat2</div></pre></td></tr></table></figure></p>
<h2>MyCAT 配置</h2>
<p>由于两个 MyCAT 装在一台机器上，因此需要修改其中一台的监听端口，修改 <code>server.xml</code> 文件，增加以下内容，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"serverPort"</span>&gt;<span class="number">8067</span>&lt;/<span class="keyword">property</span>&gt; &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"managerPort"</span>&gt;<span class="number">9067</span>&lt;/<span class="keyword">property</span>&gt;</div></pre></td></tr></table></figure></p>
<h2>安装 Haproxy</h2>
<p>先要新增haproxy用户。然后进行下载代码，编译和安装，我用的是 1.6.3 版本，地址在<a href="http://www.haproxy.org/download/1.6/src/haproxy-1.6.3.tar.gz" target="_blank" rel="external">这里</a>。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd /home/arnes/project/mycat-ha/</div><div class="line"><span class="variable">$ </span>tar xzf haproxy-<span class="number">1.6</span>.<span class="number">3</span>.tar.gz </div><div class="line"><span class="variable">$ </span>cd haproxy-<span class="number">1.6</span>.<span class="number">3</span> </div><div class="line"><span class="variable">$ </span>make <span class="constant">TARGET</span>=linux2628 <span class="constant">PREFIX</span>=<span class="regexp">/home/arnes</span><span class="regexp">/project/mycat</span>-ha/haproxy1.<span class="number">6.3</span>-<span class="number">1</span></div><div class="line"><span class="variable">$ </span>mkdir -p /home/arnes/project/mycat-ha/haproxy1.<span class="number">6.3</span>-<span class="number">1</span></div><div class="line"><span class="variable">$ </span>make install <span class="constant">PREFIX</span>=<span class="regexp">/home/arnes</span><span class="regexp">/project/mycat</span>-ha/haproxy1.<span class="number">6.3</span>-<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>具体的编译选项可以参考源码包中的 README 文件。如果需要安装两份，只需要运行两次 <code>make install</code> 即可，注意：这里的 <code>PREFIX</code> 参数不能用环境变量缩写，如 ~ 表示 HOME 目录。</p>
<p>然后编辑 Haproxy 的配置文件 haproxy.conf，在 <code>/home/arnes/project/mycat-ha/haproxy1.6.3-1</code> 目录下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="title">global</span></div><div class="line">    maxconn <span class="number">512</span></div><div class="line">    daemon</div><div class="line">    pidfile /home/arnes/project/mycat-ha/haproxy1.<span class="number">6</span>.<span class="number">3</span>-<span class="number">1</span>/haproxy.pid</div><div class="line">defaults</div><div class="line">     mode tcp</div><div class="line">     option redispatch <span class="comment">#当serverId对应的服务器挂掉后，强制定向到其他健康的服务器  </span></div><div class="line">        option abortonclose <span class="comment">#当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接  </span></div><div class="line">        timeout connect <span class="number">5000ms</span> <span class="comment">#连接超时  </span></div><div class="line">        timeout client <span class="number">30000ms</span> <span class="comment">#客户端超时  </span></div><div class="line">        timeout server <span class="number">30000ms</span> <span class="comment">#服务器超时  </span></div><div class="line">        <span class="comment">#timeout check 2000 #=心跳检测超时  </span></div><div class="line">        balance roundrobin                     <span class="comment">#负载均衡算法  </span></div><div class="line">     log <span class="number">127.0.0.1</span> local0 <span class="built_in">info</span> <span class="comment">#[err warning info debug]  </span></div><div class="line">listen  admin_status</div><div class="line">      bind <span class="number">192.168.2.201:48800</span> <span class="comment">##VIP</span></div><div class="line">      stats uri /admin-status        <span class="comment">##统计页面</span></div><div class="line">      stats auth  admin:admin</div><div class="line">      mode    http</div><div class="line">      option  httplog</div><div class="line">listen    allmycat_service</div><div class="line">      bind <span class="number">192.168.2.201:8096</span> <span class="comment">##转发到mycat的8066端口，即mycat的服务端口</span></div><div class="line">      mode tcp</div><div class="line">      option tcplog</div><div class="line">        option httpchk OPTIONS * HTTP/<span class="number">1</span>.<span class="number">1</span>\r\nHost:\ www</div><div class="line">      balance    roundrobin</div><div class="line">        server    mycat_133 <span class="number">192.168.2.201:8066</span> check port <span class="number">48700</span> inter <span class="number">5s</span> rise <span class="number">2</span> fall <span class="number">3</span></div><div class="line">        server    mycat_134 <span class="number">192.168.2.201:8067</span> check port <span class="number">48700</span> inter <span class="number">5s</span> rise <span class="number">2</span> fall <span class="number">3</span></div><div class="line">listen    allmycat_admin</div><div class="line">      bind <span class="number">192.168.2.201:8097</span> <span class="comment">##转发到mycat的9066端口，及mycat的管理控制台端口</span></div><div class="line">      mode tcp</div><div class="line">      option tcplog</div><div class="line">        option httpchk OPTIONS * HTTP/<span class="number">1</span>.<span class="number">1</span>\r\nHost:\ www</div><div class="line">      balance    roundrobin</div><div class="line">        server    mycat_133 <span class="number">192.168.2.201:9066</span> check port <span class="number">48700</span> inter <span class="number">5s</span> rise <span class="number">2</span> fall <span class="number">3</span></div><div class="line">        server    mycat_134 <span class="number">192.168.2.201:9067</span> check port <span class="number">48700</span> inter <span class="number">5s</span> rise <span class="number">2</span> fall <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>对于另一个 Haproxy 的配置比较类似，只要改一下 listen 的端口即可。</p>
<h2>启动 MyCAT 和 Haproxy</h2>
<p>MyCAT 的启动没有什么特别之处，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./mycat restart</div><div class="line"><span class="variable">Stopping</span> <span class="variable">Mycat</span>-server...</div><div class="line"><span class="variable">Mycat</span>-server was <span class="keyword">not</span> running.</div><div class="line"><span class="variable">Starting</span> <span class="variable">Mycat</span>-server...</div></pre></td></tr></table></figure></p>
<p>Haproxy 的启动也比较简单，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./sbin/haproxy <span class="operator">-f</span> haproxy.conf</div></pre></td></tr></table></figure></p>
<p>启动之后就可以登陆了，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ mysql -h192<span class="number">.168</span><span class="number">.2</span><span class="number">.201</span> -utest -DTESTDB -P8096 -ptest</div><div class="line">Reading table information <span class="keyword">for</span> completion <span class="keyword">of</span> table <span class="keyword">and</span> column names</div><div class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> -A</div><div class="line"></div><div class="line">Welcome <span class="keyword">to</span> <span class="keyword">the</span> MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</div><div class="line">Your MySQL connection <span class="property">id</span> <span class="keyword">is</span> <span class="number">1</span></div><div class="line">Server <span class="property">version</span>: <span class="number">5.5</span><span class="number">.8</span>-mycat-<span class="number">1.5</span>-RELEASE-<span class="number">20160301083012</span> MyCat Server (OpenCloundDB)</div><div class="line"></div><div class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2015</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> <span class="keyword">its</span> affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> <span class="keyword">its</span></div><div class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type 'help;' <span class="keyword">or</span> '\h' <span class="keyword">for</span> help. Type '\c' <span class="keyword">to</span> clear <span class="keyword">the</span> current input statement.</div><div class="line"></div><div class="line">mysql&gt; show tables;</div><div class="line">+<span class="comment">------------------+</span></div><div class="line">| Tables <span class="keyword">in</span> TESTDB |</div><div class="line">+<span class="comment">------------------+</span></div><div class="line">| company          |</div><div class="line">| customer         |</div><div class="line">| customer_addr    |</div><div class="line">| employee         |</div><div class="line">| goods            |</div><div class="line">| hotnews          |</div><div class="line">| orders           |</div><div class="line">| order_items      |</div><div class="line">| person           |</div><div class="line">| travelrecord     |</div><div class="line">+<span class="comment">------------------+</span></div><div class="line"><span class="number">10</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-haproxy/mycat-haproxy-connection.png"></p>
<p>如果真正在生产环境中，MyCAT 和 Haproxy 会部署在不同的服务器上，而且 Haproxy 还需要与 keepalived 一起部署，还需要进一步研究，在此不再赘述。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.mycat.io/document/Mycat_V1.6.0.pdf" target="_blank" rel="external">http://www.mycat.io/document/Mycat_V1.6.0.pdf</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/wdw1206/article/details/44201331" target="_blank" rel="external">http://blog.csdn.net/wdw1206/article/details/44201331</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 在生产环境中，需要解决自身的高可用问题。一种常见的做法是使用 MyCAT + Haproxy 高可用集群<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" c]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes 滚动升级]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-roll/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-roll/</id>
    <published>2016-03-06T08:22:26.000Z</published>
    <updated>2016-03-06T12:13:49.639Z</updated>
    <content type="html"><![CDATA[<p>本文使用的《Kubernetes 权威指南》中的例子。</p>
<h2>镜像介绍</h2>
<p>本文搭建的系统是一个留言板系统，使用的 docker 镜像是《Kubernetes 权威指南》中提供的，托管在 docker.io 上。如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410]~arnes/kubernetes# docker search kubeguide</div><div class="line">INDEX       NAME                                         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">docker.<span class="built_in">io</span>   docker.<span class="built_in">io</span>/kubeguide/redis-master             redis-master with <span class="string">"Hello World!"</span>                <span class="number">3</span>                    </div><div class="line">docker.<span class="built_in">io</span>   docker.<span class="built_in">io</span>/kubeguide/centos7-ansible          ansible with sshpass tool installed <span class="keyword">and</span> ss...   <span class="number">2</span>                    </div><div class="line">docker.<span class="built_in">io</span>   docker.<span class="built_in">io</span>/kubeguide/guestbook-php-frontend   Guestbook PHP website                           <span class="number">2</span>                    </div><div class="line">docker.<span class="built_in">io</span>   docker.<span class="built_in">io</span>/kubeguide/guestbook-redis-slave    Guestbook redis slave                           <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>除了 <code>centos7-ansible</code> 镜像，其他3个镜像会在本例中用到。该留言板系统使用 php 搭建，使用 redis 作为存储，redis 使用一主多备。</p>
<h2>Kubernetes 集群搭建</h2>
<p>先定义 redis-master 的 Pod 和 Service，redis-master 的 RC <code>redis-master-rc.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: <span class="type">ReplicationController</span></div><div class="line">metadata:</div><div class="line">  name: redis-master</div><div class="line">  labels:</div><div class="line">    name: redis-master</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">1</span></div><div class="line">  selector:</div><div class="line">    name: redis-master</div><div class="line">    version: v1</div><div class="line">  <span class="keyword">template</span>:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        name: redis-master</div><div class="line">        version: v1</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: master</div><div class="line">        image: kubeguide/redis-master:<span class="number">1</span>.<span class="number">0</span></div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p>redis-master 的 Service <code>redis-master-service.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="label">apiVersion:</span> v1</div><div class="line"><span class="label">kind:</span> Service</div><div class="line"><span class="label">metadata:</span></div><div class="line">  name: redis-master</div><div class="line">  labels:</div><div class="line">    name: redis-master</div><div class="line"><span class="label">spec:</span></div><div class="line">  ports:</div><div class="line">  - port: <span class="number">6379</span></div><div class="line">    targetPort: <span class="number">6379</span></div><div class="line">  selector:</div><div class="line">    name: redis-master</div></pre></td></tr></table></figure></p>
<p>再定义 redis-slave 的 Pod 和 Service，redis-slave 的 RC <code>redis-slave-rc.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: <span class="type">ReplicationController</span></div><div class="line">metadata:</div><div class="line">  name: redis-slave</div><div class="line">  labels:</div><div class="line">    name: redis-slave</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">2</span></div><div class="line">  selector:</div><div class="line">    name: redis-slave</div><div class="line">  <span class="keyword">template</span>:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        name: redis-slave</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: slave</div><div class="line">        image: kubeguide/guestbook-redis-slave</div><div class="line">        env:</div><div class="line">        - name: <span class="type">GET_HOSTS_FROM</span></div><div class="line">          value: env</div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p>redis-slave 的 Service <code>redis-slave-service.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="label">apiVersion:</span> v1</div><div class="line"><span class="label">kind:</span> Service</div><div class="line"><span class="label">metadata:</span></div><div class="line">  name: redis-slave</div><div class="line">  labels:</div><div class="line">    name: redis-slave</div><div class="line"><span class="label">spec:</span></div><div class="line">  ports:</div><div class="line">  - port: <span class="number">6379</span></div><div class="line">  selector:</div><div class="line">    name: redis-slave</div></pre></td></tr></table></figure></p>
<p>最后定义 php 的 Pod 和 Service，php 的 RC <code>frontend-rc.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">piVersion: v1</div><div class="line">kind: <span class="type">ReplicationController</span></div><div class="line">metadata:</div><div class="line">  name: frontend</div><div class="line">  labels:</div><div class="line">    name: frontend</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">3</span></div><div class="line">  selector:</div><div class="line">    name: frontend</div><div class="line">  <span class="keyword">template</span>:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        name: frontend</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: frontend</div><div class="line">        image: kubeguide/guestbook-php-frontend</div><div class="line">        env:</div><div class="line">        - name: <span class="type">GET_HOSTS_FROM</span></div><div class="line">          value: env</div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">80</span></div></pre></td></tr></table></figure></p>
<p>php 的 Service <code>frontend-service.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="label">apiVersion:</span> v1</div><div class="line"><span class="label">kind:</span> Service</div><div class="line"><span class="label">metadata:</span></div><div class="line">  name: frontend</div><div class="line">  labels:</div><div class="line">    name: frontend</div><div class="line"><span class="label">spec:</span></div><div class="line">  type: NodePort</div><div class="line">  ports:</div><div class="line">  - port: <span class="number">80</span></div><div class="line">    nodePort: <span class="number">30001</span></div><div class="line">  selector:</div><div class="line">    name: frontend</div></pre></td></tr></table></figure></p>
<p>创建这些 Service 和 Pod 只需要依次运行以下命令即可，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kubectl <span class="operator"><span class="keyword">create</span> -f redis-<span class="keyword">master</span>-rc.yaml</span></div><div class="line">kubectl <span class="keyword">create</span> -f redis-<span class="keyword">master</span>-service.yaml</div><div class="line">kubectl <span class="keyword">create</span> -f redis-<span class="keyword">slave</span>-rc.yaml</div><div class="line">kubectl <span class="keyword">create</span> -f redis-<span class="keyword">slave</span>-service.yaml</div><div class="line">kubectl <span class="keyword">create</span> -f frontend-rc.yaml</div><div class="line">kubectl <span class="keyword">create</span> -f frontend-service.yaml</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，redis-slave 和 redis-master 镜像的不同主要体现在启动命令的不同，redis-slave 使用 <code>redis-server --slaveof ${REDIS_MASTER_SERVICE_HOST} 6379</code>来启动。</p>
</blockquote>
<h2>Kubernetes 集群搭建验证</h2>
<p>如果搭建正常，可以看到类似以下的输出，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll<span class="comment"># kubectl get pods                  </span></div><div class="line">NAME                 READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div><div class="line">frontend<span class="operator">-f</span>0cb6       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div><div class="line">frontend-ubedy       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div><div class="line">redis-master-<span class="number">28</span>uug   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">13</span>m</div><div class="line">redis-slave-<span class="number">3</span>etxv    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">2</span>m</div><div class="line">redis-slave-spf75    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">2</span>m</div><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll<span class="comment"># kubectl get services                      </span></div><div class="line">NAME           CLUSTER_IP      EXTERNAL_IP   PORT(S)    SELECTOR            AGE</div><div class="line">frontend       <span class="number">10.254</span>.<span class="number">49.190</span>   nodes         <span class="number">80</span>/TCP     name=frontend       <span class="number">35</span>s</div><div class="line">kubernetes     <span class="number">10.254</span>.<span class="number">0.1</span>      &lt;none&gt;        <span class="number">443</span>/TCP    &lt;none&gt;              <span class="number">7</span>d</div><div class="line">redis-master   <span class="number">10.254</span>.<span class="number">35.174</span>   &lt;none&gt;        <span class="number">6379</span>/TCP   name=redis-master   <span class="number">12</span>m</div><div class="line">redis-slave    <span class="number">10.254</span>.<span class="number">32.178</span>   &lt;none&gt;        <span class="number">6379</span>/TCP   name=redis-slave    <span class="number">2</span>m</div><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE                                                        COMMAND                  CREATED              STATUS              PORTS               NAMES</div><div class="line"><span class="number">635</span>ea3d0181f        kubeguide/guestbook-php-frontend                             <span class="string">"apache2-foreground"</span>     About a minute ago   Up About a minute                       k8s_frontend.<span class="number">34</span>ee268e_frontend-<span class="number">2</span>qzcj_default_9ce06947<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_ec302c6b</div><div class="line"><span class="number">20</span>a3b593e158        kubeguide/guestbook-php-frontend                             <span class="string">"apache2-foreground"</span>     About a minute ago   Up About a minute                       k8s_frontend.<span class="number">34</span>ee268e_frontend-ubedy_default_9ce06115<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_caf3ba3b</div><div class="line"><span class="number">789</span>a1d419315        kubeguide/guestbook-php-frontend                             <span class="string">"apache2-foreground"</span>     About a minute ago   Up About a minute                       k8s_frontend.<span class="number">34</span>ee268e_frontend<span class="operator">-f</span>0cb6_default_9cdffcd7<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_53183bf4</div><div class="line"><span class="number">627531</span>a72664        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   About a minute ago   Up About a minute                       k8s_POD.c36b0a77_frontend-ubedy_default_9ce06115<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_11c886e6</div><div class="line"><span class="number">217</span>e25b56c9e        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   About a minute ago   Up About a minute                       k8s_POD.c36b0a77_frontend-<span class="number">2</span>qzcj_default_9ce06947<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_89b18d65</div><div class="line"><span class="number">70</span>f93bcc4da7        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   About a minute ago   Up About a minute                       k8s_POD.c36b0a77_frontend<span class="operator">-f</span>0cb6_default_9cdffcd7<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_f3710ab7</div><div class="line"><span class="number">672</span>cdc93fc3f        kubeguide/guestbook-redis-slave                              <span class="string">"/entrypoint.sh /bin/"</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes                            k8s_slave.<span class="number">6</span>a232544_redis-slave-<span class="number">3</span>etxv_default_6a74487e<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_69ad2ac7</div><div class="line">ccc447a1c80b        kubeguide/guestbook-redis-slave                              <span class="string">"/entrypoint.sh /bin/"</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes                            k8s_slave.<span class="number">6</span>a232544_redis-slave-spf75_default_6a7456a7<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_a937374a</div><div class="line"><span class="number">02</span>e4cc97f365        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes                            k8s_POD.<span class="number">4</span>f810ae8_redis-slave-<span class="number">3</span>etxv_default_6a74487e<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_d8416c26</div><div class="line"><span class="number">72463</span>f2a2d15        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes                            k8s_POD.<span class="number">4</span>f810ae8_redis-slave-spf75_default_6a7456a7<span class="operator">-e</span>384-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_d9d627a5</div><div class="line">e3f31eaa0164        kubeguide/redis-master:<span class="number">1.0</span>                                   <span class="string">"redis-server /etc/re"</span>   <span class="number">13</span> minutes ago       Up <span class="number">13</span> minutes                           k8s_master.b7750720_redis-master-<span class="number">28</span>uug_default_eb715755<span class="operator">-e</span>382-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_b4d36e11</div><div class="line">eaabc381aa3a        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   <span class="number">13</span> minutes ago       Up <span class="number">13</span> minutes                           k8s_POD.<span class="number">4</span>f810ae8_redis-master-<span class="number">28</span>uug_default_eb715755<span class="operator">-e</span>382-<span class="number">11</span>e5<span class="operator">-a</span>10f-c80aa9c034dc_16f151f1</div></pre></td></tr></table></figure></p>
<p>可以使用 curl 命令来查看是否已经搭建成功，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ curl 192.168.2.202:30001 </div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"redis"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Guestbook<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.12/angular.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"controllers.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"RedisCtrl"</span>&gt;</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>也可以用浏览器登陆 <code>http://192.168.2.202:30001/</code>，可以看到如下网页，</p>
<p><img src="/images/201603-kubernetes-roll/kubernetes-roll-cluster-test.png"></p>
<h2>Pod 缩放和扩容</h2>
<p>可以使用 <code>kubectl scale</code> 命令来控制副本数量，以实现 Pod 的缩放和扩容。例如，要将 redis-slave 的副本数由最初的2更新为1，以节约系统资源，可以如下操作，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl <span class="keyword">scale</span> rc redis-slave --replicas=<span class="number">1</span></div><div class="line">replicationcontroller <span class="string">"redis-slave"</span> scaled</div><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl get pods                         </div><div class="line">NAME                 READY     STATUS        RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj       <span class="number">1</span>/<span class="number">1</span>       Running       <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">frontend-f0cb6       <span class="number">1</span>/<span class="number">1</span>       Running       <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">frontend-ubedy       <span class="number">1</span>/<span class="number">1</span>       Running       <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">redis-master-<span class="number">28</span>uug   <span class="number">1</span>/<span class="number">1</span>       Running       <span class="number">0</span>          <span class="number">29</span>m</div><div class="line">redis-slave-<span class="number">3</span>etxv    <span class="number">1</span>/<span class="number">1</span>       Running       <span class="number">0</span>          <span class="number">18</span>m</div><div class="line">redis-slave-spf75    <span class="number">1</span>/<span class="number">1</span>       Terminating   <span class="number">0</span>          <span class="number">18</span>m</div><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl get pods</div><div class="line">NAME                 READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">frontend-f0cb6       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">frontend-ubedy       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">17</span>m</div><div class="line">redis-master-<span class="number">28</span>uug   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">29</span>m</div><div class="line">redis-slave-<span class="number">3</span>etxv    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">19</span>m</div></pre></td></tr></table></figure></p>
<p>可以看到，过了一段时间之后，redis-slave 的副本数已经降为1。如果要将 redis-slave 扩容以适应更大的业务需求，例如，将副本数更新为3，可以如下操作，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl <span class="keyword">scale</span> rc redis-slave --replicas=<span class="number">3</span></div><div class="line">replicationcontroller <span class="string">"redis-slave"</span> scaled</div><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl get pods                         </div><div class="line">NAME                 READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">20</span>m</div><div class="line">frontend-f0cb6       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">20</span>m</div><div class="line">frontend-ubedy       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">20</span>m</div><div class="line">redis-master-<span class="number">28</span>uug   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">32</span>m</div><div class="line">redis-slave-<span class="number">3</span>etxv    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">22</span>m</div><div class="line">redis-slave-<span class="number">6</span>ib0f    <span class="number">0</span>/<span class="number">1</span>       Pending   <span class="number">0</span>          <span class="number">5</span>s</div><div class="line">redis-slave-bimjq    <span class="number">0</span>/<span class="number">1</span>       Pending   <span class="number">0</span>          <span class="number">5</span>s</div><div class="line">[root<span class="variable">@Centos</span>-L410]~arnes/project/kubernetes-<span class="keyword">roll</span># kubectl get pods</div><div class="line">NAME                 READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">21</span>m</div><div class="line">frontend-f0cb6       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">21</span>m</div><div class="line">frontend-ubedy       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">21</span>m</div><div class="line">redis-master-<span class="number">28</span>uug   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">33</span>m</div><div class="line">redis-slave-<span class="number">3</span>etxv    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">22</span>m</div><div class="line">redis-slave-<span class="number">6</span>ib0f    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">24</span>s</div><div class="line">redis-slave-bimjq    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">24</span>s</div></pre></td></tr></table></figure></p>
<h2>应用的滚动升级</h2>
<p>如果系统中的一个服务需要升级，就需要停止该服务的所有 Pod，并用新的镜像创建容器并启动。如果该集群比较大，这个工作量就非常巨大，而且会可能引起服务中断。Kubernetes 提供了滚动升级来解决上述问题。滚动升级可以逐步替换其中的 Pod，并在升级的过程中用新的 Pod 逐步对外提供服务。</p>
<p>假设上述的 redis-master 发生了更新，新的镜像来自 <code>redis-master:latest</code>，新的 RC 文件 <code>redis-master-rc-v2.yaml</code> 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: <span class="type">ReplicationController</span></div><div class="line">metadata:</div><div class="line">  name: redis-master-v2</div><div class="line">  labels:</div><div class="line">    name: redis-master</div><div class="line">    version: v2</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">1</span></div><div class="line">  selector:</div><div class="line">    name: redis-master</div><div class="line">    version: v2</div><div class="line">  <span class="keyword">template</span>:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        name: redis-master</div><div class="line">        version: v2</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: master</div><div class="line">        image: kubeguide/redis-master:latest</div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p>然后，即可开始滚动升级，使用如下命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll<span class="preprocessor"># kubectl rolling-update redis-master -f redis-master-rc-v2.yaml</span></div><div class="line">Created redis-master-v2</div><div class="line">Scaling up redis-master-v2 <span class="keyword">from</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span>, scaling down redis-master <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> <span class="number">0</span> (keep <span class="number">1</span> pods available, don<span class="comment">'t exceed 2 pods)</span></div><div class="line">Scaling redis-master-v2 up <span class="keyword">to</span> <span class="number">1</span></div><div class="line">Scaling redis-master down <span class="keyword">to</span> <span class="number">0</span></div><div class="line">Update succeeded. Deleting redis-master</div><div class="line">replicationcontroller <span class="string">"redis-master"</span> rolling updated <span class="keyword">to</span> <span class="string">"redis-master-v2"</span></div><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll<span class="preprocessor"># kubectl get pods                                              </span></div><div class="line">NAME                    READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj          <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">frontend-f0cb6          <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">frontend-ubedy          <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">redis-master-v2-o3pfb   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div><div class="line">redis-slave-<span class="number">2</span>gupi       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div><div class="line">redis-slave-cfj8j       <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>m</div></pre></td></tr></table></figure></p>
<p>运行完成之后，可以发现，Pod已经完成替换。实际的替换过程是，先建立一个新的 Pod，然后再删除原先的 Pod，并用新的 Pod 开始提供服务。在运行的过程中发现一个error，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410]~arnes/project/kubernetes-roll# kubectl rolling-<span class="operator"><span class="keyword">update</span> redis-<span class="keyword">master</span> -f redis-<span class="keyword">master</span>-rc-v2.yaml </span></div><div class="line">error: redis-<span class="keyword">master</span>-rc-v2.yaml must specify a matching <span class="keyword">key</span> <span class="keyword">with</span> non-equal <span class="keyword">value</span> <span class="keyword">in</span> Selector <span class="keyword">for</span> redis-<span class="keyword">master</span></div><div class="line">See <span class="string">'kubectl rolling-update -h'</span> <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">and</span> examples.</div></pre></td></tr></table></figure></p>
<p>这个问题从报错信息上看，是因为 redis-master-v2 中的 selector 中的元素与 redis-master 中一致造成的，而实际上，我最初的配置是不一样的，redis-master-v2 中配置的是 <code>name: redis-master   version: v2</code>，两个；redis-master 中配置的是 <code>name: redis-master</code>，只有1个。 因此，不应该认为是一样的。细节上来看，有文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>提到了相关代码，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> oldName == newRc.Name {</div><div class="line">	<span class="keyword">return</span> cmdutil.UsageError(cmd, <span class="string">"%s cannot have the same name as the existing ReplicationController %s"</span>,</div><div class="line">		filename, oldName)</div><div class="line">}</div><div class="line"></div><div class="line">updater := kubectl.NewRollingUpdater(newRc.Namespace, client)</div><div class="line"></div><div class="line"><span class="comment">// To successfully pull off a rolling update the new and old rc have to differ</span></div><div class="line"><span class="comment">// by at least one selector. Every new pod should have the selector and every</span></div><div class="line"><span class="comment">// old pod should not have the selector.</span></div><div class="line"><span class="keyword">var</span> hasLabel <span class="typename">bool</span></div><div class="line"><span class="keyword">for</span> key, oldValue := <span class="keyword">range</span> oldRc.Spec.Selector {</div><div class="line">	<span class="keyword">if</span> newValue, ok := newRc.Spec.Selector[key]; ok && newValue != oldValue {</div><div class="line">		hasLabel = <span class="constant">true</span></div><div class="line">		<span class="keyword">break</span></div><div class="line">	}</div><div class="line">}</div><div class="line"><span class="keyword">if</span> !hasLabel {</div><div class="line">	<span class="keyword">return</span> cmdutil.UsageError(cmd, <span class="string">"%s must specify a matching key with non-equal value in Selector for %s"</span>,</div><div class="line">		filename, oldName)</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上述代码在 <code>/pkg/kubectl/cmd/cmd.go</code> 的281~301行，对于新的rc和旧的rc，有2项限制，一个是新旧名字需要不同，另一个是rc的selector中需要至少有一项的值不一样。但是，代码的逻辑只判断了旧的 rc 中的条目，并没有检查新的 rc 多出来的条目，感觉这应该是一个bug。</p>
<p>也可以使用更简单的命令来升级，只需要指定新的镜像即可，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410]/home/arnes/project/kubernetes-roll<span class="comment"># kubectl rolling-update redis-master --image=kubeguide/redis-master:latest</span></div><div class="line">Created redis-master-<span class="number">48</span>ec5825c021205af16519fb67fa2b1d</div><div class="line">Scaling up redis-master-<span class="number">48</span>ec5825c021205af16519fb67fa2b1d <span class="keyword">from</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span>, scaling down redis-master <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> <span class="number">0</span> (keep <span class="number">1</span> pods available, don't exceed <span class="number">2</span> pods)</div><div class="line">Scaling redis-master-<span class="number">48</span>ec5825c021205af16519fb67fa2b1d up <span class="keyword">to</span> <span class="number">1</span></div><div class="line">Scaling redis-master down <span class="keyword">to</span> <span class="number">0</span></div><div class="line">Update succeeded. Deleting old controller: redis-master</div><div class="line">Renaming redis-master-<span class="number">48</span>ec5825c021205af16519fb67fa2b1d <span class="keyword">to</span> redis-master</div><div class="line">replicationcontroller <span class="string">"redis-master"</span> rolling updated</div><div class="line">[root@Centos-L410]/home/arnes/project/kubernetes-roll<span class="comment"># kubectl get pods                                                         </span></div><div class="line">NAME                                                  READY     STATUS    RESTARTS   AGE</div><div class="line">frontend-<span class="number">2</span>qzcj                                        <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">frontend-f0cb6                                        <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">frontend-ubedy                                        <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>h</div><div class="line">redis-master-<span class="number">48</span>ec5825c021205af16519fb67fa2b1d-<span class="number">61</span>kj1   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">3</span>m</div><div class="line">redis-slave-<span class="number">2</span>gupi                                     <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">37</span>m</div><div class="line">redis-slave-cfj8j                                     <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">37</span>m</div><div class="line">[root@Centos-L410]/home/arnes/project/kubernetes-roll<span class="comment"># kubectl get replicationControllers</span></div><div class="line">CONTROLLER     CONTAINER(S)   IMAGE(S)                           SELECTOR                                                                   REPLICAS   AGE</div><div class="line">frontend       frontend       kubeguide/guestbook-php-frontend   <span class="property">name</span>=frontend                                                              <span class="number">3</span>          <span class="number">1</span>h</div><div class="line">redis-master   master         kubeguide/redis-master:latest      deployment=<span class="number">457221237209715</span>cf35015690e05dfeb,<span class="property">name</span>=redis-master,<span class="property">version</span>=v1   <span class="number">1</span>          <span class="number">3</span>m</div><div class="line">redis-slave    slave          kubeguide/guestbook-redis-slave    <span class="property">name</span>=redis-slave                                                           <span class="number">2</span>          <span class="number">38</span>m</div></pre></td></tr></table></figure></p>
<p>上述过程仅仅替换了镜像版本，并增加了 selector 中的一个随机条目 deployment，label、selector 等配置都没有改变。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://dockone.io/article/328" target="_blank" rel="external">http://dockone.io/article/328</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文使用的《Kubernetes 权威指南》中的例子。</p>
<h2>镜像介绍</h2>
<p>本文搭建的系统是一个留言板系统，使用的 docker 镜像是《Kubernetes 权威指南》中提供的，托管在 docker.io 上。如下，</p>
<p><figure c]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 性能测试]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-perf-test/"/>
    <id>http://valleylord.github.io/post/201603-mycat-perf-test/</id>
    <published>2016-03-06T00:47:04.000Z</published>
    <updated>2016-04-03T11:47:45.106Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 的性能测试主要是通过使用 MyCAT 自带的性能测试工具 testtool 来完成。本文将介绍该工具的使用。</p>
<h2>环境介绍</h2>
<p>数据库服务 mysql 运行在 192.168.2.201 （host：workstation）机器上，操作系统 Ubuntu 14.04；MyCAT 服务运行在 192.168.2.202 （host：reg-server）机器上，操作系统 Centos 7；testtool 运行在一台虚拟机上，虚拟机的主机是 192.168.2.201。</p>
<p>由于 Centos 7 上使用了 iptables 防火墙，在安装完成之后，还需要使用 <code>iptables -F</code> 清空一下防火墙规则，防止 MyCAT 的 8806 端口被阻挡。</p>
<h2>建立测试表</h2>
<p>测试表的表结构描述如下，</p>
<blockquote>
person表：
<ul>
<li>Id，主键，Mycat自增主键</li>
<li>name,字符串，16字节最长</li>
<li>school,毕业学校，数字，1-1000范围，是学校编号</li>
<li>age，年龄，18-60</li>
<li>addr,地址，32字节，建议为 gz-tianhe（城市-地区两级 枚举的仿真数据）</li>
<li>zcode,邮编，</li>
<li>birth，生日，为日期类型， 1980到2010年之间随机的日期</li>
<li>score，得分，0-100分</li>
</ul>
</blockquote>
<p>建表语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (</span></div><div class="line">id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, </div><div class="line">name <span class="built_in">varchar</span>(<span class="number">16</span>), </div><div class="line">school <span class="built_in">smallint</span>, </div><div class="line">age tinyint, </div><div class="line">addr <span class="built_in">varchar</span>(<span class="number">32</span>), </div><div class="line">zcode <span class="built_in">varchar</span>(<span class="number">6</span>), </div><div class="line">birth <span class="built_in">DATE</span>, </div><div class="line">score tinyint);</div></pre></td></tr></table></figure></p>
<p>MyCAT 中也需要配置，<code>schema.xml</code> 配置采用 murmur 分片算法，该算法默认在3个分片中采用一致性哈希的方法分片，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"person"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">autoIncrement=</span><span class="string">"true"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">	<span class="variable">rule=</span><span class="string">"sharding-by-murmur"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>注意，person 表启用了自增主键<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，需要配置 MyCAT sequence。在 <code>server.xml</code> 中配置使用表的方式来管理 MyCAT sequence，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;<span class="number">1</span>&lt;/<span class="keyword">property</span>&gt;</div></pre></td></tr></table></figure></p>
<p>在 <code>sequence_db_conf.properties</code> 中增加一行，表示 person 表的 sequence 管理表是来自 dn1 节点，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">PERSON</span>=<span class="string">dn1</span></div></pre></td></tr></table></figure></p>
<p>在 dn1 节点中，新增管理 sequence 需要的相关表和函数，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MYCAT_SEQUENCE (</span></div><div class="line">NAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">current_value <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">increment <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (NAME)</div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> MYCAT_SEQUENCE(name,current_value,increment) <span class="keyword">VALUES</span> (<span class="string">'PERSON'</span>, <span class="number">100000</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> MYCAT_SEQUENCE(name,current_value,increment) <span class="keyword">VALUES</span> (<span class="string">'GLOBAL'</span>, <span class="number">100000</span>, <span class="number">100</span>);</span></div><div class="line"></div><div class="line"><span class="comment">-- 获取当前sequence的值 (返回当前值,增量)</span></div><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_currval;</span></div><div class="line">DELIMITER</div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf-<span class="number">8</span></span></div><div class="line">DETERMINISTIC</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> retval <span class="built_in">VARCHAR</span>(<span class="number">64</span>);</div><div class="line"><span class="operator"><span class="keyword">SET</span> retval=<span class="string">"-999999999,null"</span>;</span></div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="keyword">CAST</span>(current_value <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="string">","</span>,<span class="keyword">CAST</span>(increment <span class="keyword">AS</span> <span class="built_in">CHAR</span>)) <span class="keyword">INTO</span> retval <span class="keyword">FROM</span> MYCAT_SEQUENCE <span class="keyword">WHERE</span> name = seq_name;</span></div><div class="line">RETURN retval;</div><div class="line"><span class="operator"><span class="keyword">END</span></span></div><div class="line">DELIMITER;</div><div class="line"><span class="comment">-- 设置sequence值</span></div><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_setval;</span></div><div class="line">DELIMITER</div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_setval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>),<span class="keyword">value</span> <span class="built_in">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf-<span class="number">8</span></span></div><div class="line">DETERMINISTIC</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE</div><div class="line"><span class="keyword">SET</span> current_value = <span class="keyword">value</span></div><div class="line"><span class="keyword">WHERE</span> name = seq_name;</div><div class="line">RETURN mycat_seq_currval(seq_name);</div><div class="line"><span class="operator"><span class="keyword">END</span></span></div><div class="line">DELIMITER;</div><div class="line"><span class="comment">-- 获取下一个sequence值</span></div><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_nextval;</span></div><div class="line">DELIMITER</div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_nextval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf-<span class="number">8</span></span></div><div class="line">DETERMINISTIC</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE</div><div class="line"><span class="keyword">SET</span> current_value = current_value + increment <span class="keyword">WHERE</span> name = seq_name;</div><div class="line">RETURN mycat_seq_currval(seq_name);</div><div class="line"><span class="operator"><span class="keyword">END</span></span></div><div class="line">DELIMITER;</div></pre></td></tr></table></figure></p>
<p>其他采用默认配置即可。配置完成之后，重启 mycat 进程。如果配置成功，那么以下 sql 可以在 mycat 上运行成功，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> person(name, school, age, addr, zcode, birth, score)</span></div><div class="line"><span class="keyword">values</span>(<span class="string">'qwertyuioasdfg'</span>, <span class="number">1000</span>, <span class="number">60</span>, <span class="string">'gz-tianhe'</span>, <span class="number">123323</span>, <span class="string">'20000131'</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<h2>testtool 介绍</h2>
<p>testtool 主要包含以下工具，</p>
<ol>
<li>test_globaltable_insert_perf.sh，全局表插入测试</li>
<li>test_stand_merge_sel_perf.sh，分片表聚合查询测试</li>
<li>test_stand_update_perf.sh，标准单表更新测试</li>
<li>test_stand_insert_perf.sh，标准单表插入测试</li>
<li>test_stand_select_perf.sh，标准单表查询测试</li>
</ol>
<p>本次测试主要使用的是单表测试工具，使用 testtool 需要先建立仿真测试文件，<code>person-insert.sql</code> 文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">total=4000</div><div class="line">sql=<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> person(name, school, age, addr, zcode, birth, score) <span class="keyword">values</span>(<span class="string">'${char([a-f,0-9]8:10)}'</span>, ${<span class="built_in">int</span>(<span class="number">1</span>-<span class="number">1000</span>)}, ${</span></div><div class="line"><span class="built_in">int</span>(<span class="number">18</span>-<span class="number">60</span>)}, <span class="string">'${char([a-f]2:2)}-${char([a-f]4:29)}'</span>, ${<span class="built_in">int</span>(<span class="number">100000</span>-<span class="number">999999</span>)}, <span class="string">'${date(yyyyMMdd-[2000-2001]y)}'</span>, ${<span class="built_in">int</span>(<span class="number">0</span>-<span class="number">10</span></div><div class="line"><span class="number">0</span>)})</div></pre></td></tr></table></figure></p>
<p>可以简单运行一下 testtool 予以验证，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./test_stand_insert_perf.sh jdbc:mysql://workstation:<span class="number">8066</span>/TESTDB <span class="keyword">test</span> <span class="keyword">test</span>  <span class="number">10</span>  <span class="string">"file=person-insert.sql"</span></div></pre></td></tr></table></figure></p>
<p>如果运行不报错，说明测试工具可以正常使用。</p>
<h2>测试脚本和监控工具</h2>
<p>为了比对 mysql 单表和 mycat 分片不同情况下的对比，因此为此次测试编写了测试脚本，脚本如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> $*;</div><div class="line"><span class="keyword">do</span> </div><div class="line"></div><div class="line">    <span class="built_in">echo</span> <span class="string">"========================================================================"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Step Size: <span class="variable">$p</span>"</span>;</div><div class="line"></div><div class="line">	mysql -hworkstation -Ddb1 -uroot -P3306 -p111111 <span class="operator">-e</span> <span class="string">"update MYCAT_SEQUENCE set increment = <span class="variable">$p</span> where name = 'PERSON';"</span></div><div class="line"></div><div class="line">	mysql -hreg-server -utest -DTESTDB -P8066 -ptest <span class="operator">-e</span> <span class="string">'create table person (</span></div><div class="line">	id bigint not null primary key, </div><div class="line">	name varchar(16), </div><div class="line">	school smallint, </div><div class="line">	age tinyint, </div><div class="line">	addr varchar(32), </div><div class="line">	zcode varchar(6), </div><div class="line">	birth DATE, </div><div class="line">	score tinyint);'</div><div class="line">	./test_stand_insert_perf.sh jdbc:mysql://reg-server:<span class="number">8066</span>/TESTDB test test  <span class="number">5</span>  <span class="string">"file=person-insert.sql"</span></div><div class="line">	mysql -hreg-server -utest -DTESTDB -P8066 -ptest <span class="operator">-e</span> <span class="string">'drop table person'</span></div><div class="line">	sleep <span class="number">5</span></div><div class="line"></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>以上脚本放在 mycat 的 bin 目录下，可以如下使用，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mycat-perf-test.sh <span class="number">10</span> <span class="number">100</span>  <span class="number">100010000</span> &gt; <span class="literal">result</span>.txt</div></pre></td></tr></table></figure></p>
<p>表示，分别按10、100、1000、10000 为步长增加主键，并 mycat 进行插入数据测试，测试的输出写入 result.txt 文件中。每次执行插入之后，暂停5秒。</p>
<p>监控工具采用Nmon<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，监控参数如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nmon_x86_64_ubuntu13 <span class="operator">-s</span> <span class="number">1</span> -c <span class="number">3600</span> <span class="operator">-f</span></div></pre></td></tr></table></figure></p>
<p>每1秒监控一次，最多监控3600次。监控在安装 mysql 的 Ubuntu 服务器上进行。</p>
<h2>监控结果</h2>
<p>最终的 result.txt 内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">// 省略部分log</div><div class="line">========================================================================</div><div class="line">Step Size: 10</div><div class="line"><span class="operator"><span class="keyword">check</span> JAVA_HOME & java</span></div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line"><span class="keyword">create</span> jobs ...</div><div class="line">total record <span class="number">4000</span> batch <span class="keyword">size</span>:<span class="number">100</span> autocomit <span class="literal">false</span></div><div class="line">success ful created connections ,total :<span class="number">5</span></div><div class="line"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">5</span> teset threads: <span class="number">5</span></div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">20</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line">......</div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">56</span>:<span class="number">18</span> finished records :<span class="number">3800</span> failed:<span class="number">0</span> speed:<span class="number">66.5918968176083</span></div><div class="line">finishend:<span class="number">4000</span> failed:<span class="number">0</span></div><div class="line">used <span class="keyword">time</span> total:<span class="number">58</span>seconds</div><div class="line">tps:<span class="number">68.84681583476764</span></div><div class="line">========================================================================</div><div class="line">Step <span class="keyword">Size</span>: <span class="number">100</span></div><div class="line"><span class="keyword">check</span> JAVA_HOME & java</div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line"><span class="keyword">create</span> jobs ...</div><div class="line">total record <span class="number">4000</span> batch <span class="keyword">size</span>:<span class="number">100</span> autocomit <span class="literal">false</span></div><div class="line">success ful created connections ,total :<span class="number">5</span></div><div class="line"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">5</span> teset threads: <span class="number">5</span></div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">56</span>:<span class="number">26</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line">......</div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">56</span>:<span class="number">52</span> finished records :<span class="number">3600</span> failed:<span class="number">0</span> speed:<span class="number">138.24884792626727</span></div><div class="line">finishend:<span class="number">4000</span> failed:<span class="number">0</span></div><div class="line">used <span class="keyword">time</span> total:<span class="number">27</span>seconds</div><div class="line">tps:<span class="number">147.60147601476015</span></div><div class="line">========================================================================</div><div class="line">Step <span class="keyword">Size</span>: <span class="number">1000</span></div><div class="line"><span class="keyword">check</span> JAVA_HOME & java</div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line"><span class="keyword">create</span> jobs ...</div><div class="line">total record <span class="number">4000</span> batch <span class="keyword">size</span>:<span class="number">100</span> autocomit <span class="literal">false</span></div><div class="line">success ful created connections ,total :<span class="number">5</span></div><div class="line"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">5</span> teset threads: <span class="number">5</span></div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">01</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line">......</div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">11</span> finished records :<span class="number">3500</span> failed:<span class="number">0</span> speed:<span class="number">349.23169028138096</span></div><div class="line">finishend:<span class="number">4000</span> failed:<span class="number">0</span></div><div class="line">used <span class="keyword">time</span> total:<span class="number">11</span>seconds</div><div class="line">tps:<span class="number">360.36036036036035</span></div><div class="line">========================================================================</div><div class="line">Step <span class="keyword">Size</span>: <span class="number">10000</span></div><div class="line"><span class="keyword">check</span> JAVA_HOME & java</div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line"><span class="keyword">create</span> jobs ...</div><div class="line">total record <span class="number">4000</span> batch <span class="keyword">size</span>:<span class="number">100</span> autocomit <span class="literal">false</span></div><div class="line">success ful created connections ,total :<span class="number">5</span></div><div class="line"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">5</span> teset threads: <span class="number">5</span></div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">19</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line">......</div><div class="line"><span class="number">06</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">31</span> finished records :<span class="number">3600</span> failed:<span class="number">0</span> speed:<span class="number">299.2269969246114</span></div><div class="line">finishend:<span class="number">4000</span> failed:<span class="number">0</span></div><div class="line">used <span class="keyword">time</span> total:<span class="number">13</span>seconds</div><div class="line">tps:<span class="number">305.3435114503817</span></div></pre></td></tr></table></figure></p>
<p>可以发现，随着 step 的增大，tps在显著增长；但是在 step 增大到一定范围的时候，tps 不再有显著增长。原因是，由于自增的 sequence 是在表中存放的，每次插入数据的时候，取序号都受到这张表的访问速度限制。所以，在 step 比较小的时候，访问表的次数较多，因此 tps 比较低；在 step 比较大的时候，访问表的次数较少，因此 tps 比较高；在 step 超过一定值之后，访问表的次数已经很少，因此 tps 的值不再有显著变化。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.yemou.net/article/query/info/tytfjhfascvhzxcyt332" target="_blank" rel="external">http://blog.yemou.net/article/query/info/tytfjhfascvhzxcyt332</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.2cto.com/os/201412/357145.html" target="_blank" rel="external">http://www.2cto.com/os/201412/357145.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 的性能测试主要是通过使用 MyCAT 自带的性能测试工具 testtool 来完成。本文将介绍该工具的使用。</p>
<h2>环境介绍</h2>
<p>数据库服务 mysql 运行在 192.168.2.201 （host：workstation）机器上，操作系]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes 安装（Centos环境）]]></title>
    <link href="http://valleylord.github.io/post/201602-kubernetes-install/"/>
    <id>http://valleylord.github.io/post/201602-kubernetes-install/</id>
    <published>2016-02-28T06:41:52.000Z</published>
    <updated>2016-02-28T14:27:11.131Z</updated>
    <content type="html"><![CDATA[<p>本文主要参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<h2>物理环境和网络</h2>
<p>理论上，Kubernetes将服务放在两台主机上。第一台主机，centos-master，是 Kubernetes 主节点，主要运行kube-apiserver, kube-controller-manager, 和 kube-scheduler，以及 etcd。另一台主机，centos-minion，是工作节点，主要运行 kubelet, proxy, cadvisor 和 docker。</p>
<p>本文简单处理，物理机只有1台，分别配置 host 如下。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.2.202   centos-master</div><div class="line">192.168.2.202   centos-minion</div></pre></td></tr></table></figure></p>
<p>centos-master 操作系统是 Centos 7。</p>
<h2>yum 源配置</h2>
<p>增加 Kubernetes 的 yum 源，<code>sudo vi /etc/yum.repos.d/virt7-docker-common-release.repo</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">[virt7-docker-common-release]</span></div><div class="line"><span class="setting">name=<span class="value">virt7-docker-common-release</span></span></div><div class="line"><span class="setting">baseurl=<span class="value">http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/</span></span></div><div class="line"><span class="setting">gpgcheck=<span class="value"><span class="number">0</span></span></span></div></pre></td></tr></table></figure></p>
<h2>安装 Kubernetes</h2>
<blockquote>
<p>注意：Kubernetes 目前尚不能支持 Docker 的最新版，如果本机已经安装 Docker，建议先删除 Docker。</p>
</blockquote>
<p>由于已经配置 yum 源，安装就比较简单，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> <span class="comment">--enablerepo=virt7-docker-common-release kubernetes etcd</span></span></div></pre></td></tr></table></figure></p>
<h2>节点配置</h2>
<p>在所有主机上，做如下配置，<code>vi /etc/kubernetes/config</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></div><div class="line"><span class="variable">KUBE_LOGTOSTDERR=</span><span class="string">"--logtostderr=true"</span></div><div class="line"></div><div class="line"><span class="comment"># journal message level, 0 is debug</span></div><div class="line"><span class="variable">KUBE_LOG_LEVEL=</span><span class="string">"--v=0"</span></div><div class="line"></div><div class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></div><div class="line"><span class="variable">KUBE_ALLOW_PRIV=</span><span class="string">"--allow-privileged=false"</span></div><div class="line"></div><div class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></div><div class="line"><span class="variable">KUBE_MASTER=</span><span class="string">"--master=http://centos-master:8080"</span></div><div class="line"></div><div class="line"><span class="comment"># Comma separated list of nodes in the etcd cluster</span></div><div class="line"><span class="variable">KUBE_ETCD_SERVERS=</span><span class="string">"--etcd-servers=http://centos-master:2379"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，上述的 KUBE_ETCD_SERVERS 参数要根据 etcd 的实际情况来配置，etcd 的配置请在 <code>/etc/etcd/etcd.conf</code>。</p>
</blockquote>
<p>在主节点和工作节点上禁用防火墙，因为 docker 并不擅长防火墙规则管理，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl disable iptables-services firewalld</div><div class="line">systemctl <span class="keyword">stop</span> iptables-services firewalld</div></pre></td></tr></table></figure></p>
<h2>主节点配置和启动</h2>
<p>在主节点上配置如下，<code>vi /etc/kubernetes/apiserver</code></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The address on the local server to listen to.</span></div><div class="line"><span class="variable">KUBE_API_ADDRESS=</span><span class="string">"--address=0.0.0.0"</span></div><div class="line"></div><div class="line"><span class="comment"># The port on the local server to listen on.</span></div><div class="line"><span class="variable">KUBE_API_PORT=</span><span class="string">"--port=8080"</span></div><div class="line"></div><div class="line"><span class="comment"># How the replication controller and scheduler find the kube-apiserver</span></div><div class="line"><span class="variable">KUBE_MASTER=</span><span class="string">"--master=http://centos-master:8080"</span></div><div class="line"></div><div class="line"><span class="comment"># Port kubelets listen on</span></div><div class="line"><span class="variable">KUBELET_PORT=</span><span class="string">"--kubelet-port=10250"</span></div><div class="line"></div><div class="line"><span class="comment"># Address range to use for services</span></div><div class="line"><span class="variable">KUBE_SERVICE_ADDRESSES=</span><span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></div><div class="line"></div><div class="line"><span class="comment"># Add your own!</span></div><div class="line"><span class="variable">KUBE_API_ARGS=</span><span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>然后用以下命令启动，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler; <span class="keyword">do</span> </div><div class="line">    systemctl restart <span class="variable">$SERVICES</span></div><div class="line">    systemctl enable <span class="variable">$SERVICES</span></div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>将以上脚本保存在脚本<code>start_kubernetes.sh</code>中。以下是运行输出，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 kubernetes]# ./start_kubernetes.sh </div><div class="line">● etcd.service - Etcd Server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/etcd.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 2016-02-28 18:04:49 CST; 188ms ago</div><div class="line"> Main PID: 24669 (etcd)</div><div class="line">   CGroup: /system.slice/etcd.service</div><div class="line">           └─24669 /usr/bin/etcd <span class="comment">--name=default --data-dir=/var/lib/etcd/default.etcd --listen-client-urls=http://cen...</span></div><div class="line"></div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: election = 1000ms</div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: snapshot count = 10000</div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: advertise client URLs = http://centos-master:2379</div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: restarting member ce2a822cea30bfca in cluster 7e27652122e8b2ae at comm... 8613</div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: ce2a822cea30bfca became follower at term 7</div><div class="line">2月 28 18:04:49 Centos-L410 etcd[24669]: newRaft ce2a822cea30bfca [peers: [], term: 7, <span class="operator"><span class="keyword">commit</span>: <span class="number">8613</span>, applied: <span class="number">0.</span>..m: <span class="number">7</span>]</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">49</span> Centos-L410 etcd[<span class="number">24669</span>]: <span class="keyword">starting</span> <span class="keyword">server</span>... [<span class="keyword">version</span>: <span class="number">2.2</span><span class="number">.2</span>, cluster <span class="keyword">version</span>: to_be_decided]</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">49</span> Centos-L410 systemd[<span class="number">1</span>]: Started Etcd <span class="keyword">Server</span>.</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">49</span> Centos-L410 etcd[<span class="number">24669</span>]: added <span class="keyword">local</span> member ce2a822cea30bfca [http://localhost:<span class="number">2380</span> http://loca..<span class="number">.8</span>b2ae</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">49</span> Centos-L410 etcd[<span class="number">24669</span>]: <span class="keyword">set</span> the initial cluster <span class="keyword">version</span> <span class="keyword">to</span> <span class="number">2.2</span></div><div class="line">Hint: <span class="keyword">Some</span> <span class="keyword">lines</span> were ellipsized, <span class="keyword">use</span> -l <span class="keyword">to</span> <span class="keyword">show</span> <span class="keyword">in</span> <span class="keyword">full</span>.</div><div class="line">● kube-apiserver.service - Kubernetes API <span class="keyword">Server</span></div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-apiserver.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 2016-02-28 18:04:52 CST; 152ms ago</div><div class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"> Main PID: 24726 (kube-apiserver)</div><div class="line">   CGroup: /system.slice/kube-apiserver.service</div><div class="line">           └─24726 /usr/bin/kube-apiserver <span class="comment">--logtostderr=true --v=0 --etcd-servers=http://centos-master:2379 --addres...</span></div><div class="line"></div><div class="line">2月 28 18:04:50 Centos-L410 systemd[1]: Starting Kubernetes API Server...</div><div class="line">2月 28 18:04:52 Centos-L410 systemd[1]: Started Kubernetes API Server.</div><div class="line">● kube-controller-manager.service - Kubernetes Controller Manager</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 2016-02-28 18:04:52 CST; 207ms ago</div><div class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"> Main PID: 24777 (kube-controller)</div><div class="line">   CGroup: /system.slice/kube-controller-manager.service</div><div class="line">           └─24777 /usr/bin/kube-controller-manager <span class="comment">--logtostderr=true --v=0 --master=http://centos-master:8080</span></div><div class="line"></div><div class="line">2月 28 18:04:52 Centos-L410 systemd[1]: Started Kubernetes Controller Manager.</div><div class="line">2月 28 18:04:52 Centos-L410 systemd[1]: Starting Kubernetes Controller Manager...</div><div class="line">2月 28 18:04:52 Centos-L410 kube-controller-manager[24777]: I0228 18:04:52.714705   24777 plugins.go:71] No cloud...ed.</div><div class="line">2月 28 18:04:52 Centos-L410 kube-controller-manager[24777]: I0228 18:04:52.722761   24777 nodecontroller.go:133] ...er.</div><div class="line">2月 28 18:04:52 Centos-L410 kube-controller-manager[24777]: E0228 18:04:52.722944   24777 controllermanager.go:27...er.</div><div class="line">Hint: Some lines were ellipsized, <span class="operator"><span class="keyword">use</span> -l <span class="keyword">to</span> <span class="keyword">show</span> <span class="keyword">in</span> <span class="keyword">full</span>.</span></div><div class="line">● kube-scheduler.service - Kubernetes Scheduler <span class="keyword">Plugin</span></div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-scheduler.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 2016-02-28 18:04:52 CST; 187ms ago</div><div class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"> Main PID: 24829 (kube-scheduler)</div><div class="line">   CGroup: /system.slice/kube-scheduler.service</div><div class="line">           └─24829 /usr/bin/kube-scheduler <span class="comment">--logtostderr=true --v=0 --master=http://centos-master:8080</span></div><div class="line"></div><div class="line">2月 28 18:04:52 Centos-L410 systemd[1]: Started Kubernetes Scheduler Plugin.</div><div class="line">2月 28 18:04:52 Centos-L410 systemd[1]: Starting Kubernetes Scheduler Plugin...</div></pre></td></tr></table></figure></p>
<h2>工作节点配置和启动</h2>
<p>在工作节点上配置如下，<code>vi /etc/kubernetes/kubelet</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The address for the info server to serve on</span></div><div class="line"><span class="variable">KUBELET_ADDRESS=</span><span class="string">"--address=0.0.0.0"</span></div><div class="line"></div><div class="line"><span class="comment"># The port for the info server to serve on</span></div><div class="line"><span class="variable">KUBELET_PORT=</span><span class="string">"--port=10250"</span></div><div class="line"></div><div class="line"><span class="comment"># You may leave this blank to use the actual hostname</span></div><div class="line"><span class="variable">KUBELET_HOSTNAME=</span><span class="string">"--hostname-override=centos-minion"</span></div><div class="line"></div><div class="line"><span class="comment"># Location of the api-server</span></div><div class="line"><span class="variable">KUBELET_API_SERVER=</span><span class="string">"--api-servers=http://centos-master:8080"</span></div><div class="line"></div><div class="line"><span class="comment"># Add your own!</span></div><div class="line"><span class="variable">KUBELET_ARGS=</span><span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>然后用以下命令启动，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet docker; <span class="keyword">do</span> </div><div class="line">    systemctl restart <span class="variable">$SERVICES</span></div><div class="line">    systemctl enable <span class="variable">$SERVICES</span></div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>将以上脚本保存在脚本<code>start_kubernetes_work.sh</code>中。以下是运行输出，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 kubernetes]<span class="comment"># ./start_kubernetes_work.sh </span></div><div class="line">● kube-proxy.service - Kubernetes Kube-Proxy Server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-proxy.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 <span class="number">2016</span>-<span class="number">02</span>-<span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> CST; <span class="number">307</span>ms ago</div><div class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"> Main PID: <span class="number">24880</span> (kube-proxy)</div><div class="line">   CGroup: /system.slice/kube-proxy.service</div><div class="line">           ├─<span class="number">24880</span> /usr/bin/kube-proxy <span class="variable">--logtostderr=</span><span class="constant">true</span> <span class="variable">--v=</span><span class="number">0</span> <span class="variable">--master=</span>http://centos-master:<span class="number">8080</span></div><div class="line">           └─<span class="number">24939</span> iptables -w -C KUBE-PORTALS-HOST -t nat -m comment --comment default/kubernetes:https -p tcp -m tc...</div><div class="line"></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 systemd[<span class="number">1</span>]: Started Kubernetes Kube-Proxy Server.</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 systemd[<span class="number">1</span>]: Starting Kubernetes Kube-Proxy Server...</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 kube-proxy[<span class="number">24880</span>]: E0228 <span class="number">18</span>:<span class="number">05</span>:<span class="number">15.932316</span>   <span class="number">24880</span> server.go:<span class="number">324</span>] Not trying iptables...found</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 kube-proxy[<span class="number">24880</span>]: E0228 <span class="number">18</span>:<span class="number">05</span>:<span class="number">15.966946</span>   <span class="number">24880</span> proxier.go:<span class="number">193</span>] Error removing pur...ctory</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 kube-proxy[<span class="number">24880</span>]: Try `iptables -h' <span class="constant">or</span> 'iptables --help' for more information.</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 kube-proxy[<span class="number">24880</span>]: E0228 <span class="number">18</span>:<span class="number">05</span>:<span class="number">15.970419</span>   <span class="number">24880</span> proxier.go:<span class="number">197</span>] Error removing pur...ctory</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">15</span> Centos-L410 kube-proxy[<span class="number">24880</span>]: Try `iptables -h' <span class="constant">or</span> 'iptables --help' for more information.</div><div class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</div><div class="line">● kubelet.service - Kubernetes Kubelet Server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 <span class="number">2016</span>-<span class="number">02</span>-<span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">17</span> CST; <span class="number">282</span>ms ago</div><div class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"> Main PID: <span class="number">25036</span> (kubelet)</div><div class="line">   CGroup: /system.slice/kubelet.service</div><div class="line">           └─<span class="number">25036</span> /usr/bin/kubelet <span class="variable">--logtostderr=</span><span class="constant">true</span> <span class="variable">--v=</span><span class="number">0</span> <span class="variable">--api-servers=</span>http://centos-master:<span class="number">8080</span> <span class="variable">--address=</span><span class="number">0.0</span>.<span class="number">0</span>....</div><div class="line"></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">17</span> Centos-L410 systemd[<span class="number">1</span>]: Started Kubernetes Kubelet Server.</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">17</span> Centos-L410 systemd[<span class="number">1</span>]: Starting Kubernetes Kubelet Server...</div><div class="line">● docker.service - Docker Application Container Engine</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 日 <span class="number">2016</span>-<span class="number">02</span>-<span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> CST; <span class="number">245</span>ms ago</div><div class="line">     Docs: http://docs.docker.com</div><div class="line"> Main PID: <span class="number">25120</span> (docker)</div><div class="line">   CGroup: /system.slice/docker.service</div><div class="line">           └─<span class="number">25120</span> /usr/bin/docker daemon</div><div class="line"></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.069063505+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Option De...idge"</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.069114767+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Option De...idge"</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.081358591+08:00"</span> <span class="variable">level=</span>warning <span class="variable">msg=</span><span class="string">"Runnin...us 1"</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.089480121+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Firewalld...alse"</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.386325219+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Loading c...art."</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: ..........</div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.391606225+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Loading c...one."</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.391633742+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Daemon ha...tion"</span></div><div class="line"><span class="number">2</span>月 <span class="number">28</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span> Centos-L410 docker[<span class="number">25120</span>]: <span class="variable">time=</span><span class="string">"2016-02-28T18:05:18.391658744+08:00"</span> <span class="variable">level=</span>info <span class="variable">msg=</span><span class="string">"Docker da...entos</span></div><div class="line">2月 28 18:05:18 Centos-L410 systemd[1]: Started Docker Application Container Engine.</div><div class="line">Hint: Some lines were ellipsized, use -l to show in full.</div></pre></td></tr></table></figure></p>
<h2>检查 Kubernetes 运行</h2>
<p>运行以下命令可以查到工作节点，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="property">@Centos</span>-L410 kubernetes]<span class="comment"># kubectl get nodes</span></div><div class="line">NAME            LABELS                                 STATUS    AGE</div><div class="line">centos-minion   kubernetes.io/hostname=centos-minion   Ready     <span class="number">50</span>s</div><div class="line">[root<span class="property">@Centos</span>-L410 kubernetes]<span class="comment"># kubectl cluster-info</span></div><div class="line">Kubernetes master <span class="keyword">is</span> running at <span class="attribute">http</span>:<span class="regexp">//</span><span class="attribute">localhost</span>:<span class="number">8080</span></div></pre></td></tr></table></figure></p>
<h2>常用脚本</h2>
<p>常用的 Kubernetes 的脚本，总共6个，分别是对主节点和工作节点的启动、停止和获取状态，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#start_kubernetes.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler; <span class="keyword">do</span> </div><div class="line">    systemctl restart <span class="variable">$SERVICES</span></div><div class="line">    systemctl enable <span class="variable">$SERVICES</span></div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#start_kubernetes_work.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet docker; <span class="keyword">do</span> </div><div class="line">    systemctl restart <span class="variable">$SERVICES</span></div><div class="line">    systemctl enable <span class="variable">$SERVICES</span></div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#status_kubernetes.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler; <span class="keyword">do</span> </div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#status_kubernetes_work.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet docker; <span class="keyword">do</span> </div><div class="line">    systemctl status <span class="variable">$SERVICES</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#stop_kubernetes.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler; <span class="keyword">do</span> </div><div class="line">    systemctl stop <span class="variable">$SERVICES</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#stop_kubernetes_work.sh</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet docker; <span class="keyword">do</span> </div><div class="line">    systemctl stop <span class="variable">$SERVICES</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h2>启动一个 mysql</h2>
<p>新建一个 mysql-pod.yaml 文件，用于描述 pod，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  <span class="property">name</span>: mysql</div><div class="line">  labels:</div><div class="line">    <span class="property">name</span>: mysql</div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">    - resources:</div><div class="line">        limits :</div><div class="line">          cpu: <span class="number">0.5</span></div><div class="line">      image: docker.io/mysql</div><div class="line">      <span class="property">name</span>: mysql</div><div class="line">      env:</div><div class="line">        - <span class="property">name</span>: MYSQL_ROOT_PASSWORD</div><div class="line">          <span class="comment"># change this</span></div><div class="line">          value: <span class="string">"111111"</span></div><div class="line">      ports:</div><div class="line">        - containerPort: <span class="number">3306</span></div><div class="line">          hostPort: <span class="number">3326</span></div><div class="line">          <span class="property">name</span>: mysql</div><div class="line">      volumeMounts:</div><div class="line">          <span class="comment"># name must match the volume name below</span></div><div class="line">        - <span class="property">name</span>: mysql-persistent-storage</div><div class="line">          <span class="comment"># mount path within the container</span></div><div class="line">          mountPath: /var/lib/mysql</div><div class="line">  volumes:</div><div class="line">    - <span class="property">name</span>: mysql-persistent-storage</div><div class="line">      hostPath:</div><div class="line">        path: /home/arnes/kubernetes/mysql-kube-data</div></pre></td></tr></table></figure></p>
<p>然后启动这个 pod，检查状态，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 kubernetes]# kubectl <span class="operator"><span class="keyword">create</span> -f mysql-pod.yaml </span></div><div class="line">pod <span class="string">"mysql"</span> created</div><div class="line">[root@Centos-L410 kubernetes]# kubectl <span class="keyword">get</span> pods</div><div class="line">NAME      READY     <span class="keyword">STATUS</span>    RESTARTS   AGE</div><div class="line">mysql     <span class="number">0</span>/<span class="number">1</span>       Pending   <span class="number">0</span>          <span class="number">31</span>s</div><div class="line">[root@Centos-L410 kubernetes]# kubectl <span class="keyword">get</span> pods mysql</div><div class="line">NAME      READY     <span class="keyword">STATUS</span>    RESTARTS   AGE</div><div class="line">mysql     <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">8</span>s</div><div class="line">[root@Centos-L410 kubernetes]# kubectl <span class="keyword">describe</span> pod mysql </div><div class="line">Name:				mysql</div><div class="line">Namespace:			<span class="keyword">default</span></div><div class="line">Image(s):			docker.io/mysql</div><div class="line">Node:				centos-minion/<span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span></div><div class="line"><span class="keyword">Start</span> <span class="keyword">Time</span>:			Sun, <span class="number">28</span> Feb <span class="number">2016</span> <span class="number">22</span>:<span class="number">21</span>:<span class="number">48</span> +<span class="number">0800</span></div><div class="line">Labels:				name=mysql</div><div class="line"><span class="keyword">Status</span>:				Running</div><div class="line">Reason:				</div><div class="line">Message:			</div><div class="line">IP:				<span class="number">172.17</span><span class="number">.1</span><span class="number">.26</span></div><div class="line">Replication Controllers:	&lt;none&gt;</div><div class="line">Containers:</div><div class="line">  mysql:</div><div class="line">    Container ID:	docker://<span class="number">4</span>ea08f19a85e71084bef939524f9adffd733944744fdb31dcfd25ba2ccb087fb</div><div class="line">    Image:		docker.io/mysql</div><div class="line">    Image ID:		docker://<span class="number">082e0</span>ea24cc00eced7b39d88f46e508ab83298f79e008b1e5d7fb0c928ff692b</div><div class="line">    QoS Tier:</div><div class="line">      cpu:	Guaranteed</div><div class="line">      memory:	BestEffort</div><div class="line">    Limits:</div><div class="line">      cpu:	<span class="number">500</span>m</div><div class="line">    Requests:</div><div class="line">      cpu:		<span class="number">500</span>m</div><div class="line">    State:		Running</div><div class="line">      Started:		Sun, <span class="number">28</span> Feb <span class="number">2016</span> <span class="number">22</span>:<span class="number">21</span>:<span class="number">55</span> +<span class="number">0800</span></div><div class="line">    Ready:		<span class="literal">True</span></div><div class="line">    Restart <span class="keyword">Count</span>:	<span class="number">0</span></div><div class="line">    Environment <span class="keyword">Variables</span>:</div><div class="line">      MYSQL_ROOT_PASSWORD:	<span class="number">111111</span></div><div class="line">Conditions:</div><div class="line">  Type		<span class="keyword">Status</span></div><div class="line">  Ready 	<span class="literal">True</span> </div><div class="line">Volumes:</div><div class="line">  mysql-persistent-storage:</div><div class="line">    Type:	HostPath (bare host directory volume)</div><div class="line">    Path:	/home/arnes/kubernetes/mysql-kube-<span class="keyword">data</span></div><div class="line"><span class="keyword">Events</span>:</div><div class="line">  FirstSeen	LastSeen	<span class="keyword">Count</span>	<span class="keyword">From</span>			SubobjectPath				Reason		Message</div><div class="line">  ─────────	────────	─────	────			─────────────				──────		───────</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{scheduler }							Scheduled	Successfully assigned mysql <span class="keyword">to</span> centos-minion</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	implicitly required container POD	Pulled		Container image <span class="string">"registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span> already present <span class="keyword">on</span> machine</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	implicitly required container POD	Created		Created <span class="keyword">with</span> docker id <span class="number">84660e3722</span>fa</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	implicitly required container POD	Started		Started <span class="keyword">with</span> docker id <span class="number">84660e3722</span>fa</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	spec.containers{mysql}			Pulled		Container image <span class="string">"docker.io/mysql"</span> already present <span class="keyword">on</span> machine</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	spec.containers{mysql}			Created		Created <span class="keyword">with</span> docker id <span class="number">4</span>ea08f19a85e</div><div class="line">  <span class="number">4</span>m		<span class="number">4</span>m		<span class="number">1</span>	{kubelet centos-minion}	spec.containers{mysql}			Started		Started <span class="keyword">with</span> docker id <span class="number">4</span>ea08f19a85e</div></pre></td></tr></table></figure></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.1/docs/getting-started-guides/centos/centos_manual_config.md" target="_blank" rel="external">https://github.com/kubernetes/kubernetes/blob/release-1.1/docs/getting-started-guides/centos/centos_manual_config.md</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.mamicode.com/info-detail-1129211.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-1129211.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes 原理简介（续）]]></title>
    <link href="http://valleylord.github.io/post/201602-kubernetes-concepts2/"/>
    <id>http://valleylord.github.io/post/201602-kubernetes-concepts2/</id>
    <published>2016-02-20T06:51:08.000Z</published>
    <updated>2016-02-20T08:05:15.579Z</updated>
    <content type="html"><![CDATA[<h2>Kubernetes 的调度流程</h2>
<p>Controller Manager 是集群内部的管理控制中心，负责集群内的 Node、Pod副本、Endpoint、Namespace、Service Account、Resource Quota 等的管理，并执行自动化修复流程，以确保集群处于预期的工作状态。</p>
<p>Controller Manager 内部包含，Replication Controller、Node Controller、ResourceQuota Controller、Namespace Controller、ServiceAccount Controller、Token Controller、Service Controller、Endpoint Controller 等。Controller Manager 通过这些子控制器通过 API Server 监控系统的共享状态，并不断修正系统的状态，直到系统处于设定的“预期状态”。这些控制器的具体作用如下：</p>
<ul>
<li>Replication Controller 的作用是确保集群中一个 RC 所关联的 Pod 都保持一定数量的 Pod 副本处于正常运行状态。如果 Pod 副本数过多，则销毁一些 Pod 副本；反之，则添加 Pod 副本。</li>
<li>Node Controller 负责发现、管理和监控集群中的各个 Node 节点。Kuberlet 在启动时通过 API Server 注册节点信息，并定时向 API Server 发送节点信息。Node Controller 通过 API Server 定期读取这些信息，并予以处理。</li>
<li>ResourceQuota Controller 确保指定的对象在额定的系统资源内工资，不会超量占用，避免某些业务进程的设计实现导致整个系统宕机。</li>
<li>Namespace Controller 通过 API Server 定时读取 Namespace 的信息，并删除标记为“Terminating”的 Namespace，同时，删除该 Namespace 下的 ServiceAccount、RC、Pod、Secret、ResourceQuota 等资源。</li>
<li>ServiceAccount Controller 与 Token Controller 是与安全相关的，主要负责默认账户的创建、私钥的管理、证书和 Token 的管理等。</li>
<li>Service Controller 监控 Service 的变化，确保外部 LoadBalancer 被更新。</li>
<li>Endpoint Controller 监控 Service 和 Pod 的变化。如果 Service 被删除，则删除和 Service 对应的 Endpoint 对象。</li>
</ul>
<h2>Pod、RC和Service的关系</h2>
<p>Pod 是一组容器的一个“单一集合体”，Kubernetes 中的最小任务调度单元。Pod 可以被调度到任意 Node 上恢复，同一个 Pod 里的所有容器共享资源（网络、Volumes 等）。</p>
<p>RC（Replication Controller）是 Pod 的副本控制器，用于限定某种 Pod 的实例个数，属于服务集群的控制范畴。</p>
<p>Service 可以看做一组相同作用的 Pod 对外访问的接口。</p>
<p>可见，Service 管理的是 Pod 组成的集群，以集群的方式来提供服务。在集群中，Pod 可能被 RC 销毁并再次创建，因此 RC 是用来控制 Service 内的 Pod 数量，是处于 Service 和 Pod 之间的一个管理层。</p>
<h2>Service 的 Cluster IP 和 NodePort</h2>
<p>Pod 的 IP 地址是 Docker 分配的，相对而言并不固定，由于 Pod 的生命周期比较短暂，可能被 RC 重新创建，因此新的 Pod 的 IP 也可能会变化。但是， Service 的 Cluster IP 相对固定，是由 Kubernetes 系统动态分配的，在Service 被关闭之前不会再变化。</p>
<p>Node 是 Kubernetes 集群中的实际节点，NodePort 是节点上的实际端口，通过访问这个端口，就能访问内部的 Service 了。</p>
<h2>Kubernetes 集群的优势</h2>
<p>Kubernetes 集群的优势主要在于以下一些地方，</p>
<ol>
<li>可以很容易的开发和部署分布式系统。</li>
<li>Kubernetes 是为微服务架构提供了很好的支持。将一个复杂的应用分解成多个互相连接的微服务，这就是微服务的思想。</li>
<li>可以无缝迁移到云服务。</li>
<li>横向扩展能力强。一个微服务背后可能有多个副本在支持，副本的多少可以随负载的情况来调整，可伸缩性大大加强。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2>Kubernetes 的调度流程</h2>
<p>Controller Manager 是集群内部的管理控制中心，负责集群内的 Node、Pod副本、Endpoint、Namespace、Service Account、Resource Quota 等的管理，并执行自动化]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT多节点sql]]></title>
    <link href="http://valleylord.github.io/post/201602-mycat-multinode-sql/"/>
    <id>http://valleylord.github.io/post/201602-mycat-multinode-sql/</id>
    <published>2016-02-13T07:14:32.000Z</published>
    <updated>2016-02-14T04:56:40.005Z</updated>
    <content type="html"><![CDATA[<p>MyCAT在多节点（MultiNode）的查询和事务上提供了非常不错的支持，但也有一些限制，本文将部分特性予以讨论。</p>
<h2>多分片排序查询</h2>
<p>在执行类似这样的sql，<code>select * from travelrecord order by fee limit 100000,100</code>，的时候，MyCAT的处理比较简单，将sql改写为：<code>select * from travelrecord order by  fee limit  0,100000+100</code>发给每个分片去执行，然合排序，取出100条记录。如果每个分片都有200万数据，总共10个分片，那么就要处理200*10=2000万数据。当然这样的做法比较简单有效，却并不优化。</p>
<p>实验如下，travelrecord表的建表语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> travelrecord (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>,user_id <span class="built_in">varchar</span>(<span class="number">100</span>),traveldate <span class="built_in">DATE</span>, fee <span class="built_in">decimal</span>,days <span class="built_in">int</span>);</span></div></pre></td></tr></table></figure></p>
<p>先使用python做出大约100万条测试数据的travelrecord表，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line">import MySQLdb;</div><div class="line">import random;</div><div class="line">import string;</div><div class="line"></div><div class="line">conn= MySQLdb.<span class="keyword">connect</span>(</div><div class="line">        host=<span class="string">'workstation'</span>,</div><div class="line">        port = <span class="number">8066</span>,</div><div class="line">        user=<span class="string">'test'</span>,</div><div class="line">        passwd=<span class="string">'test'</span>,</div><div class="line">        db =<span class="string">'TESTDB'</span>,</div><div class="line">        )</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i in range(<span class="number">4500000</span>,<span class="number">5500000</span>):</div><div class="line">    id_pk = i;</div><div class="line">    <span class="comment"># random user id</span></div><div class="line">    user_id = string.<span class="keyword">join</span>(random.sample(<span class="string">'zyxwvutsrqponmlkjihgfedcba'</span>,<span class="number">5</span>)).replace(<span class="string">' '</span>,<span class="string">''</span>);</div><div class="line">    traveldate = <span class="string">'2016-02-13'</span>;</div><div class="line">    fee = <span class="number">100</span> + random.random()*<span class="number">10</span>;</div><div class="line">    days = <span class="number">3</span>;</div><div class="line">    sqli=<span class="string">"insert into travelrecord (id,user_id,traveldate,fee,days) values (<span class="variable">%s</span>,<span class="variable">%s</span>,<span class="variable">%s</span>,<span class="variable">%s</span>,<span class="variable">%s</span>)"</span></div><div class="line">    cur.execute(sqli,(id_pk, user_id, traveldate, fee, days))</div><div class="line"></div><div class="line">cur.<span class="keyword">close</span>()</div><div class="line">conn.commit()</div><div class="line">conn.<span class="keyword">close</span>()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Insert Done."</span></div></pre></td></tr></table></figure></p>
<p>然后分别执行如下sql，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">order</span> <span class="keyword">by</span> fee <span class="keyword">limit</span> <span class="number">1000</span>,<span class="number">100</span></span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">order</span> <span class="keyword">by</span> fee <span class="keyword">limit</span> <span class="number">10000</span>,<span class="number">100</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">order</span> <span class="keyword">by</span> fee <span class="keyword">limit</span> <span class="number">100000</span>,<span class="number">100</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">order</span> <span class="keyword">by</span> fee <span class="keyword">limit</span> <span class="number">1000000</span>,<span class="number">100</span></div></pre></td></tr></table></figure></p>
<p>执行结果如下（为了便于显示结果，稍微修改了一下sql，不影响结论），</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; select * from travelrecord order by fee limit 1000,10;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 5007747 | kxypj   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5007707 | qzkuf   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5007966 | agcpd   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5001525 | uxwhz   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5003049 | vnpkg   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5008317 | ijvrz   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5008381 | zuwcr   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5007470 | xicgh   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5004417 | zheyd   | 2016-02-13 |  100 |    3 |</div><div class="line"><span class="header">| 5003625 | tbdhx   | 2016-02-13 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">10 rows in set (0.64 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord order by fee limit 10000,10;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 5157892 | uzwyd   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157894 | wpqvi   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157912 | qpmia   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157935 | kotqb   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157941 | axpqr   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157950 | gxjvl   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157956 | psgcn   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5157980 | xcnwe   | 2016-02-13 |  100 |    3 |</div><div class="line">| 5158013 | mrosy   | 2016-02-13 |  100 |    3 |</div><div class="line"><span class="header">| 5499548 | cswpa   | 2016-02-13 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">10 rows in set (1.42 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord order by fee limit 100000,10;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 5294771 | hzdqa   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294769 | xzndi   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294761 | edmsj   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294752 | nrcmx   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294744 | syanq   | 2016-02-13 |  101 |    3 |</div><div class="line">| 4529145 | jqkcf   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294735 | auekc   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294734 | anhtb   | 2016-02-13 |  101 |    3 |</div><div class="line">| 5294732 | isflj   | 2016-02-13 |  101 |    3 |</div><div class="line"><span class="header">| 5294711 | undpo   | 2016-02-13 |  101 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">10 rows in set (2.12 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord order by fee limit 900000,10;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 4530570 | lqzda   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530567 | yaesg   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530545 | oiyrq   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530537 | vibfu   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530534 | lwzfd   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530498 | dtvcu   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530495 | vfqli   | 2016-02-13 |  109 |    3 |</div><div class="line">| 4530481 | ycfon   | 2016-02-13 |  109 |    3 |</div><div class="line">| 5031809 | janwy   | 2016-02-13 |  109 |    3 |</div><div class="line"><span class="header">| 5031831 | utaco   | 2016-02-13 |  109 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">10 rows in set (4.29 sec)</div></pre></td></tr></table></figure></p>
<p>可见，对于<code>limit M, N</code>类型的sql查询，MyCAT至少需要在每个分片上进行M+N量级的排序，因此当M变大，N不不变的时候，虽然返回结果的数量没有变化，但是总的耗时却增加了。对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.548</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord order by fee limit <span class="number">100000</span>,<span class="number">10</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.548</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">70</span>) -SQLRouteCache hit cache ,key:TESTDBselect * from travelrecord order by fee limit <span class="number">100000</span>,<span class="number">10</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.549</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord order by fee limit <span class="number">100000</span>,<span class="number">10</span>, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}</div><div class="line">} rrs </div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.549</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query select * from travelrecord order by fee limit <span class="number">100000</span>,<span class="number">10</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.549</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">97</span>) -has data merge logic </div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.549</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.549</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.558</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.559</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (DataMergeService.java:<span class="number">94</span>) -field metadata inf:[<span class="variable">DAYS=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">4</span>, <span class="variable">colType=</span><span class="number">3</span>], <span class="variable">USER_ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">1</span>, <span class="variable">colType=</span><span class="number">253</span>], <span class="variable">ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">0</span>, <span class="variable">colType=</span><span class="number">8</span>], <span class="variable">TRAVELDATE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">2</span>, <span class="variable">colType=</span><span class="number">10</span>], <span class="variable">FEE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">3</span>, <span class="variable">colType=</span><span class="number">246</span>]]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.559</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.559</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">06.559</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">08.228</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">9</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">08.228</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">9</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">08.228</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">9</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">09.454</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">09.455</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">ORDER BY fee</div><div class="line">LIMIT <span class="number">0</span>, <span class="number">100010</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">4</span>fa37362, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">09.455</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455355446538</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">09.468</span>  DEBUG [BusinessExecutor7] (DataMergeService.java:<span class="number">296</span>) -prepare mpp merge result for select * from travelrecord order by fee limit <span class="number">100000</span>,<span class="number">10</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">09.468</span>  DEBUG [BusinessExecutor7] (MultiNodeQueryHandler.java:<span class="number">324</span>) -last packet id:<span class="number">18</span></div></pre></td></tr></table></figure></p>
<p>注意，log中显示，sql已经被改写为</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SELECT</span> *</span></div><div class="line"><span class="keyword">FROM</span> travelrecord</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> fee</div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">100010</span></div></pre></td></tr></table></figure></p>
<p>，并在每个分片上执行。</p>
<h2>分布式事务</h2>
<p>分布式事务的模型比较复杂，主要也是两阶段提交的思路，先预先写数据，然后提交。</p>
<p>MyCAT的事务支持是弱XA的，事务内的SQL在各自分片上执行并且返回状态码，如果某个分片上的返回码为error，MyCAT就认为本次事务失败了，此时将会一次回滚事务所涉及到的所有分片。反之，如果所有的分片都返回成功的返回码，则当AP（应用程序）提交事务的时候，MyCAT会同时向事务涉及的所有分片发送提交事务的命令。</p>
<p>之所以说是弱XA，是因为在二阶段提交的过程中，若commit时某个节点出错了，只能回滚，而不会等其恢复后再次提交。</p>
<p>下面分析一下MyCAT分布式事务的日志，使用测试表customer1，使用主键<code>id</code>列取模3的余数来分片，建表和初始数据语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer1 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'20160131'</span>);</span></div></pre></td></tr></table></figure></p>
<p>先执行一条insert语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'20160213'</span>), (<span class="number">40001</span>, <span class="string">'eee'</span>, <span class="string">'20160213'</span>) ;</span></div></pre></td></tr></table></figure></p>
<p>该语句会在customer1的两个分片上分别插入一条数据（即分布式事务），对应的MyCAT的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">34.979</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">34.980</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>'), <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>')}</div><div class="line">   <span class="number">2</span> -&gt; dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}</div><div class="line">} rrs </div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">34.980</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query insert into customer1(id, name, register_date) values (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">35.016</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">true</span> from MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455356734980</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">3</span>f0911ed, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">35.016</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">true</span> from MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1455356734980</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">7</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">3</span>f0911ed, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">35.016</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455356734980</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">3</span>f0911ed, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">35.016</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">10</span>, <span class="variable">lastTime=</span><span class="number">1455356734980</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">14</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">35.016</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1455356734980</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">7</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40000</span>, 'ddd', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">3</span>f0911ed, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div></pre></td></tr></table></figure></p>
<p>此时，如果再执行另一个sql，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">40002</span>, <span class="string">'fff'</span>, <span class="string">'20160213'</span>), (<span class="number">40001</span>, <span class="string">'eee'</span>, <span class="string">'20160213'</span>) ;</span></div></pre></td></tr></table></figure></p>
<p>当然会因为主键40001冲突而发生错误，对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.047</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.048</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>'), <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}</div><div class="line">   <span class="number">2</span> -&gt; dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}</div><div class="line">} rrs </div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.048</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.049</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">8</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">7</span>de649b5, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.049</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">8</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.049</span>   WARN [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeHandler.java:<span class="number">127</span>) -error response from MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">false</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">8</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>] err Duplicate entry '<span class="number">40001</span>' for key 'PRIMARY' code:<span class="number">1062</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.085</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">true</span> from MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">7</span>de649b5, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.085</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">7</span>de649b5, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.085</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455357016040</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">16.085</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeHandler.java:<span class="number">194</span>) -error all end ,clear session resource</div></pre></td></tr></table></figure></p>
<p>以上两个sql，MyCAT的返回如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into customer1(id, name, register_date) values (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'20160213'</span>), (<span class="number">40001</span>, <span class="string">'eee'</span>, <span class="string">'20160213'</span>) ;</div><div class="line"><span class="class">Query</span> <span class="class">OK</span>, <span class="number">2</span> rows affected (<span class="number">0.04</span> sec)</div><div class="line"></div><div class="line">mysql&gt; insert into customer1(id, name, register_date) values (<span class="number">40002</span>, <span class="string">'fff'</span>, <span class="string">'20160213'</span>), (<span class="number">40001</span>, <span class="string">'eee'</span>, <span class="string">'20160213'</span>) ;</div><div class="line"><span class="class">ERROR</span> <span class="number">1105</span> (<span class="class">HY000</span>): <span class="class">Duplicate</span> entry <span class="string">'40001'</span> for key <span class="string">'PRIMARY'</span></div><div class="line">mysql&gt; select * from customer1;</div><div class="line">+-------+------+---------------+</div><div class="line"><span class="localvars">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line">| <span class="number">10000</span> <span class="localvars">| aaa  |</span> <span class="number">2016</span>-<span class="number">01</span>-<span class="number">31</span>    |</div><div class="line">| <span class="number">40000</span> <span class="localvars">| ddd  |</span> <span class="number">2016</span>-<span class="number">02</span>-<span class="number">13</span>    |</div><div class="line">| <span class="number">20000</span> <span class="localvars">| bbb  |</span> <span class="number">2016</span>-<span class="number">01</span>-<span class="number">31</span>    |</div><div class="line">| <span class="number">40001</span> <span class="localvars">| eee  |</span> <span class="number">2016</span>-<span class="number">02</span>-<span class="number">13</span>    |</div><div class="line">| <span class="number">30000</span> <span class="localvars">| ccc  |</span> <span class="number">2016</span>-<span class="number">01</span>-<span class="number">31</span>    |</div><div class="line">| <span class="number">40002</span> <span class="localvars">| fff  |</span> <span class="number">2016</span>-<span class="number">02</span>-<span class="number">13</span>    |</div><div class="line">+-------+------+---------------+</div><div class="line"><span class="number">6</span> rows in set (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure></p>
<p>对于后一条sql，MyCAT的返回结果与单节点的mysql不一致，这可能是有问题的。对于mysql，后一条sql已经报错，那么整条语句都应当被rollback，即没有一笔数据可以插入；但对于MyCAT，即使其遵守弱XA模型，该错误是发生在sql的执行时期，而非commit时期，因此，应当报错并整条语句rollback。这可能是MyCAT的一个bug，该错误发生在启用autocommit<code>autocommit=1</code>的时候。如果关闭autocommit<code>autocommit=0</code>，并手动rollback，会得到不同的结果，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set autocommit=0;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into customer1(id, name, register<span class="emphasis">_date) values (40002, 'fff', '20160213'), (40001, 'eee', '20160213') ;</span></div><div class="line">ERROR 1105 (HY000): Duplicate entry '40001' for key 'PRIMARY'</div><div class="line">mysql&gt; select * from customer1;</div><div class="line">ERROR 1003 (HY000): Transaction error, need to rollback.Duplicate entry '40001' for key 'PRIMARY'</div><div class="line">mysql&gt; commit;</div><div class="line">ERROR 1003 (HY000): Transaction error, need to rollback.</div><div class="line">mysql&gt; rollback;</div><div class="line">Query OK, 0 rows affected (0.05 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from customer1;</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line">| 10000 | aaa  | 2016-01-31    |</div><div class="line">| 40000 | ddd  | 2016-02-13    |</div><div class="line">| 20000 | bbb  | 2016-01-31    |</div><div class="line">| 40001 | eee  | 2016-02-13    |</div><div class="line"><span class="header">| 30000 | ccc  | 2016-01-31    |</span></div><div class="line">+-------+------+---------------+</div><div class="line">5 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>insert语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.385</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.386</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">schema=</span>TESTDB]insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>'), <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}</div><div class="line">   <span class="number">2</span> -&gt; dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}</div><div class="line">} rrs </div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.386</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query insert into customer1(id, name, register_date) values (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>'), (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.386</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET <span class="variable">autocommit=</span><span class="number">0</span>;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507386</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.387</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET <span class="variable">autocommit=</span><span class="number">0</span>;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507387</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.387</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">286</span>a4c10, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.388</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">true</span> from MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.387</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">35</span>b287d8, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.388</span>   WARN [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeHandler.java:<span class="number">127</span>) -error response from MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">35</span>b287d8, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>] err Duplicate entry '<span class="number">40001</span>' for key 'PRIMARY' code:<span class="number">1062</span></div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">07.388</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeHandler.java:<span class="number">194</span>) -error all end ,clear session resource</div></pre></td></tr></table></figure></p>
<p>rollback语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.243</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">schema=</span>TESTDB]rollback</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.243</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (RollbackNodeHandler.java:<span class="number">71</span>) -rollback job run for MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">35</span>b287d8, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.243</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (RollbackNodeHandler.java:<span class="number">71</span>) -rollback job run for MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">6258</span>e05a, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">361</span>) -clear session resources org.opencloudb.server.NonBlockingSession@<span class="number">535</span>dc7dc</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn3{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40001</span>, 'eee', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.RollbackNodeHandler@<span class="number">50237363</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">35</span>b287d8, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span>dn1{INSERT INTO customer1 (id, name, register_date)</div><div class="line">VALUES (<span class="number">40002</span>, 'fff', '<span class="number">20160213</span>')}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.RollbackNodeHandler@<span class="number">50237363</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (RollbackReleaseHandler.java:<span class="number">58</span>) -autocomit is <span class="constant">false</span>,but no commit <span class="constant">or</span> rollback ,so mycat rollbacked backend conn MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.RollbackReleaseHandler@<span class="number">76</span>e05d9e, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">35</span>b287d8, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">10</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.281</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (RollbackReleaseHandler.java:<span class="number">58</span>) -autocomit is <span class="constant">false</span>,but no commit <span class="constant">or</span> rollback ,so mycat rollbacked backend conn MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.RollbackReleaseHandler@<span class="number">36784733</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">true</span>]</div><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">09.282</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">8</span>, <span class="variable">lastTime=</span><span class="number">1455358507385</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p>而在发生sql错误和rollback语句之间的其他语句，几乎没有log，只有连接的log，类似这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">13</span> <span class="number">18</span>:<span class="number">16</span>:<span class="number">52.337</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">false</span>, <span class="variable">schema=</span>TESTDB]select * from customer1</div></pre></td></tr></table></figure></p>
<p>综上，MyCAT的分布式事务在关闭autocommit的时候才算是比较完整。</p>
<h2>mysql存储过程和函数的调用</h2>
<p>MyCAT本身是不支持存储过程和函数的，但可以通过使用MyCAT注解的方式来变相的实现多分片上存储过程的功能。MyCAT的注解主要有两种，一种是sql解析的注解，以<code>sql=</code>开头，表示不使用实际sql 的执行计划，而使用注解中的sql的执行计划；另一种是执行计划的注解，以<code>catlet=</code>开头，这个目前主要针对于表Join的情况，修改Join的执行计划，目前的ShareJoin只能完成两个表的join。调用存储过程和函数的注解主要是使用前一种。</p>
<p>在分片dn1上创建存储过程count_customer，输出customer1表中的数据总行数，存储过程代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span>  <span class="function"><span class="keyword">PROCEDURE</span> `<span class="title">count_customer</span>`<span class="params">(<span class="keyword">OUT</span> s int)</span></span></div><div class="line"><span class="title">BEGIN</span> </div><div class="line"></div><div class="line"><span class="title">SELECT</span> <span class="title">COUNT</span><span class="params">(*)</span> <span class="title">INTO</span> <span class="title">s</span> <span class="title">FROM</span> <span class="title">customer1</span>; </div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure></p>
<p>在MyCAT中，可以使用注解的方式来执行，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mysql&gt; /<span class="strong">*!mycat: sql=select *</span> from customer1 where id = 30000 <span class="strong">*/ set @p_out=0;</span></div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; /*!mycat: sql=select * from customer1 where id = 30000 */ select @p_out;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| @p_out |</span></div><div class="line">+--------+</div><div class="line"><span class="header">| NULL   |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; /<span class="strong">*!mycat: sql=select *</span> from customer1 where id = 30000 <span class="strong">*/ CALL count_customer(@p_out);</span></div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; /*!mycat: sql=select * from customer1 where id = 30000 */ select @p_out;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| @p_out |</span></div><div class="line">+--------+</div><div class="line"><span class="header">| NULL   |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可见，已经执行成功，但是因为MyCAT客户端不支持set变量，所以存储过程的返回值<code>p_out</code>没有传回来。甚至，MyCAT客户端连基本的变量设置值也没有支持，这样，连传入参数也无法完成。log如下，可见变量被忽略，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">02</span>/<span class="number">14</span> <span class="number">12</span>:<span class="number">54</span>:<span class="number">25.774</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]<span class="comment">/*!mycat: sql=select * from customer1 where id = 30000 */</span> set @<span class="variable">p_out=</span><span class="number">0</span></div><div class="line"><span class="number">02</span>/<span class="number">14</span> <span class="number">12</span>:<span class="number">54</span>:<span class="number">25.774</span>   WARN [$_NIOREACTOR-<span class="number">1</span>-RW] (SetHandler.java:<span class="number">127</span>) -ServerConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]<span class="comment">/*!mycat: sql=select * from customer1 where id = 30000 */</span> set @<span class="variable">p_out=</span><span class="number">0</span> is not recoginized <span class="constant">and</span> ignored</div></pre></td></tr></table></figure></p>
<p>如果要返回数值的话，可以使用函数，函数的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">`count_customer`</span>() <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"></div><div class="line"><span class="keyword">declare</span> s <span class="built_in">int</span>;</div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> s <span class="keyword">FROM</span> customer1;</span></div><div class="line">RETURN s;</div><div class="line"><span class="operator"><span class="keyword">END</span></span></div></pre></td></tr></table></figure></p>
<p>MyCAT中的执行结果如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; /*!mycat: sql=select id from customer1 */ select count_customer();</span></div><div class="line">+------------------+</div><div class="line"><span class="header">| count_customer() |</span></div><div class="line">+------------------+</div><div class="line">|                1 |</div><div class="line">|                2 |</div><div class="line"><span class="header">|                2 |</span></div><div class="line">+------------------+</div><div class="line">3 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>但是无法分清楚具体哪个分片上有几行数据，也不是很好用。</p>
<p>综上，MyCAT对mysql存储过程和函数的支持还是比较弱的，没有变量，对每个分片返回值也缺乏标识，毕竟，存储过程并不是分布式数据库面对的常见场景。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT在多节点（MultiNode）的查询和事务上提供了非常不错的支持，但也有一些限制，本文将部分特性予以讨论。</p>
<h2>多分片排序查询</h2>
<p>在执行类似这样的sql，<code>select * from travelrecord order by ]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT分片]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-sharding/"/>
    <id>http://valleylord.github.io/post/201601-mycat-sharding/</id>
    <published>2016-01-31T02:56:40.000Z</published>
    <updated>2016-01-31T13:46:24.686Z</updated>
    <content type="html"><![CDATA[<p>MyCAT提供了多种分片规则，本文以实例展示这些常用的分片方法。</p>
<h2>ER分片</h2>
<p>传统的表分片多数是采用连续（如时间分片）或离散（如hash分片）分片，这样分片在有表join的时候，需要访问所有分片上的表，消耗巨大。ER分片解决了这个问题，将有关联的数据放在同一个分片上，这样，在需要表join的时候，只需要访问单个分片上有关联的数据即可，降低了系统资源的消耗。常见的ER分片包括，按主键关联的ER分片，按其他字段的ER分片等。</p>
<h3>按主键关联的ER分片</h3>
<p>假设有customer和orders表，customer按主键id分片，orders表的customer_id列与customer按主键id关联。<code>schema.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"customer1"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">	<span class="variable">rule=</span><span class="string">"mod-long"</span>&gt;</div><div class="line">	&lt;childTable <span class="variable">name=</span><span class="string">"orders1"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">		<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">	&lt;/childTable&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure></p>
<p><code>rule.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"mod-long"</span> <span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMod"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- how many data nodes --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>建表语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer1 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> orders1 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, customer_id <span class="built_in">bigint</span>, order_date <span class="built_in">DATE</span>, money_paid <span class="built_in">decimal</span>);</span></div></pre></td></tr></table></figure></p>
<p>看一下插入是否已经执行分片，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into customer1(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.20 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (20000, 'bbb', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into customer1(id, name, register_date) values (20000, 'bbb', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (30000, 'ccc', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into customer1(id, name, register_date) values (30000, 'ccc', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>看来已经执行了分片，运行如下插入语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">10000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">20000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">30000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div></pre></td></tr></table></figure></p>
<p>执行中发现，对于order表的insert，没有explain，如果执行explain的话，会直接插入数据。执行查询语句，可以发现，已经使用了ER分片，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000;</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                           |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000 |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000;</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| id    | name | id    |</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| 10000 | aaa  | 90000 |</span></div><div class="line">+-------+------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>select语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.823</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss cache ,key:TESTDBselect c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.825</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (RouterUtil.java:<span class="number">951</span>) -try to find cache by primary key</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.825</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -TableID2DataNodeCache.TESTDB_CUSTOMER1  miss cache ,key:<span class="number">10000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">59</span>) -SQLRouteCache add cache ,key:TESTDBselect c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span> value:select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}</div><div class="line">}</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}</div><div class="line">} rrs</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.827</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1454235153813</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}, <span class="variable">respHandler=</span>SingleNodeHandler [<span class="variable">node=</span>dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}, <span class="variable">packetId=</span><span class="number">6</span>], <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.827</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1454235153813</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p>可见，只执行了dn2上的sql，其他分片上没有sql执行。</p>
<h3>按其他字段的ER分片</h3>
<p>仍然假设有customer和orders表，customer按列register_date分片，orders表的customer_id列与customer按主键id关联。<code>schema.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"customer2"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">	<span class="variable">rule=</span><span class="string">"sharding-by-namehash"</span>&gt;</div><div class="line">	&lt;childTable <span class="variable">name=</span><span class="string">"orders2"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">		<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">	&lt;/childTable&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure></p>
<p><code>rule.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-by-namehash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">columns</span>&gt;</span>name<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>namehash<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"namehash"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMurmurHash"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"seed"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"virtualBucketTimes"</span>&gt;</span>160<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>建表语句和插入语句与前文类似，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer2 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> orders2 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, customer_id <span class="built_in">bigint</span>, order_date <span class="built_in">DATE</span>, money_paid <span class="built_in">decimal</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'eee'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">10000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">20000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">30000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into customer2(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (20000, 'bbb', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into customer2(id, name, register_date) values (20000, 'bbb', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (30000, 'eee', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into customer2(id, name, register_date) values (30000, 'eee', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>查看select的explain，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa';</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                             |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa' |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa';</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| id    | name | id    |</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| 10000 | aaa  | 90000 |</span></div><div class="line">+-------+------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>select语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.975</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">70</span>) -SQLRouteCache hit cache ,key:TESTDBselect c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa', <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.977</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1454239975957</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">26</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}, <span class="variable">respHandler=</span>SingleNodeHandler [<span class="variable">node=</span>dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}, <span class="variable">packetId=</span><span class="number">6</span>], <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.977</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1454239975957</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">26</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.751</span>  DEBUG [Timer0] (SQLJob.java:<span class="number">85</span>) -con query sql:select user() to con:MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1454239976751</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">18</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.752</span>  DEBUG [Timer0] (SQLJob.java:<span class="number">85</span>) -con query sql:select user() to con:MySQLConnection [<span class="variable">id=</span><span class="number">11</span>, <span class="variable">lastTime=</span><span class="number">1454239976752</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.752</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1454239976741</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">18</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.753</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">11</span>, <span class="variable">lastTime=</span><span class="number">1454239976741</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p>可见，只在dn2上执行了sql，其他分片没有执行sql。</p>
<h2>连续分片</h2>
<p>MyCAT连续分片有很多方法，如，自定义数字范围分片、按日期（天）分片、按单月小时分片、自然月分片等。其特点是天然的支持范围查询sql，不需要去每个分片上查找，缺点是，多数分片方法有数据范围限制，本文介绍其中两种。</p>
<h3>自定义数字范围分片</h3>
<p>自定义数字范围分片是对指定的数字（一般是主键）指定所在范围进行分片，比较简单直观。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_c1"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-range"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-range"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-range"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.AutoPartitionByLong"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapFile"</span>&gt;</span>auto-sharding-range.txt<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上配置指定了，在mycat的<code>conf</code>目录下的<code>auto-sharding-range.txt</code>文件，作为范围分片文件，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># range start-end ,data node index</div><div class="line"># <span class="keyword">K</span>=<span class="number">1000</span>,M=<span class="number">10000.</span></div><div class="line"><span class="number">0</span>-<span class="number">50</span><span class="keyword">K</span>=<span class="number">0</span></div><div class="line"><span class="number">50</span><span class="keyword">K</span>-<span class="number">100</span><span class="keyword">K</span>=<span class="number">1</span></div><div class="line"><span class="number">100</span><span class="keyword">K</span>-<span class="number">150</span><span class="keyword">K</span>=<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>该配置表示，id在0~50K的时候，存在0分片（即dn1）；id在50~100K的时候，存在1分片（即dn2）；id在100K~150K的时候，存在2分片（即dn3）。</p>
<p>测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_c1(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">70000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">130000</span>, <span class="string">'ccc'</span>, <span class="string">'20160131'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                            |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_c1(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (70000, 'bbb', '20160131');</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                            |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_c1(id, name, register_date) values (70000, 'bbb', '20160131') |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (130000, 'ccc', '20160131');</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                             |</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_c1(id, name, register_date) values (130000, 'ccc', '20160131') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; explain insert into test<span class="emphasis">_c1(id, name, register_</span>date) values (150001, <span class="emphasis">'aaa'</span>, <span class="emphasis">'20160131'</span>);</div><div class="line">ERROR 1064 (HY000): can't find any valid datanode :TEST<span class="emphasis">_C1 -&gt; ID -&gt; 150001</span></div></pre></td></tr></table></figure></p>
<p>以上可以看出，如果插入数据超出了分片的范围，就会报错。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; select * from test_c1 where id between 100 and 20000;</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| 10000 | aaa  | 2016-01-31    |</span></div><div class="line">+-------+------+---------------+</div><div class="line">1 row in set (0.10 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain select * from test_c1 where id between 100 and 20000;</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                            |</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | SELECT * FROM test_c1 WHERE id BETWEEN 100 AND 20000 LIMIT 100 |</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可见，只访问的dn1，自动范围分片生效。</p>
<h3>自然月分片</h3>
<p>自然月分片是说每个自然月一个分片。需要注意的是：需要提前将分片规划好，建好，否则有可能日期超出实际配置分片数。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_c2"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-month"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-month"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>register_date<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>auto-sharding-month<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-month"</span>  <span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMonth"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dateFormat"</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sBeginDate"</span>&gt;</span>2016-01-01<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试表的建表和插入语句如下，注意日期格式已经定义为<code>yyyy-MM-dd</code>形式，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_c2(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'2016-01-01'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">70000</span>, <span class="string">'bbb'</span>, <span class="string">'2016-02-01'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">130000</span>, <span class="string">'ccc'</span>, <span class="string">'2016-03-01'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (10000, 'aaa', '2016-01-01');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_c2(id, name, register_date) values (10000, 'aaa', '2016-01-01') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (70000, 'bbb', '2016-02-01');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_c2(id, name, register_date) values (70000, 'bbb', '2016-02-01') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (130000, 'ccc', '2016-03-01');</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                               |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_c2(id, name, register_date) values (130000, 'ccc', '2016-03-01') |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; explain insert into test<span class="emphasis">_c2(id, name, register_</span>date) values (230000, <span class="emphasis">'ddd'</span>, <span class="emphasis">'2016-04-01'</span>);</div><div class="line">ERROR 1064 (HY000): Index: 3, Size: 3</div></pre></td></tr></table></figure></p>
<p>以上可以看出，如果插入数据超出了分片的时间范围，就会报错。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_c2 where register_date between '2016-01-01' and '2016-01-15';</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                       |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | SELECT * FROM test_c2 WHERE register_date BETWEEN '2016-01-01' AND '2016-01-15' LIMIT 100 |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_c2 where register_date between '2016-01-01' and '2016-01-15';</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| 10000 | aaa  | 2016-01-01    |</span></div><div class="line">+-------+------+---------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可见，只访问的dn1，按月自然分片生效。</p>
<h2>离散分片</h2>
<p>MyCAT离散分片也有很多方法，如，枚举分片、程序指定分区的分片、十进制求模分片、字符串hash分片、一致性哈希分片等。离散分片的特点是，分布比较均匀，但是对范围查找可能需要全部分片查找。其实，前文在ER分片的时候已经介绍了两种，分别是求模分片和一致性哈希分片，本文再介绍两种。</p>
<h3>枚举分片</h3>
<p>枚举分片是通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省份或区县来做保存，而全国省份区县固定的。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_d1"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-province"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-province"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>province<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>sharding-province<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"sharding-province"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByFileMap"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapFile"</span>&gt;</span>sharding-province.txt<span class="tag">&lt;/<span class="title">property</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"type"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">property</span>&gt;</span>  <span class="comment">&lt;!--  type默认值为0（0表示Integer，非零表示String） --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultNode"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">property</span>&gt;</span>   <span class="comment">&lt;!--  默认节点，枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上配置指定了，在mycat的<code>conf</code>目录下的<code>sharding-province.txt</code>文件，作为枚举分片文件，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Shanghai</span>=<span class="number">0</span></div><div class="line"><span class="constant">Beijingg</span>=<span class="number">1</span></div><div class="line"><span class="constant">Guangzhou</span>=<span class="number">2</span></div><div class="line"><span class="constant">Hangzhou</span>=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>该配置表示，province是Shanghai和Hangzhou的时候，存在0分片（即dn1）；province是Beijingg的时候，存在1分片（即dn2）；province是Guangzhou的时候，存在2分片（即dn3）。</p>
<p>测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_d1(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), province <span class="built_in">varchar</span>(<span class="number">100</span>));</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'Shanghai'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'Beijingg'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'Guangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'Huangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">50000</span>, <span class="string">'eee'</span>, <span class="string">'Shenzhen'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (10000, 'aaa', 'Shanghai');</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                       |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (10000, 'aaa', 'Shanghai') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (20000, 'bbb', 'Beijingg');</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                     |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_d1(id, name, province) values (20000, 'bbb', 'Beijingg') |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (30000, 'ccc', 'Guangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_d1(id, name, province) values (30000, 'ccc', 'Guangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (40000, 'ddd', 'Huangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (40000, 'ddd', 'Huangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (50000, 'eee', 'Shenzhen');</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                       |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (50000, 'eee', 'Shenzhen') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>以上可以看出，即使插入的数据超出了枚举分片的范围，但是因为有默认分片，所以，超出范围的数据被分配在了默认的dn1分片。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_d1 where province = 'Guangzhou';</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                          |</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | SELECT * FROM test_d1 WHERE province = 'Guangzhou' LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_d1 where province = 'Guangzhou';</span></div><div class="line">+-------+------+-----------+</div><div class="line"><span class="header">| id    | name | province  |</span></div><div class="line">+-------+------+-----------+</div><div class="line"><span class="header">| 30000 | ccc  | Guangzhou |</span></div><div class="line">+-------+------+-----------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>可见，分片已经成功。</p>
<h3>固定分片hash算法</h3>
<p>固定分片hash（二进制），本条规则类似于十进制的求模运算，区别在于是二进制的操作,是取id的二进制低10位，即id二进制&amp;1111111111，实际效果与求模范围类似。此算法根据二进制则可能会分到连续的分片。严格来说，该分片方法应该算是综合分片方法，即部分连续分片和部分离散分片的综合，在两者之间取了折中。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_d2"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-fix-hash"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-fix-hash"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>sharding-fix-hash<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"sharding-fix-hash"</span> </span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByLong"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"partitionCount"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"partitionLength"</span>&gt;</span>256,512<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上参数中，partitionCount 分片个数列表，partitionLength是分区长度，默认为最大2^n=1024，即最大支持1024分区。注意，count,length两个数组的长度必须是一致的，<code>1024 = sum((count[i]*length[i]))</code>。 count和length两个向量的点积恒等于1024。上述配置，将数据水平分成3份，前两份各占25%，第三份占50%，是一种非均匀分片。测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_d2(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), province <span class="built_in">varchar</span>(<span class="number">100</span>));</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'Beijing'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'Guangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'Huangzhou'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (20000, 'bbb', 'Beijing');</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                     |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_d2(id, name, province) values (20000, 'bbb', 'Beijing') |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (30000, 'ccc', 'Guangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_d2(id, name, province) values (30000, 'ccc', 'Guangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (40000, 'ddd', 'Huangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d2(id, name, province) values (40000, 'ddd', 'Huangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_d2 where id between 20000 and 20100;</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                              |</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | SELECT * FROM test_d2 WHERE id BETWEEN 20000 AND 20100 LIMIT 100 |</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_d2 where id between 20000 and 20100;</span></div><div class="line">+-------+------+----------+</div><div class="line"><span class="header">| id    | name | province |</span></div><div class="line">+-------+------+----------+</div><div class="line"><span class="header">| 20000 | bbb  | Beijing  |</span></div><div class="line">+-------+------+----------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from test<span class="emphasis">_d2 where id between 20000 and 30000;</span></div><div class="line">ERROR 1064 (HY000): NullPointerException</div></pre></td></tr></table></figure></p>
<p>可见，分片已经生效，而且，虽然部分采用了hash分片，但仍然有连续分片的一些特点。但是，大范围查找的时候会报错，不确定这是否是一个bug，对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">01/31 21:40:52.308  DEBUG [$_NIOREACTOR-0-RW] (ServerQueryHandler.java:56) -ServerConnection [id=1, schema=TESTDB, host=192.168.1.6, user=test,txIsolation=3, autocommit=true, schema=TESTDB]<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span></span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">21</span>:<span class="number">40</span>:<span class="number">52.308</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss <span class="keyword">cache</span> ,<span class="keyword">key</span>:TESTDBselect * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">21</span>:<span class="number">40</span>:<span class="number">52.309</span>   WARN [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerConnection.java:<span class="number">209</span>) -ServerConnection [id=<span class="number">1</span>, <span class="keyword">schema</span>=TESTDB, host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span>, <span class="keyword">user</span>=test,txIsolation=<span class="number">3</span>, autocommit=<span class="literal">true</span>, <span class="keyword">schema</span>=TESTDB]<span class="keyword">select</span> * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span> err:java.lang.NullPointerException</div><div class="line">java.lang.NullPointerException</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.findRouteWithcConditionsForTables(RouterUtil.java:<span class="number">1007</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.tryRouteForOneTable(RouterUtil.java:<span class="number">896</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.tryRouteForTables(RouterUtil.java:<span class="number">780</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidSelectParser.tryRoute(DruidSelectParser.java:<span class="number">376</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidSelectParser.changeSql(DruidSelectParser.java:<span class="number">264</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DefaultDruidParser.parser(DefaultDruidParser.java:<span class="number">66</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.DruidMycatRouteStrategy.routeNormalSqlWithAST(DruidMycatRouteStrategy.java:<span class="number">64</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.AbstractRouteStrategy.route(AbstractRouteStrategy.java:<span class="number">76</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.RouteService.route(RouteService.java:<span class="number">116</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.routeEndExecuteSQL(ServerConnection.java:<span class="number">201</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.<span class="keyword">execute</span>(ServerConnection.java:<span class="number">154</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.SelectHandler.handle(SelectHandler.java:<span class="number">102</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerQueryHandler.<span class="keyword">query</span>(ServerQueryHandler.java:<span class="number">77</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.<span class="keyword">query</span>(FrontendConnection.java:<span class="number">308</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.<span class="keyword">handler</span>.FrontendCommandHandler.handle(FrontendCommandHandler.java:<span class="number">71</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.rawHandle(FrontendConnection.java:<span class="number">435</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.handle(FrontendConnection.java:<span class="number">417</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.onReadData(AbstractConnection.java:<span class="number">313</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOSocketWR.asynRead(NIOSocketWR.java:<span class="number">186</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.asynRead(AbstractConnection.java:<span class="number">274</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOReactor$RW.run(NIOReactor.java:<span class="number">96</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT提供了多种分片规则，本文以实例展示这些常用的分片方法。</p>
<h2>ER分片</h2>
<p>传统的表分片多数是采用连续（如时间分片）或离散（如hash分片）分片，这样分片在有表join的时候，需要访问所有分片上的表，消耗巨大。ER分片解决了这个问题，将有关联]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes原理简介]]></title>
    <link href="http://valleylord.github.io/post/201601-kubernetes-concepts/"/>
    <id>http://valleylord.github.io/post/201601-kubernetes-concepts/</id>
    <published>2016-01-30T09:58:27.000Z</published>
    <updated>2016-01-31T13:44:27.698Z</updated>
    <content type="html"><![CDATA[<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。本文旨在梳理Kubernetes的架构、概念及基本工作流<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a><a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<table>
<thead>
<tr class="header">
<th align="left">英文</th>
<th align="left">翻译</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Container</td>
<td align="left">容器</td>
</tr>
<tr class="even">
<td align="left">Pod</td>
<td align="left">容器组</td>
</tr>
<tr class="odd">
<td align="left">Replication Controller</td>
<td align="left">复制控制器</td>
</tr>
<tr class="even">
<td align="left">Service</td>
<td align="left">服务</td>
</tr>
<tr class="odd">
<td align="left">Label</td>
<td align="left">标签</td>
</tr>
<tr class="even">
<td align="left">proxy</td>
<td align="left">代理</td>
</tr>
<tr class="odd">
<td align="left">Node</td>
<td align="left">节点</td>
</tr>
<tr class="even">
<td align="left">Kubernetes Master</td>
<td align="left">主节点</td>
</tr>
</tbody>
</table>
<h2>操作对象</h2>
<p>Kubernetes中，可操作的对象有以下一些：</p>
<ul>
<li><p>Container：容器，即是Docker容器，Kubernetes操作的虚拟机。</p></li>
<li><p>Pod：容器组。是Kubernetes的基本操作单元，把相关的一个或多个容器构成一个Pod，通常Pod里的容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理单元，共享相同的volumes和network namespace/IP和Port空间。</p></li>
<li><p>Service：服务。也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务的容器，对外表现为一个单一访问接口，外部不需要了解后端如何运行，这给扩展或维护后端带来很大的好处。</p></li>
<li><p>Replication Controller：复制控制器。是Pod的复制抽象。确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)在运行， 如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改pod 模板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的pods。对于利用pod 模板创建的pods，Replication Controller根据label selector来关联，通过修改pods的label可以删除对应的pods。</p></li>
<li><p>Label：标签。用于区分Pod、Service、Replication Controller的key/value键值对，Pod、Service、 Replication Controller可以有多个label，但是每个label的key只能对应一个value。Labels是Service和Replication Controller运行的基础，为了将访问Service的请求转发给后端提供服务的多个容器，正是通过标识容器的labels来选择正确的容器。同样，Replication Controller也使用labels来管理通过pod 模板创建的一组容器，这样Replication Controller可以更加容易，方便地管理多个容器，无论有多少容器。</p></li>
<li><p>Proxy：代理。是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息，或者也可以从file获取，然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</p></li>
</ul>
<h2>功能组件</h2>
<p>如下图所示是官方文档里的集群架构图，一个典型的master/slave模型。</p>
<p><img src="/images/201601-kubernetes-concepts/kubernetes-masterslave.png"></p>
<p>master运行三个组件：</p>
<ul>
<li><p>apiserver：作为kubernetes系统的入口，封装了核心对象的增删改查操作，以RESTFul接口方式提供给外部客户和内部组件调用。它维护的REST对象将持久化到etcd（一个分布式强一致性的key/value存储）。</p></li>
<li><p>scheduler：负责集群的资源调度，为新建的Pod分配机器。这部分工作分出来变成一个组件，意味着可以很方便地替换成其他的调度器。</p></li>
<li>controller-manager：负责执行各种控制器，目前有两类：</li>
</ul>
<ol>
<li>endpoint-controller：定期关联service和Pod(关联信息由endpoint对象维护)，保证service到Pod的映射总是最新的。</li>
<li>replication-controller：定期关联replicationController和Pod，保证replicationController定义的复制数量与实际运行Pod的数量总是一致的。</li>
</ol>
<p>slave(称作minion)运行两个组件：</p>
<ul>
<li><p>kubelet：负责管控docker容器，如启动/停止、监控运行状态等。它会定期从etcd获取分配到本机的Pod，并根据Pod信息启动或停止相应的容器。同时，它也会接收apiserver的HTTP请求，汇报Pod的运行状态。</p></li>
<li><p>proxy：负责为Pod提供代理。它会定期从etcd获取所有的service，并根据service信息创建代理。当某个客户Pod要访问其他Pod时，访问请求会经过本机proxy做转发。</p></li>
</ul>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.csdn.net/article/2014-10-31/2822393" target="_blank" rel="external">http://www.csdn.net/article/2014-10-31/2822393</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/zhangjun2915/article/details/40598151" target="_blank" rel="external">http://blog.csdn.net/zhangjun2915/article/details/40598151</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction" target="_blank" rel="external">http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.csdn.net/article/2015-06-11/2824933" target="_blank" rel="external">http://www.csdn.net/article/2015-06-11/2824933</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。本文旨在梳理Kubernetes的架构、概念及基本工作流<a h]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 日志分析]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-log-analysis/"/>
    <id>http://valleylord.github.io/post/201601-mycat-log-analysis/</id>
    <published>2016-01-23T06:50:21.000Z</published>
    <updated>2016-01-30T09:58:36.361Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 的日志还是相对比较简明的，看系统细节的话需要打开debug级别的 log，修改<code>log4j.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;root&gt;</div><div class="line">  &lt;level value=<span class="string">"debug"</span> /&gt;</div><div class="line">  &lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;</div><div class="line">   &lt;!--&lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;--&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>然后启动 MyCAT 就可以看到详细的日志了，日志默认路径在<code>logs/mycat.log</code>。启用之前，设置 Mysql 的字符集为 utf8<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，即修改/etc/mysql/my.cnf，在[mysqld]后添加character-set-server=utf8。</p>
<h2>MyCAT select 日志分析</h2>
<p>运行简单的查询 sql，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord;</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                  |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line"><span class="header">| dn3       | SELECT * FROM travelrecord LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">3 rows in set (0.25 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.09 sec)</div></pre></td></tr></table></figure></p>
<p>对应的 debug 日志比较长，以下只列出了执行 select 的日志，explain 的日志没有列出，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.441</span>   INFO [$_NIOREACTOR-<span class="number">0</span>-RW] (FrontendAuthenticator.java:<span class="number">193</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]'test' login success</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.443</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]show databases</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.458</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]show tables</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.465</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.469</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss cache ,key:TESTDBselect * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.589</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">59</span>) -SQLRouteCache add cache ,key:TESTDBselect * from travelrecord value:select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">}</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.589</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.593</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">97</span>) -has data merge logic </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413595</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.596</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413597</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413597</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.598</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.599</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.598</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.600</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.603</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.600</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (DataMergeService.java:<span class="number">94</span>) -field metadata inf:[<span class="variable">DAYS=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">4</span>, <span class="variable">colType=</span><span class="number">3</span>], <span class="variable">USER_ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">1</span>, <span class="variable">colType=</span><span class="number">253</span>], <span class="variable">ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">0</span>, <span class="variable">colType=</span><span class="number">8</span>], <span class="variable">TRAVELDATE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">2</span>, <span class="variable">colType=</span><span class="number">10</span>], <span class="variable">FEE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">3</span>, <span class="variable">colType=</span><span class="number">246</span>]]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.607</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.610</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.610</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.611</span>  DEBUG [BusinessExecutor5] (DataMergeService.java:<span class="number">296</span>) -prepare mpp merge result for select * from travelrecord</div></pre></td></tr></table></figure></p>
<p>以上日志中，执行过程如下，</p>
<ol>
<li>MyCAT 先收到 sql，然后去路径 cache 中查找是否已经有解析好的路径，但是没有找到，因此提示<code>SQLRouteCache  miss cache</code>，于是解析该 sql，并将路径保存，提示<code>SQLRouteCache add cache</code>；</li>
<li>接下来，使用<code>NonBlockingSession.java</code>，即非阻塞会话来获取连接，
还有提示，使用<code>MultiNodeQueryHandler</code>，多节点查询，过程中需要数据合并，即<code>has data merge logic</code>；</li>
<li>然后，找到了读的数据源，提示<code>select read source hostS1 for dataHost:localhost1</code>，并提示获取连接成功，执行同步命令，<code>-con need syn ,total syn cmd 1 commands</code>，之后发送查询sql，因为 travelrecord 表在 db1、db2、db3 共有3个分片，因此，以上日志在这3个分片上各出现了一次；</li>
<li>然后，收到返回结果并调用回调函数，<code>on row end reseponse</code>，等数据接收完成还会提示<code>received ok response</code>，同样，也是收到3个分片上各一次；</li>
<li>执行完后，会释放 MyCAT 会话和 Mysql 连接，<code>release connection MySQLConnection</code>，<code>release channel MySQLConnection</code>；</li>
<li>收到的结果还需要显示列名，因此，上述执行过程中会提示，<code>field metadata inf</code>；</li>
<li>等收到3个分片的所有数据后，进行数据合并，<code>prepare mpp merge result</code>；</li>
</ol>
<p>以上就是 MyCAT 上执行 sql 的基本步骤。</p>
<h2>动态加载<code>schema.xml</code></h2>
<p>MyCAT 的<code>schema.xml</code>是可以动态加载（reload）的。假定新增一个分片表 T_VOTE (ID,PROVINCE)，PROVINCE 列用hash分片。首先需要修改<code>rule.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-by-stringhash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">columns</span>&gt;</span>province<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，<code>murmur</code>是一致性 hash 方法。在<code>schema.xml</code>中增加，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"t_vote"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-by-stringhash"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>修改完文件后，使用管理端，端口9066，登陆MyCAT，用以下命令可以重新加载配置文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">mysql&gt;</span> reload <span class="variable">@@config</span>;</span></div><div class="line"><span class="constant">Query</span> <span class="constant">OK</span>, <span class="number">1</span> row affected (<span class="number">0</span>.<span class="number">13</span> sec)</div><div class="line"><span class="constant">Reload</span> config success</div></pre></td></tr></table></figure></p>
<p>加载完成之后，可以发现用户端，即端口8066，上已经可以看到新增的 T_VOTE 表，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; show tables;</span></div><div class="line">+------------------+</div><div class="line"><span class="header">| Tables in TESTDB |</span></div><div class="line">+------------------+</div><div class="line">| company          |</div><div class="line">| customer         |</div><div class="line">| customer<span class="emphasis">_addr    |</span></div><div class="line">| employee         |</div><div class="line">| goods            |</div><div class="line">| hotnews          |</div><div class="line">| orders           |</div><div class="line">| order_items      |</div><div class="line">| travelrecord     |</div><div class="line"><span class="header">| t_vote           |</span></div><div class="line">+------------------+</div><div class="line">10 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>查看这段时间内的日志，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.003</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (ManagerQueryHandler.java:<span class="number">65</span>) -[<span class="variable">thread=</span>$_NIOREACTOR-<span class="number">3</span>-RW,<span class="variable">class=</span>ManagerConnection,<span class="variable">id=</span><span class="number">7</span>,<span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>,<span class="variable">port=</span><span class="number">9066</span>,<span class="variable">schema=</span>TESTDB]reload @@config</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.048</span>   INFO [BusinessExecutor7] (CacheService.java:<span class="number">187</span>) -clear all cache pool </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.048</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache ER_SQL2PARENTID</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.124</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache SQLRouteCache</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.125</span>   INFO [BusinessExecutor7] (DefaultLayedCachePool.java:<span class="number">100</span>) -clear cache </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.126</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache TableID2DataNodeCache.TESTDB_ORDERS</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.128</span>   WARN [BusinessExecutor6] (ReloadConfig.java:<span class="number">166</span>) -send ok package to client [<span class="variable">thread=</span>BusinessExecutor6,<span class="variable">class=</span>ManagerConnection,<span class="variable">id=</span><span class="number">7</span>,<span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>,<span class="variable">port=</span><span class="number">9066</span>,<span class="variable">schema=</span>TESTDB]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">17.674</span>  DEBUG [Timer0] (ConnectionHeartBeatHandler.java:<span class="number">52</span>) -do heartbeat for con MySQLConnection [<span class="variable">id=</span><span class="number">6</span>, <span class="variable">lastTime=</span><span class="number">1453538597657</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">15</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">17.675</span>  DEBUG [Timer0] (ConnectionHeartBeatHandler.java:<span class="number">52</span>) -do heartbeat for con MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453538597657</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-log-analysis/mycat-log-reload-config.png"></p>
<p>可以发现，重新加载的过程中，清理了一些 cache，并重新建立了心跳。</p>
<h2>MyCAT 字符集</h2>
<p>以上的实验中，MyCAT 的字符集和 Mysql 客户端的字符集都是采用 utf8，修改 Mysql 客户端的字符集为 latin1，即修改客户端所在机器的/etc/mysql/my.cnf，在[client]后添加default-character-set=latin1。再次执行相同的查询<code>select * from travelrecord;</code>，日志如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (EnchachePool.java:<span class="number">70</span>) -SQLRouteCache hit cache ,key:TESTDBselect * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">97</span>) -has data merge logic </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">2</span> commands SET names latin1;SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417878</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">2</span> commands SET names latin1;SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417878</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.880</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.880</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.886</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (DataMergeService.java:<span class="number">94</span>) -field metadata inf:[<span class="variable">DAYS=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">4</span>, <span class="variable">colType=</span><span class="number">3</span>], <span class="variable">USER_ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">1</span>, <span class="variable">colType=</span><span class="number">253</span>], <span class="variable">ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">0</span>, <span class="variable">colType=</span><span class="number">8</span>], <span class="variable">TRAVELDATE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">2</span>, <span class="variable">colType=</span><span class="number">10</span>], <span class="variable">FEE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">3</span>, <span class="variable">colType=</span><span class="number">246</span>]]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.887</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.887</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.890</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.891</span>  DEBUG [BusinessExecutor3] (DataMergeService.java:<span class="number">296</span>) -prepare mpp merge result for select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.892</span>  DEBUG [BusinessExecutor3] (MultiNodeQueryHandler.java:<span class="number">324</span>) -last packet id:<span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>可以发现，日志差异并不大，只是所有原先是<code>charset=utf8</code>的地方换成了<code>charset=latin1</code>，还有一处重要的变化是执行同步命令<code>con need syn ,total syn cmd 2 commands</code>，多了一个命令<code>SET names latin1</code>用于设置字符集。不过这样做是有问题的，客户端与服务器端的字符集不同，会导致乱码。例如，有中文的情况，如下图，</p>
<p><img src="/images/201601-mycat-log-analysis/mycat-log-charset.png"></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/sin90lzc/article/details/7648439" target="_blank" rel="external">http://blog.csdn.net/sin90lzc/article/details/7648439</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 的日志还是相对比较简明的，看系统细节的话需要打开debug级别的 log，修改<code>log4j.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre>]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
</feed>
