<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[褚哥说|]]></title>
  <subtitle><![CDATA[我想写一些东西]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://valleylord.github.io/"/>
  <updated>2016-08-27T12:08:06.296Z</updated>
  <id>http://valleylord.github.io/</id>
  
  <author>
    <name><![CDATA[Valleylord]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我们该如何教孩子学英语]]></title>
    <link href="http://valleylord.github.io/post/201608-english-watermelon/"/>
    <id>http://valleylord.github.io/post/201608-english-watermelon/</id>
    <published>2016-08-13T22:56:33.000Z</published>
    <updated>2016-08-27T01:40:14.322Z</updated>
    <content type="html"><![CDATA[<p>我有幸去旁听了一节英语课，这是一节英语口语为主的教学课程，老师是英美人士，英语是母语。课程是以回顾上一节课开始的，“a pile of lions”、“a colony of seals”等等，是课文句型中的用词，对于我这样自认为英文还不错的科班中式英语speaker来说，听到这样的口语还是要看文字才能知道在说啥。在魔都这个地方，什么样的英语培训都有，有这样的也不足为奇，让我惊讶的是，听课学生仅是5-7岁的孩子，而且他们很享受这样一个氛围。</p>
<p>这节课触动了我很多，后来我又去看了他们的宣传博客，这是一家专门针对儿童的英语培训机构。博客中提到了他们的教学理念，教学目标，教学方式，教学内容，以及一些课堂短视频。他们的教学方法完全颠覆了我十几年的英语学习经验。</p>
<p>我们需要学的是什么样的英语呢？或者说，我们学了英语，想达到一个什么样的使用英语的状态呢？能用英语和英美人士自由交流，这是基本，就像我们用汉语交流一样，可以谈论电影、经济、体育，不会感觉到词汇的贫乏，词不达意。能用英语写一些日常的文章，比如工作邮件，可以准确表达我们的思想，不会让对方误解，甚至看不懂。如果能更进一步，用英语做一场流畅的演讲，中间穿插一些地道的笑话段子，用一些谐音和双关，那就更完美了。而实际上呢，我们的英语能用来说你好，能用来讨论一些专业领域的问题，但是，可能不能用来问路，不知道表达厕所到底是用toilet、bathroom、还是restroom，句子中有很多的a、the。至于谈到电影明星、经济政策、体育赛事，那就是噩梦了，几乎无法理解。我们接受了10多年的传统英语教学，为什么仍然如空中楼阁一般？</p>
<p>我们传统的英语教学是怎样的呢？首先，重视读写，听说其次。为什么这么说，传统教学是应试教育，考试主要考读写，听的比例较少，说的比例是零。因此在教学的时候，每一位老师都会把绝大部分的精力放在读写上，导致虽然我们会了一些单词，但是见到英美人士的时候，仍然不敢交流，不敢表达，我们对自己的英语发音潜意识里面是自卑的。其次，传统教学的过于强调语法，而忽略了英语自然表达的训练。就说汉语，我们说话的时候会注意语法的主谓宾分别是啥么？为什么我们看到一个英语句子，就会想到过去时、虚拟语态这些东西呢？过于强调以语法为基础的语言框架，那是考试英语，已经背离了语言的实质。再次，英语表重于英语文化，这一直是我对传统英语教学很疑惑的一个地方，为什么，我们学习汉语的时候，有童话故事，有小说，有笑话，有古诗词，但我们学英语的时候，为什么只剩下了日常对话、阅读理解、写作等等这些呢？看到的文章也是只有日常对话、论述文、说明文这类书面文章。这类死板的文字，不仅打击了孩子学英语的兴趣，也推波助澜形成了中式英语。最后，可能是根本原因，我们的英语教材都是中国人编写的，无论此人英语水平如何，总不可能高过英语为母语的人写出来的教材，我们的考试方式也是中国式的，考题也是中国人出的，如何能考察出一个人真正的英语水平？</p>
<p>在这样的英语教学体系下，我们的英语只能是中式英语，只有同样学过中式英语的中国人才能领会你在说什么。这是我们学习的英语，我们无从选择。如果我们的孩子可以选择，我们会想教给我们的孩子怎样的英语呢？如果要真正掌握英语，达到或者说无限接近母语水平的英语，就必须突破传统教学中的劣势，而这正是我在这家培训机构看到的可贵实践。</p>
<p>首先，侧重听说、读写其次。我不是说读写不重要，而是说，相比读写，听说才是根本的。因为，学汉语你也是先会听说，才有读的，写是最后才学会的，为什么我们不能这样来学英语呢？听说重于读写的一个原因是，听说更加强调锻炼语感，什么是语感，就是一种语言用多了之后，产生的一种自然的“肌肉反应”，有一种不经过大脑逻辑判断就可以说出正确语言的感觉，其实这跟学习很多技能是一样的，比如开车、游泳等。因为听说是需要即时反馈的，这迫使学习者将所谓的语感强行记在肌肉中，而不是根据语法通过“因为…所以…”的逻辑方式予以回答，这是非常慢的。而读写不需要这种迅速反馈，因此，强调读写就会导致出现“通过语法经过逻辑判断得出正确答案”的中式英语。</p>
<p>还有，听说的训练是不能间断的，这是“听说锻炼语感”方法的一个自然结论。因为语感是一种肌肉记忆，长时间不用，这种肌肉记忆就会衰退，正如长时间不开车就不会开了，长时间不游泳就不会游了，都是一个道理。一旦有英语语感，听说自然不是问题，读写也仅仅只是听说的文字化而已。</p>
<p>那么如何训练听说呢？听说学的好，必须要有英语母语的人来教发音。有人说，听MP3、听磁带也可以，这完全是自欺欺人的。首先，听音频资料，声音无法很好的还原，失真是无法避免的，我们根本无法确认真正的发音究竟是怎样；还有更重要的，听音频无法看到老师的口型，我们不但要学发出什么样的声音才是对的，也要学如何发出对的声音，你不告诉他如何发音，难道让他自我摸索么？因此，英语母语的老师几乎是所有教学的起点，一个基本的要求。</p>
<p>顺带一说，英语母语的老师和欧美相貌的老师是两回事。我们的母语不是英语，很多时候不太能区分什么样的英语是母语级别的，只能看外教老师的样子，一个白人相貌的老师很有优势。这是一个误区，欧美相貌不代表英语母语，因为他们可能是俄语、法语、德语或其他语种。相反，即使一个老师是亚洲人、非洲人的相貌，但是他/她确实出生长大在美国，从小说英语，那么，至少在英语母语的要求方面，这是一位合格的老师。</p>
<p>以上强调的是听说，其次是，实例重于语法。再次强调，语言不是逻辑，不需要很多“因为…所以…”的推断，反复的多情景的练习远胜于通过语法得到的逻辑正确。当然，语法也很重要，学语法的时候，应该强调，这个语法一般有哪些常用的句型，这些句型表达一个什么样的含义，然后在反复的句型练习中，让孩子理解这个句型，以及背后的语法的含义。就算最后语法没有学会，又有什么关系呢，我们说了这么久的汉语，大部分的汉语语法我们也是不知道的。语言是实用技能，不能按理论教学的那一套来。</p>
<p>实例练习需要掌握到什么程度呢？我觉得，一个实例，反复的练习各种场景，直到理解什么情况下使用这个实例可以表达自己的真实想法。这个跟之前说的“肌肉反应”是同样的，在这个过程中，听说是基础，也是必须要跨过的关。掌握了很多实例之后，在某些时刻会发现，原来这些例句背后的语法是一致的，这样的语法教学才能算是成功的。这样的语法不是逻辑推理，而是来自实践的总结，是鲜活实用的语法。</p>
<p>再次，文化重于表达。英语不是只用来说说Hello、Goodbye，写写邮件、新闻稿的官样语言，而是和汉语一样鲜活的文字，有历史，有文化。尝试理解使用英语的历史和文化，可以很好的激起孩子学英语的兴趣，毕竟孩子都会喜欢听故事，另外，增加阅读量本身就是对英语学习的巨大帮助。有了这些词汇，在日常交流中碰到，能加快反应速度，也是口语练习、语感联系所必须的。</p>
<p>在学习英语历史文化的过程中，一定会出现一些不常见的词汇，比如各种动植物名称、历史名词、童话人物等待。可能这些词汇的拼写比较难，但是记住这些词汇并不是很难，因为这些词汇多数只有一个含义，在这方面，我们往往低估了孩子的能力。当然，老师教的方法也很重要，比如，在旁听课程中碰到werewolf这个词，我不认识，但是，这个词和witch、skeleton、zombie同时出现，再看看词根，就能猜到应该是“狼人”的意思，这是一组万圣节词汇。</p>
<p>另外，正常的英语体系中，名词的占比是很高的，任何一种有较长历史的语言都是如此。而传统英语的教学是畸形的，我们学了很多“实用”的英语，认为历史文化中的词汇是不重要的，这种南辕北辙的做法，其实并没有让我们掌握真正实用的英语。</p>
<p>最后，一套侧重听说、实例、英美文化的教材。这套教材，必须是英语母语的专业人士编写，他们的思维更加侧重在用英语的思维进行教学，而不是每个词语都用中文进行对照。中英文对照的教学方式，会让孩子建立起每次见到单词都潜意识要翻译的习惯，降低了“肌肉反应”的速度。用英语的思维教学，是说要按英语的方式来理解单词用法，然后反复训练，直到建立起“肌肉反应”。说白了，这跟我们学习汉语是一样的。</p>
<p>只有教材仍然不足够，还需要有一套与之适应的考试体系，现在的各种英语级别考试太多，大人的小孩的都有，如果只是为了让孩子考个英语级别的考试，必然会出现“偏科”的情况，那不是英语学习的正路。如果要设置一个真正能测试英语级别的考试，我觉得只有一项要考，就是看无障碍与英语母语人士交流到什么程度。当然这个不太现实，我想说的是，英语级别考试仅仅是英语学习的一个方面，切莫为了考试而学。</p>
<p>说了这么多，只是说了什么样的英语教学是好的，那么，如果有这样的教学环境，我们该怎样教我们的孩子呢？</p>
<p>一是，充分利用外教资源。之前说过，外教对于听说练习是非常重要的，但是，我们往往没有合理的用好这个资源。首先，上课时要认真听，这几乎废话，但是对一个还没有完全自制力的学龄前儿童来说，这很重要。要让整个课堂的秩序予以维持，需要家长在课堂里维护秩序，使得孩子能集中精力，提高学习效率。还有，千万不要预习。一个普遍的经验是，第一次的教学是最重要的，如果有偏差，那么后续会花更多的时间来纠正。无论你个人的英语能达到何种程度，总不会好过英语母语的老师，预习可能会将孩子的英语发音有一个不好的开始，因此，让孩子第一次听到对的发音，对英语学习非常重要。</p>
<p>二是，反复练习，或者是复习。正如前面反复提到，英语学习是一种技能学习，其目的是建立起一种“肌肉反应”，为了建立起这种近乎直觉的反馈，必须有大量的训练，这就是复习的价值。家长要带着孩子，反复的练习课堂学到的内容，练习每一个单词和句型，直到学会，会用。整个过程中，辛苦的不仅是孩子，也有家长，切记，梅花香自苦寒来。Practice，这也是我在他们的一篇博客中，看到的最多的单词。</p>
<p>三是，严格要求孩子。所谓的严格要求，是相对于快乐学习、兴趣学习来说的。因为作为孩子，他根本不知道自己需要什么，他只会知道，他喜欢什么。孩子最喜欢什么，就是玩，而真正的学好一个本领，不可能一直都开开心心的。抱着玩的心态，是永远无法掌握一门技能的，作为家长，要做好孩子可能会哭会闹的心理准备，也让孩子知道获得一门技能是要付出艰辛努力的。</p>
<p>四是，坚持。如很多人所熟知的10000小时定律，成为一个技能的专家，需要10000小时的训练。这10000小时，必定充满了很多困难、挫折、反复，孩子会畏惧困难，但是作为家长，要不断的引导，陪孩子度过每一个难关，一直坚持，直到10000小时的临界点。因此，作为家长，要做好面对困难的打算，不能因为孩子的一时任性，就中断了学习。一旦中断，可能就捡不回来了。</p>
<p>对于那些总是带着孩子一边学一边玩的培训机构，无论是不是外教，还是不要去了。我就曾去过一个这样的培训机构去试听，全场就觉得孩子在期待老师下面会拿什么好玩的出来，整个课堂孩子蹦来蹦去，秩序几乎无法维持，虽然孩子偶尔学了几个单词，但是全程下来能学到什么也很难说。至少，我没有在这个课堂上看到一些英语比较好的学生，与这一次试听课堂上的学生相比，几乎是天差地别。学习的过程不是一个有趣的过程，至少不是一个一直有趣的过程，想要以一种一直有趣的方式来教学，最后可能什么也没有学到。</p>
<p>以上是我对我们需要一个什么样的英语教学环境，以及如何教我们的孩子学英语的一些想法，其中的很多内容整理自这家培训机构的宣传博客。所幸，他们有与我们的要求相当一致的教学理念和教学环境，我从他们的博客中摘抄一些原话，如下，</p>
<ol>
<li>因为听说才是根本！</li>
<li>学英语不能只以孩子的兴趣为导向。因为作为孩子，他根本不知道自己需要什么，他只会知道，他喜欢什么。孩子最喜欢什么，那是:玩，而真正的学好一个本领，不可能一直都开开心心的。</li>
<li>好的母语系统不仅仅提供语言环境。</li>
<li>Again，Don't rely on Chinese.</li>
<li>第一次发音要人教！音频发音是没法和真人比的。</li>
<li>教了的就必须全部复习！</li>
<li>In reality, we believe there should not be much difference between acquiring a first or second language.</li>
<li>We don’t begin to teach it intensely until the students have gained some rudimentary communication skills.</li>
<li>We believe that it’s best to tackle those uncomfortable feelings head on rather than seek ways to ease the students into the English language with as little pain as possible. In the West, we have a saying: no pain, no gain.</li>
<li>每天都要复习旧课的！</li>
<li>我们的课程有很强的西方文化在里面.不仅仅是学英语,同时也有西方文化的东西在里面.</li>
<li>语言不仅仅是说要表达平常的吃饭,睡觉,它更是体现了一种文化.语言是交流的工具,同样语言是体现所代表文化的工具.两者是关联的.</li>
<li>英语听说在前，阅读写作在后。没有好的听说基础和阅读能力，写作思维很容易套入中式英文表达的Nonsense writing.</li>
</ol>
<p>正如他们所说，“坚持我们的课程两年三年以上的孩子英语都非常优秀”，而我确实在他们的课堂上见到了这样的孩子，我庆幸我找到了这样一位教学实践者。我没有写他们机构的名称，知道的人肯定知道我在说谁。谢谢你们。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我有幸去旁听了一节英语课，这是一节英语口语为主的教学课程，老师是英美人士，英语是母语。课程是以回顾上一节课开始的，“a pile of lions”、“a colony of seals”等等，是课文句型中的用词，对于我这样自认为英文还不错的科班中式英语speaker来说，]]>
    </summary>
    
      <category term="English Learning" scheme="http://valleylord.github.io/tags/English-Learning/"/>
    
      <category term="other" scheme="http://valleylord.github.io/categories/other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[区块链这把火能烧到什么时候]]></title>
    <link href="http://valleylord.github.io/post/201607-blockchain-imperfect/"/>
    <id>http://valleylord.github.io/post/201607-blockchain-imperfect/</id>
    <published>2016-07-28T08:38:53.000Z</published>
    <updated>2016-07-29T00:39:08.000Z</updated>
    <content type="html"><![CDATA[<p>突然一个瞬间，眼到之处似乎充斥着“区块链”这个概念，什么号称“下一代互联网”、“未来的互联网”，不一而足。这是什么？怎么来的？能吃么？</p>
<p>如果仔细去搜索一些文章，就可以发现这些文章的模式，大多是这个路数：</p>
<ol>
<li>介绍祖师爷中本聪；</li>
<li>介绍比特币，区块链的关系；</li>
<li>介绍区块链的去中心化原理（顺便黑一下曾经反对过比特币的机构）；</li>
</ol>
<p>从去中心化原理开始，分为两个流派，技术流和金融流。技术流的路数大概是这样的，</p>
<ol>
<li>举例介绍去中心化的交易是怎么完成的（有的会提到拜占庭问题）；</li>
<li>介绍比特币是怎么产生的，怎么交易的（可选）；</li>
<li>总结区块链的优点；</li>
</ol>
<p>金融流的路数就玄幻很多了，比如这样的，</p>
<ol>
<li>介绍去中心化与信用的关系（有的会提到 The Economist 那篇文章，以显得高大上）；</li>
<li>介绍区块链有哪些应用，有哪些产品和公司（必须出现一些国际大银行的名字）；</li>
<li>总结区块链的优点；</li>
</ol>
<p>由于这类文章太多，我不一一引用了，至于一些东拼西凑来的粗略介绍的九流文章，更是数不胜数。在这个言必称颠覆的时代，我们似乎找到了一个万灵药。看到这些，第一反应是，牛！第二反应是，不太对劲；第三反应是，为啥都是优点？难道区块链没有缺点么？</p>
<p>理性的思考是，一个东西的引入，带来了某些方面的巨大进步，同时要知道其局限性。关于区块链的缺点，也可以搜索到相关的文章，但大多是在一味吹捧之余，将区块链劣势的部分一笔带过。区块链的局限性到底是什么呢？下面是我个人的分析，读之前最好先了解一些区块链相关的背景知识。</p>
<p>在区块链的分布式交易系统中，当一个区块获得交易权之后，需要广播给所有区块，直到大部分区块都接受了你的请求，并把你的交易请求记录在他的账本里面，你的交易才被认可，并不可修改。如果有两个区块想交易同一个东西，怎么办，那就看谁的交易请求扩散到多数的区块，最终多数派获胜。看到这里，我的一个直觉分析是，这得花多久才能确定交易完成啊？假设在交易系统中，有9个区块，那么至少要5个区块接受请求，才能判定为交易确认，如果每个账户一个区块的话，那么类似淘宝京东这种国民系统，就会有10亿级别的区块，需要至少5亿个区块接受请求。你tm在逗我么？就算我是买房子，需要那么多人确认么？系统的交易速度究竟要慢到什么程度？</p>
<p>还有，如果要篡改一笔交易，需要至少51%的区块认可，才可以修改。说白了，还是无法防止篡改（没什么系统可以防止篡改，只有人可以）。举个例子，如果某人要改一笔交易，他可以窜通区块链交易系统的公司在公司51%的区块服务器上修改，只是改的手段麻烦一点，这与现在的中心化交易系统又有和区别？如果说，区块链交易系统只提供服务程序（类似比特币的做法），不提供区块服务器，区块服务器由大家自己搭建，我就呵呵了，这是什么商业模式？怎么赚钱？往区块服务器终端上推送广告么？回到之前的那个问题，假设建立了1万个区块服务器，每次交易要至少5001个区块接受，交易速度怎么保证？别说淘宝京东这种交易量，就是全国房产交易中心的交易量都不一定能承受得了。</p>
<p>再退一步说，生活中有没有一些交易，交易量比较小，交易额比较大，这类交易可以借助区块链？这样的交易确实有，刚才提到的房产就是一个例子，还有私募股权、艺术品、古董等等，诸如此类，金融学里面对它们有统一的分类，叫另类投资品（Alternative Investments）。所以，如果没有看到这些领域里面有比较成功的区块链应用，估计其他地方能看到的可能性也极低了。</p>
<p>假设上面这些领域中，真的可以建立一个区块链交易系统，用户可以接受巨慢的交易速度，那么，这也注定该系统的用户不会很多，所谓的承载“人与人之间的信任”的重任，又从何谈起呢？只是这么一小搓人么？只是在这几个犄角旮旯的方面么？</p>
<p>促使我写下以上分析的是知乎上 <code>Hold the door!!!!</code> 知友的回答<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，我觉得，他的回答也是切中要害。我全文引用如下，</p>
<blockquote>
<p>Hold the door!!!!</p>
<p>市面上乱七八糟的书也够多了，我想说所有的书都是垃圾，没有一本例外。</p>
<p>要搞懂区块链，第一要看的当然是satoshi的论文，第二要看的是btc的源代码，wiki上有详细的协议分析，结合代码你就很清楚了。看完这些你再去看最早提出区块链的mastercoin，以及为什么这玩意就是扯淡。还有个扯淡的colorcoin，扯淡的原因和mastercoin一样。btc的proof of work机制为什么如此难以取代，为什么ripple被认为没有实现去中心化一致，为什么ether提出到现在快2年了还如此难产？它首创的“smart contract”基于btc里面的什么机制？ 弄懂了这些你不妨去btctalk上面看看各种币的白皮书，以及pos机制。</p>
<p>区块链到底能用在哪里，现在90%的应用也是扯淡。什么提高交易速度咯，降低交易成本咯，全是扯淡。为什么？因为区块链本质上是通过牺牲速度和IT资源来换取公平性。除了这个，区块链的所有任何其他feature均被传统技术完爆。它的最大优势就是这个，它可以让你在匿名状态下完成公平交易，这是用来干嘛的？去翻翻刑法就懂，我不多说了。当然你要说他没有正经应用我也是不同意的。最后我总结下不懂技术的吹逼和不懂商业的装逼所吹嘘的区块链应用的致命问题在哪里：</p>
<p>1：开放性。对传统技术部署的交易或者支付应用来说，开放也很简单，问题是其组织的开放意愿。开放本身在技术上根本不构成门槛，写过代码的都懂。</p>
<p>2：低成本：区块链最大的泡沫，它的运营总成本远远高于传统系统，因为每个节点都要保存账簿链，而且chain的组织方式让账本规模变得无比巨大，还使得大量传统的吞吐技术无法支持。更不要说挖矿的存在了。</p>
<p>3：高速度：一个智商筛选器，相信这个的，您回去复读小学吧。10分钟一个快，一笔交易要至少50分钟确认这是btc的协议的规定，而proof of work机制要求必须给出挖矿（就是work）时间，所以它根本没有快起来的理论依据。0确认机制是要冒对手风险的。至于ripple所用的consensus，可以实现几秒钟完成交易，我就告诉你这个consensus就是google的levelDB内部实现的数据库多地一致性，别被人家概念忽悠瘸了，ripple就是个披着区块链外衣的传统系统。</p>
<p>4：智能：包括什么智能合约之类的。传统系统实现各类业务需求只需要更新一个版本，区块链呢？需要全网投票，你说哪个简单？而且传统系统是改代码，区块链可是要改协议，完全不是一个量级的难度。</p>
<p>blockchain真正的特别之处在于：</p>
<p>1：匿名：完全无法追踪的匿名，利用btc的MofN多签名机制可以实现从理论上无法追踪的资金转移。</p>
<p>2：财产安全性：非对称加密技术保证了每个人都不会被冻结财产。</p>
<p>中本聪是个反政府主义者，这是他发明btc的初衷。</p>
</blockquote>
<p>该回答中提到了一些问题，按我自己的思路总结如下（部分与我之前的观点相近，但更加犀利、直戳要害），</p>
<ol>
<li>如果不开放，就不是真正的区块链系统，神马交易不可修改之类的就别想了，建立在这样的系统上的所谓信用也就是空中楼阁；</li>
<li>如果开放，如果防止51%篡改？如何应对监管？别说国内监管怎么怎么僵化，国外的金融监管也不见得就能通过。</li>
<li>如果开放，并且能大范围使用，做到想比特币现在这样，交易速度如何保证呢？假设交易速度可以提升到1秒1笔，全世界1天也就能做 24<em>60</em>60=86400 笔交易，这种系统给谁用？</li>
</ol>
<p>现在，关于区块链的文章里面，充斥了各种虚幻，各种空中楼阁，各家公司也是各种扯概念，各种挂羊头卖狗肉，而对于连接原理和应用之间的逻辑纽带，却不去做细致分析，愚人愚己，又有何益？立言于此，区块链，看汝能火到几时。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.zhihu.com/question/37290469" class="uri" target="_blank" rel="external">http://www.zhihu.com/question/37290469</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>突然一个瞬间，眼到之处似乎充斥着“区块链”这个概念，什么号称“下一代互联网”、“未来的互联网”，不一而足。这是什么？怎么来的？能吃么？</p>
<p>如果仔细去搜索一些文章，就可以发现这些文章的模式，大多是这个路数：</p>
<ol>
<li>介绍祖师爷中本聪；</li>
]]>
    </summary>
    
      <category term="非技术" scheme="http://valleylord.github.io/tags/%E9%9D%9E%E6%8A%80%E6%9C%AF/"/>
    
      <category term="区块链" scheme="http://valleylord.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="非技术" scheme="http://valleylord.github.io/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[转载文章合集]]></title>
    <link href="http://valleylord.github.io/post/201607-ref-all/"/>
    <id>http://valleylord.github.io/post/201607-ref-all/</id>
    <published>2016-07-27T01:58:05.000Z</published>
    <updated>2016-08-12T01:55:54.000Z</updated>
    <content type="html"><![CDATA[<p>看到的有用的文章，直接把链接放在这。</p>
<h2>Nginx</h2>
<ol>
<li>Nginx手动编译的编译选项解析 <a href="http://linux.it.net.cn/e/server/nginx/2015/0110/11601.html" class="uri" target="_blank" rel="external">http://linux.it.net.cn/e/server/nginx/2015/0110/11601.html</a></li>
</ol>
<h2>Java 和 JVM</h2>
<ol>
<li>JVM系列三:JVM参数设置、分析 <a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html</a></li>
</ol>
<h2>Spring Boot</h2>
<ol>
<li>Spring Boot 配置文件 application.properties <a href="http://valleylord.github.io/post/201606-springboot-properties/" class="uri" target="_blank" rel="external">http://valleylord.github.io/post/201606-springboot-properties/</a></li>
</ol>
<h2>OpenSSL</h2>
<ol>
<li>KeyTool 和 OpenSSL 相互转换 <a href="http://valleylord.github.io/post/201606-keytool-openssl-transform/" class="uri" target="_blank" rel="external">http://valleylord.github.io/post/201606-keytool-openssl-transform/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到的有用的文章，直接把链接放在这。</p>
<h2>Nginx</h2>
<ol>
<li>Nginx手动编译的编译选项解析 <a href="http://linux.it.net.cn/e/server/nginx/2015/0110/11601.html" clas]]>
    </summary>
    
      <category term="转载" scheme="http://valleylord.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="转载" scheme="http://valleylord.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[说说 MQ 之 RocketMQ]]></title>
    <link href="http://valleylord.github.io/post/201607-mq-rocketmq/"/>
    <id>http://valleylord.github.io/post/201607-mq-rocketmq/</id>
    <published>2016-07-12T09:20:02.000Z</published>
    <updated>2016-07-25T03:44:11.000Z</updated>
    <content type="html"><![CDATA[<p>RocketMQ 是出自 A 公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进，消息可靠性上比 Kafka 更好，目前，RocketMQ 的文档仍然不够丰富 <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，社区仍然无法与 Kafka 比肩，但 A 公司已经推出了基于 RocketMQ 的云产品 <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，相信未来 RocketMQ 也会有不错的发展。本文采用 RocketMQ 3.2.6 进行实验，由于 RocketMQ 与 Kafka 很相似，本文很多地方对两者做出了比较。</p>
<h2>基本概念</h2>
<p>RocketMQ 由于借鉴了 Kafka 的设计，包括组件的命名也很多与 Kafka 相似，下面摘抄一段《RocketMQ 原理简介》中的介绍，可以与 Kafka 的命名比对一下，</p>
<ul>
<li>Producer，消息生产者，负责产生消息，一般由业务系统负责产生消息。</li>
<li>Consumer，消息消费者，负责消费消息，一般是后台系统负责异步消费。</li>
<li>Push Consumer，Consumer 的一种，应用通常向 Consumer 对象注册一个 Listener 接口，一旦收到消息，Consumer 对象立
刻回调 Listener 接口方法。</li>
<li>Pull Consumer，Consumer 的一种，应用通常主动调用 Consumer 的拉消息方法从 Broker 拉消息，主动权由应用控制。</li>
<li>Producer Group，一类 Producer 的集合名称，这类 Producer 通常发送一类消息，且发送逻辑一致。</li>
<li>Consumer Group，一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，且消费逻辑一致。</li>
<li>Broker，消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。</li>
</ul>
<p>《RocketMQ 原理简介》中还介绍了一些其他的概念，例如，广播消费和集群消费，广播消费是 Consumer Group 中对于同一条消息每个 Consumer 都消费，集群消费是 Consumer Group 中对于同一条消息只有一个 Consumer 消费。Kafka 采用的是集群消费，不支持广播消费（好吧，是我没有找到）。再例如，普通顺序消息和严格顺序消息，普通顺序消息在 Broker 重启情况下不会保证消息顺序性；严格顺序消息即使在异常情况下也会保证消息的顺序性。个人理解，所谓普通顺序消息，应该就是 Kafka 中的 Partition 级别有序，严格顺序消息，应该是 Topic 级别有序，但文中也提到，这样的有序级别是要付出代价的，Broker 集群中只要有一台机器不可用，则整个集群都不可用，降低服务可用性。使用这种模式，需要依赖同步双写，主备自动切换，但自动切换功能目前还未实现（我猜，自动切换仅仅是没开源吧）。说白了，严格顺序消息不具备生产可用性，自己玩玩还行，其应用场景主要是数据库 binlog 同步。</p>
<p>关于 RocketMQ 和 Kafka 的对比，可以参考 RocketMQ Wiki 中的文章 <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，看看就行，不必较真。</p>
<h3>关于顺序和分区</h3>
<p>顺序性的话题，刚才已经提到了一些，RocketMQ 的实现应该不弱于 Kafka。对于分区，RocketMQ 似乎有意弱化了这个概念，只有在 Producer 中有一个参数 <code>defaultTopicQueueNums</code>，分区在 RocketMQ 中有时被称为队列。RocketMQ 的普通顺序消息模式，应该就是分区顺序性，这点与 Kafka 一致。</p>
<h3>关于高可用</h3>
<p>RocketMQ 实现高可用的方式有多种，《RocketMQ 用户指南》文档中提到的有：多主模式、多主多从异步复制模式、多主多从同步复制模式。多主模式下，性能较好，但是在 Broker 宕机的时候，该 Broker 上未消费的交易不可消费；多主多从异步复制模式，与 Kafka 的副本模式比较类似，主 Broker 宕机后，会自动切换到从 Broker，消息的消费不会出现间断；多主多从同步复制模式更进一步，采用同步刷盘的方式，避免了主 Broker 宕机带来的消息丢失，但是，目前不支持自动切换。</p>
<p>虽然 RocketMQ 提供了多种高可用方式，但是目前能生产使用的就只有多主多从异步复制模式，即使在这个模式上，其实现也比 Kafka 要差。因为 RocketMQ 的机制中，主从关系是人为指定的，主 Broker 上承担所有的消息派发，而 Kafka 的主从关系是通过选举的方式选出来的，每个分区的主节点都是不一样的，可以从不同的节点派发消息。Kafka 的模式是分散模式，有利于负载均衡，而且当一个 Broker 宕机的时候，只影响部分 Topic，而 RocketMQ 一旦主 Broker 宕机，会影响所有的 Topic。另外，Kafka 可以支持 Broker 间同步复制（通过设置 Broker 的 <code>acks</code> 参数），这样比的话，RocketMQ 就差太多了。</p>
<p>关于 RocketMQ 的介绍，网上的文章不算太多，也比较杂，《分布式开放消息系统(RocketMQ)的原理与实践》<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> <a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> <a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>这篇原理介绍的不错，推荐。</p>
<h2>RocketMQ 的工具和编程接口</h2>
<h3>RocketMQ 的工具</h3>
<p>相比较 Kafka 而言，RocketMQ 提供的工具要少一些，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bin/mqadmin</div><div class="line">bin/mqbroker</div><div class="line">bin/mqbroker.numanode0</div><div class="line">bin/mqbroker.numanode1</div><div class="line">bin/mqbroker.numanode2</div><div class="line">bin/mqbroker.numanode3</div><div class="line">bin/mqfiltersrv</div><div class="line">bin/mqnamesrv</div><div class="line">bin/mqshutdown</div></pre></td></tr></table></figure></p>
<p>除了进程启停之外，常用的运维命令都在 <code>mqadmin</code> 中，详见《RocketMQ 运维指令》文档。我实验中常用的一些命令如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">sh</span> mqnamesrv &</div><div class="line">sh mqbroker -c async-broker-a.properties &</div><div class="line">sh mqbroker -c async-broker-a-s.properties &</div><div class="line"></div><div class="line">sh mqadmin topicList -n <span class="number">192.168.232.23:9876</span></div><div class="line">sh mqadmin topicRoute -n <span class="number">192.168.232.23:9876</span> -t TopicTestjjj</div><div class="line">sh mqadmin clusterList -n <span class="number">192.168.232.23:9876</span></div><div class="line">sh mqadmin deleteTopic -c DefaultCluster -n <span class="number">192.168.232.23:9876</span> -t TopicTestjjj</div><div class="line">sh mqadmin consumerProgress -n <span class="number">192.168.232.23:9876</span> -g ConsumerGroupNamecc4</div><div class="line">sh mqadmin deleteSubGroup -c DefaultCluster -n <span class="number">192.168.232.23:9876</span> -g ConsumerGroupNamecc4</div><div class="line">sh mqadmin consumerConnection -n <span class="number">192.168.232.23:9876</span> -g ConsumerGroupNamecc4</div></pre></td></tr></table></figure></p>
<p>RocketMQ 使用了自己的 name server 来做调度（Kafka 用了 Zookeeper），使用 <code>sh mqnamesrv</code> 来启动，默认监听端口9876，<code>sh mqnamesrv -m</code> 可以查看所有默认参数，使用 <code>-c xxxx.properties</code> 参数来指定自定义配置。<code>sh mqbroker</code> 是用于启动 Broker 的命令，参数比较多，详细可以通过 <code>sh mqbroker -m</code> 查看默认参数，配置项细节后文再说。<code>sh mqadmin</code> 是运维命令入口，<code>topicList</code> 是列出所有 Topic；<code>topicRoute</code> 是列出单个 Topic 的详细信息；<code>clusterList</code> 是列出集群的信息；<code>deleteTopic</code> 是删除 Topic。<code>consumerProgress</code> 是查看消费者消费进度，<code>deleteSubGroup</code> 是删除消费者的订阅，<code>consumerConnection</code> 是查询消费者订阅的情况。</p>
<p>Broker 的配置是最多的，实验中我修改到的部分如下，其他使用默认，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">brokerClusterName=</span>DefaultCluster</div><div class="line"><span class="variable">brokerIP1=</span><span class="number">192.168</span>.<span class="number">232.23</span></div><div class="line"><span class="variable">brokerName=</span>broker-a</div><div class="line"><span class="variable">brokerId=</span><span class="number">0</span></div><div class="line"><span class="variable">namesrvAddr=</span><span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">9876</span></div><div class="line"><span class="variable">listenPort=</span><span class="number">10911</span></div><div class="line"><span class="variable">deleteWhen=</span><span class="number">04</span></div><div class="line"><span class="variable">fileReservedTime=</span><span class="number">120</span></div><div class="line"></div><div class="line"><span class="variable">storePathRootDir=</span>/home/arnes/alibaba-rocketmq/data/store-a-async</div><div class="line"><span class="variable">storePathCommitLog=</span>/home/arnes/alibaba-rocketmq/data/store-a-async/commitlog</div><div class="line"></div><div class="line"><span class="variable">brokerRole=</span>ASYNC_MASTER</div><div class="line"><span class="variable">flushDiskType=</span>ASYNC_FLUSH</div></pre></td></tr></table></figure></p>
<p>配置文件中的多数配置看例子就可以知道意思，挑几个说一下。<code>brokerName</code> 和 <code>brokerId</code>， 同名的 Broker，ID 是0的是主节点，其他是从节点；<code>deleteWhen</code>，删除文件时间点，默认凌晨4点；<code>fileReservedTime</code>，文件保留时间，设置为120小时；<code>brokerRole</code>，Broker 的角色，ASYNC_MASTER 是异步复制主节点，SYNC_MASTER 是同步双写主节点，SLAVE 是备节点。</p>
<p>其实，这些工具的写法也基本一致，都是先做一些检查，最后运行 Java 程序，JVM 系统上的应用应该差不多都这样。</p>
<h3>RocketMQ 的 Java API</h3>
<p>RocketMQ 是用 Java 语言开发的，因此，其 Java API 相对是比较丰富的，当然也有部分原因是 RocketMQ 本身提供的功能就比较多。RocketMQ API 提供的功能包括，</p>
<ol>
<li>广播消费，这个在之前已经提到过；</li>
<li>消息过滤，支持简单的 Message Tag 过滤，也支持按 Message Header、body 过滤；</li>
<li>顺序消费和乱序消费，之前也提到过，这里的顺序消费应该指的是普通顺序性，这一点与 Kafka 相同；</li>
<li>Pull 模式消费，这个是相对 Push 模式来说的，Kafka 就是 Pull 模式消费；</li>
<li>事务消息，这个好像没有开源，但是 example 代码中有示例，总之，不推荐用；</li>
<li>Tag，RocketMQ 在 Topic 下面又分了一层 Tag，用于表示消息类别，可以用来过滤，但是顺序性还是以 Topic 来看；</li>
</ol>
<p>单看功能的话，即使不算事务消息，也不算 Tag，RocketMQ 也远超 Kafka，Kafka 应该只实现了 Pull 模式消费 + 顺序消费这2个功能。RocketMQ 的代码示例在 rocketmq-example 中，注意，代码是不能直接运行的，因为所有的代码都少了设置 name server 的部分，需要自己手动加上，例如，<code>producer.setNamesrvAddr(&quot;192.168.232.23:9876&quot;);</code>。</p>
<p>先来看一下生产者的 API，比较简单，只有一种，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.producer.DefaultMQProducer;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.producer.MessageQueueSelector;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.producer.SendResult;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.Message;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageQueue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> MQClientException, InterruptedException {</div><div class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"ProducerGroupName"</span>);</div><div class="line">        producer.setNamesrvAddr(<span class="string">"192.168.232.23:9876"</span>);</div><div class="line"></div><div class="line">        producer.start();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                {</div><div class="line">                    Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest1"</span>,<span class="comment">// topic</span></div><div class="line">                        <span class="string">"TagA"</span>,<span class="comment">// tag</span></div><div class="line">                        <span class="string">"OrderID188"</span>,<span class="comment">// key</span></div><div class="line">                        (<span class="string">"RocketMQ "</span>+String.format(<span class="string">"%05d"</span>, i)).getBytes());<span class="comment">// body</span></div><div class="line">                    SendResult sendResult = producer.send(msg, <span class="keyword">new</span> MessageQueueSelector() {</div><div class="line">                        <span class="annotation">@Override</span></div><div class="line">                        <span class="keyword">public</span> MessageQueue <span class="title">select</span>(List&lt;MessageQueue&gt; mqs, Message msg, Object arg) {</div><div class="line">                            Integer id = (Integer) arg;</div><div class="line">                            <span class="keyword">int</span> index = id % mqs.size();</div><div class="line">                            <span class="keyword">return</span> mqs.get(index);</div><div class="line">                        }</div><div class="line">                    }, i));</div><div class="line">                    System.out.println(String.format(<span class="string">"%05d"</span>, i)+sendResult);</div><div class="line">                }</div><div class="line"></div><div class="line">            }</div><div class="line">            <span class="keyword">catch</span> (Exception e) {</div><div class="line">                e.printStackTrace();</div><div class="line">            }</div><div class="line"></div><div class="line">        producer.shutdown();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>可以发现，相比 Kafka 的 API，只多了 Tag，但实际上行为有很大不同。Kafka 的生产者客户端，有同步和异步两种模式，但都是阻塞模式，<code>send</code> 方法返回发送状态的 <code>Future</code>，可以通过 <code>Future</code> 的 <code>get</code> 方法阻塞获得发送状态。而 RocketMQ 采用的是同步非阻塞模式，发送之后立刻返回发送状态（而不是 <code>Future</code>）。正常情况下，两者使用上差别不大，但是在高可用场景中发生主备切换的时候，Kafka 的同步可以等待切换完成并重连，最后返回；而 RocketMQ 只能立刻报错，由生产者选择是否重发。所以，在生产者的 API 上，其实 Kafka 是要强一些的。</p>
<p>另外，RocketMQ 可以通过指定 <code>MessageQueueSelector</code> 类的实现来指定将消息发送到哪个分区去，Kafka 是通过指定生产者的 <code>partitioner.class</code> 参数来实现的，灵活性上 RocketMQ 略胜一筹。</p>
<p>再来看消费者的API，由于 RocketMQ 的功能比较多，我们先看 Pull 模式消费的API，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.PullResult;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.store.OffsetStore;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageExt;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageQueue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullConsumer</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;MessageQueue, Long&gt; offseTable = <span class="keyword">new</span> HashMap&lt;MessageQueue, Long&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> MQClientException {</div><div class="line">        DefaultMQPullConsumer consumer = <span class="keyword">new</span> DefaultMQPullConsumer(<span class="string">"please_rename_unique_group_name_5"</span>);</div><div class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.232.23:9876"</span>);</div><div class="line"></div><div class="line">        consumer.start();</div><div class="line"></div><div class="line">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class="string">"TopicTest1"</span>);</div><div class="line">        <span class="keyword">for</span> (MessageQueue mq : mqs) {</div><div class="line">            System.out.println(<span class="string">"Consume from the queue: "</span> + mq);</div><div class="line">            SINGLE_MQ: <span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    <span class="keyword">long</span> offset = consumer.fetchConsumeOffset(mq, <span class="keyword">true</span>);</div><div class="line">                    PullResult pullResult =</div><div class="line">                            consumer.pullBlockIfNotFound(mq, <span class="keyword">null</span>, getMessageQueueOffset(mq), <span class="number">32</span>);</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != pullResult.getMsgFoundList()) {</div><div class="line">                        <span class="keyword">for</span> (MessageExt messageExt : pullResult.getMsgFoundList()) {</div><div class="line">                            System.out.print(<span class="keyword">new</span> String(messageExt.getBody()));</div><div class="line">                            System.out.print(pullResult);</div><div class="line">                            System.out.println(messageExt);</div><div class="line">                        }</div><div class="line">                    }</div><div class="line">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</div><div class="line">                    <span class="keyword">switch</span> (pullResult.getPullStatus()) {</div><div class="line">                    <span class="keyword">case</span> FOUND:</div><div class="line">                        <span class="comment">// TODO</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NO_MATCHED_MSG:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NO_NEW_MSG:</div><div class="line">                        <span class="keyword">break</span> SINGLE_MQ;</div><div class="line">                    <span class="keyword">case</span> OFFSET_ILLEGAL:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    }</div><div class="line">                }</div><div class="line">                <span class="keyword">catch</span> (Exception e) {</div><div class="line">                    e.printStackTrace();</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        consumer.shutdown();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putMessageQueueOffset</span>(MessageQueue mq, <span class="keyword">long</span> offset) {</div><div class="line">        offseTable.put(mq, offset);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMessageQueueOffset</span>(MessageQueue mq) {</div><div class="line">        Long offset = offseTable.get(mq);</div><div class="line">        <span class="keyword">if</span> (offset != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> offset;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>这部分的 API 其实是和 Kafka 很相似的，唯一不同的是，RocketMQ 需要手工管理 offset 和指定分区，而 Kafka 可以自动管理（当然也可以手动管理），并且不需要指定分区（分区是在 Kafka 订阅的时候指定的）。例子中，RocketMQ 使用 HashMap 自行管理，也可以用 <code>OffsetStore</code> 接口，提供了两种管理方式，本地文件和远程 Broker。这部分感觉两者差不多。</p>
<p>下面再看看 Push 模式顺序消费，代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.List;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span></div><div class="line"></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.MessageListenerOrderly;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageExt;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws MQClientException {</div><div class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name_3"</span>);</div><div class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.232.23:9876"</span>);</div><div class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</div><div class="line"></div><div class="line">        consumer.subscribe(<span class="string">"TopicTest1"</span>, <span class="string">"TagA || TagC || TagD"</span>);</div><div class="line"></div><div class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() {</div><div class="line">            AtomicLong consumeTimes = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> ConsumeOrderlyStatus consumeMessage(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context) {</div><div class="line">                context.setAutoCommit(<span class="literal">false</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" Receive New Messages: "</span> + msgs);</div><div class="line">                <span class="keyword">this</span>.consumeTimes.incrementAndGet();</div><div class="line">                <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.<span class="keyword">get</span>() % <span class="number">2</span>) == <span class="number">0</span>) {</div><div class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.<span class="keyword">get</span>() % <span class="number">3</span>) == <span class="number">0</span>) {</div><div class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.ROLLBACK;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.<span class="keyword">get</span>() % <span class="number">4</span>) == <span class="number">0</span>) {</div><div class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.COMMIT;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.<span class="keyword">get</span>() % <span class="number">5</span>) == <span class="number">0</span>) {</div><div class="line">                    context.setSuspendCurrentQueueTimeMillis(<span class="number">3000</span>);</div><div class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</div><div class="line">                }</div><div class="line"></div><div class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</div><div class="line">            }</div><div class="line">        });</div><div class="line"></div><div class="line">        consumer.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Consumer Started."</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>虽然提供了 Push 模式，RocketMQ 内部实际上还是 Pull 模式的 MQ，Push 模式的实现应该采用的是长轮询，这点与 Kafka 一样。使用该方式有几个注意的地方，</p>
<ol>
<li>接收消息的监听类要使用 <code>MessageListenerOrderly</code>；</li>
<li><code>ConsumeFromWhere</code> 有几个参数，表示从头开始消费，从尾开始消费，还是从某个 TimeStamp 开始消费；</li>
<li>可以控制 offset 的提交，应该就是 <code>context.setAutoCommit(false);</code> 的作用；</li>
</ol>
<p>控制 offset 提交这个特性非常有用，某种程度上扩展一下，就可以当做事务来用了，看代码 <code>ConsumeMessageOrderlyService</code> 的实现，其实并没有那么复杂，在不启用 AutoCommit 的时候，只有返回 <code>COMMIT</code> 才 commit offset；启用 AutoCommit 的时候，返回 <code>COMMIT</code>、<code>ROLLBACK</code>（这个比较扯）、<code>SUCCESS</code> 的时候，都 commit offset。</p>
<blockquote>
<p>后来发现，commit offset 功能在 Kafka 里面也有提供，使用新的 API，调用 <code>consumer.commitSync</code>。</p>
</blockquote>
<p>再看一个 Push 模式乱序消费 + 消息过滤的例子，消费者的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageExt;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws InterruptedException, MQClientException {</div><div class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"ConsumerGroupNamecc4"</span>);</div><div class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.232.23:9876"</span>);</div><div class="line">        consumer.subscribe(<span class="string">"TopicTest1"</span>, MessageFilterImpl.<span class="keyword">class</span>.getCanonicalName());</div><div class="line"></div><div class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() {</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs,</div><div class="line">                    ConsumeConcurrentlyContext context) {</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" Receive New Messages: "</span> + msgs);</div><div class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</div><div class="line">            }</div><div class="line">        });</div><div class="line"></div><div class="line">        consumer.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Consumer Started."</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>这个例子与之前顺序消费不同的地方在于，</p>
<ol>
<li>接收消息的监听类使用的是 <code>MessageListenerConcurrently</code>；</li>
<li>回调方法中，使用的是自动 offset commit；</li>
<li>订阅的时候增加了消息过滤类 <code>MessageFilterImpl</code>；</li>
</ol>
<p>消息过滤类 <code>MessageFilterImpl</code> 的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.filter.MessageFilter;</div><div class="line"><span class="keyword">import</span> com.alibaba.rocketmq.common.message.MessageExt;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFilterImpl</span> <span class="keyword">implements</span> <span class="title">MessageFilter</span> </span>{</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span>(MessageExt msg) {</div><div class="line">        String property = msg.getUserProperty(<span class="string">"SequenceId"</span>);</div><div class="line">        <span class="keyword">if</span> (property != <span class="keyword">null</span>) {</div><div class="line">            <span class="keyword">int</span> id = Integer.parseInt(property);</div><div class="line">            <span class="keyword">if</span> ((id % <span class="number">3</span>) == <span class="number">0</span> && (id &gt; <span class="number">10</span>)) {</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>RocketMQ 执行过滤是在 Broker 端，Broker 所在的机器会启动多个 FilterServer 过滤进程；Consumer 启动后，会向 FilterServer 上传一个过滤的 Java 类；Consumer 从 FilterServer 拉消息，FilterServer 将请求转发给 Broker，FilterServer 从 Broker 收到消息后，按照 Consumer 上传的 Java 过滤程序做过滤，过滤完成后返回给 Consumer。这种过滤方法可以节省网络流量，但是增加了 Broker 的负担。可惜我没有实验出来使用过滤的效果，即使是用 github wiki 上的例子<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a>也没成功，不纠结了。RocketMQ 的按 Tag 过滤的功能也是在 Broker 上做的过滤，能用，是个很方便的功能。</p>
<p>还有一种广播消费模式，比较简单，可以去看代码，不再列出。</p>
<p>总之，RocketMQ 提供的功能比较多，比 Kafka 多很多易用的 API。</p>
<h2>RocketMQ 的主备模式</h2>
<p>按之前所说，只有 RocketMQ 的多主多从异步复制是可以生产使用的，因此只在这个场景下测试。另外，消息采用 Push 顺序模式消费。</p>
<p>假设集群采用2主2备的模式，需要启动4个 Broker，配置文件如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="variable">brokerName=</span>broker-a</div><div class="line"><span class="variable">brokerId=</span><span class="number">0</span></div><div class="line"><span class="variable">listenPort=</span><span class="number">10911</span></div><div class="line"><span class="variable">storePathRootDir=</span>/home/arnes/alibaba-rocketmq/data/store-a-async</div><div class="line"><span class="variable">storePathCommitLog=</span>/home/arnes/alibaba-rocketmq/data/store-a-async/commitlog</div><div class="line"><span class="variable">brokerRole=</span>ASYNC_MASTER</div><div class="line"></div><div class="line"><span class="variable">brokerName=</span>broker-a</div><div class="line"><span class="variable">brokerId=</span><span class="number">1</span></div><div class="line"><span class="variable">listenPort=</span><span class="number">10921</span></div><div class="line"><span class="variable">storePathRootDir=</span>/home/arnes/alibaba-rocketmq/data/store-a-async-slave</div><div class="line"><span class="variable">storePathCommitLog=</span>/home/arnes/alibaba-rocketmq/data/store-a-async-slave/commitlog</div><div class="line"><span class="variable">brokerRole=</span>SLAVE</div><div class="line"></div><div class="line"><span class="variable">brokerName=</span>broker-b</div><div class="line"><span class="variable">brokerId=</span><span class="number">0</span></div><div class="line"><span class="variable">listenPort=</span><span class="number">20911</span></div><div class="line"><span class="variable">storePathRootDir=</span>/home/arnes/alibaba-rocketmq/data/store-b-async</div><div class="line"><span class="variable">storePathCommitLog=</span>/home/arnes/alibaba-rocketmq/data/store-b-async/commitlog</div><div class="line"><span class="variable">brokerRole=</span>ASYNC_MASTER</div><div class="line"></div><div class="line"><span class="variable">brokerRole=</span>ASYNC_MASTER</div><div class="line"><span class="variable">brokerName=</span>broker-b</div><div class="line"><span class="variable">brokerId=</span><span class="number">1</span></div><div class="line"><span class="variable">listenPort=</span><span class="number">20921</span></div><div class="line"><span class="variable">storePathRootDir=</span>/home/arnes/alibaba-rocketmq/data/store-b-async-slave</div><div class="line"><span class="variable">storePathCommitLog=</span>/home/arnes/alibaba-rocketmq/data/store-b-async-slave/commitlog</div><div class="line"><span class="variable">brokerRole=</span>SLAVE</div></pre></td></tr></table></figure></p>
<p>另外，每个机构共通的配置项如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">brokerClusterName=</span>DefaultCluster</div><div class="line"><span class="variable">brokerIP1=</span><span class="number">192.168</span>.<span class="number">232.23</span></div><div class="line"><span class="variable">namesrvAddr=</span><span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">9876</span></div><div class="line"><span class="variable">deleteWhen=</span><span class="number">04</span></div><div class="line"><span class="variable">fileReservedTime=</span><span class="number">120</span></div><div class="line"><span class="variable">flushDiskType=</span>ASYNC_FLUSH</div></pre></td></tr></table></figure></p>
<p>其他设置均采用默认。启动 NameServer 和所有 Broker，并试运行一下 Producer，然后看一下 TestTopic1 当前的情况，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sh mqadmin topicRoute -n <span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9876</span> -t <span class="constant">TopicTest1</span></div><div class="line">{</div><div class="line">        <span class="string">"brokerDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">0</span><span class="symbol">:<span class="string">"192.168.232.23:20911"</span></span>,<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:20921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">0</span><span class="symbol">:<span class="string">"192.168.232.23:10911"</span></span>,<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:10921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span></div><div class="line">                }</div><div class="line">        ],</div><div class="line">        <span class="string">"filterServerTable"</span><span class="symbol">:</span>{},</div><div class="line">        <span class="string">"queueDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                }</div><div class="line">        ]</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>可见，TestTopic1 在2个 Broker 上，且每个 Broker 备机也在运行。下面开始主备切换的实验，分别启动 Consumer 和 Producer 进程，消息采用 Pull 顺序模式消费。在消息发送接收过程中，使用 <code>kill -9</code> 停掉 <code>broker-a</code> 的主进程，模拟突然宕机。此时，TestTopic1 的状态如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sh mqadmin topicRoute -n <span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9876</span> -t <span class="constant">TopicTest1</span></div><div class="line">{</div><div class="line">        <span class="string">"brokerDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">0</span><span class="symbol">:<span class="string">"192.168.232.23:20911"</span></span>,<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:20921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:10921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span></div><div class="line">                }</div><div class="line">        ],</div><div class="line">        <span class="string">"filterServerTable"</span><span class="symbol">:</span>{},</div><div class="line">        <span class="string">"queueDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                }</div><div class="line">        ]</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><code>broker-a</code> 的节点已经减少为只有1个从节点。然后启动<code>broker-a</code> 的主节点，模拟恢复，再看一下 TestTopic1 的状态，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sh mqadmin topicRoute -n <span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9876</span> -t <span class="constant">TopicTest1</span></div><div class="line">{</div><div class="line">        <span class="string">"brokerDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">0</span><span class="symbol">:<span class="string">"192.168.232.23:20911"</span></span>,<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:20921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerAddrs"</span><span class="symbol">:</span>{<span class="number">0</span><span class="symbol">:<span class="string">"192.168.232.23:10911"</span></span>,<span class="number">1</span><span class="symbol">:<span class="string">"192.168.232.23:10921"</span></span></div><div class="line">                        },</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span></div><div class="line">                }</div><div class="line">        ],</div><div class="line">        <span class="string">"filterServerTable"</span><span class="symbol">:</span>{},</div><div class="line">        <span class="string">"queueDatas"</span><span class="symbol">:</span>[</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-a"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                },</div><div class="line">                {</div><div class="line">                        <span class="string">"brokerName"</span><span class="symbol">:<span class="string">"broker-b"</span></span>,</div><div class="line">                        <span class="string">"perm"</span><span class="symbol">:</span><span class="number">6</span>,</div><div class="line">                        <span class="string">"readQueueNums"</span><span class="symbol">:</span><span class="number">4</span>,</div><div class="line">                        <span class="string">"topicSynFlag"</span><span class="symbol">:</span><span class="number">0</span>,</div><div class="line">                        <span class="string">"writeQueueNums"</span><span class="symbol">:</span><span class="number">4</span></div><div class="line">                }</div><div class="line">        ]</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>此时，RocketMQ 已经恢复。</p>
<p>再来看看 Producer 和 Consumer 的日志，先看 Producer 的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="number">00578</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000126F08, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">141</span>]</div><div class="line"><span class="number">00579</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000126F9F, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">141</span>]</div><div class="line"><span class="number">00580</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078D47, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">700</span>]</div><div class="line"><span class="number">00581</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078DDE, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">700</span>]</div><div class="line"><span class="number">00582</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078E75, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">699</span>]</div><div class="line"><span class="number">00583</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078F0C, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">699</span>]</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line"><span class="number">00588</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078FA3, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">701</span>]</div><div class="line"><span class="number">00589</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF000000000007903A, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">701</span>]</div><div class="line"><span class="number">00590</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000790D1, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">700</span>]</div><div class="line"><span class="number">00591</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079168, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">700</span>]</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessageSync(MQClientAPIImpl.java:<span class="number">306</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.sendMessage(MQClientAPIImpl.java:<span class="number">289</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(DefaultMQProducerImpl.java:<span class="number">679</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendSelectImpl(DefaultMQProducerImpl.java:<span class="number">867</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">842</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="number">836</span>)</div><div class="line">	at com.alibaba.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="number">164</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.Producer.main(Producer.java:<span class="number">61</span>)</div><div class="line"><span class="number">00596</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000791FF, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">702</span>]</div><div class="line"><span class="number">00597</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079296, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">702</span>]</div><div class="line"><span class="number">00598</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF000000000007932D, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">701</span>]</div><div class="line"><span class="number">00599</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000793C4, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">701</span>]</div><div class="line"><span class="number">00600</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF000000000007945B, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">703</span>]</div><div class="line"><span class="number">00601</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000794F2, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">703</span>]</div><div class="line"><span class="number">00602</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079589, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">702</span>]</div><div class="line"><span class="number">00603</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079620, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">702</span>]</div><div class="line">......</div><div class="line"><span class="number">01389</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000965BE, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">900</span>]</div><div class="line"><span class="number">01390</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000096655, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">899</span>]</div><div class="line"><span class="number">01391</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF00000000000966EC, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">899</span>]</div><div class="line"><span class="number">01392</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000127036, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">143</span>]</div><div class="line"><span class="number">01393</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F00000000001270CD, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">141</span>]</div><div class="line"><span class="number">01394</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000127164, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">2</span>], <span class="variable">queueOffset=</span><span class="number">142</span>]</div><div class="line"><span class="number">01395</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E81700002A9F00000000001271FB, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-a, <span class="variable">queueId=</span><span class="number">3</span>], <span class="variable">queueOffset=</span><span class="number">142</span>]</div><div class="line"><span class="number">01396</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF0000000000096783, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">0</span>], <span class="variable">queueOffset=</span><span class="number">901</span>]</div><div class="line"><span class="number">01397</span>SendResult [<span class="variable">sendStatus=</span>SEND_OK, <span class="variable">msgId=</span>C0A8E817000051AF000000000009681A, <span class="variable">messageQueue=</span>MessageQueue [<span class="variable">topic=</span>TopicTest1, <span class="variable">brokerName=</span>broker-b, <span class="variable">queueId=</span><span class="number">1</span>], <span class="variable">queueOffset=</span><span class="number">901</span>]</div></pre></td></tr></table></figure></p>
<p>日志中显示，在发送完00583条消息之后，开始发生异常 <code>connect to &lt;192.168.232.23:10911&gt; failed</code>，原因应该是 <code>broker-a</code> 的主节点被 kill 掉。之后，从00596条消息开始，RocketMQ 又恢复正常，原因是 <code>broker-b</code> 已经开始提供服务，承担了所有的工作。然后，又重新启动了 <code>broker-a</code> 主节点，由于该节点的加入，从01392条消息开始，<code>broker-a</code> 又开始恢复工作。实验中可以验证，RocketMQ 所谓的多主多备模式，实际上，备机被弱化到无以复加，在主节点宕机的时候，备机无法接替主机的工作，而只是将尚未发送的数据发送出去，由剩下的主节点接替工作。也就是说，N 主 N 备的 RocketMQ 集群中，总共有 2N 台机器，实际工作的只有 N 台，如果有一台挂了，就只有 N-1 台工作了，机器的利用率太低了。</p>
<p>再来看一下 Consumer 的日志，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">RocketMQ <span class="number">00551</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">696</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">696</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">695</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175032446</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175020973</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007859C, <span class="variable">commitLogOffset=</span><span class="number">492956</span>, <span class="variable">bodyCRC=</span><span class="number">943070764</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">696</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00559</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">697</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">697</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">696</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175032720</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021247</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF00000000000787F8, <span class="variable">commitLogOffset=</span><span class="number">493560</span>, <span class="variable">bodyCRC=</span><span class="number">921540126</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">697</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00567</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">698</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">698</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">697</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175033005</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021533</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078A54, <span class="variable">commitLogOffset=</span><span class="number">494164</span>, <span class="variable">bodyCRC=</span><span class="number">2054744282</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">698</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00575</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">699</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">699</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">698</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175033286</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021814</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078CB0, <span class="variable">commitLogOffset=</span><span class="number">494768</span>, <span class="variable">bodyCRC=</span><span class="number">225294519</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">699</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00583</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">700</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">700</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">699</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175033586</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175022113</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000078F0C, <span class="variable">commitLogOffset=</span><span class="number">495372</span>, <span class="variable">bodyCRC=</span><span class="number">1670775117</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">700</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00591</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">701</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">701</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">700</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175037890</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175026418</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079168, <span class="variable">commitLogOffset=</span><span class="number">495976</span>, <span class="variable">bodyCRC=</span><span class="number">344150304</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">701</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00599</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">702</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">702</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">701</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042200</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175030734</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF00000000000793C4, <span class="variable">commitLogOffset=</span><span class="number">496580</span>, <span class="variable">bodyCRC=</span><span class="number">442030354</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">702</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00603</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">703</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">703</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">702</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042345</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175030872</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079620, <span class="variable">commitLogOffset=</span><span class="number">497184</span>, <span class="variable">bodyCRC=</span><span class="number">688469276</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">703</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00607</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">704</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">704</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">703</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042481</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031008</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007987C, <span class="variable">commitLogOffset=</span><span class="number">497788</span>, <span class="variable">bodyCRC=</span><span class="number">778367237</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">704</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00611</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">705</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">705</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">704</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042615</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031143</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079AD8, <span class="variable">commitLogOffset=</span><span class="number">498392</span>, <span class="variable">bodyCRC=</span><span class="number">1578919281</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">705</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00615</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">706</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">706</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">705</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042753</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031280</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079D34, <span class="variable">commitLogOffset=</span><span class="number">498996</span>, <span class="variable">bodyCRC=</span><span class="number">1500619112</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">706</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00619</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">707</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">707</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">706</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175042887</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031414</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000079F90, <span class="variable">commitLogOffset=</span><span class="number">499600</span>, <span class="variable">bodyCRC=</span><span class="number">1355279683</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">707</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00623</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">708</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">708</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">707</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175043021</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031548</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007A1EC, <span class="variable">commitLogOffset=</span><span class="number">500204</span>, <span class="variable">bodyCRC=</span><span class="number">457136030</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">708</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00627</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">709</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">709</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">708</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175043154</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031681</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007A448, <span class="variable">commitLogOffset=</span><span class="number">500808</span>, <span class="variable">bodyCRC=</span><span class="number">475173767</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">709</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00631</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">710</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">710</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">709</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175043299</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031826</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007A6A4, <span class="variable">commitLogOffset=</span><span class="number">501412</span>, <span class="variable">bodyCRC=</span><span class="number">1814693875</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">710</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00635</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">711</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">711</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">3</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">710</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175043435</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175031962</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000007A900, <span class="variable">commitLogOffset=</span><span class="number">502016</span>, <span class="variable">bodyCRC=</span><span class="number">1799865322</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">711</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessageSync(MQClientAPIImpl.java:<span class="number">518</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessage(MQClientAPIImpl.java:<span class="number">433</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.PullAPIWrapper.pullKernelImpl(PullAPIWrapper.java:<span class="number">237</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullSyncImpl(DefaultMQPullConsumerImpl.java:<span class="number">304</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullBlockIfNotFound(DefaultMQPullConsumerImpl.java:<span class="number">425</span>)</div><div class="line">	at com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer.pullBlockIfNotFound(DefaultMQPullConsumer.java:<span class="number">321</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.PullConsumer.main(PullConsumer.java:<span class="number">56</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessageSync(MQClientAPIImpl.java:<span class="number">518</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessage(MQClientAPIImpl.java:<span class="number">433</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.PullAPIWrapper.pullKernelImpl(PullAPIWrapper.java:<span class="number">237</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullSyncImpl(DefaultMQPullConsumerImpl.java:<span class="number">304</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullBlockIfNotFound(DefaultMQPullConsumerImpl.java:<span class="number">425</span>)</div><div class="line">	at com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer.pullBlockIfNotFound(DefaultMQPullConsumer.java:<span class="number">321</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.PullConsumer.main(PullConsumer.java:<span class="number">56</span>)</div><div class="line">com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>&gt; failed</div><div class="line">	at com.alibaba.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="number">641</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessageSync(MQClientAPIImpl.java:<span class="number">518</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.MQClientAPIImpl.pullMessage(MQClientAPIImpl.java:<span class="number">433</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.PullAPIWrapper.pullKernelImpl(PullAPIWrapper.java:<span class="number">237</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullSyncImpl(DefaultMQPullConsumerImpl.java:<span class="number">304</span>)</div><div class="line">	at com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullBlockIfNotFound(DefaultMQPullConsumerImpl.java:<span class="number">425</span>)</div><div class="line">	at com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer.pullBlockIfNotFound(DefaultMQPullConsumer.java:<span class="number">321</span>)</div><div class="line">	at com.comstar.demo.rocketmq.simple.PullConsumer.main(PullConsumer.java:<span class="number">56</span>)</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">0</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196808</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191827</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000011C60, <span class="variable">commitLogOffset=</span><span class="number">72800</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">1</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196876</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191895</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000011EB0, <span class="variable">commitLogOffset=</span><span class="number">73392</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">2</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196903</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191928</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000012100, <span class="variable">commitLogOffset=</span><span class="number">73984</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">RocketMQ <span class="number">00001</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">3</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572718149</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">57165</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572713175</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000001222B, <span class="variable">commitLogOffset=</span><span class="number">74283</span>, <span class="variable">bodyCRC=</span><span class="number">1133127810</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00005</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">4</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572718178</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">57165</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572713210</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000012487, <span class="variable">commitLogOffset=</span><span class="number">74887</span>, <span class="variable">bodyCRC=</span><span class="number">1156050075</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">......</div><div class="line">[<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">22</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469170324786</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">49814</span>, <span class="variable">storeTimestamp=</span><span class="number">1469170313333</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000010D3AA, <span class="variable">commitLogOffset=</span><span class="number">1102762</span>, <span class="variable">bodyCRC=</span><span class="number">1707898805</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00477</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">62</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">23</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469170325237</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">49814</span>, <span class="variable">storeTimestamp=</span><span class="number">1469170313771</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000010D606, <span class="variable">commitLogOffset=</span><span class="number">1103366</span>, <span class="variable">bodyCRC=</span><span class="number">1654764460</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00481</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">62</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">24</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469170325652</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">49814</span>, <span class="variable">storeTimestamp=</span><span class="number">1469170314163</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000010D862, <span class="variable">commitLogOffset=</span><span class="number">1103970</span>, <span class="variable">bodyCRC=</span><span class="number">207227478</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00485</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">62</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">205</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">1</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">25</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469170326066</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">49814</span>, <span class="variable">storeTimestamp=</span><span class="number">1469170314595</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000010DABE, <span class="variable">commitLogOffset=</span><span class="number">1104574</span>, <span class="variable">bodyCRC=</span><span class="number">188206671</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">205</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">......</div><div class="line">RocketMQ <span class="number">01370</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">895</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">895</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">894</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175070573</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059101</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000095A89, <span class="variable">commitLogOffset=</span><span class="number">613001</span>, <span class="variable">bodyCRC=</span><span class="number">1094080495</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">895</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01374</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">896</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">896</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">895</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175070712</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059251</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000095CE5, <span class="variable">commitLogOffset=</span><span class="number">613605</span>, <span class="variable">bodyCRC=</span><span class="number">1180406774</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">896</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01378</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">897</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">897</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">896</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175070899</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059427</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000095F41, <span class="variable">commitLogOffset=</span><span class="number">614209</span>, <span class="variable">bodyCRC=</span><span class="number">1340989405</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">897</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01382</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">898</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">898</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">897</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175071054</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059582</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF000000000009619D, <span class="variable">commitLogOffset=</span><span class="number">614813</span>, <span class="variable">bodyCRC=</span><span class="number">681585164</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">898</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01386</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">899</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">899</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">898</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175071203</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059731</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF00000000000963F9, <span class="variable">commitLogOffset=</span><span class="number">615417</span>, <span class="variable">bodyCRC=</span><span class="number">802024981</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">899</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01390</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">900</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">900</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">2</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">899</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175071338</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51987</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059866</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">20911</span>, <span class="variable">msgId=</span>C0A8E817000051AF0000000000096655, <span class="variable">commitLogOffset=</span><span class="number">616021</span>, <span class="variable">bodyCRC=</span><span class="number">1605728865</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">900</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">0</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468571752640</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56433</span>, <span class="variable">storeTimestamp=</span><span class="number">1468571747895</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000011B38, <span class="variable">commitLogOffset=</span><span class="number">72504</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">1</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196772</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191803</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000011BCC, <span class="variable">commitLogOffset=</span><span class="number">72652</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">2</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196865</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191886</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000011E1C, <span class="variable">commitLogOffset=</span><span class="number">73244</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">Hello MetaQPullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">148</span>, <span class="variable">queueOffset=</span><span class="number">3</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572196899</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">56837</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572191917</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000001206C, <span class="variable">commitLogOffset=</span><span class="number">73836</span>, <span class="variable">bodyCRC=</span><span class="number">1751783629</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">11</span>]]</div><div class="line">RocketMQ <span class="number">00000</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">4</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572718127</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">57165</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572713166</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000012194, <span class="variable">commitLogOffset=</span><span class="number">74132</span>, <span class="variable">bodyCRC=</span><span class="number">881661972</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00004</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">31</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">209</span>, <span class="variable">msgFoundList=</span><span class="number">31</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">5</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1468572718170</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">57165</span>, <span class="variable">storeTimestamp=</span><span class="number">1468572713197</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F00000000000123F0, <span class="variable">commitLogOffset=</span><span class="number">74736</span>, <span class="variable">bodyCRC=</span><span class="number">870374413</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">209</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagA}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">......</div><div class="line">RocketMQ <span class="number">00560</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">210</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">210</span>, <span class="variable">msgFoundList=</span><span class="number">24</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">140</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175032756</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51986</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021285</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000126922, <span class="variable">commitLogOffset=</span><span class="number">1206562</span>, <span class="variable">bodyCRC=</span><span class="number">1679588729</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">210</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00568</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">210</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">210</span>, <span class="variable">msgFoundList=</span><span class="number">24</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">141</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175033043</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51986</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021570</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000126B7E, <span class="variable">commitLogOffset=</span><span class="number">1207166</span>, <span class="variable">bodyCRC=</span><span class="number">1791489355</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">210</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">00576</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">210</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">210</span>, <span class="variable">msgFoundList=</span><span class="number">24</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">142</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175033320</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">51986</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175021848</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000126DDA, <span class="variable">commitLogOffset=</span><span class="number">1207770</span>, <span class="variable">bodyCRC=</span><span class="number">342157581</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">210</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01392</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">210</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">210</span>, <span class="variable">msgFoundList=</span><span class="number">24</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">143</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175071411</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">52034</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175059951</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000127036, <span class="variable">commitLogOffset=</span><span class="number">1208374</span>, <span class="variable">bodyCRC=</span><span class="number">834345805</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">210</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01400</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">210</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">210</span>, <span class="variable">msgFoundList=</span><span class="number">24</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">144</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175071746</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">52034</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175060289</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F0000000000127292, <span class="variable">commitLogOffset=</span><span class="number">1208978</span>, <span class="variable">bodyCRC=</span><span class="number">188274605</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">210</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01408</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">211</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">211</span>, <span class="variable">msgFoundList=</span><span class="number">1</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">145</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175072078</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">52034</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175060614</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F00000000001274EE, <span class="variable">commitLogOffset=</span><span class="number">1209582</span>, <span class="variable">bodyCRC=</span><span class="number">98787231</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">211</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div><div class="line">RocketMQ <span class="number">01416</span>PullResult [<span class="variable">pullStatus=</span>FOUND, <span class="variable">nextBeginOffset=</span><span class="number">214</span>, <span class="variable">minOffset=</span><span class="number">0</span>, <span class="variable">maxOffset=</span><span class="number">214</span>, <span class="variable">msgFoundList=</span><span class="number">3</span>]MessageExt [<span class="variable">queueId=</span><span class="number">0</span>, <span class="variable">storeSize=</span><span class="number">151</span>, <span class="variable">queueOffset=</span><span class="number">146</span>, <span class="variable">sysFlag=</span><span class="number">0</span>, <span class="variable">bornTimestamp=</span><span class="number">1469175072405</span>, <span class="variable">bornHost=</span>/<span class="number">192.168</span>.<span class="number">234.98</span>:<span class="number">52034</span>, <span class="variable">storeTimestamp=</span><span class="number">1469175060934</span>, <span class="variable">storeHost=</span>/<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">10911</span>, <span class="variable">msgId=</span>C0A8E81700002A9F000000000012774A, <span class="variable">commitLogOffset=</span><span class="number">1210186</span>, <span class="variable">bodyCRC=</span><span class="number">2067809241</span>, <span class="variable">reconsumeTimes=</span><span class="number">0</span>, <span class="variable">preparedTransactionOffset=</span><span class="number">0</span>, <span class="built_in">toString</span>()=Message [<span class="variable">topic=</span>TopicTest1, <span class="variable">flag=</span><span class="number">0</span>, <span class="variable">properties=</span>{<span class="variable">MIN_OFFSET=</span><span class="number">0</span>, <span class="variable">MAX_OFFSET=</span><span class="number">214</span>, <span class="variable">KEYS=</span>OrderID188, <span class="variable">WAIT=</span><span class="constant">true</span>, <span class="variable">TAGS=</span>TagB}, <span class="variable">body=</span><span class="number">14</span>]]</div></pre></td></tr></table></figure></p>
<p>可以看到，Consumer 在 <code>broker-a</code> 宕机时间的附近，也出现了异常，<code>connect to &lt;192.168.232.23:10911&gt; failed</code>。虽然还能保持分区上的顺序性，但是已经某种程度上出现了一些紊乱，例如，将我在实验之前的数据给取了出来（<code>Hello MetaQ</code>的消息）。可是，我在实验前，明明做过删除这个 Topic 的动作，看来 RocketMQ 所谓的删除，并未删除 Topic 的数据。之后，<code>broker-a</code> 主机重启之后，又恢复正常。</p>
<p>RocketMQ Pull模式消费需要手动管理 offset 和指定分区，这个在调用的时候不觉得，实际运行的时候才会发现每次总是消费一个分区，消费完之后，才开始消费下一个分区，而下一个分区可能已经堆积了很多消息了，手动做消息分配又比较费事。或许，Push 顺序模式消费才是更好的选择。</p>
<p>另外还有几个比较异常的情况，实验中有几次出现了 <code>CODE: 17  DESC: topic[TopicTest1] not exist, apply first please!</code> 这样的错误，实际上，这时候我只是关掉了 Producer；还有，<code>sh mqadmin updateTopic –n 192.168.232.23:9876 –c DefaultCluster –t TopicTest1</code> 明明文档中说可以用来新增 Topic，而实际上不行。</p>
<blockquote>
<p>补充一下：之后，我又使用 Push 顺序模式消费重做了上述实验，结论差不多。只是因为有多线程的原因，日志看起来偶尔有错位，这个问题不大，可以解决。而且，在关闭重启 Broker 的附近，往往伴随着多次的消息重发，不过，RocketMQ 也不保证消息只收到一次就是了。消息重复的问题，Kafka 要比 RocketMQ 显得不那么严重一些。Push 顺序模式消费不需要指定 offset，不需要指定分区，第二次启动可以自动从前一次的 offset 后开始消费。功能上这个与 Kafka 的 Consumer 更类似，虽然 RocketMQ 采用的是异步模式。</p>
</blockquote>
<h2>RocketMQ 最佳实践</h2>
<p>实际上，RocketMQ 自己就有一份《RocketMQ 最佳实践》的文档，里面提到了一些系统设计的问题，例如消费者要幂等，一个应用对应一个 Topic，如此等等。这些经验不仅仅是对 RocketMQ 有用，对 Kafka 也颇有借鉴意义。</p>
<h2>后记</h2>
<p>这里谈谈我对选择 RocketMQ 还是 Kafka 的个人建议。以上已经做了多处 RocketMQ 和 Kafka 的对比，我个人觉得，Kafka 是一个不断发展中的系统，开源社区比 RocketMQ 要大，也要更活跃一些；另外，Kafka 最新版本已经有了同步复制，消息可靠性更有保障；还有，Kafka 的分区机制，几乎实现了自动负载均衡，这绝对是个杀手级特性；RocketMQ 虽然提供了很多易用的功能，远超出 Kafka，但这些功能并不一定都能用得上，而且多数可以绕过。相比之下，Kafka 的基本功能更加吸引我，再处理故障恢复的时候，细节上要胜过 RocketMQ。当然，如果是 A 公司内部，或者所在公司使用了 A 公司的云产品，那么 RocketMQ 的企业级特性更多一些，或许我会选择 RocketMQ。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/alibaba/RocketMQ" target="_blank" rel="external">https://github.com/alibaba/RocketMQ</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://github.com/alibaba/RocketMQ-docs" target="_blank" rel="external">https://github.com/alibaba/RocketMQ-docs</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.aliyun.com/product/ons" target="_blank" rel="external">http://www.aliyun.com/product/ons</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://github.com/alibaba/RocketMQ/wiki/rmq_vs_kafka" target="_blank" rel="external">https://github.com/alibaba/RocketMQ/wiki/rmq_vs_kafka</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.jianshu.com/p/453c6e7ff81c" target="_blank" rel="external">http://www.jianshu.com/p/453c6e7ff81c</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://blog.csdn.net/lovesomnus/article/details/51776942" target="_blank" rel="external">http://blog.csdn.net/lovesomnus/article/details/51776942</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="http://www.tuicool.com/articles/f2aaUnV" target="_blank" rel="external">http://www.tuicool.com/articles/f2aaUnV</a><a href="#fnref7">↩</a></p></li>
<li id="fn8"><p><a href="https://github.com/alibaba/RocketMQ/wiki/filter_server_guide" target="_blank" rel="external">https://github.com/alibaba/RocketMQ/wiki/filter_server_guide</a><a href="#fnref8">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>RocketMQ 是出自 A 公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进，消息可靠性上比 Kafka 更好，目前，RocketMQ 的文档仍然不够丰富 <a href="#fn1" class="footnoteRef" id]]>
    </summary>
    
      <category term="RocketMQ" scheme="http://valleylord.github.io/tags/RocketMQ/"/>
    
      <category term="MQ" scheme="http://valleylord.github.io/tags/MQ/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="RocketMQ" scheme="http://valleylord.github.io/categories/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[说说 MQ 之 Kafka]]></title>
    <link href="http://valleylord.github.io/post/201607-mq-kafka/"/>
    <id>http://valleylord.github.io/post/201607-mq-kafka/</id>
    <published>2016-07-11T06:56:12.000Z</published>
    <updated>2016-07-22T02:46:43.000Z</updated>
    <content type="html"><![CDATA[<p>现代的互联网分布式系统，只要稍微大一些，就一定逃不开3类中间件：远程调用（RPC）框架、消息队列、数据库访问中间件。Kafka 是消息队列中间件的代表产品，用 Scala 语言实现，本文采用的是 Kafka_2.11 0.10.0.0 版本进行实验。</p>
<h2>基本概念</h2>
<p>首先，Kafka 中有一些基本的概念需要熟悉 <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<ul>
<li>Topic，指消息的类别，每个消息都必须有；</li>
<li>Producer，指消息的产生者，或者，消息的写端；</li>
<li>Consumer，指消息的消费者，或者，消息的读端；</li>
<li>Producer Group，指产生者组，组内的生产者产生同一类消息；</li>
<li>Consumer Group，指消费者组，组内的消费者消费同一类消息；</li>
<li>Broker，指消息服务器，Producer 产生的消息都是写到这里，Consumer 读消息也是从这里读；</li>
<li>Zookeeper，是 Kafka 的注册中心，Broker 和 Consumer 之间的协调器，包含状态信息、配置信息和一些 Topic 的信息；</li>
<li>Partition，指消息的水平分区，一个 Topic 可以有多个分区；</li>
<li>Replica，指消息的副本，为了提高可用性，将消息副本保存在其他 Broker 上；</li>
</ul>
<p>特别说明，Broker 是指单个消息服务进程，一般情况下，Kafka 是集群运行的，Broker 只是集群中的一个服务进程，而非代指整个 Kafka 服务，可以简单将 Broker 理解成服务器（Server）。Kafka 引入的术语都比较常见，从字面上理解相对直观。Kafka 的大致结构图是这样，</p>
<p><img src="http://kafka.apache.org/images/producer_consumer.png"></p>
<p>Kafka 是 Pull 模式的消息队列，即 Consumer 连到消息队列服务上，主动请求新消息，如果要做到实时性，需要采用长轮询，Kafka 在0.8的时候已经支持长轮询模式。上图中 Consumer 的连接箭头方向可能会让读者误以为是 Push 模式，特此注明。更多关于 Kafka 设计的文章可以参考官方文档，或者一些比较好的博客文章 <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。</p>
<h3>关于顺序和分区</h3>
<p>Kafka 是一个力求保持消息顺序性的消息队列，但不是完全保证，其保证的是 Partition 级别的顺序性，如下图，</p>
<p><img src="http://kafka.apache.org/images/log_anatomy.png"></p>
<p>此图是 Topic 的分区 log 的示意图，可见，每个分区上的 log 都是一个有序的队列，所以，Kafka 是分区级别有序的。如果，某个 Topic 只有一个分区，那么这个 Topic 下的消息就都是有序的。</p>
<p>分区是为了提升消息处理的吞吐率而产生的，将一个 Topic 中的消息分成几份，分别给不同的 Broker 处理。如下图，</p>
<p><img src="http://kafka.apache.org/images/consumer-groups.png"></p>
<p>此图中有2个 Broker，Server 1 和 Server 2，每个 Broker 上有2个分区，总共4个分区，P0 ~ P3；有2个 Consumer Group，Consumer Group A 有2个 Consumer，Consumer Group B 有4个 Consumer。Kafka 的实现是，在稳定的情况下，维持固定的连接，每个 Consumer 稳定的消费其中某几个分区的消息，以上图举例，Consumer Group A 中的 C1 稳定消费 P0、P3，C2 稳定消费 P1、P2。这样的连接分配可能会导致消息消费的不均匀分布，但好处是比较容易保证顺序性。</p>
<p>维持完全的顺序性在分布式系统看来几乎是无意义的。因为，如果需要维持顺序性，那么就只能有一条线程阻塞的处理顺序消息，即，Producer -&gt; MQ -&gt; Consumer 必须线程上一一对应。这与分布式系统的初衷是相违背的。但是局部的有序性，是可以维持的。比如，有30000条消息，每3条之间有关联，1-&gt;2-&gt;3，4-&gt;5-&gt;6，……，但是全局范围来看，并不需要保证 1-&gt;4-&gt;7，可以 7-&gt;4-&gt;1 的顺序来执行，这样可以达到最大并行度10000，而这通常是现实中我们面对的情况。通常应用中，将有先后关系的消息发送到相同的分区上，即可解决大部分问题。</p>
<h3>关于副本</h3>
<p>副本是高可用 Kafka 集群的实现方式。假设集群中有3个 Broker，那么可以指定3个副本，这3个副本是对等的，对于某个 Topic 的分区来说，其中一个是 Leader，即主节点，另外2个副本是 Follower，即从节点，每个副本在一个 Broker 上。当 Leader 收到消息的时候，会将消息写一份到副本中，通常情况，只有 Leader 处于工作状态。在 Leader 发生故障宕机的时候，Follwer 会取代 Leader 继续传送消息，而不会发生消息丢失。Kafka 的副本是以分区为单位的，也就是说，即使是同一个 Topic，其不同分区的 Leader 节点也不同。甚至，Kafka 倾向于用不同的 Broker 来做分区的 Leader，因为这样能做到更好的负载均衡。</p>
<p>在副本间的消息同步，实际上是复制消息的 log，复制可以是同步复制，也可以是异步复制。同步复制是说，当 Leader 收到消息后，将消息写入从副本，只有在收到从副本写入成功的确认后才返回成功给 Producer；异步复制是说，Leader 将消息写入从副本，但是不等待从副本的成功确认，直接返回成功给 Producer。同步复制效率较低，但是消息不会丢；异步复制效率高，但是在 Broker 宕机的时候，可能会出现消息丢失。</p>
<h3>关于丢消息和重复收到消息</h3>
<p>任何一个 MQ 都需要处理丢消息和重复收到消息的，正常情况下，Kafka 可以保证：1. 不丢消息；2. 不重复发消息；3. 消息读且只读一次。当然这都是正常情况，极端情况，如 Broker 宕机，断电，这类情况下，Kafka 只能保证 1 或者 2，无法保证 3。</p>
<p>在有副本的情况下，Kafka 是可以保证消息不丢的，其前提是设置了同步复制，这也是 Kafka 的默认设置，但是可能出现重复发送消息，这个交给上层应用解决；在生产者中使用异步提交，可以保证不重复发送消息，但是有丢消息的可能，如果应用可以容忍，也可以接受。如果需要实现读且只读一次，就比较麻烦，需要更底层的 API <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<h2>Kafka 的工具和编程接口</h2>
<h3>Kafka 的工具</h3>
<p>Kafka 提供的工具还是比较全的，<code>bin/</code> 目录下的工具有以下一些，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bin/connect-distributed.<span class="keyword">sh</span>     bin/kafka-consumer-offset-checker.<span class="keyword">sh</span>     bin/kafka-replica-verification.<span class="keyword">sh</span>   bin/kafka-verifiable-producer.<span class="keyword">sh</span></div><div class="line">bin/connect-standalone.<span class="keyword">sh</span>      bin/kafka-consumer-perf-test.<span class="keyword">sh</span>          bin/kafka-run-class.<span class="keyword">sh</span>              bin/zookeeper-security-migration.<span class="keyword">sh</span></div><div class="line">bin/kafka-acls.<span class="keyword">sh</span>              bin/kafka-mirror-maker.<span class="keyword">sh</span>                bin/kafka-server-start.<span class="keyword">sh</span>           bin/zookeeper-server-start.<span class="keyword">sh</span></div><div class="line">bin/kafka-configs.<span class="keyword">sh</span>           bin/kafka-preferred-replica-election.<span class="keyword">sh</span>  bin/kafka-server-<span class="keyword">stop</span>.<span class="keyword">sh</span>            bin/zookeeper-server-<span class="keyword">stop</span>.<span class="keyword">sh</span></div><div class="line">bin/kafka-console-consumer.<span class="keyword">sh</span>  bin/kafka-producer-perf-test.<span class="keyword">sh</span>          bin/kafka-simple-consumer-<span class="keyword">shell</span>.<span class="keyword">sh</span>  bin/zookeeper-<span class="keyword">shell</span>.<span class="keyword">sh</span></div><div class="line">bin/kafka-console-producer.<span class="keyword">sh</span>  bin/kafka-reassign-partitions.<span class="keyword">sh</span>         bin/kafka-topics.<span class="keyword">sh</span></div><div class="line">bin/kafka-consumer-groups.<span class="keyword">sh</span>   bin/kafka-replay-<span class="built_in">log</span>-producer.<span class="keyword">sh</span>         bin/kafka-verifiable-consumer.<span class="keyword">sh</span></div></pre></td></tr></table></figure></p>
<p>我常用的命令有以下几个，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">server</span><span class="literal">-</span><span class="comment">start</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="comment">daemon</span> <span class="comment">config/server</span><span class="string">.</span><span class="comment">properties</span> <span class="comment">&</span></div><div class="line"></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">describe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">list</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">delete</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">replication</span><span class="literal">-</span><span class="comment">factor</span> <span class="comment">3</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">partitions</span> <span class="comment">2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">console</span><span class="literal">-</span><span class="comment">consumer</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">from</span><span class="literal">-</span><span class="comment">beginning</span></div><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">console</span><span class="literal">-</span><span class="comment">producer</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">broker</span><span class="literal">-</span><span class="comment">list</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:9092</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div></pre></td></tr></table></figure></p>
<p><code>kafka-server-start.sh</code> 是用于 Kafka 的 Broker 启动的，主要就一个参数 <code>config/server.properties</code>，该文件中的配置项待会再说.还有一个 <code>-daemon</code> 参数，这个是将 Kafka 放在后台用守护进程的方式运行，如果不加这个参数，Kafka 会在运行一段时间后自动退出，据说这个是 0.10.0.0 版本才有的问题 <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>。<code>kafka-topics.sh</code> 是用于管理 Topic 的工具，我主要用的 <code>--describe</code>、<code>--list</code>、<code>--delete</code>、<code>--create</code> 这4个功能，上述的例子基本是不言自明的，<code>--replication-factor 3</code>、<code>--partitions 2</code> 这两个参数分别表示3个副本（含 Leader），和2个分区。<code>kafka-console-consumer.sh</code> 和 <code>kafka-console-producer.sh</code> 是生产者和消费者的简易终端工具，在调试的时候比较有用，我常用的是 <code>kafka-console-consumer.sh</code>。我没有用 Kafka 自带的 zookeeper，而是用的 zookeeper 官方的发布版本 3.4.8，端口是默认2181，与 Broker 在同一台机器上。</p>
<p>下面说一下 Broker 启动的配置文件 <code>config/server.properties</code>，我在默认配置的基础上，修改了以下一些，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">broker.<span class="variable">id=</span><span class="number">0</span></div><div class="line"><span class="variable">listeners=</span>PLAINTEXT://<span class="number">192.168</span>.<span class="number">232.23</span>:<span class="number">9092</span></div><div class="line">log.<span class="variable">dirs=</span>/tmp/kafka-logs</div><div class="line">delete.topic.<span class="variable">enable=</span><span class="constant">true</span></div></pre></td></tr></table></figure></p>
<p><code>broker.id</code> 是 Kafka 集群中的 Broker ID，不可重复，我在多副本的实验中，将他们分别设置为0、1、2；<code>listeners</code> 是 Broker 监听的地址，默认是监听 <code>localhost:9092</code>，因为我不是单机实验，所以修改为本机局域网地址，当然，如果要监听所有地址的话，也可以设置为 <code>0.0.0.0:9092</code>，多副本实验中，将监听端口分别设置为 9092、9093、9094；<code>log.dirs</code> 是 Broker 的 log 的目录，多副本实验中，不同的 Broker 需要有不同的 log 目录；<code>delete.topic.enable</code> 设为 true 后，可以删除 Topic，并且连带 Topic 中的消息也一并删掉，否则，即使调用 <code>kafka-topics.sh --delete</code> 也无法删除 Topic，这是一个便利性的设置，对于开发环境可以，生产环境一定要设为 false（默认）。实验中发现， 如果有消费者在消费这个 Topic，那么也无法删除，还是比较安全的。</p>
<p>剩下的工具多数在文档中也有提到。如果看一下这些脚本的话，会发现多数脚本的写法都是一致的，先做一些参数的校验，最后运行 <code>exec $base_dir/kafka-run-class.sh XXXXXXXXX &quot;$@&quot;</code>，可见，这些工具都是使用运行 Java Class 的方式调用的。</p>
<h3>Kafka 的 Java API</h3>
<p>在编程接口方面，官方提供了 Scala 和 Java 的接口，社区提供了更多的其他语言的接口，基本上，无论用什么语言开发，都能找到相应的 API。下面说一下 Java 的 API 接口。</p>
<p>生产者的 API 只有一种，相对比较简单，代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Callback;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProducerDemo</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){</div><div class="line"></div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"192.168.232.23:9092,192.168.232.23:9093,192.168.232.23:9094"</span>);</div><div class="line">        props.put(<span class="string">"zookeeper.connect"</span>, <span class="string">"192.168.232.23:2181"</span>);</div><div class="line">        props.put(<span class="string">"client.id"</span>, <span class="string">"DemoProducer"</span>);</div><div class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.IntegerSerializer"</span>);</div><div class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</div><div class="line">        KafkaProducer&lt;Integer, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</div><div class="line"></div><div class="line">        String topic = <span class="string">"topic1"</span>;</div><div class="line">        Boolean isAsync = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">            String messageStr = <span class="string">"Message_"</span> + String.format(<span class="string">"%05d"</span>,messageNo);</div><div class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">            <span class="keyword">if</span> (isAsync) { <span class="comment">// Send asynchronously</span></div><div class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(topic,</div><div class="line">                        messageNo,</div><div class="line">                        messageStr), <span class="keyword">new</span> DemoCallBack(startTime, messageNo, messageStr));</div><div class="line">            } <span class="keyword">else</span> { <span class="comment">// Send synchronously</span></div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(topic,</div><div class="line">                            messageNo,</div><div class="line">                            messageStr)).get();</div><div class="line">                    System.out.println(<span class="string">"Sent message: ("</span> + messageNo + <span class="string">", "</span> + messageStr + <span class="string">")"</span>);</div><div class="line">                } <span class="keyword">catch</span> (InterruptedException | ExecutionException e) {</div><div class="line">                    e.printStackTrace();</div><div class="line">                }</div><div class="line">            }</div><div class="line"></div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                Thread.sleep(<span class="number">3</span>);</div><div class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">                e.printStackTrace();</div><div class="line">            }</div><div class="line">            ++messageNo;</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">class DemoCallBack implements Callback {</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> startTime;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> key;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">DemoCallBack</span>(<span class="keyword">long</span> startTime, <span class="keyword">int</span> key, String message) {</div><div class="line">        <span class="keyword">this</span>.startTime = startTime;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span>(RecordMetadata metadata, Exception exception) {</div><div class="line">        <span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</div><div class="line">        <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) {</div><div class="line">            System.out.println(</div><div class="line">                    <span class="string">"Send     message: ("</span> + String.format(<span class="string">"%05d"</span>,key) + <span class="string">", "</span> + message + <span class="string">") at offset "</span>+ metadata.offset() +</div><div class="line">                            <span class="string">" to partition("</span> + metadata.partition() +</div><div class="line">                            <span class="string">") in "</span> + elapsedTime + <span class="string">" ms"</span>);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            exception.printStackTrace();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上例中使用了同步和异步发送两种方式。在多副本的情况下，如果要指定同步复制还是异步复制，可以使用 <code>acks</code> 参数，详细参考官方文档 Producer Configs 部分的内容；在多分区的情况下，如果要指定发送到哪个分区，可以使用 <code>partitioner.class</code> 参数，其值是一个实现了 <code>org.apache.kafka.clients.producer.Partitioner</code> 接口的类，用于根据不同的消息指定分区<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>。消费者的 API 有几种，比较新的 API 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span></div><div class="line"></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.Arrays;</span></div><div class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.Properties;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumer</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args){</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"192.168.232.23:9092"</span>);</div><div class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</div><div class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</div><div class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line">        props.put(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</div><div class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.IntegerDeserializer"</span>);</div><div class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</div><div class="line">        KafkaConsumer&lt;Integer, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</div><div class="line">        consumer.subscribe(Arrays.asList(<span class="string">"topic1"</span>, <span class="string">"topic2"</span>, <span class="string">"topic3"</span>));</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</div><div class="line">            ConsumerRecords&lt;Integer, String&gt; records = consumer.poll(<span class="number">100</span>);</div><div class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;Integer, String&gt; record : records) {</div><div class="line">                System.out.println(<span class="string">"Received message: ("</span> + String.format(<span class="string">"%05d"</span>, record.key()) + <span class="string">", "</span> + record.value() + <span class="string">") at offset "</span> + record.offset());</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>消费者还有旧的 API，比如 <code>Consumer</code> 和 <code>SimpleConsumer</code> API，这些都可以从 Kafka 代码的 kafka-example 中找到，上述的两个例子也是改写自 kafka-example。使用新旧 API 在功能上都能满足消息收发的需要，但新 API 只依赖 <code>kafka-clients</code>，打包出来的 jar 包会小很多，以我的测试，新 API 的消费者 jar 包大约有 2M 左右，而旧 API 的消费者 jar 包接近 16M。</p>
<p>其实，Kafka 也提供了按分区订阅，可以一次订阅多个分区 <code>TopicPartition[]</code>；也支持手动提交 offset，需要调用 <code>consumer.commitSync</code>。</p>
<p>Kafka 似乎没有公开 Topic 创建以及修改的 API（至少我没有找到），如果生产者向 Broker 写入的 Topic 是一个新 Topic，那么 Broker 会创建这个 Topic。创建的过程中会使用默认参数，例如，分区个数，会使用 Broker 配置中的 <code>num.partitions</code> 参数（默认1）；副本个数，会使用 <code>default.replication.factor</code> 参数。但是通常情况下，我们会需要创建自定义的 Topic，那官方的途径是使用 Kafka 的工具。也有一些非官方的途径 <a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>，例如可以这样写，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>[] options = <span class="keyword">new</span> <span class="built_in">String</span>[]{</div><div class="line">        <span class="string">"--create"</span>,</div><div class="line">        <span class="string">"--zookeeper"</span>,</div><div class="line">        <span class="string">"192.168.232.23:2181"</span>,</div><div class="line">        <span class="string">"--partitions"</span>,</div><div class="line">        <span class="string">"2"</span>,</div><div class="line">        <span class="string">"--replication-factor"</span>,</div><div class="line">        <span class="string">"3"</span>,</div><div class="line">        <span class="string">"--topic"</span>,</div><div class="line">        <span class="string">"topic1"</span></div><div class="line">};</div><div class="line">TopicCommand.main(options);</div></pre></td></tr></table></figure></p>
<p>但是这样写有一个问题，在执行完 <code>TopicCommand.main(options);</code> 之后，系统会自动退出，原因是执行完指令之后，会调用 <code>System.exit(exitCode);</code> 系统直接退出。这样当然不行，我的办法是，把相关的执行代码挖出来，写一个 TopicUtils 类，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> joptsimple.OptionSpecBuilder;</div><div class="line"><span class="keyword">import</span> kafka.admin.TopicCommand;</div><div class="line"><span class="keyword">import</span> kafka.admin.TopicCommand$;</div><div class="line"><span class="keyword">import</span> kafka.utils.ZkUtils;</div><div class="line"><span class="keyword">import</span> org.apache.kafka.common.security.JaasUtils;</div><div class="line"><span class="keyword">import</span> scala.runtime.Nothing$;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicUtils</span> </span>{</div><div class="line">    <span class="comment">// from: http://blog.csdn.net/changong28/article/details/39325079</span></div><div class="line">    <span class="comment">// from: http://www.cnblogs.com/davidwang456/p/4313784.html</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTopic</span>(){</div><div class="line">        String[] options = <span class="keyword">new</span> String[]{</div><div class="line">                <span class="string">"--create"</span>,</div><div class="line">                <span class="string">"--zookeeper"</span>,</div><div class="line">                KafkaProperties.ZOOKEEPER_URL,</div><div class="line">                <span class="string">"--partitions"</span>,</div><div class="line">                <span class="string">"2"</span>,</div><div class="line">                <span class="string">"--replication-factor"</span>,</div><div class="line">                <span class="string">"3"</span>,</div><div class="line">                <span class="string">"--topic"</span>,</div><div class="line">                KafkaProperties.TOPIC</div><div class="line">        };</div><div class="line"><span class="comment">//        TopicCommand.main(options);</span></div><div class="line">        oper(options);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listTopic</span>(){</div><div class="line">        String[] options = <span class="keyword">new</span> String[]{</div><div class="line">                <span class="string">"--list"</span>,</div><div class="line">                <span class="string">"--zookeeper"</span>,</div><div class="line">                KafkaProperties.ZOOKEEPER_URL</div><div class="line">        };</div><div class="line"><span class="comment">//        TopicCommand.main(options);</span></div><div class="line">        oper(options);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteTopic</span>(){</div><div class="line">        String[] options = <span class="keyword">new</span> String[]{</div><div class="line">                <span class="string">"--delete"</span>,</div><div class="line">                <span class="string">"--zookeeper"</span>,</div><div class="line">                KafkaProperties.ZOOKEEPER_URL,</div><div class="line">                <span class="string">"--topic"</span>,</div><div class="line">                KafkaProperties.TOPIC</div><div class="line">        };</div><div class="line"><span class="comment">//        TopicCommand.main(options);</span></div><div class="line">        oper(options);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">describeTopic</span>(){</div><div class="line">        String[] options = <span class="keyword">new</span> String[]{</div><div class="line">                <span class="string">"--describe"</span>,</div><div class="line">                <span class="string">"--zookeeper"</span>,</div><div class="line">                KafkaProperties.ZOOKEEPER_URL,</div><div class="line">                <span class="string">"--topic"</span>,</div><div class="line">                KafkaProperties.TOPIC</div><div class="line">        };</div><div class="line"><span class="comment">//        TopicCommand.main(options);</span></div><div class="line">        oper(options);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){</div><div class="line">        listTopic();</div><div class="line">        createTopic();</div><div class="line">        listTopic();</div><div class="line">        describeTopic();</div><div class="line">        deleteTopic();</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            Thread.sleep(<span class="number">3</span>*<span class="number">1000</span>);</div><div class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">            e.printStackTrace();</div><div class="line">        }</div><div class="line">        listTopic();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="javadoc">/** copied & modified from kafka.admin.TopicCommand$.main</span></div><div class="line">     *</div><div class="line">     *<span class="javadoctag"> @param</span> args</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oper</span>(String args[]){</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">        TopicCommand$ topicCommand$ = TopicCommand$.MODULE$;</div><div class="line">        <span class="keyword">final</span> TopicCommand.TopicCommandOptions opts = <span class="keyword">new</span> TopicCommand.TopicCommandOptions(args);</div><div class="line">        <span class="keyword">if</span>(args.length == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">throw</span> kafka.utils.CommandLineUtils$.MODULE$.printUsageAndDie(opts.parser(), <span class="string">"Create, delete, describe, or change a topic."</span>);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">int</span> actions =<span class="number">0</span>;</div><div class="line">            OptionSpecBuilder[] optionSpecBuilders = {opts.createOpt(), opts.listOpt(), opts.alterOpt(), opts.describeOpt(), opts.deleteOpt()};</div><div class="line">            <span class="keyword">for</span> (OptionSpecBuilder temp:optionSpecBuilders){</div><div class="line">                <span class="keyword">if</span> (opts.options().has(temp)) {</div><div class="line">                    actions++;</div><div class="line">                }</div><div class="line">            }</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(actions != <span class="number">1</span>) {</div><div class="line">                <span class="keyword">throw</span> kafka.utils.CommandLineUtils$.MODULE$.printUsageAndDie(opts.parser(), <span class="string">"Command must include exactly one action: --list, --describe, --create, --alter or --delete"</span>);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                opts.checkArgs();</div><div class="line">                ZkUtils zkUtils = kafka.utils.ZkUtils$.MODULE$.apply((String)opts.options().valueOf(opts.zkConnectOpt()), <span class="number">30000</span>, <span class="number">30000</span>, JaasUtils.isZkSecurityEnabled());</div><div class="line">                <span class="keyword">byte</span> exitCode = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    <span class="keyword">try</span> {</div><div class="line">                        <span class="keyword">if</span>(opts.options().has(opts.createOpt())) {</div><div class="line">                            topicCommand$.createTopic(zkUtils, opts);</div><div class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span>(opts.options().has(opts.alterOpt())) {</div><div class="line">                            topicCommand$.alterTopic(zkUtils, opts);</div><div class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span>(opts.options().has(opts.listOpt())) {</div><div class="line">                            topicCommand$.listTopics(zkUtils, opts);</div><div class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span>(opts.options().has(opts.describeOpt())) {</div><div class="line">                            topicCommand$.describeTopic(zkUtils, opts);</div><div class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span>(opts.options().has(opts.deleteOpt())) {</div><div class="line">                            topicCommand$.deleteTopic(zkUtils, opts);</div><div class="line">                        }</div><div class="line">                    } <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable var12) {</div><div class="line">                        scala.Predef$.MODULE$.println((<span class="keyword">new</span> StringBuilder()).append(<span class="string">"Error while executing topic command : "</span>).append(var12.getMessage()).toString());</div><div class="line">                        System.out.println(var12);</div><div class="line">                        exitCode = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    }</div><div class="line">                } <span class="keyword">finally</span> {</div><div class="line">                    zkUtils.close();</div><div class="line"><span class="comment">//                    System.exit(exitCode);</span></div><div class="line">                }</div><div class="line"></div><div class="line">            }</div><div class="line">        }</div><div class="line">        } <span class="keyword">catch</span> (Nothing$ nothing$) {</div><div class="line">            nothing$.printStackTrace();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上的 <code>oper</code> 方法改写自 <code>kafka.admin.TopicCommand$.main</code> 方法。可以发现这部分代码非常怪异，原因是 <code>TopicCommand$</code> 是 Scala 写的，再编译成 Java class 字节码，然后我根据这些字节码反编译得到 Java 代码，并以此为基础进行修改，等于是我在用 Java 的方式改写 Scala 的代码，难免会觉得诡异。当然，这种写法用在生产环境的话是不太合适的，因为调用的 <code>topicCommand$.createTopic</code> 等方法都没有抛出异常，例如参数不合法的情况，而且也没有使用 log4j 之类的 log 库，只是用 <code>System.out.println</code> 这样的方法屏显，在出现错误的时候，比较难以定位。</p>
<h2>Kafka 副本和集群</h2>
<p>在生产环境中，Kafka 总是以“集群+分区”方式运行的，以保证可靠性和性能。下面是一个3副本的 Kafka 集群实例。</p>
<p>首先，需要启动3个 Kafka Broker，Broker 的配置文件分别如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">broker.id=<span class="number">0</span></div><div class="line">listeners=<span class="constant">PLAINTEXT</span><span class="symbol">://</span><span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9092</span></div><div class="line">log.dirs=<span class="regexp">/tmp/kafka</span>-logs</div><div class="line"></div><div class="line">broker.id=<span class="number">1</span></div><div class="line">listeners=<span class="constant">PLAINTEXT</span><span class="symbol">://</span><span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9093</span></div><div class="line">log.dirs=<span class="regexp">/tmp/kafka</span>-logs-<span class="number">1</span></div><div class="line"></div><div class="line">broker.id=<span class="number">1</span></div><div class="line">listeners=<span class="constant">PLAINTEXT</span><span class="symbol">://</span><span class="number">192.168</span>.<span class="number">232.23</span><span class="symbol">:</span><span class="number">9094</span></div><div class="line">log.dirs=<span class="regexp">/tmp/kafka</span>-logs-<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>虽然每个 Broker 只配置了一个端口，实际上，Kafka 会多占用一个，可能是用来 Broker 之间的复制的。另外，3个 Broker 都配置了，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zookeeper.<span class="variable">connect=</span>localhost:<span class="number">2181</span></div><div class="line">delete.topic.<span class="variable">enable=</span><span class="constant">true</span></div></pre></td></tr></table></figure></p>
<p>在同一个 Zookeeper 上的 Broker 会被归类到一个集群中。注意，这些配置中并没有指定哪一个 Broker 是主节点，哪些 Broker 是从节点，Kafka 采用的办法是从可选的 Broker 中，选出每个分区的 Leader。也就是说，对某个 Topic 来说，可能0节点是 Leader，另外一些 Topic，可能1节点是 Leader；甚至，如果 topic1 有2个分区的话，分区1的 Leader 是0节点，分区2的 Leader 是1节点。</p>
<p>这种对等的设计，对于故障恢复是十分有用的，在节点崩溃的时候，Kafka 会自动选举出可用的从节点，将其升级为主节点。在崩溃的节点恢复，加入集群之后，Kafka 又会将这个节点加入到可用节点，并自动选举出新的主节点。</p>
<p>实验如下，先新建一个3副本，2分区的 Topic，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">replication</span><span class="literal">-</span><span class="comment">factor</span> <span class="comment">3</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">partitions</span> <span class="comment">2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div></pre></td></tr></table></figure></p>
<p>初始状况下，topic1 的状态如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">describe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">Topic:topic1</span>    <span class="comment">PartitionCount:2</span>        <span class="comment">ReplicationFactor:3</span>     <span class="comment">Configs:</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">0</span>    <span class="comment">Leader:</span> <span class="comment">0</span>       <span class="comment">Replicas:</span> <span class="comment">0</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">2</span> <span class="comment">Isr:</span> <span class="comment">0</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">2</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">1</span>    <span class="comment">Leader:</span> <span class="comment">1</span>       <span class="comment">Replicas:</span> <span class="comment">1</span><span class="string">,</span><span class="comment">2</span><span class="string">,</span><span class="comment">0</span> <span class="comment">Isr:</span> <span class="comment">1</span><span class="string">,</span><span class="comment">2</span><span class="string">,</span><span class="comment">0</span></div></pre></td></tr></table></figure></p>
<p>对于上面的输出，即使没有文档，也可以看懂大概：topic1 有2个分区，Partition 0 和 Partition 1，Leader 分别在 Broker 0 和 1。Replicas 表示副本在哪些 Broker 上，Isr（In-Sync Replicas）表示处于同步状态中的 Broker，如果有 Broker 宕机了，那么 Replicas 不会变，但是 Isr 会仅显示没有宕机的 Broker，详见下面的实验。</p>
<p>然后分2个线程，运行之前写的 Producer 和 Consumer 的示例代码，Producer 采用异步发送，消息采用同步复制。在有消息传送的情况下，<code>kill -9</code> 停掉其中2个 Broker（Broker 0 和 Broker 1），模拟突然宕机。此时，topic1 状态如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">describe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">Topic:topic1</span>    <span class="comment">PartitionCount:2</span>        <span class="comment">ReplicationFactor:3</span>     <span class="comment">Configs:</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">0</span>    <span class="comment">Leader:</span> <span class="comment">2</span>       <span class="comment">Replicas:</span> <span class="comment">0</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">2</span> <span class="comment">Isr:</span> <span class="comment">2</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">1</span>    <span class="comment">Leader:</span> <span class="comment">2</span>       <span class="comment">Replicas:</span> <span class="comment">1</span><span class="string">,</span><span class="comment">2</span><span class="string">,</span><span class="comment">0</span> <span class="comment">Isr:</span> <span class="comment">2</span></div></pre></td></tr></table></figure></p>
<p>可见，Kafka 已经选出了新的 Leader，消息传送没有中断。接着再启动被停掉的那两个 Broker，并查看 topic1 的状态，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">describe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">Topic:topic1</span>    <span class="comment">PartitionCount:2</span>        <span class="comment">ReplicationFactor:3</span>     <span class="comment">Configs:</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">0</span>    <span class="comment">Leader:</span> <span class="comment">2</span>       <span class="comment">Replicas:</span> <span class="comment">0</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">2</span> <span class="comment">Isr:</span> <span class="comment">2</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">0</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">1</span>    <span class="comment">Leader:</span> <span class="comment">2</span>       <span class="comment">Replicas:</span> <span class="comment">1</span><span class="string">,</span><span class="comment">2</span><span class="string">,</span><span class="comment">0</span> <span class="comment">Isr:</span> <span class="comment">2</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">0</span></div><div class="line"></div><div class="line"><span class="comment">$</span> <span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">describe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">232</span><span class="string">.</span><span class="comment">23:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">topic1</span></div><div class="line"><span class="comment">Topic:topic1</span>    <span class="comment">PartitionCount:2</span>        <span class="comment">ReplicationFactor:3</span>     <span class="comment">Configs:</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">0</span>    <span class="comment">Leader:</span> <span class="comment">2</span>       <span class="comment">Replicas:</span> <span class="comment">0</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">2</span> <span class="comment">Isr:</span> <span class="comment">2</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">0</span></div><div class="line">        <span class="comment">Topic:</span> <span class="comment">topic1</span>   <span class="comment">Partition:</span> <span class="comment">1</span>    <span class="comment">Leader:</span> <span class="comment">1</span>       <span class="comment">Replicas:</span> <span class="comment">1</span><span class="string">,</span><span class="comment">2</span><span class="string">,</span><span class="comment">0</span> <span class="comment">Isr:</span> <span class="comment">2</span><span class="string">,</span><span class="comment">1</span><span class="string">,</span><span class="comment">0</span></div></pre></td></tr></table></figure></p>
<p>可以发现， 有一个短暂的时间，topic1 的两个分区的 Leader 都是 Broker 2，但是在 Kafka 重新选举之后，分区1的 Leader 变为 Broker 1。说明 Kafka 倾向于用不同的 Broker 做分区的 Leader，这样更能达到负载均衡的效果。</p>
<p>再来看看 Producer 和 Consumer 的日志，下面这个片段是2个 Broker 宕机前后的日志，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">Send     message: (<span class="number">00439</span>, Message_00439) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">217</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">3</span> ms</div><div class="line">Received message: (<span class="number">00438</span>, Message_00438) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">216</span></div><div class="line">Send     message: (<span class="number">00440</span>, Message_00440) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">218</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">5</span> ms</div><div class="line">Send     message: (<span class="number">00441</span>, Message_00441) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">221</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">5</span> ms</div><div class="line">Received message: (<span class="number">00441</span>, Message_00441) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">221</span></div><div class="line">Received message: (<span class="number">00439</span>, Message_00439) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">217</span></div><div class="line">Send     message: (<span class="number">00442</span>, Message_00442) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">222</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">5</span> ms</div><div class="line">Send     message: (<span class="number">00443</span>, Message_00443) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">219</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">3</span> ms</div><div class="line">Received message: (<span class="number">00440</span>, Message_00440) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">218</span></div><div class="line">Received message: (<span class="number">00443</span>, Message_00443) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">219</span></div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">org.apache.kafka.common.errors.NetworkException: The server disconnected <span class="keyword">before</span> <span class="operator">a</span> response was received.</div><div class="line">Received message: (<span class="number">00442</span>, Message_00442) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">222</span></div><div class="line">Send     message: (<span class="number">00452</span>, Message_00452) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">223</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7492</span> ms</div><div class="line">Send     message: (<span class="number">00454</span>, Message_00454) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">224</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7485</span> ms</div><div class="line">Send     message: (<span class="number">00455</span>, Message_00455) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">225</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7482</span> ms</div><div class="line">Send     message: (<span class="number">00458</span>, Message_00458) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">226</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7473</span> ms</div><div class="line">Send     message: (<span class="number">00460</span>, Message_00460) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">227</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7467</span> ms</div><div class="line">Send     message: (<span class="number">00461</span>, Message_00461) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">228</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7465</span> ms</div><div class="line">Send     message: (<span class="number">00462</span>, Message_00462) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">229</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7462</span> ms</div><div class="line">Send     message: (<span class="number">00463</span>, Message_00463) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">230</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7459</span> ms</div><div class="line">Send     message: (<span class="number">00464</span>, Message_00464) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">231</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7456</span> ms</div><div class="line">Send     message: (<span class="number">00465</span>, Message_00465) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">232</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">7453</span> ms</div><div class="line">......</div><div class="line">Send     message: (<span class="number">01103</span>, Message_01103) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">543</span> <span class="built_in">to</span> partition(<span class="number">1</span>) <span class="operator">in</span> <span class="number">5478</span> ms</div><div class="line">Received message: (<span class="number">00631</span>, Message_00631) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">310</span></div><div class="line">Received message: (<span class="number">00633</span>, Message_00633) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">311</span></div><div class="line">Send     message: (<span class="number">00451</span>, Message_00451) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">220</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">7525</span> ms</div><div class="line">Received message: (<span class="number">00634</span>, Message_00634) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">312</span></div><div class="line">Send     message: (<span class="number">00453</span>, Message_00453) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">221</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">7518</span> ms</div><div class="line">Received message: (<span class="number">00639</span>, Message_00639) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">313</span></div><div class="line">Send     message: (<span class="number">00456</span>, Message_00456) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">222</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">7509</span> ms</div><div class="line">Received message: (<span class="number">00641</span>, Message_00641) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">314</span></div><div class="line">Send     message: (<span class="number">00457</span>, Message_00457) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">223</span> <span class="built_in">to</span> partition(<span class="number">0</span>) <span class="operator">in</span> <span class="number">7506</span> ms</div><div class="line">Received message: (<span class="number">00643</span>, Message_00643) <span class="keyword">at</span> <span class="built_in">offset</span> <span class="number">315</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>出现错误的时候，Producer 抛出了 <code>NetworkException</code> 异常。其中有3589条 Received 日志，3583条 Send 日志，7条 <code>NetworkException</code> 异常日志，发送消息的最大序号是3590，接收消息的最大序号是3589，有以下几个值得注意的地方，</p>
<ol>
<li>宕机之前，消息的接收并不是顺序的，这是因为 topic1 有2个分区，Kafka 只保证分区上的有序；</li>
<li>宕机之后，出现了长段的发送日志而没有接收日志，说明 Kafka 此时正在选举，选举的过程会阻塞消费者；</li>
<li>从接收消息的条数和序号来看，所有的消息都收到了，没有丢（没有收到3590的消息可能是因为强制退出 client 进程的原因），发送的过程的7个异常应该只是虚警，7条异常对应序号444~450，3583条 Send 消息再加上这7条，与总消息3590条一致；</li>
</ol>
<p>从这个实验中，可以看到，虽然 Kafka 不保证消息重复发送，但是却在尽量保证没有消息被重复发送，可能我的实验场景还不够极端，没有做出消息重复的情况。</p>
<p>如之前所说，如果要保持完全顺序性，需要使用单分区；如果要避免抛出 <code>NetworkException</code> 异常，就使用 Producer 同步发送。下面，我们重做上面的例子，不同之处是使用单分区和 Producer 同步发送，截取一段 Broker 宕机时的日志如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">118</span>, Message_00118)</div><div class="line">Received <span class="keyword">message</span>: (<span class="number">00118</span>, Message_00118) at offset <span class="number">117</span></div><div class="line">Received <span class="keyword">message</span>: (<span class="number">00119</span>, Message_00119) at offset <span class="number">118</span></div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">119</span>, Message_00119)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">120</span>, Message_00120)</div><div class="line">Received <span class="keyword">message</span>: (<span class="number">00120</span>, Message_00120) at offset <span class="number">119</span></div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">121</span>, Message_00121)</div><div class="line">Received <span class="keyword">message</span>: (<span class="number">00121</span>, Message_00121) at offset <span class="number">120</span></div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">122</span>, Message_00122)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">123</span>, Message_00123)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">124</span>, Message_00124)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">125</span>, Message_00125)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">126</span>, Message_00126)</div><div class="line">Sent <span class="keyword">message</span>: (<span class="number">127</span>, Message_00127)</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>可见，由于采用同步发送，Broker 宕机并没有造成抛出异常，另外，由于使用单分区，顺序性也得到了保证，全局没有出现乱序的情况。</p>
<p>综上，是否使用多分区更多的是对顺序性的要求，而使用 Producer 同步发送还是异步发送，更多是出于重复消息的考虑，如果异步发送抛出异常，在保证不丢消息的前提下，势必要重发消息，这就会导致收到重复消息。多分区和 Producer 异步发送，会带来性能的提升，但是也会引入非顺序性，重复消息等问题，如何取舍要看应用的需求。</p>
<h2>Kafka 最佳实践</h2>
<p>Kafka 在一些应用场景中，有一些前人总结的最佳实践 <a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a> <a href="#fn9" class="footnoteRef" id="fnref9"><sup>9</sup></a>。对最佳实践，我的看法是，对于自己比较熟悉，有把握的部分，可以按自己的步骤进行；对一些自己不清楚的领域，可以借鉴其中的一些内容，至少不会错的特别厉害。有文章<a href="#fn10" class="footnoteRef" id="fnref10"><sup>10</sup></a>说，Kafka 在分区比较多的时候，相应时间会变长，这个现象值得在实践中注意。</p>
<h2>后记</h2>
<p>在 Kafka 与 RocketMQ 的对比中，RocketMQ 的一个核心功能就是可以支持同步刷盘，此时，即使突然断电，也可以保证消息不丢；而 Kafka 采用的是异步刷盘，即使返回写入成功，也只是写入缓冲区成功，并非已经持久化。因此，如果出现断电或 <code>kill -9</code> 的情况，Kafka 内存中的消息可能丢失。另外，同步刷盘的效率是比较低下的，一般生产中估计也不会使用，可以用优雅关闭的方式来关闭进程。如果不考虑这些极端情况的话，Kafka 基本是一个很可靠的消息中间件。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://kafka.apache.org/documentation.html" target="_blank" rel="external">http://kafka.apache.org/documentation.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.jianshu.com/p/453c6e7ff81c" target="_blank" rel="external">http://www.jianshu.com/p/453c6e7ff81c</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.infoq.com/cn/author/%E9%83%AD%E4%BF%8A#文章" target="_blank" rel="external">http://www.infoq.com/cn/author/%E9%83%AD%E4%BF%8A#文章</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://developer.51cto.com/art/201501/464491.htm" target="_blank" rel="external">http://developer.51cto.com/art/201501/464491.htm</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="https://segmentfault.com/q/1010000004292925" target="_blank" rel="external">https://segmentfault.com/q/1010000004292925</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://www.cnblogs.com/gnivor/p/5318319.html" target="_blank" rel="external">http://www.cnblogs.com/gnivor/p/5318319.html</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="http://www.cnblogs.com/davidwang456/p/4313784.html" target="_blank" rel="external">http://www.cnblogs.com/davidwang456/p/4313784.html</a><a href="#fnref7">↩</a></p></li>
<li id="fn8"><p><a href="http://www.jianshu.com/p/8689901720fd" target="_blank" rel="external">http://www.jianshu.com/p/8689901720fd</a><a href="#fnref8">↩</a></p></li>
<li id="fn9"><p><a href="http://zqhxuyuan.github.io/2016/05/26/2016-05-13-Kafka-Book-Sample/" target="_blank" rel="external">http://zqhxuyuan.github.io/2016/05/26/2016-05-13-Kafka-Book-Sample/</a><a href="#fnref9">↩</a></p></li>
<li id="fn10"><p><a href="http://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/" target="_blank" rel="external">http://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/</a><a href="#fnref10">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>现代的互联网分布式系统，只要稍微大一些，就一定逃不开3类中间件：远程调用（RPC）框架、消息队列、数据库访问中间件。Kafka 是消息队列中间件的代表产品，用 Scala 语言实现，本文采用的是 Kafka_2.11 0.10.0.0 版本进行实验。</p>
<h2>基本概]]>
    </summary>
    
      <category term="Kafka" scheme="http://valleylord.github.io/tags/Kafka/"/>
    
      <category term="MQ" scheme="http://valleylord.github.io/tags/MQ/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Scala" scheme="http://valleylord.github.io/tags/Scala/"/>
    
      <category term="Kafka" scheme="http://valleylord.github.io/categories/Kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dubbox 发布到 nexus maven 私服]]></title>
    <link href="http://valleylord.github.io/post/201606-dubbo-maven-nexus/"/>
    <id>http://valleylord.github.io/post/201606-dubbo-maven-nexus/</id>
    <published>2016-06-16T01:22:19.000Z</published>
    <updated>2016-06-16T03:49:29.000Z</updated>
    <content type="html"><![CDATA[<p>dubbo 是阿里开源的服务治理框架，可惜到 2.5.3 版本之后就不再更新，好在当当接过了更新的大旗，改名 dubbox，目前已经更新到 2.8.4 版本。由于当当并没有将 dubbox 发布到 maven 仓库中，因此在开发使用的时候，需要本地构建 dubbox，并安装到本地的 maven 仓库中。但是，当开发人员越来越多的时候，每个人都需要本地构建 dubbox 比较费时，因此，将 dubbox 发布到公司内部的私有 maven 仓库中，是一个不错的办法。</p>
<p>nexus 是目前用的比较多的 maven 仓库的私服，本文记录在 nexus 私服上发布 dubbox 的方法，参考 <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<h2>下载源码和构建 dubbox</h2>
<p>下载 dubbox 2.8.4 的源码，在源码的根目录下运行 <code>maven install</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn <span class="operator"><span class="keyword">install</span> -DskipTests</span></div></pre></td></tr></table></figure></p>
<p>构建的过程中跳过测试，构建完成之后，会安装到本地 maven 仓库中。</p>
<h2>修改 <code>pom.xml</code> 和 <code>setting.xml</code></h2>
<p>修改源码根目录下的 <code>pom.xml</code>，在文件尾部增加 <code>distributionManagement</code> 节点，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	<span class="tag">&lt;<span class="title">distributionManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="title">id</span>&gt;</span>  </div><div class="line">			<span class="tag">&lt;<span class="title">url</span>&gt;</span>http://maven-private-server:8081/nexus/content/repositories/releases<span class="tag">&lt;/<span class="title">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span>		</div><div class="line">	<span class="tag">&lt;/<span class="title">distributionManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上述的 <code>maven-private-server</code> 需要换成实际的私服地址。还有 maven 的配置文件 <code>setting.xml</code>，也需要确认一下，需要有可以 deploy 的用户，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="code">......</span></div><div class="line">   &lt;servers&gt;</div><div class="line">    &lt;server&gt;  </div><div class="line">      &lt;id&gt;releases&lt;/id&gt;  </div><div class="line">      &lt;username&gt;admin&lt;/username&gt;  </div><div class="line">      &lt;password&gt;password&lt;/password&gt;  </div><div class="line">    &lt;/server&gt;  </div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>注意，maven server 的 id 需要和上面配置的 repository 的 id 保持一致。</p>
<h2>配置 nexus 私服的权限</h2>
<p>确认 releases 这个私服的权限是允许重复发布的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">Deployment</span> Policy:    Allow Redeploy</div></pre></td></tr></table></figure></p>
<p>这个主要是如果 dubbox 需要重复发布的话，可以覆盖之前发布的版本。</p>
<h2>发布到 nexus 私服</h2>
<p>用 <code>maven deploy</code> 发布到 nexus 私服，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mvn</span> deploy -DskipTests</div></pre></td></tr></table></figure></p>
<p>deploy 完成后，发现只发布了几个模块，并不是发布了所有的组件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dubbo</div><div class="line">dubbo-<span class="literal">admin</span></div><div class="line">dubbo-demo-consumer</div><div class="line">dubbo-demo-provider</div><div class="line">dubbo-monitor-simple</div><div class="line">dubbo-parent</div><div class="line">dubbo-registry-simple</div><div class="line">hessian-lite</div></pre></td></tr></table></figure></p>
<p>原因是，部分组件的 <code>pom.xml</code> 中设置了 <code>&lt;skip_maven_deploy&gt;true&lt;/skip_maven_deploy&gt;</code> 在 deploy 的时候会跳过这些组件。如果要全部发布，需要全部修改为 <code>&lt;skip_maven_deploy&gt;false&lt;/skip_maven_deploy&gt;</code>，可以使用如下命令来全部替换，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">find</span> . | <span class="keyword">grep</span> pom.xml | xargs <span class="keyword">grep</span> -<span class="keyword">l</span> <span class="string">"skip_maven_deploy&gt;true"</span> | xargs sed -<span class="keyword">i</span> <span class="string">'s/&lt;skip_maven_deploy&gt;true/&lt;skip_maven_deploy&gt;false/g'</span></div></pre></td></tr></table></figure></p>
<p>修改完之后，重新运行 <code>mvn deploy -DskipTests</code> 即可全部 deploy。</p>
<p>至此，dubbox 已经发布到私服完成.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://my.oschina.net/ydsakyclguozi/blog/408048" target="_blank" rel="external">http://my.oschina.net/ydsakyclguozi/blog/408048</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>dubbo 是阿里开源的服务治理框架，可惜到 2.5.3 版本之后就不再更新，好在当当接过了更新的大旗，改名 dubbox，目前已经更新到 2.8.4 版本。由于当当并没有将 dubbox 发布到 maven 仓库中，因此在开发使用的时候，需要本地构建 dubbox，并安装]]>
    </summary>
    
      <category term="dubbo" scheme="http://valleylord.github.io/tags/dubbo/"/>
    
      <category term="maven" scheme="http://valleylord.github.io/tags/maven/"/>
    
      <category term="dubbo" scheme="http://valleylord.github.io/categories/dubbo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析内存模型]]></title>
    <link href="http://valleylord.github.io/post/201606-memory-model/"/>
    <id>http://valleylord.github.io/post/201606-memory-model/</id>
    <published>2016-06-05T00:31:19.000Z</published>
    <updated>2016-06-12T02:52:24.000Z</updated>
    <content type="html"><![CDATA[<h2>问题的背景</h2>
<p>内存模型（Memory Model）是编程中比较深入的一个问题，它与编程语言有关、与编译器有关、与并发有关、与处理器也有关。但是一旦发生与内存模型相关的问题，总是出现在并发的场景下，多数情况下，我们搞不清楚内存模型和并发有什么关系，似乎紧密相关，又似乎找不到必然的联系。本文试图尽量浅显明白的说清楚内存模型这个问题，行文中参考了一些文章 <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> <a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> 。</p>
<h3>线程级重排序</h3>
<p>先说说什么是重排序。重排序有很多种，最常见的是编译优化重排序，就是说，你写的代码，可能你自己已经觉得很优化了，但是计算机不见得觉得足够优化，因此它会调整你的代码中某些行的执行顺序（甚至以等价的方式重写代码），以达到效率上的提升。这个在写代码的时候已经见过很多了，比如，在 Windows 上写代码，开发的时候会用 Debug 模式构建，但是发布的程序会使用 Release 模式构建；Linux 上也类似，开发的时候用 <code>gcc -O</code>，发布的时候用 <code>gcc -O3</code>。这其中的差异，部分就在代码的重排序优化上，例如，循环的展开：如果编译器认为这个循环比较小，那么展开循环可以省去跳转指令（JUMP），对性能会有提升。当然，这个例子可能不是特别恰当，总之想说明白的就是，你写的代码和计算机执行的代码<strong>几乎必然</strong>是两回事，虽然结果一样。</p>
<p>还有一种重排序，指令并行重排序。现代的 CPU 都是流水线的，同时在执行的指令有多条（在执行的不同阶段，这与 CPU 架构有关），如果 CPU 认为，你代码中的这些指令不存在相关性，那么它就会选择并行执行。并行执行后，代码的顺序进一步被打乱。</p>
<p>其实，我个人认为，重排序只有这两种，但是也有认为<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>还有第三种重排序，内存系统重排序，我认为这应该属于 CPU 缓存。</p>
<p>这两种重排序，可以称为“线程级”（这是我造的名词），因为这两种重排序都是发生在单个线程内部，以不改变该线程的计算结果为依据进行的改进，也就是说，如果碰到多线程相互作用的情况，可能有问题。</p>
<h3>CPU 缓存</h3>
<p>再说说 CPU 缓存，学计算机的都知道，CPU 和内存之间还隔着 N 层缓存，以现代的 CPU 来看，一般有 3 层缓存，L1、L2、L3、再下面就是内存了，每一层比下一层速度更快，容量更小。如下图（这是只有一层缓存的示意图），</p>
<p><img src="/images/201606-memory-model/cpu-cache.png"></p>
<p>为了提升程序运行效率，CPU 在从内存取数据之后，会把数据存在缓存中，下次取数据的时候，直接从缓存中拿。当然，缓存数据最终会写入内存，但是在程序运行的过程中，可能内存中的数据不是最新的，最新数据在缓存中。在现代 CPU 中，一般有多个核，每个 CPU 核都会有自己的缓存，但是内存只有一块，是共享的。何时从缓存中读取数据，CPU 的优化有个标准，就是“线程级”结果正确，也就是说，当 CPU 认为，对于当前线程（不考虑其他线程的修改），如果内存和缓存中的数据一致，那么会用缓存中的数据。当然，如果有其他线程对共享的内存做了修改，就会导致 CPU 没有意识到内存已经变化，而仍然取缓存中的数据，导致执行错误。</p>
<h2>内存模型解决了什么问题</h2>
<p>上文中大致介绍了内存模型与编译器有关（编译优化重排序）、与处理器有关（指令并行重排序、CPU 缓存）、与并发有关（CPU 缓存），那么内存模型究竟解决了什么问题呢？</p>
<p>先看一个例子，假设有两个线程，线程的代码和初始值如下，</p>
<table>
<thead>
<tr class="header">
<th align="left">线程1</th>
<th align="left">线程2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>r2=A; //1</code></td>
<td align="left"><code>r1=B; //3</code></td>
</tr>
<tr class="even">
<td align="left"><code>B=1; //2</code></td>
<td align="left"><code>A=2; //4</code></td>
</tr>
<tr class="odd">
<td align="left">初始值：<code>A=B=0;</code></td>
<td align="left"></td>
</tr>
</tbody>
</table>
<p>问题是，程序运行完后，<code>r1</code> 和 <code>r2</code> 的值是多少？如果你的答案是不确定，那么答对了，那么有几种可能的结果呢？我们来分析一下，</p>
<ol>
<li>执行顺序假设是：1-&gt;2-&gt;3-&gt;4，答案是 <code>r1=1</code> <code>r2=0</code>；</li>
<li>执行顺序假设是：1-&gt;3-&gt;2-&gt;4，1-&gt;3-&gt;4-&gt;2，3-&gt;1-&gt;4-&gt;2，3-&gt;1-&gt;2-&gt;4，答案是 <code>r1=0</code> <code>r2=0</code>；</li>
<li>执行顺序假设是：3-&gt;4-&gt;1-&gt;2，答案是 <code>r1=0</code> <code>r2=2</code>；</li>
</ol>
<p>因此，总共有3个不同的结果。可是，这个答案对么？不对，因为这个解答没有考虑到刚才说到的重排序和 CPU 缓存。</p>
<p>我们先分析，如果有 CPU 缓存会发生什么。有缓存之后，<code>A</code> <code>B</code> 的值都可能缓存在内存中，因此，缓存中可能存有 <code>A=0</code> <code>A=2</code> <code>B=0</code> <code>B=1</code> 这样的中间结果，而另一个线程会读到什么值是不确定的。假设执行顺序是 1-&gt;2-&gt;3-&gt;4，但是，1、2完成的时候，只修改了线程1所在 CPU 的缓存，并未更新内存中的值，这样，线程2就无法读取到 <code>B=1</code>，结果还是 <code>r1=0</code> <code>r2=0</code>。同样的逻辑也适用于执行顺序是 3-&gt;4-&gt;1-&gt;2 的情况，看起来程序多了很多 <code>r1=0</code> <code>r2=0</code> 的情况。那么，虽然引发的原因不同，但是，程序的结果应该是只有这 3 种了，对么？不对，别忘了还有重排序。</p>
<p>不管是编译器优化重排序，还是指令并行重排序，单看本线程内，如果语句的顺序调整不会引发结果错误，那么这种重排序就是可能发生的。也就是说，虽然线程1中的代码是 1-&gt;2 这样的执行顺序，实际上 2-&gt;1 这样的执行顺序也是可能发生的，同理，4-&gt;3 也可能发生。情况似乎复杂了，我们需要考虑另外的3种情况：1. 线程1有重排序，线程2没有；2. 线程1没有重排序，线程2有；3. 线程1和线程2都有重排序。而且每一种情况，都需要考虑缓存的影响。</p>
<p>到这里，我们已经感到无所适从了，当然，你可以仔细分析所有的情况，最终得出所有的结果，但这并不是我们想要的，在此只举一个例子。例如，结果是 <code>r1=1</code> <code>r2=2</code> 是否可能？尽管这个结果看上去很不可思议，但确实是可能的，比如，执行顺序是 2-&gt;4-&gt;1-&gt;3，即线程1和线程2都发生了重排序，但没有缓存的影响。</p>
<p>以上例子描述了内存模型需要解决的问题。问题的背景是多线程并发，问题的内容，一是重排序优化问题，即如何限制编译器优化和指令并行优化；二是可见性问题，即如何将一个线程修改的结果传递给其他线程（或者叫发布），最终的目标是，程序计算结果正确。一句话，如何在多线程并发的情况下，限制编译器优化、指令并行优化，控制线程间的变量传递，使得程序计算结果正确。当然，这是我自己的总结，不严谨，领会其大意即可。注意，内存模型面对的问题中，似乎并没有出现锁，其实并非如此，在“控制线程间变量传递”的过程中，锁是基本的底层工具之一，但内存模型所面对的问题远比锁要来的复杂。</p>
<h2>如何解决并发问题</h2>
<p>以上已经分析了内存模型问题的复杂性，有没有解决办法呢？有，我的解法非常简单直接：1. 废除编译器优化和流水线的指令并行优化；2. 废除 CPU 缓存，直接从内存中读取。做到这两点，基本不再会有多线程并发的问题了，另一个连带效应是，你的多线程程序，可能比优化过的单线程程序还慢。</p>
<p>当然，这是玩笑话，我们不可能因为要多线程并发，而放弃这么多年来积累的编译器优化技术、CPU 优化技术，这是因噎废食的。现代编程语言（如C++、Java）对这个问题的解法主要包括两个，限制编译器优化，以及内存屏障。</p>
<h3>限制编译器优化</h3>
<p>这个很好理解，对于一些需要在线程间同步的变量，我们可以限制编译器对含这些变量语句的重排序优化，禁止某些情况下的语句重排序，至于那些不需要同步的变量，那么自然是允许编译器尽可能的优化，以提升性能。这些限制重排序优化的规则中，比较有名的是 <code>happens-before</code> 规则，这个规则在不同的语言中包含的内容也不太一样，但基本上是符合常识的。这里先不介入 <code>happens-before</code> 的细节内容，但是其中的一些内容可能你在写代码的时候已经用到了，例如，Java 的 <code>synchronized</code> 原语，C++11 中锁的 memory order。</p>
<h3>内存屏障</h3>
<p>其实，内存模型面对的问题，并不是分开逐个解决的，而是在一些语言特性中统一的解决，因此，上文提到的 <code>happens-before</code> 规则中也有很多关于内存屏障的内容。所谓内存屏障，就是用来限制流水线的指令并行优化，并将缓存中的结果同步到内存。这是我对内存屏障的认识，并不严谨。最著名的内存屏障的应用就是锁了，还有其他的表现，例如，刚才提到的 Java 的 <code>synchronized</code> 原语，C++11 中锁的 memory order，也包含了对内存屏障的描述。内存屏障是与特定硬件体系有关的，例如，在 x86 体系的 CPU 中，有 <code>mfence</code>、<code>sfence</code>、<code>lfence</code> 这样的指令，显示的指明内存屏障。</p>
<h2>总结</h2>
<p>本文描述了内存模型面对的问题，并简介了解决问题的方法，这些方法在不同的编程语言中有不同的实现，需要进一步细致讨论。多线程编程有多种模式，主要有两大类，共享内存和消息传递，使用消息传递模式的语言主要有 Scala、Erlang、Go；使用共享内存模式的语言有 Java、C++等。粗略分一下的话，函数式编程语言多数会使用消息传递模式，命令式编程语言大多使用共享内存模式，例外也有，比如 Go。本文提到的内存模型实际上是共享内存模式的一种实现，当然，多线程编程模式是一个更加宏大的问题，在此无法详述。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/pongba/article/details/1659952" target="_blank" rel="external">http://blog.csdn.net/pongba/article/details/1659952</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/cszhouwei/article/details/11730559" target="_blank" rel="external">http://blog.csdn.net/cszhouwei/article/details/11730559</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://preshing.com/20120930/weak-vs-strong-memory-models/" target="_blank" rel="external">http://preshing.com/20120930/weak-vs-strong-memory-models/</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://en.wikipedia.org/wiki/Parallel_programming_model#Implicit_interaction" target="_blank" rel="external">https://en.wikipedia.org/wiki/Parallel_programming_model#Implicit_interaction</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4" target="_blank" rel="external">https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://blog.jobbole.com/53697/" target="_blank" rel="external">http://blog.jobbole.com/53697/</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="http://www.infoq.com/cn/articles/java-memory-model-1" target="_blank" rel="external">http://www.infoq.com/cn/articles/java-memory-model-1</a><a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<h2>问题的背景</h2>
<p>内存模型（Memory Model）是编程中比较深入的一个问题，它与编程语言有关、与编译器有关、与并发有关、与处理器也有关。但是一旦发生与内存模型相关的问题，总是出现在并发的场景下，多数情况下，我们搞不清楚内存模型和并发有什么关系，似乎紧密相关]]>
    </summary>
    
      <category term="Memory Model" scheme="http://valleylord.github.io/tags/Memory-Model/"/>
    
      <category term="Memory Model" scheme="http://valleylord.github.io/categories/Memory-Model/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Boot 配置文件 application.properties [转]]]></title>
    <link href="http://valleylord.github.io/post/201606-springboot-properties/"/>
    <id>http://valleylord.github.io/post/201606-springboot-properties/</id>
    <published>2016-06-03T07:40:27.000Z</published>
    <updated>2016-06-22T01:28:57.000Z</updated>
    <content type="html"><![CDATA[<p>转载自Spring Boot 1.3.5 Release 官方文档：[http://docs.spring.io/spring-boot/docs/1.3.5.RELEASE/reference/htmlsingle]http://docs.spring.io/spring-boot/docs/1.3.5.RELEASE/reference/htmlsingle)</p>
<p>某文库上有相同的：<a href="http://wenku.baidu.com/link?url=EiipoOvUVbDgtP0sSMsMA0iOFYnNTVI2yQNe4puK2XYOtMNKGzoEZxHhfKOlkBd7el4R2rgX6bHxrfEPkmWs94zNiuV2NJCaRfav_7FdGpG" target="_blank" rel="external">http://wenku.baidu.com/link?url=EiipoOvUVbDgtP0sSMsMA0iOFYnNTVI2yQNe4puK2XYOtMNKGzoEZxHhfKOlkBd7el4R2rgX6bHxrfEPkmWs94zNiuV2NJCaRfav_7FdGpG</a></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ===================================================================</span></div><div class="line"><span class="comment"># COMMON SPRING BOOT PROPERTIES</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This sample file is provided as a guideline. Do NOT copy it in its</span></div><div class="line"><span class="comment"># entirety to your own application.               ^^^</span></div><div class="line"><span class="comment"># ===================================================================</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># CORE PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># BANNER</span></div><div class="line">banner.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Banner file encoding.</span></div><div class="line">banner.location=classpath:banner.txt <span class="comment"># Banner file location.</span></div><div class="line"></div><div class="line"><span class="comment"># LOGGING</span></div><div class="line">logging.config= <span class="comment"># Location of the logging configuration file. For instance `classpath:logback.xml` for Logback</span></div><div class="line">logging.exception-conversion-word=%wEx <span class="comment"># Conversion word used when logging exceptions.</span></div><div class="line">logging.file= <span class="comment"># Log file name. For instance `myapp.log`</span></div><div class="line">logging.level.*= <span class="comment"># Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`</span></div><div class="line">logging.path= <span class="comment"># Location of the log file. For instance `/var/log`</span></div><div class="line">logging.pattern.console= <span class="comment"># Appender pattern for output to the console. Only supported with the default logback setup.</span></div><div class="line">logging.pattern.file= <span class="comment"># Appender pattern for output to the file. Only supported with the default logback setup.</span></div><div class="line">logging.pattern.level= <span class="comment"># Appender pattern for log level (default %5p). Only supported with the default logback setup.</span></div><div class="line">logging.register-shutdown-hook=<span class="literal">false</span> <span class="comment"># Register a shutdown hook for the logging system when it is initialized.</span></div><div class="line"></div><div class="line"><span class="comment"># AOP</span></div><div class="line">spring.aop.<span class="type">auto</span>=<span class="literal">true</span> <span class="comment"># Add @EnableAspectJAutoProxy.</span></div><div class="line">spring.aop.proxy-target-class=<span class="literal">false</span> <span class="comment"># Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</span></div><div class="line"></div><div class="line"><span class="comment"># IDENTITY (ContextIdApplicationContextInitializer)</span></div><div class="line">spring.application.index= <span class="comment"># Application index.</span></div><div class="line">spring.application.name= <span class="comment"># Application name.</span></div><div class="line"></div><div class="line"><span class="comment"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span></div><div class="line">spring.application.admin.enabled=<span class="literal">false</span> <span class="comment"># Enable admin features for the application.</span></div><div class="line">spring.application.admin.jmx-name=org.springframework.boot:<span class="keyword">type</span>=<span class="type">Admin</span>,name=<span class="type">SpringApplication</span> <span class="comment"># JMX name of the application admin MBean.</span></div><div class="line"></div><div class="line"><span class="comment"># AUTO-CONFIGURATION</span></div><div class="line">spring.autoconfigure.exclude= <span class="comment"># Auto-configuration classes to exclude.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING CORE</span></div><div class="line">spring.beaninfo.ignore=<span class="literal">true</span> <span class="comment"># Skip search of BeanInfo classes.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING CACHE (CacheProperties)</span></div><div class="line">spring.cache.cache-names= <span class="comment"># Comma-separated list of cache names to create if supported by the underlying cache manager.</span></div><div class="line">spring.cache.ehcache.config= <span class="comment"># The location of the configuration file to use to initialize EhCache.</span></div><div class="line">spring.cache.guava.spec= <span class="comment"># The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.</span></div><div class="line">spring.cache.hazelcast.config= <span class="comment"># The location of the configuration file to use to initialize Hazelcast.</span></div><div class="line">spring.cache.infinispan.config= <span class="comment"># The location of the configuration file to use to initialize Infinispan.</span></div><div class="line">spring.cache.jcache.config= <span class="comment"># The location of the configuration file to use to initialize the cache manager.</span></div><div class="line">spring.cache.jcache.provider= <span class="comment"># Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.</span></div><div class="line">spring.cache.<span class="keyword">type</span>= <span class="comment"># Cache type, auto-detected according to the environment by default.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span></div><div class="line">spring.config.location= <span class="comment"># Config file locations.</span></div><div class="line">spring.config.name=application <span class="comment"># Config file name.</span></div><div class="line"></div><div class="line"><span class="comment"># HAZELCAST (HazelcastProperties)</span></div><div class="line">spring.hazelcast.config= <span class="comment"># The location of the configuration file to use to initialize Hazelcast.</span></div><div class="line"></div><div class="line"><span class="comment"># JMX</span></div><div class="line">spring.jmx.default-domain= <span class="comment"># JMX domain name.</span></div><div class="line">spring.jmx.enabled=<span class="literal">true</span> <span class="comment"># Expose management beans to the JMX domain.</span></div><div class="line">spring.jmx.server=mbeanServer <span class="comment"># MBeanServer bean name.</span></div><div class="line"></div><div class="line"><span class="comment"># Email (MailProperties)</span></div><div class="line">spring.mail.default-encoding=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Default MimeMessage encoding.</span></div><div class="line">spring.mail.host= <span class="comment"># SMTP server host. For instance `smtp.example.com`</span></div><div class="line">spring.mail.jndi-name= <span class="comment"># Session JNDI name. When set, takes precedence to others mail settings.</span></div><div class="line">spring.mail.password= <span class="comment"># Login password of the SMTP server.</span></div><div class="line">spring.mail.port= <span class="comment"># SMTP server port.</span></div><div class="line">spring.mail.properties.*= <span class="comment"># Additional JavaMail session properties.</span></div><div class="line">spring.mail.protocol=smtp <span class="comment"># Protocol used by the SMTP server.</span></div><div class="line">spring.mail.test-connection=<span class="literal">false</span> <span class="comment"># Test that the mail server is available on startup.</span></div><div class="line">spring.mail.username= <span class="comment"># Login user of the SMTP server.</span></div><div class="line"></div><div class="line"><span class="comment"># APPLICATION SETTINGS (SpringApplication)</span></div><div class="line">spring.main.banner-mode=console <span class="comment"># Mode used to display the banner when the application runs.</span></div><div class="line">spring.main.sources= <span class="comment"># Sources (class name, package name or XML resource location) to include in the ApplicationContext.</span></div><div class="line">spring.main.web-environment= <span class="comment"># Run the application in a web environment (auto-detected by default).</span></div><div class="line"></div><div class="line"><span class="comment"># FILE ENCODING (FileEncodingApplicationListener)</span></div><div class="line">spring.mandatory-file-encoding= <span class="comment"># Expected character encoding the application must use.</span></div><div class="line"></div><div class="line"><span class="comment"># INTERNATIONALIZATION (MessageSourceAutoConfiguration)</span></div><div class="line">spring.messages.basename=messages <span class="comment"># Comma-separated list of basenames, each following the ResourceBundle convention.</span></div><div class="line">spring.messages.cache-seconds=-<span class="number">1</span> <span class="comment"># Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.</span></div><div class="line">spring.messages.encoding=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Message bundles encoding.</span></div><div class="line">spring.messages.fallback-to-system-locale=<span class="literal">true</span> <span class="comment"># Set whether to fall back to the system Locale if no files for a specific Locale have been found.</span></div><div class="line"></div><div class="line"><span class="comment"># OUTPUT</span></div><div class="line">spring.output.ansi.enabled=detect <span class="comment"># Configure the ANSI output (can be "detect", "always", "never").</span></div><div class="line"></div><div class="line"><span class="comment"># PID FILE (ApplicationPidFileWriter)</span></div><div class="line">spring.pid.fail-on-write-error= <span class="comment"># Fail if ApplicationPidFileWriter is used but it cannot write the PID file.</span></div><div class="line">spring.pid.file= <span class="comment"># Location of the PID file to write (if ApplicationPidFileWriter is used).</span></div><div class="line"></div><div class="line"><span class="comment"># PROFILES</span></div><div class="line">spring.profiles.active= <span class="comment"># Comma-separated list of active profiles.</span></div><div class="line">spring.profiles.<span class="keyword">include</span>= <span class="comment"># Unconditionally activate the specified comma separated profiles.</span></div><div class="line"></div><div class="line"><span class="comment"># SENDGRID (SendGridAutoConfiguration)</span></div><div class="line">spring.sendgrid.username= <span class="comment"># SendGrid account username</span></div><div class="line">spring.sendgrid.password= <span class="comment"># SendGrid account password</span></div><div class="line">spring.sendgrid.proxy.host= <span class="comment"># SendGrid proxy host</span></div><div class="line">spring.sendgrid.proxy.port= <span class="comment"># SendGrid proxy port</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># WEB PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># MULTIPART (MultipartProperties)</span></div><div class="line">multipart.enabled=<span class="literal">true</span> <span class="comment"># Enable support of multi-part uploads.</span></div><div class="line">multipart.file-size-threshold=<span class="number">0</span> <span class="comment"># Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></div><div class="line">multipart.location= <span class="comment"># Intermediate location of uploaded files.</span></div><div class="line">multipart.max-file-size=<span class="number">1</span>Mb <span class="comment"># Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></div><div class="line">multipart.max-request-size=<span class="number">10</span>Mb <span class="comment"># Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></div><div class="line"></div><div class="line"><span class="comment"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span></div><div class="line">server.address= <span class="comment"># Network address to which the server should bind to.</span></div><div class="line">server.compression.enabled=<span class="literal">false</span> <span class="comment"># If response compression is enabled.</span></div><div class="line">server.compression.excluded-user-agents= <span class="comment"># List of user-agents to exclude from compression.</span></div><div class="line">server.compression.mime-types= <span class="comment"># Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`</span></div><div class="line">server.compression.min-response-size= <span class="comment"># Minimum response size that is required for compression to be performed. For instance 2048</span></div><div class="line">server.context-parameters.*= <span class="comment"># Servlet context init parameters. For instance `server.context-parameters.a=alpha`</span></div><div class="line">server.context-path= <span class="comment"># Context path of the application.</span></div><div class="line">server.display-name=application <span class="comment"># Display name of the application.</span></div><div class="line">server.error.<span class="keyword">include</span>-stacktrace=never <span class="comment"># When to include a "stacktrace" attribute.</span></div><div class="line">server.error.path=/error <span class="comment"># Path of the error controller.</span></div><div class="line">server.error.whitelabel.enabled=<span class="literal">true</span> <span class="comment"># Enable the default error page displayed in browsers in case of a server error.</span></div><div class="line">server.jsp-servlet.class-name=org.apache.jasper.servlet.<span class="type">JspServlet</span> <span class="comment"># The class name of the JSP servlet.</span></div><div class="line">server.jsp-servlet.init-parameters.*= <span class="comment"># Init parameters used to configure the JSP servlet</span></div><div class="line">server.jsp-servlet.registered=<span class="literal">true</span> <span class="comment"># Whether or not the JSP servlet is registered</span></div><div class="line">server.port=<span class="number">8080</span> <span class="comment"># Server HTTP port.</span></div><div class="line">server.server-header= <span class="comment"># The value sent in the server response header (uses servlet container default if empty)</span></div><div class="line">server.servlet-path=/ <span class="comment"># Path of the main dispatcher servlet.</span></div><div class="line">server.session.cookie.comment= <span class="comment"># Comment for the session cookie.</span></div><div class="line">server.session.cookie.domain= <span class="comment"># Domain for the session cookie.</span></div><div class="line">server.session.cookie.http-only= <span class="comment"># "HttpOnly" flag for the session cookie.</span></div><div class="line">server.session.cookie.max-age= <span class="comment"># Maximum age of the session cookie in seconds.</span></div><div class="line">server.session.cookie.name= <span class="comment"># Session cookie name.</span></div><div class="line">server.session.cookie.path= <span class="comment"># Path of the session cookie.</span></div><div class="line">server.session.cookie.secure= <span class="comment"># "Secure" flag for the session cookie.</span></div><div class="line">server.session.persistent=<span class="literal">false</span> <span class="comment"># Persist session data between restarts.</span></div><div class="line">server.session.store-dir= <span class="comment"># Directory used to store session data.</span></div><div class="line">server.session.timeout= <span class="comment"># Session timeout in seconds.</span></div><div class="line">server.session.tracking-modes= <span class="comment"># Session tracking modes (one or more of the following: "cookie", "url", "ssl").</span></div><div class="line">server.ssl.ciphers= <span class="comment"># Supported SSL ciphers.</span></div><div class="line">server.ssl.client-auth= <span class="comment"># Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.</span></div><div class="line">server.ssl.enabled= <span class="comment">#</span></div><div class="line">server.ssl.key-alias= <span class="comment">#</span></div><div class="line">server.ssl.key-password= <span class="comment">#</span></div><div class="line">server.ssl.key-store= <span class="comment">#</span></div><div class="line">server.ssl.key-store-password= <span class="comment">#</span></div><div class="line">server.ssl.key-store-provider= <span class="comment">#</span></div><div class="line">server.ssl.key-store-<span class="keyword">type</span>= <span class="comment">#</span></div><div class="line">server.ssl.protocol= <span class="comment">#</span></div><div class="line">server.ssl.trust-store= <span class="comment">#</span></div><div class="line">server.ssl.trust-store-password= <span class="comment">#</span></div><div class="line">server.ssl.trust-store-provider= <span class="comment">#</span></div><div class="line">server.ssl.trust-store-<span class="keyword">type</span>= <span class="comment">#</span></div><div class="line">server.tomcat.accesslog.directory=logs <span class="comment"># Directory in which log files are created. Can be relative to the tomcat base dir or absolute.</span></div><div class="line">server.tomcat.accesslog.enabled=<span class="literal">false</span> <span class="comment"># Enable access log.</span></div><div class="line">server.tomcat.accesslog.pattern=common <span class="comment"># Format pattern for access logs.</span></div><div class="line">server.tomcat.accesslog.prefix=access_log <span class="comment"># Log file name prefix.</span></div><div class="line">server.tomcat.accesslog.suffix=.log <span class="comment"># Log file name suffix.</span></div><div class="line">server.tomcat.background-processor-delay=<span class="number">30</span> <span class="comment"># Delay in seconds between the invocation of backgroundProcess methods.</span></div><div class="line">server.tomcat.basedir= <span class="comment"># Tomcat base directory. If not specified a temporary directory will be used.</span></div><div class="line">server.tomcat.internal-proxies=<span class="number">10</span>\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">192</span>\\.<span class="number">168</span>\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">169</span>\\.<span class="number">254</span>\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">127</span>\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">172</span>\\.<span class="number">1</span>[<span class="number">6</span>-<span class="number">9</span>]{<span class="number">1</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">172</span>\\.<span class="number">2</span>[<span class="number">0</span>-<span class="number">9</span>]{<span class="number">1</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}|\\</div><div class="line">        <span class="number">172</span>\\.<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>]{<span class="number">1</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>}\\.\\d{<span class="number">1</span>,<span class="number">3</span>} <span class="comment"># regular expression matching trusted IP addresses.</span></div><div class="line">server.tomcat.max-http-header-size=<span class="number">0</span> <span class="comment"># Maximum size in bytes of the HTTP message header.</span></div><div class="line">server.tomcat.max-threads=<span class="number">0</span> <span class="comment"># Maximum amount of worker threads.</span></div><div class="line">server.tomcat.port-header=X-<span class="type">Forwarded</span>-<span class="type">Port</span> <span class="comment"># Name of the HTTP header used to override the original port value.</span></div><div class="line">server.tomcat.protocol-header= <span class="comment"># Header that holds the incoming protocol, usually named "X-Forwarded-Proto".</span></div><div class="line">server.tomcat.protocol-header-https-value=https <span class="comment"># Value of the protocol header that indicates that the incoming request uses SSL.</span></div><div class="line">server.tomcat.remote-ip-header= <span class="comment"># Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`</span></div><div class="line">server.tomcat.uri-encoding=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Character encoding to use to decode the URI.</span></div><div class="line">server.undertow.accesslog.dir= <span class="comment"># Undertow access log directory.</span></div><div class="line">server.undertow.accesslog.enabled=<span class="literal">false</span> <span class="comment"># Enable access log.</span></div><div class="line">server.undertow.accesslog.pattern=common <span class="comment"># Format pattern for access logs.</span></div><div class="line">server.undertow.buffer-size= <span class="comment"># Size of each buffer in bytes.</span></div><div class="line">server.undertow.buffers-per-region= <span class="comment"># Number of buffer per region.</span></div><div class="line">server.undertow.direct-buffers= <span class="comment"># Allocate buffers outside the Java heap.</span></div><div class="line">server.undertow.io-threads= <span class="comment"># Number of I/O threads to create for the worker.</span></div><div class="line">server.undertow.worker-threads= <span class="comment"># Number of worker threads.</span></div><div class="line">server.use-forward-headers= <span class="comment"># If X-Forwarded-* headers should be applied to the HttpRequest.</span></div><div class="line"></div><div class="line"><span class="comment"># FREEMARKER (FreeMarkerAutoConfiguration)</span></div><div class="line">spring.freemarker.allow-request-override=<span class="literal">false</span> <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.freemarker.allow-session-override=<span class="literal">false</span> <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.freemarker.cache=<span class="literal">false</span> <span class="comment"># Enable template caching.</span></div><div class="line">spring.freemarker.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Template encoding.</span></div><div class="line">spring.freemarker.check-<span class="keyword">template</span>-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></div><div class="line">spring.freemarker.content-<span class="keyword">type</span>=text/html <span class="comment"># Content-Type value.</span></div><div class="line">spring.freemarker.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></div><div class="line">spring.freemarker.expose-request-attributes=<span class="literal">false</span> <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.freemarker.expose-session-attributes=<span class="literal">false</span> <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.freemarker.expose-spring-<span class="keyword">macro</span>-helpers=<span class="literal">true</span> <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></div><div class="line">spring.freemarker.prefer-file-system-access=<span class="literal">true</span> <span class="comment"># Prefer file system access for template loading. File system access enables hot detection of template changes.</span></div><div class="line">spring.freemarker.prefix= <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></div><div class="line">spring.freemarker.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></div><div class="line">spring.freemarker.settings.*= <span class="comment"># Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.</span></div><div class="line">spring.freemarker.suffix= <span class="comment"># Suffix that gets appended to view names when building a URL.</span></div><div class="line">spring.freemarker.<span class="keyword">template</span>-loader-path=classpath:/templates/ <span class="comment"># Comma-separated list of template paths.</span></div><div class="line">spring.freemarker.view-names= <span class="comment"># White list of view names that can be resolved.</span></div><div class="line"></div><div class="line"><span class="comment"># GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.allow-request-override=<span class="literal">false</span> <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.allow-session-override=<span class="literal">false</span> <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.cache= <span class="comment"># Enable template caching.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Template encoding.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.check-<span class="keyword">template</span>-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.configuration.*= <span class="comment"># See GroovyMarkupConfigurer</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.content-<span class="keyword">type</span>=test/html <span class="comment"># Content-Type value.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.expose-request-attributes=<span class="literal">false</span> <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.expose-session-attributes=<span class="literal">false</span> <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.expose-spring-<span class="keyword">macro</span>-helpers=<span class="literal">true</span> <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.prefix= <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.resource-loader-path=classpath:/templates/ <span class="comment"># Template path.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.suffix=.tpl <span class="comment"># Suffix that gets appended to view names when building a URL.</span></div><div class="line">spring.groovy.<span class="keyword">template</span>.view-names= <span class="comment"># White list of view names that can be resolved.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING HATEOAS (HateoasProperties)</span></div><div class="line">spring.hateoas.use-hal-<span class="keyword">as</span>-default-json-media-<span class="keyword">type</span>=<span class="literal">true</span> <span class="comment"># Specify if application/hal+json responses should be sent to requests that accept application/json.</span></div><div class="line"></div><div class="line"><span class="comment"># HTTP message conversion</span></div><div class="line">spring.http.converters.preferred-json-mapper=jackson <span class="comment"># Preferred JSON mapper to use for HTTP message conversion. Set to "gson" to force the use of Gson when both it and Jackson are on the classpath.</span></div><div class="line"></div><div class="line"><span class="comment"># HTTP encoding (HttpEncodingProperties)</span></div><div class="line">spring.http.encoding.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.</span></div><div class="line">spring.http.encoding.enabled=<span class="literal">true</span> <span class="comment"># Enable http encoding support.</span></div><div class="line">spring.http.encoding.force=<span class="literal">true</span> <span class="comment"># Force the encoding to the configured charset on HTTP requests and responses.</span></div><div class="line"></div><div class="line"><span class="comment"># JACKSON (JacksonProperties)</span></div><div class="line">spring.jackson.date-format= <span class="comment"># Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.</span></div><div class="line">spring.jackson.deserialization.*= <span class="comment"># Jackson on/off features that affect the way Java objects are deserialized.</span></div><div class="line">spring.jackson.generator.*= <span class="comment"># Jackson on/off features for generators.</span></div><div class="line">spring.jackson.joda-date-time-format= <span class="comment"># Joda date time format string. If not configured, "date-format" will be used as a fallback if it is configured with a format string.</span></div><div class="line">spring.jackson.locale= <span class="comment"># Locale used for formatting.</span></div><div class="line">spring.jackson.mapper.*= <span class="comment"># Jackson general purpose on/off features.</span></div><div class="line">spring.jackson.parser.*= <span class="comment"># Jackson on/off features for parsers.</span></div><div class="line">spring.jackson.property-naming-strategy= <span class="comment"># One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span></div><div class="line">spring.jackson.serialization.*= <span class="comment"># Jackson on/off features that affect the way Java objects are serialized.</span></div><div class="line">spring.jackson.serialization-inclusion= <span class="comment"># Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.</span></div><div class="line">spring.jackson.time-zone= <span class="comment"># Time zone used when formatting dates. For instance `America/Los_Angeles`</span></div><div class="line"></div><div class="line"><span class="comment"># JERSEY (JerseyProperties)</span></div><div class="line">spring.jersey.application-path= <span class="comment"># Path that serves as the base URI for the application. Overrides the value of "@ApplicationPath" if specified.</span></div><div class="line">spring.jersey.filter.order=<span class="number">0</span> <span class="comment"># Jersey filter chain order.</span></div><div class="line">spring.jersey.init.*= <span class="comment"># Init parameters to pass to Jersey via the servlet or filter.</span></div><div class="line">spring.jersey.<span class="keyword">type</span>=servlet <span class="comment"># Jersey integration type. Can be either "servlet" or "filter".</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback=<span class="literal">false</span> <span class="comment"># Enable support for fallback resolution.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.enabled=<span class="literal">false</span> <span class="comment"># Enable device view resolver.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ <span class="comment"># Prefix that gets prepended to view names for mobile devices.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix= <span class="comment"># Suffix that gets appended to view names for mobile devices.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix= <span class="comment"># Prefix that gets prepended to view names for normal devices.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix= <span class="comment"># Suffix that gets appended to view names for normal devices.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ <span class="comment"># Prefix that gets prepended to view names for tablet devices.</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix= <span class="comment"># Suffix that gets appended to view names for tablet devices.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</span></div><div class="line">spring.mobile.sitepreference.enabled=<span class="literal">true</span> <span class="comment"># Enable SitePreferenceHandler.</span></div><div class="line"></div><div class="line"><span class="comment"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span></div><div class="line">spring.mustache.cache=<span class="literal">false</span> <span class="comment"># Enable template caching.</span></div><div class="line">spring.mustache.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Template encoding.</span></div><div class="line">spring.mustache.check-<span class="keyword">template</span>-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></div><div class="line">spring.mustache.content-<span class="keyword">type</span>=text/html <span class="comment"># Content-Type value.</span></div><div class="line">spring.mustache.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></div><div class="line">spring.mustache.prefix=classpath:/templates/ <span class="comment"># Prefix to apply to template names.</span></div><div class="line">spring.mustache.suffix=.html <span class="comment"># Suffix to apply to template names.</span></div><div class="line">spring.mustache.view-names= <span class="comment"># White list of view names that can be resolved.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING MVC (WebMvcProperties)</span></div><div class="line">spring.mvc.async.request-timeout= <span class="comment"># Amount of time (in milliseconds) before asynchronous request handling times out.</span></div><div class="line">spring.mvc.date-format= <span class="comment"># Date format to use. For instance `dd/MM/yyyy`.</span></div><div class="line">spring.mvc.dispatch-trace-request=<span class="literal">false</span> <span class="comment"># Dispatch TRACE requests to the FrameworkServlet doService method.</span></div><div class="line">spring.mvc.dispatch-options-request=<span class="literal">false</span> <span class="comment"># Dispatch OPTIONS requests to the FrameworkServlet doService method.</span></div><div class="line">spring.mvc.favicon.enabled=<span class="literal">true</span> <span class="comment"># Enable resolution of favicon.ico.</span></div><div class="line">spring.mvc.ignore-default-model-on-redirect=<span class="literal">true</span> <span class="comment"># If the content of the "default" model should be ignored during redirect scenarios.</span></div><div class="line">spring.mvc.locale= <span class="comment"># Locale to use.</span></div><div class="line">spring.mvc.media-types.*= <span class="comment"># Maps file extensions to media types for content negotiation.</span></div><div class="line">spring.mvc.message-codes-resolver-format= <span class="comment"># Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.</span></div><div class="line">spring.mvc.<span class="keyword">static</span>-path-pattern=/** <span class="comment"># Path pattern used for static resources.</span></div><div class="line">spring.mvc.throw-exception-<span class="keyword">if</span>-no-handler-found=<span class="literal">false</span> <span class="comment"># If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.</span></div><div class="line">spring.mvc.view.prefix= <span class="comment"># Spring MVC view prefix.</span></div><div class="line">spring.mvc.view.suffix= <span class="comment"># Spring MVC view suffix.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING RESOURCES HANDLING (ResourceProperties)</span></div><div class="line">spring.resources.add-mappings=<span class="literal">true</span> <span class="comment"># Enable default resource handling.</span></div><div class="line">spring.resources.cache-period= <span class="comment"># Cache period for the resources served by the resource handler, in seconds.</span></div><div class="line">spring.resources.chain.cache=<span class="literal">true</span> <span class="comment"># Enable caching in the Resource chain.</span></div><div class="line">spring.resources.chain.enabled= <span class="comment"># Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.</span></div><div class="line">spring.resources.chain.html-application-cache=<span class="literal">false</span> <span class="comment"># Enable HTML5 application cache manifest rewriting.</span></div><div class="line">spring.resources.chain.strategy.content.enabled=<span class="literal">false</span> <span class="comment"># Enable the content Version Strategy.</span></div><div class="line">spring.resources.chain.strategy.content.paths=/** <span class="comment"># Comma-separated list of patterns to apply to the Version Strategy.</span></div><div class="line">spring.resources.chain.strategy.fixed.enabled=<span class="literal">false</span> <span class="comment"># Enable the fixed Version Strategy.</span></div><div class="line">spring.resources.chain.strategy.fixed.paths= <span class="comment"># Comma-separated list of patterns to apply to the Version Strategy.</span></div><div class="line">spring.resources.chain.strategy.fixed.version= <span class="comment"># Version string to use for the Version Strategy.</span></div><div class="line">spring.resources.<span class="keyword">static</span>-locations=classpath:/<span class="type">META</span>-<span class="type">INF</span>/resources/,classpath:/resources/,classpath:/<span class="keyword">static</span>/,classpath:/public/ <span class="comment"># Locations of static resources.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING SOCIAL (SocialWebAutoConfiguration)</span></div><div class="line">spring.social.<span class="type">auto</span>-connection-views=<span class="literal">false</span> <span class="comment"># Enable the connection status view for supported providers.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</span></div><div class="line">spring.social.facebook.app-id= <span class="comment"># your application's Facebook App ID</span></div><div class="line">spring.social.facebook.app-secret= <span class="comment"># your application's Facebook App Secret</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</span></div><div class="line">spring.social.linkedin.app-id= <span class="comment"># your application's LinkedIn App ID</span></div><div class="line">spring.social.linkedin.app-secret= <span class="comment"># your application's LinkedIn App Secret</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</span></div><div class="line">spring.social.twitter.app-id= <span class="comment"># your application's Twitter App ID</span></div><div class="line">spring.social.twitter.app-secret= <span class="comment"># your application's Twitter App Secret</span></div><div class="line"></div><div class="line"><span class="comment"># THYMELEAF (ThymeleafAutoConfiguration)</span></div><div class="line">spring.thymeleaf.cache=<span class="literal">true</span> <span class="comment"># Enable template caching.</span></div><div class="line">spring.thymeleaf.check-<span class="keyword">template</span>-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></div><div class="line">spring.thymeleaf.content-<span class="keyword">type</span>=text/html <span class="comment"># Content-Type value.</span></div><div class="line">spring.thymeleaf.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC Thymeleaf view resolution.</span></div><div class="line">spring.thymeleaf.encoding=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Template encoding.</span></div><div class="line">spring.thymeleaf.excluded-view-names= <span class="comment"># Comma-separated list of view names that should be excluded from resolution.</span></div><div class="line">spring.thymeleaf.mode=<span class="type">HTML5</span> <span class="comment"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span></div><div class="line">spring.thymeleaf.prefix=classpath:/templates/ <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></div><div class="line">spring.thymeleaf.suffix=.html <span class="comment"># Suffix that gets appended to view names when building a URL.</span></div><div class="line">spring.thymeleaf.<span class="keyword">template</span>-resolver-order= <span class="comment"># Order of the template resolver in the chain.</span></div><div class="line">spring.thymeleaf.view-names= <span class="comment"># Comma-separated list of view names that can be resolved.</span></div><div class="line"></div><div class="line"><span class="comment"># VELOCITY TEMPLATES (VelocityAutoConfiguration)</span></div><div class="line">spring.velocity.allow-request-override=<span class="literal">false</span> <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.velocity.allow-session-override=<span class="literal">false</span> <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></div><div class="line">spring.velocity.cache= <span class="comment"># Enable template caching.</span></div><div class="line">spring.velocity.charset=<span class="type">UTF</span>-<span class="number">8</span> <span class="comment"># Template encoding.</span></div><div class="line">spring.velocity.check-<span class="keyword">template</span>-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></div><div class="line">spring.velocity.content-<span class="keyword">type</span>=text/html <span class="comment"># Content-Type value.</span></div><div class="line">spring.velocity.date-tool-attribute= <span class="comment"># Name of the DateTool helper object to expose in the Velocity context of the view.</span></div><div class="line">spring.velocity.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></div><div class="line">spring.velocity.expose-request-attributes=<span class="literal">false</span> <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.velocity.expose-session-attributes=<span class="literal">false</span> <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></div><div class="line">spring.velocity.expose-spring-<span class="keyword">macro</span>-helpers=<span class="literal">true</span> <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></div><div class="line">spring.velocity.number-tool-attribute= <span class="comment"># Name of the NumberTool helper object to expose in the Velocity context of the view.</span></div><div class="line">spring.velocity.prefer-file-system-access=<span class="literal">true</span> <span class="comment"># Prefer file system access for template loading. File system access enables hot detection of template changes.</span></div><div class="line">spring.velocity.prefix= <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></div><div class="line">spring.velocity.properties.*= <span class="comment"># Additional velocity properties.</span></div><div class="line">spring.velocity.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></div><div class="line">spring.velocity.resource-loader-path=classpath:/templates/ <span class="comment"># Template path.</span></div><div class="line">spring.velocity.suffix=.vm <span class="comment"># Suffix that gets appended to view names when building a URL.</span></div><div class="line">spring.velocity.toolbox-config-location= <span class="comment"># Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`</span></div><div class="line">spring.velocity.view-names= <span class="comment"># White list of view names that can be resolved.</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># SECURITY PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># SECURITY (SecurityProperties)</span></div><div class="line">security.basic.authorize-mode=role <span class="comment"># Security authorize mode to apply.</span></div><div class="line">security.basic.enabled=<span class="literal">true</span> <span class="comment"># Enable basic authentication.</span></div><div class="line">security.basic.path=/** <span class="comment"># Comma-separated list of paths to secure.</span></div><div class="line">security.basic.realm=<span class="type">Spring</span> <span class="comment"># HTTP basic realm name.</span></div><div class="line">security.enable-csrf=<span class="literal">false</span> <span class="comment"># Enable Cross Site Request Forgery support.</span></div><div class="line">security.filter-order=<span class="number">0</span> <span class="comment"># Security filter chain order.</span></div><div class="line">security.filter-dispatcher-types=<span class="type">ASYNC</span>, <span class="type">FORWARD</span>, <span class="type">INCLUDE</span>, <span class="type">REQUEST</span> <span class="comment"># Security filter chain dispatcher types.</span></div><div class="line">security.headers.cache=<span class="literal">true</span> <span class="comment"># Enable cache control HTTP headers.</span></div><div class="line">security.headers.content-<span class="keyword">type</span>=<span class="literal">true</span> <span class="comment"># Enable "X-Content-Type-Options" header.</span></div><div class="line">security.headers.frame=<span class="literal">true</span> <span class="comment"># Enable "X-Frame-Options" header.</span></div><div class="line">security.headers.hsts= <span class="comment"># HTTP Strict Transport Security (HSTS) mode (none, domain, all).</span></div><div class="line">security.headers.xss=<span class="literal">true</span> <span class="comment"># Enable cross site scripting (XSS) protection.</span></div><div class="line">security.ignored= <span class="comment"># Comma-separated list of paths to exclude from the default secured paths.</span></div><div class="line">security.require-ssl=<span class="literal">false</span> <span class="comment"># Enable secure channel for all requests.</span></div><div class="line">security.sessions=stateless <span class="comment"># Session creation policy (always, never, if_required, stateless).</span></div><div class="line">security.user.name=user <span class="comment"># Default user name.</span></div><div class="line">security.user.password= <span class="comment"># Password for the default user name. A random password is logged on startup by default.</span></div><div class="line">security.user.role=<span class="type">USER</span> <span class="comment"># Granted roles for the default user name.</span></div><div class="line"></div><div class="line"><span class="comment"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties</span></div><div class="line">security.oauth2.client.client-id= <span class="comment"># OAuth2 client id.</span></div><div class="line">security.oauth2.client.client-secret= <span class="comment"># OAuth2 client secret. A random secret is generated by default</span></div><div class="line"></div><div class="line"><span class="comment"># SECURITY OAUTH2 RESOURCES (ResourceServerProperties</span></div><div class="line">security.oauth2.resource.id= <span class="comment"># Identifier of the resource.</span></div><div class="line">security.oauth2.resource.jwt.key-uri= <span class="comment"># The URI of the JWT token. Can be set if the value is not available and the key is public.</span></div><div class="line">security.oauth2.resource.jwt.key-value= <span class="comment"># The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.</span></div><div class="line">security.oauth2.resource.prefer-token-info=<span class="literal">true</span> <span class="comment"># Use the token info, can be set to false to use the user info.</span></div><div class="line">security.oauth2.resource.service-id=resource <span class="comment">#</span></div><div class="line">security.oauth2.resource.token-info-uri= <span class="comment"># URI of the token decoding endpoint.</span></div><div class="line">security.oauth2.resource.token-<span class="keyword">type</span>= <span class="comment"># The token type to send when using the userInfoUri.</span></div><div class="line">security.oauth2.resource.user-info-uri= <span class="comment"># URI of the user endpoint.</span></div><div class="line"></div><div class="line"><span class="comment"># SECURITY OAUTH2 SSO (OAuth2SsoProperties</span></div><div class="line">security.oauth2.sso.filter-order= <span class="comment"># Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter</span></div><div class="line">security.oauth2.sso.login-path=/login <span class="comment"># Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># DATA PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># FLYWAY (FlywayProperties)</span></div><div class="line">flyway.baseline-description= <span class="comment">#</span></div><div class="line">flyway.baseline-version=<span class="number">1</span> <span class="comment"># version to start migration</span></div><div class="line">flyway.baseline-on-migrate= <span class="comment">#</span></div><div class="line">flyway.check-location=<span class="literal">false</span> <span class="comment"># Check that migration scripts location exists.</span></div><div class="line">flyway.clean-on-validation-error= <span class="comment">#</span></div><div class="line">flyway.enabled=<span class="literal">true</span> <span class="comment"># Enable flyway.</span></div><div class="line">flyway.encoding= <span class="comment">#</span></div><div class="line">flyway.ignore-failed-future-migration= <span class="comment">#</span></div><div class="line">flyway.init-sqls= <span class="comment"># SQL statements to execute to initialize a connection immediately after obtaining it.</span></div><div class="line">flyway.locations=classpath:db/migration <span class="comment"># locations of migrations scripts</span></div><div class="line">flyway.<span class="keyword">out</span>-<span class="keyword">of</span>-order= <span class="comment">#</span></div><div class="line">flyway.password= <span class="comment"># JDBC password if you want Flyway to create its own DataSource</span></div><div class="line">flyway.placeholder-prefix= <span class="comment">#</span></div><div class="line">flyway.placeholder-replacement= <span class="comment">#</span></div><div class="line">flyway.placeholder-suffix= <span class="comment">#</span></div><div class="line">flyway.placeholders.*= <span class="comment">#</span></div><div class="line">flyway.schemas= <span class="comment"># schemas to update</span></div><div class="line">flyway.sql-migration-prefix=V <span class="comment">#</span></div><div class="line">flyway.sql-migration-separator= <span class="comment">#</span></div><div class="line">flyway.sql-migration-suffix=.sql <span class="comment">#</span></div><div class="line">flyway.table= <span class="comment">#</span></div><div class="line">flyway.url= <span class="comment"># JDBC url of the database to migrate. If not set, the primary configured data source is used.</span></div><div class="line">flyway.user= <span class="comment"># Login user of the database to migrate.</span></div><div class="line">flyway.validate-on-migrate= <span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># LIQUIBASE (LiquibaseProperties)</span></div><div class="line">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml <span class="comment"># Change log configuration path.</span></div><div class="line">liquibase.check-change-log-location=<span class="literal">true</span> <span class="comment"># Check the change log location exists.</span></div><div class="line">liquibase.contexts= <span class="comment"># Comma-separated list of runtime contexts to use.</span></div><div class="line">liquibase.default-schema= <span class="comment"># Default database schema.</span></div><div class="line">liquibase.drop-first=<span class="literal">false</span> <span class="comment"># Drop the database schema first.</span></div><div class="line">liquibase.enabled=<span class="literal">true</span> <span class="comment"># Enable liquibase support.</span></div><div class="line">liquibase.labels= <span class="comment"># Comma-separated list of runtime labels to use.</span></div><div class="line">liquibase.parameters.*= <span class="comment"># Change log parameters.</span></div><div class="line">liquibase.password= <span class="comment"># Login password of the database to migrate.</span></div><div class="line">liquibase.url= <span class="comment"># JDBC url of the database to migrate. If not set, the primary configured data source is used.</span></div><div class="line">liquibase.user= <span class="comment"># Login user of the database to migrate.</span></div><div class="line"></div><div class="line"><span class="comment"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span></div><div class="line">spring.dao.exceptiontranslation.enabled=<span class="literal">true</span> <span class="comment"># Enable the PersistenceExceptionTranslationPostProcessor.</span></div><div class="line"></div><div class="line"><span class="comment"># CASSANDRA (CassandraProperties)</span></div><div class="line">spring.data.cassandra.cluster-name= <span class="comment"># Name of the Cassandra cluster.</span></div><div class="line">spring.data.cassandra.compression= <span class="comment"># Compression supported by the Cassandra binary protocol.</span></div><div class="line">spring.data.cassandra.connect-timeout-millis= <span class="comment"># Socket option: connection time out.</span></div><div class="line">spring.data.cassandra.consistency-level= <span class="comment"># Queries consistency level.</span></div><div class="line">spring.data.cassandra.contact-points=localhost <span class="comment"># Comma-separated list of cluster node addresses.</span></div><div class="line">spring.data.cassandra.fetch-size= <span class="comment"># Queries default fetch size.</span></div><div class="line">spring.data.cassandra.keyspace-name= <span class="comment"># Keyspace name to use.</span></div><div class="line">spring.data.cassandra.load-balancing-policy= <span class="comment"># Class name of the load balancing policy.</span></div><div class="line">spring.data.cassandra.port= <span class="comment"># Port of the Cassandra server.</span></div><div class="line">spring.data.cassandra.password= <span class="comment"># Login password of the server.</span></div><div class="line">spring.data.cassandra.read-timeout-millis= <span class="comment"># Socket option: read time out.</span></div><div class="line">spring.data.cassandra.reconnection-policy= <span class="comment"># Reconnection policy class.</span></div><div class="line">spring.data.cassandra.retry-policy= <span class="comment"># Class name of the retry policy.</span></div><div class="line">spring.data.cassandra.serial-consistency-level= <span class="comment"># Queries serial consistency level.</span></div><div class="line">spring.data.cassandra.ssl=<span class="literal">false</span> <span class="comment"># Enable SSL support.</span></div><div class="line">spring.data.cassandra.username= <span class="comment"># Login user of the server.</span></div><div class="line"></div><div class="line"><span class="comment"># ELASTICSEARCH (ElasticsearchProperties)</span></div><div class="line">spring.data.elasticsearch.cluster-name=elasticsearch <span class="comment"># Elasticsearch cluster name.</span></div><div class="line">spring.data.elasticsearch.cluster-nodes= <span class="comment"># Comma-separated list of cluster node addresses. If not specified, starts a client node.</span></div><div class="line">spring.data.elasticsearch.properties.*= <span class="comment"># Additional properties used to configure the client.</span></div><div class="line">spring.data.elasticsearch.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Elasticsearch repositories.</span></div><div class="line"></div><div class="line"><span class="comment"># MONGODB (MongoProperties)</span></div><div class="line">spring.data.mongodb.authentication-database= <span class="comment"># Authentication database name.</span></div><div class="line">spring.data.mongodb.database=test <span class="comment"># Database name.</span></div><div class="line">spring.data.mongodb.field-naming-strategy= <span class="comment"># Fully qualified name of the FieldNamingStrategy to use.</span></div><div class="line">spring.data.mongodb.grid-fs-database= <span class="comment"># GridFS database name.</span></div><div class="line">spring.data.mongodb.host=localhost <span class="comment"># Mongo server host.</span></div><div class="line">spring.data.mongodb.password= <span class="comment"># Login password of the mongo server.</span></div><div class="line">spring.data.mongodb.port=<span class="number">27017</span> <span class="comment"># Mongo server port.</span></div><div class="line">spring.data.mongodb.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Mongo repositories.</span></div><div class="line">spring.data.mongodb.uri=mongodb://localhost/test <span class="comment"># Mongo database URI. When set, host and port are ignored.</span></div><div class="line">spring.data.mongodb.username= <span class="comment"># Login user of the mongo server.</span></div><div class="line"></div><div class="line"><span class="comment"># DATA REST (RepositoryRestProperties)</span></div><div class="line">spring.data.rest.base-path= <span class="comment"># Base path to be used by Spring Data REST to expose repository resources.</span></div><div class="line">spring.data.rest.default-page-size= <span class="comment"># Default size of pages.</span></div><div class="line">spring.data.rest.enable-<span class="keyword">enum</span>-translation= <span class="comment"># Enable enum value translation via the Spring Data REST default resource bundle.</span></div><div class="line">spring.data.rest.limit-param-name= <span class="comment"># Name of the URL query string parameter that indicates how many results to return at once.</span></div><div class="line">spring.data.rest.max-page-size= <span class="comment"># Maximum size of pages.</span></div><div class="line">spring.data.rest.page-param-name= <span class="comment"># Name of the URL query string parameter that indicates what page to return.</span></div><div class="line">spring.data.rest.<span class="keyword">return</span>-body-on-create= <span class="comment"># Return a response body after creating an entity.</span></div><div class="line">spring.data.rest.<span class="keyword">return</span>-body-on-update= <span class="comment"># Return a response body after updating an entity.</span></div><div class="line">spring.data.rest.sort-param-name= <span class="comment"># Name of the URL query string parameter that indicates what direction to sort results.</span></div><div class="line"></div><div class="line"><span class="comment"># SOLR (SolrProperties)</span></div><div class="line">spring.data.solr.host=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span>/solr <span class="comment"># Solr host. Ignored if "zk-host" is set.</span></div><div class="line">spring.data.solr.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Solr repositories.</span></div><div class="line">spring.data.solr.zk-host= <span class="comment"># ZooKeeper host address in the form HOST:PORT.</span></div><div class="line"></div><div class="line"><span class="comment"># DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)</span></div><div class="line">spring.datasource.<span class="keyword">continue</span>-on-error=<span class="literal">false</span> <span class="comment"># Do not stop if an error occurs while initializing the database.</span></div><div class="line">spring.datasource.data= <span class="comment"># Data (DML) script resource reference.</span></div><div class="line">spring.datasource.driver-class-name= <span class="comment"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span></div><div class="line">spring.datasource.initialize=<span class="literal">true</span> <span class="comment"># Populate the database using 'data.sql'.</span></div><div class="line">spring.datasource.jmx-enabled=<span class="literal">false</span> <span class="comment"># Enable JMX support (if provided by the underlying pool).</span></div><div class="line">spring.datasource.jndi-name= <span class="comment"># JNDI location of the datasource. Class, url, username & password are ignored when set.</span></div><div class="line">spring.datasource.max-active= <span class="comment"># For instance 100</span></div><div class="line">spring.datasource.max-idle= <span class="comment"># For instance 8</span></div><div class="line">spring.datasource.max-wait=</div><div class="line">spring.datasource.min-evictable-idle-time-millis=</div><div class="line">spring.datasource.min-idle=<span class="number">8</span></div><div class="line">spring.datasource.name=testdb <span class="comment"># Name of the datasource.</span></div><div class="line">spring.datasource.password= <span class="comment"># Login password of the database.</span></div><div class="line">spring.datasource.platform=all <span class="comment"># Platform to use in the schema resource (schema-${platform}.sql).</span></div><div class="line">spring.datasource.schema= <span class="comment"># Schema (DDL) script resource reference.</span></div><div class="line">spring.datasource.separator=; <span class="comment"># Statement separator in SQL initialization scripts.</span></div><div class="line">spring.datasource.sql-script-encoding= <span class="comment"># SQL scripts encoding.</span></div><div class="line">spring.datasource.test-on-borrow= <span class="comment"># For instance `false`</span></div><div class="line">spring.datasource.test-on-<span class="keyword">return</span>= <span class="comment"># For instance `false`</span></div><div class="line">spring.datasource.test-<span class="keyword">while</span>-idle= <span class="comment">#</span></div><div class="line">spring.datasource.time-between-eviction-runs-millis= <span class="number">1</span></div><div class="line">spring.datasource.<span class="keyword">type</span>= <span class="comment"># Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span></div><div class="line">spring.datasource.url= <span class="comment"># JDBC url of the database.</span></div><div class="line">spring.datasource.username=</div><div class="line">spring.datasource.validation-query=</div><div class="line"></div><div class="line"><span class="comment"># H2 Web Console (H2ConsoleProperties)</span></div><div class="line">spring.h2.console.enabled=<span class="literal">false</span> <span class="comment"># Enable the console.</span></div><div class="line">spring.h2.console.path=/h2-console <span class="comment"># Path at which the console will be available.</span></div><div class="line"></div><div class="line"><span class="comment"># JOOQ (JooqAutoConfiguration)</span></div><div class="line">spring.jooq.sql-dialect= <span class="comment"># SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`</span></div><div class="line"></div><div class="line"><span class="comment"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span></div><div class="line">spring.data.jpa.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable JPA repositories.</span></div><div class="line">spring.jpa.database= <span class="comment"># Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.</span></div><div class="line">spring.jpa.database-platform= <span class="comment"># Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.</span></div><div class="line">spring.jpa.generate-ddl=<span class="literal">false</span> <span class="comment"># Initialize the schema on startup.</span></div><div class="line">spring.jpa.hibernate.ddl-<span class="type">auto</span>= <span class="comment"># DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.</span></div><div class="line">spring.jpa.hibernate.naming-strategy= <span class="comment"># Naming strategy fully qualified name.</span></div><div class="line">spring.jpa.open-<span class="keyword">in</span>-view=<span class="literal">true</span> <span class="comment"># Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span></div><div class="line">spring.jpa.properties.*= <span class="comment"># Additional native properties to set on the JPA provider.</span></div><div class="line">spring.jpa.show-sql=<span class="literal">false</span> <span class="comment"># Enable logging of SQL statements.</span></div><div class="line"></div><div class="line"><span class="comment"># JTA (JtaAutoConfiguration)</span></div><div class="line">spring.jta.log-dir= <span class="comment"># Transaction logs directory.</span></div><div class="line"></div><div class="line"><span class="comment"># ATOMIKOS</span></div><div class="line">spring.jta.checkpoint-interval=<span class="number">500</span> <span class="comment"># Interval between checkpoints.</span></div><div class="line">spring.jta.console-file-count=<span class="number">1</span> <span class="comment"># Number of debug logs files that can be created.</span></div><div class="line">spring.jta.console-file-limit=-<span class="number">1</span> <span class="comment"># How many bytes can be stored at most in debug logs files.</span></div><div class="line">spring.jta.console-file-name=tm.<span class="keyword">out</span> <span class="comment"># Debug logs file name.</span></div><div class="line">spring.jta.console-log-level= <span class="comment"># Console log level.</span></div><div class="line">spring.jta.default-jta-timeout=<span class="number">10000</span> <span class="comment"># Default timeout for JTA transactions.</span></div><div class="line">spring.jta.enable-logging=<span class="literal">true</span> <span class="comment"># Enable disk logging.</span></div><div class="line">spring.jta.force-shutdown-on-vm-exit=<span class="literal">false</span> <span class="comment"># Specify if a VM shutdown should trigger forced shutdown of the transaction core.</span></div><div class="line">spring.jta.log-base-dir= <span class="comment"># Directory in which the log files should be stored.</span></div><div class="line">spring.jta.log-base-name=tmlog <span class="comment"># Transactions log file base name.</span></div><div class="line">spring.jta.max-actives=<span class="number">50</span> <span class="comment"># Maximum number of active transactions.</span></div><div class="line">spring.jta.max-timeout=<span class="number">300000</span> <span class="comment"># Maximum timeout (in milliseconds) that can be allowed for transactions.</span></div><div class="line">spring.jta.output-dir= <span class="comment"># Directory in which to store the debug log files.</span></div><div class="line">spring.jta.serial-jta-transactions=<span class="literal">true</span> <span class="comment"># Specify if sub-transactions should be joined when possible.</span></div><div class="line">spring.jta.service= <span class="comment"># Transaction manager implementation that should be started.</span></div><div class="line">spring.jta.threaded-two-phase-commit=<span class="literal">true</span> <span class="comment"># Use different (and concurrent) threads for two-phase commit on the participating resources.</span></div><div class="line">spring.jta.transaction-manager-unique-name= <span class="comment"># Transaction manager's unique name.</span></div><div class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=<span class="number">30</span> <span class="comment"># Timeout, in seconds, for borrowing connections from the pool.</span></div><div class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=<span class="literal">true</span> <span class="comment"># Whether or not to ignore the transacted flag when creating session.</span></div><div class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode=<span class="literal">false</span> <span class="comment"># Whether or not local transactions are desired.</span></div><div class="line">spring.jta.atomikos.connectionfactory.maintenance-interval=<span class="number">60</span> <span class="comment"># The time, in seconds, between runs of the pool's maintenance thread.</span></div><div class="line">spring.jta.atomikos.connectionfactory.max-idle-time=<span class="number">60</span> <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></div><div class="line">spring.jta.atomikos.connectionfactory.max-lifetime=<span class="number">0</span> <span class="comment"># The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span></div><div class="line">spring.jta.atomikos.connectionfactory.max-pool-size=<span class="number">1</span> <span class="comment"># The maximum size of the pool.</span></div><div class="line">spring.jta.atomikos.connectionfactory.min-pool-size=<span class="number">1</span> <span class="comment"># The minimum size of the pool.</span></div><div class="line">spring.jta.atomikos.connectionfactory.reap-timeout=<span class="number">0</span> <span class="comment"># The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span></div><div class="line">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory <span class="comment"># The unique name used to identify the resource during recovery.</span></div><div class="line">spring.jta.atomikos.datasource.borrow-connection-timeout=<span class="number">30</span> <span class="comment"># Timeout, in seconds, for borrowing connections from the pool.</span></div><div class="line">spring.jta.atomikos.datasource.default-isolation-level= <span class="comment"># Default isolation level of connections provided by the pool.</span></div><div class="line">spring.jta.atomikos.datasource.login-timeout= <span class="comment"># Timeout, in seconds, for establishing a database connection.</span></div><div class="line">spring.jta.atomikos.datasource.maintenance-interval=<span class="number">60</span> <span class="comment"># The time, in seconds, between runs of the pool's maintenance thread.</span></div><div class="line">spring.jta.atomikos.datasource.max-idle-time=<span class="number">60</span> <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></div><div class="line">spring.jta.atomikos.datasource.max-lifetime=<span class="number">0</span> <span class="comment"># The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span></div><div class="line">spring.jta.atomikos.datasource.max-pool-size=<span class="number">1</span> <span class="comment"># The maximum size of the pool.</span></div><div class="line">spring.jta.atomikos.datasource.min-pool-size=<span class="number">1</span> <span class="comment"># The minimum size of the pool.</span></div><div class="line">spring.jta.atomikos.datasource.reap-timeout=<span class="number">0</span> <span class="comment"># The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span></div><div class="line">spring.jta.atomikos.datasource.test-query= <span class="comment"># SQL query or statement used to validate a connection before returning it.</span></div><div class="line">spring.jta.atomikos.datasource.unique-resource-name=dataSource <span class="comment"># The unique name used to identify the resource during recovery.</span></div><div class="line"></div><div class="line"><span class="comment"># BITRONIX</span></div><div class="line">spring.jta.allow-multiple-lrc=<span class="literal">false</span> <span class="comment"># Allow multiple LRC resources to be enlisted into the same transaction.</span></div><div class="line">spring.jta.asynchronous2-pc=<span class="literal">false</span> <span class="comment"># Enable asynchronously execution of two phase commit.</span></div><div class="line">spring.jta.background-recovery-interval-seconds=<span class="number">60</span> <span class="comment"># Interval in seconds at which to run the recovery process in the background.</span></div><div class="line">spring.jta.current-node-only-recovery=<span class="literal">true</span> <span class="comment"># Recover only the current node.</span></div><div class="line">spring.jta.debug-zero-resource-transaction=<span class="literal">false</span> <span class="comment"># Log the creation and commit call stacks of transactions executed without a single enlisted resource.</span></div><div class="line">spring.jta.default-transaction-timeout=<span class="number">60</span> <span class="comment"># Default transaction timeout in seconds.</span></div><div class="line">spring.jta.disable-jmx=<span class="literal">false</span> <span class="comment"># Enable JMX support.</span></div><div class="line">spring.jta.exception-analyzer= <span class="comment"># Set the fully qualified name of the exception analyzer implementation to use.</span></div><div class="line">spring.jta.filter-log-status=<span class="literal">false</span> <span class="comment"># Enable filtering of logs so that only mandatory logs are written.</span></div><div class="line">spring.jta.force-batching-enabled=<span class="literal">true</span> <span class="comment">#  Set if disk forces are batched.</span></div><div class="line">spring.jta.forced-write-enabled=<span class="literal">true</span> <span class="comment"># Set if logs are forced to disk.</span></div><div class="line">spring.jta.graceful-shutdown-interval=<span class="number">60</span> <span class="comment"># Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.</span></div><div class="line">spring.jta.jndi-transaction-synchronization-registry-name= <span class="comment"># JNDI name of the TransactionSynchronizationRegistry.</span></div><div class="line">spring.jta.jndi-user-transaction-name= <span class="comment"># JNDI name of the UserTransaction.</span></div><div class="line">spring.jta.journal=disk <span class="comment"># Name of the journal. Can be 'disk', 'null' or a class name.</span></div><div class="line">spring.jta.log-part1-filename=btm1.tlog <span class="comment"># Name of the first fragment of the journal.</span></div><div class="line">spring.jta.log-part2-filename=btm2.tlog <span class="comment"># Name of the second fragment of the journal.</span></div><div class="line">spring.jta.max-log-size-<span class="keyword">in</span>-mb=<span class="number">2</span> <span class="comment"># Maximum size in megabytes of the journal fragments.</span></div><div class="line">spring.jta.resource-configuration-filename= <span class="comment"># ResourceLoader configuration file name.</span></div><div class="line">spring.jta.server-id= <span class="comment"># ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.</span></div><div class="line">spring.jta.skip-corrupted-logs=<span class="literal">false</span> <span class="comment"># Skip corrupted transactions log entries.</span></div><div class="line">spring.jta.warn-about-zero-resource-transaction=<span class="literal">true</span> <span class="comment"># Log a warning for transactions executed without a single enlisted resource.</span></div><div class="line">spring.jta.bitronix.connectionfactory.acquire-increment=<span class="number">1</span> <span class="comment"># Number of connections to create when growing the pool.</span></div><div class="line">spring.jta.bitronix.connectionfactory.acquisition-interval=<span class="number">1</span> <span class="comment"># Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span></div><div class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout=<span class="number">30</span> <span class="comment"># Timeout, in seconds, for acquiring connections from the pool.</span></div><div class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions=<span class="literal">true</span> <span class="comment"># Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span></div><div class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=<span class="literal">false</span> <span class="comment"># Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span></div><div class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=<span class="literal">true</span> <span class="comment"># Whether or not resources should be enlisted and delisted automatically.</span></div><div class="line">spring.jta.bitronix.connectionfactory.cache-producers-consumers=<span class="literal">true</span> <span class="comment"># Whether or not produces and consumers should be cached.</span></div><div class="line">spring.jta.bitronix.connectionfactory.defer-connection-release=<span class="literal">true</span> <span class="comment"># Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.</span></div><div class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=<span class="literal">false</span> <span class="comment"># Whether or not recovery failures should be ignored.</span></div><div class="line">spring.jta.bitronix.connectionfactory.max-idle-time=<span class="number">60</span> <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></div><div class="line">spring.jta.bitronix.connectionfactory.max-pool-size=<span class="number">10</span> <span class="comment"># The maximum size of the pool. 0 denotes no limit.</span></div><div class="line">spring.jta.bitronix.connectionfactory.min-pool-size=<span class="number">0</span> <span class="comment"># The minimum size of the pool.</span></div><div class="line">spring.jta.bitronix.connectionfactory.password= <span class="comment"># The password to use to connect to the JMS provider.</span></div><div class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections=<span class="literal">false</span> <span class="comment">#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span></div><div class="line">spring.jta.bitronix.connectionfactory.test-connections=<span class="literal">true</span> <span class="comment"># Whether or not connections should be tested when acquired from the pool.</span></div><div class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=<span class="number">1</span> <span class="comment"># The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span></div><div class="line">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory <span class="comment"># The unique name used to identify the resource during recovery.</span></div><div class="line">spring.jta.bitronix.connectionfactory.use-tm-join=<span class="literal">true</span> <span class="type">Whether</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="type">TMJOIN</span> should be used <span class="keyword">when</span> starting <span class="type">XAResources</span>.</div><div class="line">spring.jta.bitronix.connectionfactory.user= <span class="comment"># The user to use to connect to the JMS provider.</span></div><div class="line">spring.jta.bitronix.datasource.acquire-increment=<span class="number">1</span> <span class="comment"># Number of connections to create when growing the pool.</span></div><div class="line">spring.jta.bitronix.datasource.acquisition-interval=<span class="number">1</span> <span class="comment"># Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span></div><div class="line">spring.jta.bitronix.datasource.acquisition-timeout=<span class="number">30</span> <span class="comment"># Timeout, in seconds, for acquiring connections from the pool.</span></div><div class="line">spring.jta.bitronix.datasource.allow-local-transactions=<span class="literal">true</span> <span class="comment"># Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span></div><div class="line">spring.jta.bitronix.datasource.apply-transaction-timeout=<span class="literal">false</span> <span class="comment"># Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span></div><div class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled=<span class="literal">true</span> <span class="comment"># Whether or not resources should be enlisted and delisted automatically.</span></div><div class="line">spring.jta.bitronix.datasource.cursor-holdability= <span class="comment"># The default cursor holdability for connections.</span></div><div class="line">spring.jta.bitronix.datasource.defer-connection-release=<span class="literal">true</span> <span class="comment"># Whether or not the database can run many transactions on the same connection and supports transaction interleaving.</span></div><div class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= <span class="comment"># Whether or not Connection.isValid() is called when acquiring a connection from the pool.</span></div><div class="line">spring.jta.bitronix.datasource.ignore-recovery-failures=<span class="literal">false</span> <span class="comment"># Whether or not recovery failures should be ignored.</span></div><div class="line">spring.jta.bitronix.datasource.isolation-level= <span class="comment"># The default isolation level for connections.</span></div><div class="line">spring.jta.bitronix.datasource.local-<span class="type">auto</span>-commit= <span class="comment"># The default auto-commit mode for local transactions.</span></div><div class="line">spring.jta.bitronix.datasource.login-timeout= <span class="comment"># Timeout, in seconds, for establishing a database connection.</span></div><div class="line">spring.jta.bitronix.datasource.max-idle-time=<span class="number">60</span> <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></div><div class="line">spring.jta.bitronix.datasource.max-pool-size=<span class="number">10</span> <span class="comment"># The maximum size of the pool. 0 denotes no limit.</span></div><div class="line">spring.jta.bitronix.datasource.min-pool-size=<span class="number">0</span> <span class="comment"># The minimum size of the pool.</span></div><div class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size=<span class="number">0</span> <span class="comment"># The target size of the prepared statement cache. 0 disables the cache.</span></div><div class="line">spring.jta.bitronix.datasource.share-transaction-connections=<span class="literal">false</span> <span class="comment">#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span></div><div class="line">spring.jta.bitronix.datasource.test-query= <span class="comment"># SQL query or statement used to validate a connection before returning it.</span></div><div class="line">spring.jta.bitronix.datasource.two-pc-ordering-position=<span class="number">1</span> <span class="comment"># The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span></div><div class="line">spring.jta.bitronix.datasource.unique-name=dataSource <span class="comment"># The unique name used to identify the resource during recovery.</span></div><div class="line">spring.jta.bitronix.datasource.use-tm-join=<span class="literal">true</span> <span class="type">Whether</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="type">TMJOIN</span> should be used <span class="keyword">when</span> starting <span class="type">XAResources</span>.</div><div class="line"></div><div class="line"><span class="comment"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span></div><div class="line">spring.mongodb.embedded.features=<span class="type">SYNC_DELAY</span> <span class="comment"># Comma-separated list of features to enable.</span></div><div class="line">spring.mongodb.embedded.version=<span class="number">2</span>.<span class="number">6</span>.<span class="number">10</span> <span class="comment"># Version of Mongo to use.</span></div><div class="line"></div><div class="line"><span class="comment"># REDIS (RedisProperties)</span></div><div class="line">spring.redis.database=<span class="number">0</span> <span class="comment"># Database index used by the connection factory.</span></div><div class="line">spring.redis.host=localhost <span class="comment"># Redis server host.</span></div><div class="line">spring.redis.password= <span class="comment"># Login password of the redis server.</span></div><div class="line">spring.redis.pool.max-active=<span class="number">8</span> <span class="comment"># Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span></div><div class="line">spring.redis.pool.max-idle=<span class="number">8</span> <span class="comment"># Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span></div><div class="line">spring.redis.pool.max-wait=-<span class="number">1</span> <span class="comment"># Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span></div><div class="line">spring.redis.pool.min-idle=<span class="number">0</span> <span class="comment"># Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span></div><div class="line">spring.redis.port=<span class="number">6379</span> <span class="comment"># Redis server port.</span></div><div class="line">spring.redis.sentinel.master= <span class="comment"># Name of Redis server.</span></div><div class="line">spring.redis.sentinel.nodes= <span class="comment"># Comma-separated list of host:port pairs.</span></div><div class="line">spring.redis.timeout=<span class="number">0</span> <span class="comment"># Connection timeout in milliseconds.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># INTEGRATION PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># ACTIVEMQ (ActiveMQProperties)</span></div><div class="line">spring.activemq.broker-url= <span class="comment"># URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`</span></div><div class="line">spring.activemq.<span class="keyword">in</span>-memory=<span class="literal">true</span> <span class="comment"># Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span></div><div class="line">spring.activemq.password= <span class="comment"># Login password of the broker.</span></div><div class="line">spring.activemq.pooled=<span class="literal">false</span> <span class="comment"># Specify if a PooledConnectionFactory should be created instead of a regular ConnectionFactory.</span></div><div class="line">spring.activemq.user= <span class="comment"># Login user of the broker.</span></div><div class="line"></div><div class="line"><span class="comment"># ARTEMIS (ArtemisProperties)</span></div><div class="line">spring.artemis.embedded.cluster-password= <span class="comment"># Cluster password. Randomly generated on startup by default.</span></div><div class="line">spring.artemis.embedded.data-directory= <span class="comment"># Journal file directory. Not necessary if persistence is turned off.</span></div><div class="line">spring.artemis.embedded.enabled=<span class="literal">true</span> <span class="comment"># Enable embedded mode if the Artemis server APIs are available.</span></div><div class="line">spring.artemis.embedded.persistent=<span class="literal">false</span> <span class="comment"># Enable persistent store.</span></div><div class="line">spring.artemis.embedded.queues= <span class="comment"># Comma-separated list of queues to create on startup.</span></div><div class="line">spring.artemis.embedded.server-id= <span class="comment"># Server id. By default, an auto-incremented counter is used.</span></div><div class="line">spring.artemis.embedded.topics= <span class="comment"># Comma-separated list of topics to create on startup.</span></div><div class="line">spring.artemis.host=localhost <span class="comment"># Artemis broker host.</span></div><div class="line">spring.artemis.mode= <span class="comment"># Artemis deployment mode, auto-detected by default. Can be explicitly set to "native" or "embedded".</span></div><div class="line">spring.artemis.port=<span class="number">61616</span> <span class="comment"># Artemis broker port.</span></div><div class="line"></div><div class="line"><span class="comment"># SPRING BATCH (BatchProperties)</span></div><div class="line">spring.batch.initializer.enabled=<span class="literal">true</span> <span class="comment"># Create the required batch tables on startup if necessary.</span></div><div class="line">spring.batch.job.enabled=<span class="literal">true</span> <span class="comment"># Execute all Spring Batch jobs in the context on startup.</span></div><div class="line">spring.batch.job.names= <span class="comment"># Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.</span></div><div class="line">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql <span class="comment"># Path to the SQL file to use to initialize the database schema.</span></div><div class="line">spring.batch.table-prefix= <span class="comment"># Table prefix for all the batch meta-data tables.</span></div><div class="line"></div><div class="line"><span class="comment"># HORNETQ (HornetQProperties)</span></div><div class="line">spring.hornetq.embedded.cluster-password= <span class="comment"># Cluster password. Randomly generated on startup by default.</span></div><div class="line">spring.hornetq.embedded.data-directory= <span class="comment"># Journal file directory. Not necessary if persistence is turned off.</span></div><div class="line">spring.hornetq.embedded.enabled=<span class="literal">true</span> <span class="comment"># Enable embedded mode if the HornetQ server APIs are available.</span></div><div class="line">spring.hornetq.embedded.persistent=<span class="literal">false</span> <span class="comment"># Enable persistent store.</span></div><div class="line">spring.hornetq.embedded.queues= <span class="comment"># Comma-separated list of queues to create on startup.</span></div><div class="line">spring.hornetq.embedded.server-id= <span class="comment"># Server id. By default, an auto-incremented counter is used.</span></div><div class="line">spring.hornetq.embedded.topics= <span class="comment"># Comma-separated list of topics to create on startup.</span></div><div class="line">spring.hornetq.host=localhost <span class="comment"># HornetQ broker host.</span></div><div class="line">spring.hornetq.mode= <span class="comment"># HornetQ deployment mode, auto-detected by default. Can be explicitly set to "native" or "embedded".</span></div><div class="line">spring.hornetq.port=<span class="number">5445</span> <span class="comment"># HornetQ broker port.</span></div><div class="line"></div><div class="line"><span class="comment"># JMS (JmsProperties)</span></div><div class="line">spring.jms.jndi-name= <span class="comment"># Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span></div><div class="line">spring.jms.listener.acknowledge-mode= <span class="comment"># Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span></div><div class="line">spring.jms.listener.<span class="type">auto</span>-startup=<span class="literal">true</span> <span class="comment"># Start the container automatically on startup.</span></div><div class="line">spring.jms.listener.concurrency= <span class="comment"># Minimum number of concurrent consumers.</span></div><div class="line">spring.jms.listener.max-concurrency= <span class="comment"># Maximum number of concurrent consumers.</span></div><div class="line">spring.jms.pub-sub-domain=<span class="literal">false</span> <span class="comment"># Specify if the default destination type is topic.</span></div><div class="line"></div><div class="line"><span class="comment"># RABBIT (RabbitProperties)</span></div><div class="line">spring.rabbitmq.addresses= <span class="comment"># Comma-separated list of addresses to which the client should connect to.</span></div><div class="line">spring.rabbitmq.dynamic=<span class="literal">true</span> <span class="comment"># Create an AmqpAdmin bean.</span></div><div class="line">spring.rabbitmq.host=localhost <span class="comment"># RabbitMQ host.</span></div><div class="line">spring.rabbitmq.listener.acknowledge-mode= <span class="comment"># Acknowledge mode of container.</span></div><div class="line">spring.rabbitmq.listener.<span class="type">auto</span>-startup=<span class="literal">true</span> <span class="comment"># Start the container automatically on startup.</span></div><div class="line">spring.rabbitmq.listener.concurrency= <span class="comment"># Minimum number of consumers.</span></div><div class="line">spring.rabbitmq.listener.max-concurrency= <span class="comment"># Maximum number of consumers.</span></div><div class="line">spring.rabbitmq.listener.prefetch= <span class="comment"># Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span></div><div class="line">spring.rabbitmq.listener.transaction-size= <span class="comment"># Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.</span></div><div class="line">spring.rabbitmq.password= <span class="comment"># Login to authenticate against the broker.</span></div><div class="line">spring.rabbitmq.port=<span class="number">5672</span> <span class="comment"># RabbitMQ port.</span></div><div class="line">spring.rabbitmq.requested-heartbeat= <span class="comment"># Requested heartbeat timeout, in seconds; zero for none.</span></div><div class="line">spring.rabbitmq.ssl.enabled=<span class="literal">false</span> <span class="comment"># Enable SSL support.</span></div><div class="line">spring.rabbitmq.ssl.key-store= <span class="comment"># Path to the key store that holds the SSL certificate.</span></div><div class="line">spring.rabbitmq.ssl.key-store-password= <span class="comment"># Password used to access the key store.</span></div><div class="line">spring.rabbitmq.ssl.trust-store= <span class="comment"># Trust store that holds SSL certificates.</span></div><div class="line">spring.rabbitmq.ssl.trust-store-password= <span class="comment"># Password used to access the trust store.</span></div><div class="line">spring.rabbitmq.ssl.algorithm= <span class="comment"># SSL algorithm to use. By default configure by the rabbit client library.</span></div><div class="line">spring.rabbitmq.username= <span class="comment"># Login user to authenticate to the broker.</span></div><div class="line">spring.rabbitmq.virtual-host= <span class="comment"># Virtual host to use when connecting to the broker.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># ACTUATOR PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># ENDPOINTS (AbstractEndpoint subclasses)</span></div><div class="line">endpoints.enabled=<span class="literal">true</span> <span class="comment"># Enable endpoints.</span></div><div class="line">endpoints.sensitive= <span class="comment"># Default endpoint sensitive setting.</span></div><div class="line">endpoints.actuator.enabled=<span class="literal">true</span> <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.actuator.path= <span class="comment"># Endpoint URL path.</span></div><div class="line">endpoints.actuator.sensitive=<span class="literal">false</span> <span class="comment"># Enable security on the endpoint.</span></div><div class="line">endpoints.autoconfig.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.autoconfig.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.autoconfig.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.beans.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.beans.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.beans.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.configprops.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.configprops.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.configprops.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services <span class="comment"># Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span></div><div class="line">endpoints.configprops.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.docs.curies.enabled=<span class="literal">false</span> <span class="comment"># Enable the curie generation.</span></div><div class="line">endpoints.docs.enabled=<span class="literal">true</span> <span class="comment"># Enable actuator docs endpoint.</span></div><div class="line">endpoints.docs.path=/docs <span class="comment">#</span></div><div class="line">endpoints.docs.sensitive=<span class="literal">false</span> <span class="comment">#</span></div><div class="line">endpoints.dump.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.dump.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.dump.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.env.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.env.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.env.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services <span class="comment"># Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span></div><div class="line">endpoints.env.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.flyway.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.flyway.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.flyway.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.health.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.health.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.health.mapping.*= <span class="comment"># Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).</span></div><div class="line">endpoints.health.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.health.time-to-live=<span class="number">1000</span> <span class="comment"># Time to live for cached result, in milliseconds.</span></div><div class="line">endpoints.info.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.info.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.info.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.jolokia.enabled=<span class="literal">true</span> <span class="comment"># Enable Jolokia endpoint.</span></div><div class="line">endpoints.jolokia.path=/jolokia <span class="comment"># Endpoint URL path.</span></div><div class="line">endpoints.jolokia.sensitive=<span class="literal">true</span> <span class="comment"># Enable security on the endpoint.</span></div><div class="line">endpoints.liquibase.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.liquibase.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.liquibase.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.logfile.enabled=<span class="literal">true</span> <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.logfile.path=/logfile <span class="comment"># Endpoint URL path.</span></div><div class="line">endpoints.logfile.sensitive=<span class="literal">true</span> <span class="comment"># Enable security on the endpoint.</span></div><div class="line">endpoints.mappings.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.mappings.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.mappings.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.metrics.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.metrics.filter.enabled=<span class="literal">true</span> <span class="comment"># Enable the metrics servlet filter.</span></div><div class="line">endpoints.metrics.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.metrics.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.shutdown.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.shutdown.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.shutdown.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line">endpoints.trace.enabled= <span class="comment"># Enable the endpoint.</span></div><div class="line">endpoints.trace.id= <span class="comment"># Endpoint identifier.</span></div><div class="line">endpoints.trace.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></div><div class="line"></div><div class="line"><span class="comment"># ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</span></div><div class="line">endpoints.cors.allow-credentials= <span class="comment"># Set whether credentials are supported. When not set, credentials are not supported.</span></div><div class="line">endpoints.cors.allowed-headers= <span class="comment"># Comma-separated list of headers to allow in a request. '*' allows all headers.</span></div><div class="line">endpoints.cors.allowed-methods=<span class="type">GET</span> <span class="comment"># Comma-separated list of methods to allow. '*' allows all methods.</span></div><div class="line">endpoints.cors.allowed-origins= <span class="comment"># Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</span></div><div class="line">endpoints.cors.exposed-headers= <span class="comment"># Comma-separated list of headers to include in a response.</span></div><div class="line">endpoints.cors.max-age=<span class="number">1800</span> <span class="comment"># How long, in seconds, the response from a pre-flight request can be cached by clients.</span></div><div class="line"></div><div class="line"><span class="comment"># JMX ENDPOINT (EndpointMBeanExportProperties)</span></div><div class="line">endpoints.jmx.domain= <span class="comment"># JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.</span></div><div class="line">endpoints.jmx.enabled=<span class="literal">true</span> <span class="comment"># Enable JMX export of all endpoints.</span></div><div class="line">endpoints.jmx.<span class="keyword">static</span>-names= <span class="comment"># Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span></div><div class="line">endpoints.jmx.unique-names=<span class="literal">false</span> <span class="comment"># Ensure that ObjectNames are modified in case of conflict.</span></div><div class="line"></div><div class="line"><span class="comment"># JOLOKIA (JolokiaProperties)</span></div><div class="line">jolokia.config.*= <span class="comment"># See Jolokia manual</span></div><div class="line"></div><div class="line"><span class="comment"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span></div><div class="line">management.add-application-context-header=<span class="literal">true</span> <span class="comment"># Add the "X-Application-Context" HTTP header in each response.</span></div><div class="line">management.address= <span class="comment"># Network address that the management endpoints should bind to.</span></div><div class="line">management.context-path= <span class="comment"># Management endpoint context-path. For instance `/actuator`</span></div><div class="line">management.port= <span class="comment"># Management endpoint HTTP port. Use the same port as the application by default.</span></div><div class="line">management.security.enabled=<span class="literal">true</span> <span class="comment"># Enable security.</span></div><div class="line">management.security.role=<span class="type">ADMIN</span> <span class="comment"># Role required to access the management endpoint.</span></div><div class="line">management.security.sessions=stateless <span class="comment"># Session creating policy to use (always, never, if_required, stateless).</span></div><div class="line"></div><div class="line"><span class="comment"># HEALTH INDICATORS (previously health.*)</span></div><div class="line">management.health.db.enabled=<span class="literal">true</span> <span class="comment"># Enable database health check.</span></div><div class="line">management.health.defaults.enabled=<span class="literal">true</span> <span class="comment"># Enable default health indicators.</span></div><div class="line">management.health.diskspace.enabled=<span class="literal">true</span> <span class="comment"># Enable disk space health check.</span></div><div class="line">management.health.diskspace.path= <span class="comment"># Path used to compute the available disk space.</span></div><div class="line">management.health.diskspace.threshold=<span class="number">0</span> <span class="comment"># Minimum disk space that should be available, in bytes.</span></div><div class="line">management.health.elasticsearch.enabled=<span class="literal">true</span> <span class="comment"># Enable elasticsearch health check.</span></div><div class="line">management.health.elasticsearch.indices= <span class="comment"># Comma-separated index names.</span></div><div class="line">management.health.elasticsearch.response-timeout=<span class="number">100</span> <span class="comment"># The time, in milliseconds, to wait for a response from the cluster.</span></div><div class="line">management.health.jms.enabled=<span class="literal">true</span> <span class="comment"># Enable JMS health check.</span></div><div class="line">management.health.mail.enabled=<span class="literal">true</span> <span class="comment"># Enable Mail health check.</span></div><div class="line">management.health.mongo.enabled=<span class="literal">true</span> <span class="comment"># Enable MongoDB health check.</span></div><div class="line">management.health.rabbit.enabled=<span class="literal">true</span> <span class="comment"># Enable RabbitMQ health check.</span></div><div class="line">management.health.redis.enabled=<span class="literal">true</span> <span class="comment"># Enable Redis health check.</span></div><div class="line">management.health.solr.enabled=<span class="literal">true</span> <span class="comment"># Enable Solr health check.</span></div><div class="line">management.health.status.order=<span class="type">DOWN</span>, <span class="type">OUT_OF_SERVICE</span>, <span class="type">UNKNOWN</span>, <span class="type">UP</span> <span class="comment"># Comma-separated list of health statuses in order of severity.</span></div><div class="line"></div><div class="line"><span class="comment"># TRACING ((TraceProperties)</span></div><div class="line">management.trace.<span class="keyword">include</span>=request-headers,response-headers,errors <span class="comment"># Items to be included in the trace.</span></div><div class="line"></div><div class="line"><span class="comment"># REMOTE SHELL</span></div><div class="line">shell.auth=simple <span class="comment"># Authentication type. Auto-detected according to the environment.</span></div><div class="line">shell.auth.jaas.domain=my-domain <span class="comment"># JAAS domain.</span></div><div class="line">shell.auth.key.path= <span class="comment"># Path to the authentication key. This should point to a valid ".pem" file.</span></div><div class="line">shell.auth.simple.user.name=user <span class="comment"># Login user.</span></div><div class="line">shell.auth.simple.user.password= <span class="comment"># Login password.</span></div><div class="line">shell.auth.spring.roles=<span class="type">ADMIN</span> <span class="comment"># Comma-separated list of required roles to login to the CRaSH console.</span></div><div class="line">shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** <span class="comment"># Patterns to use to look for commands.</span></div><div class="line">shell.command-refresh-interval=-<span class="number">1</span> <span class="comment"># Scan for changes and update the command if necessary (in seconds).</span></div><div class="line">shell.config-path-patterns=classpath*:/crash/* <span class="comment"># Patterns to use to look for configurations.</span></div><div class="line">shell.disabled-commands=jpa*,jdbc*,jndi* <span class="comment"># Comma-separated list of commands to disable.</span></div><div class="line">shell.disabled-plugins= <span class="comment"># Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.</span></div><div class="line">shell.ssh.auth-timeout = <span class="comment"># Number of milliseconds after user will be prompted to login again.</span></div><div class="line">shell.ssh.enabled=<span class="literal">true</span> <span class="comment"># Enable CRaSH SSH support.</span></div><div class="line">shell.ssh.idle-timeout = <span class="comment"># Number of milliseconds after which unused connections are closed.</span></div><div class="line">shell.ssh.key-path= <span class="comment"># Path to the SSH server key.</span></div><div class="line">shell.ssh.port=<span class="number">2000</span> <span class="comment"># SSH port.</span></div><div class="line">shell.telnet.enabled=<span class="literal">false</span> <span class="comment"># Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.</span></div><div class="line">shell.telnet.port=<span class="number">5000</span> <span class="comment"># Telnet port.</span></div><div class="line"></div><div class="line"><span class="comment"># GIT INFO</span></div><div class="line">spring.git.properties= <span class="comment"># Resource reference to a generated git info properties file.</span></div><div class="line"></div><div class="line"><span class="comment"># METRICS EXPORT (MetricExportProperties)</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.aggregate.key-pattern= <span class="comment"># Pattern that tells the aggregator what to do with the keys from the source repository.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.aggregate.prefix= <span class="comment"># Prefix for global repository if active.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.delay-millis=<span class="number">5000</span> <span class="comment"># Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.enabled=<span class="literal">true</span> <span class="comment"># Flag to enable metric export (assuming a MetricWriter is available).</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.excludes= <span class="comment"># List of patterns for metric names to exclude. Applied after the includes.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.includes= <span class="comment"># List of patterns for metric names to include.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.redis.key=keys.spring.metrics <span class="comment"># Key for redis repository export (if active).</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.redis.prefix=spring.metrics <span class="comment"># Prefix for redis repository if active.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.send-latest= <span class="comment"># Flag to switch off any available optimizations based on not exporting unchanged metric values.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.statsd.host= <span class="comment"># Host of a statsd server to receive exported metrics.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.statsd.port=<span class="number">8125</span> <span class="comment"># Port of a statsd server to receive exported metrics.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.statsd.prefix= <span class="comment"># Prefix for statsd exported metrics.</span></div><div class="line">spring.metrics.<span class="keyword">export</span>.triggers.*= <span class="comment"># Specific trigger properties per MetricWriter bean name.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># DEVTOOLS PROPERTIES</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># DEVTOOLS (DevToolsProperties)</span></div><div class="line">spring.devtools.livereload.enabled=<span class="literal">true</span> <span class="comment"># Enable a livereload.com compatible server.</span></div><div class="line">spring.devtools.livereload.port=<span class="number">35729</span> <span class="comment"># Server port.</span></div><div class="line">spring.devtools.restart.additional-exclude= <span class="comment"># Additional patterns that should be excluded from triggering a full restart.</span></div><div class="line">spring.devtools.restart.additional-paths= <span class="comment"># Additional paths to watch for changes.</span></div><div class="line">spring.devtools.restart.enabled=<span class="literal">true</span> <span class="comment"># Enable automatic restart.</span></div><div class="line">spring.devtools.restart.exclude=<span class="type">META</span>-<span class="type">INF</span>/maven/**,<span class="type">META</span>-<span class="type">INF</span>/resources/**,resources/**,<span class="keyword">static</span>/**,public/**,templates/**,**/*<span class="type">Test</span>.class,**/*<span class="type">Tests</span>.class,git.properties <span class="comment"># Patterns that should be excluded from triggering a full restart.</span></div><div class="line">spring.devtools.restart.poll-interval=<span class="number">1000</span> <span class="comment"># Amount of time (in milliseconds) to wait between polling for classpath changes.</span></div><div class="line">spring.devtools.restart.quiet-period=<span class="number">400</span> <span class="comment"># Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.</span></div><div class="line">spring.devtools.restart.trigger-file= <span class="comment"># Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</span></div><div class="line"></div><div class="line"><span class="comment"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span></div><div class="line">spring.devtools.remote.context-path=/.~~spring-boot!~ <span class="comment"># Context path used to handle the remote connection.</span></div><div class="line">spring.devtools.remote.debug.enabled=<span class="literal">true</span> <span class="comment"># Enable remote debug support.</span></div><div class="line">spring.devtools.remote.debug.local-port=<span class="number">8000</span> <span class="comment"># Local remote debug server port.</span></div><div class="line">spring.devtools.remote.proxy.host= <span class="comment"># The host of the proxy to use to connect to the remote application.</span></div><div class="line">spring.devtools.remote.proxy.port= <span class="comment"># The port of the proxy to use to connect to the remote application.</span></div><div class="line">spring.devtools.remote.restart.enabled=<span class="literal">true</span> <span class="comment"># Enable remote restart.</span></div><div class="line">spring.devtools.remote.secret= <span class="comment"># A shared secret required to establish a connection (required to enable remote support).</span></div><div class="line">spring.devtools.remote.secret-header-name=X-<span class="type">AUTH</span>-<span class="type">TOKEN</span> <span class="comment"># HTTP header used to transfer the shared secret.</span></div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转载自Spring Boot 1.3.5 Release 官方文档：[http://docs.spring.io/spring-boot/docs/1.3.5.RELEASE/reference/htmlsingle]http://docs.spring.io/spring]]>
    </summary>
    
      <category term="Spring Boot" scheme="http://valleylord.github.io/tags/Spring-Boot/"/>
    
      <category term="转载" scheme="http://valleylord.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Spring Boot" scheme="http://valleylord.github.io/categories/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[KeyTool 和 OpenSSL 相互转换 [转]]]></title>
    <link href="http://valleylord.github.io/post/201606-keytool-openssl-transform/"/>
    <id>http://valleylord.github.io/post/201606-keytool-openssl-transform/</id>
    <published>2016-06-03T05:09:30.000Z</published>
    <updated>2016-06-03T11:54:14.251Z</updated>
    <content type="html"><![CDATA[<p>转载自：<a href="http://blog.chinaunix.net/uid-631975-id-3313151.html" class="uri" target="_blank" rel="external">http://blog.chinaunix.net/uid-631975-id-3313151.html</a></p>
<blockquote>
<p>已测试 Keytool 转 OpenSSL。 -- by valleylord</p>
</blockquote>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">REM</span> 生成自签名 CA 证书</div><div class="line"><span class="keyword">REM</span> Win32 OpenSSL</div><div class="line"><span class="keyword">REM</span> http://slproweb.com/products/Win32OpenSSL.html</div><div class="line"><span class="keyword">REM</span> How <span class="keyword">to</span> create a self-<span class="typename">signed</span> SSL Certificate</div><div class="line"><span class="keyword">REM</span> http://www.akadia.com/services/ssh_test_certificate.html</div><div class="line"><span class="keyword">REM</span> OpenSSL <span class="keyword">to</span> Keytool Conversion tips</div><div class="line"><span class="keyword">REM</span> http://conshell.net/wiki/index.php/OpenSSL_to_Keytool_Conversion_tips</div><div class="line"><span class="keyword">REM</span> X<span class="number">.509</span></div><div class="line"><span class="keyword">REM</span> http://en.wikipedia.org/wiki/X<span class="number">.509</span>#Certificate_filename_extensions</div><div class="line"><span class="keyword">REM</span> ===================================== OpenSSL <span class="number">2</span> KeyTools</div><div class="line"><span class="keyword">REM</span> <span class="number">0.</span> 一个命令就生成自签名的 CA 证书</div><div class="line"><span class="keyword">REM</span> openssl req -x509 -newkey rsa:<span class="number">1024</span> -passout pass:<span class="number">123456</span> -days <span class="number">3650</span> -keyout whhit.pem.key -<span class="keyword">out</span> whhit.pem.cer -subj <span class="string">"/CN=whhit.me/OU=WeRun Club/O=whhit/L=Weihai/S=Shandong/C=CN"</span></div><div class="line"><span class="keyword">REM</span> <span class="number">1.</span> 生成一个新的私钥</div><div class="line">openssl genrsa -des3 -<span class="keyword">out</span> whhit.pem.key -passout pass:<span class="number">123456</span> <span class="number">1024</span></div><div class="line"><span class="keyword">REM</span> <span class="number">2.</span> 使用指定的私钥生成一个CSR (Certificate Signing Request)</div><div class="line">openssl req -<span class="keyword">new</span> -key whhit.pem.key -passin pass:<span class="number">123456</span> -<span class="keyword">out</span> whhit.pem.csr -subj <span class="string">"/CN=whhit.me/OU=WeRun Club/O=whhit/L=Weihai/S=Shandong/C=CN"</span></div><div class="line"><span class="keyword">REM</span> <span class="number">3.</span> 将加密的私钥导出为明文的私钥</div><div class="line">openssl rsa -<span class="keyword">in</span> whhit.pem.key -passin pass:<span class="number">123456</span> -<span class="keyword">out</span> whhit.pem.clear.key</div><div class="line"><span class="keyword">REM</span> <span class="number">4.</span> 使用指定的私钥签名生成证书</div><div class="line">openssl x509 -req -days <span class="number">3650</span> -<span class="keyword">in</span> whhit.pem.csr -signkey whhit.pem.clear.key -<span class="keyword">out</span> whhit.pem.cer</div><div class="line"><span class="keyword">REM</span> <span class="number">5.</span> 将私钥和证书转化为 PKCS#<span class="number">12</span> 格式的单个文件</div><div class="line">openssl pkcs12 -export -<span class="keyword">in</span> whhit.pem.cer -inkey whhit.pem.key -passin pass:<span class="number">123456</span> -<span class="keyword">out</span> whhit.p12 -passout pass:<span class="number">123456</span> -name tomcat</div><div class="line"><span class="keyword">REM</span> <span class="number">6.</span> 使用 KeyTools 将 PKSC#<span class="number">12</span> 文件导入为 JKS 的 KeyStore</div><div class="line">keytool -importkeystore -srcstoretype PKCS12 -srckeystore whhit.p12 -srcstorepass <span class="number">123456</span> -srcalias tomcat -srckeypass <span class="number">123456</span> -deststoretype JKS -destkeystore whhit.jks -deststorepass <span class="number">123456</span> -destalias tomcat -destkeypass <span class="number">123456</span></div><div class="line"><span class="keyword">REM</span> ===================================== KeyTools <span class="number">2</span> OpenSSL</div><div class="line"><span class="keyword">REM</span> <span class="number">1.</span> 生成一个含自签名 CA 证书的 JKS 类型的 KeyStore</div><div class="line">keytool -genkeypair -<span class="keyword">alias</span> tomcat -keyalg RSA -keysize <span class="number">1024</span> -sigalg SHA1withRSA -dname <span class="string">"CN=test.me, OU=R & D department, O=\"BJ SOS Software Tech Co., Ltd\", L=Beijing, S=Beijing, C=CN"</span> -validity <span class="number">3650</span> -keypass <span class="number">123456</span> -keystore sos.jks -storepass <span class="number">123456</span></div><div class="line"><span class="keyword">REM</span> <span class="number">2.</span> 从 KeyStore 中导出证书</div><div class="line"><span class="keyword">REM</span> keytool -exportcert -rfc -<span class="keyword">file</span> sos.pem.cer -<span class="keyword">alias</span> tomcat -keystore sos.jks -storepass <span class="number">123456</span></div><div class="line"><span class="keyword">REM</span> <span class="number">3.</span> 将 KeyStore 变更为 PKCS#<span class="number">12</span> 格式</div><div class="line">keytool -importkeystore -srcstoretype JKS -srckeystore sos.jks -srcstorepass <span class="number">123456</span> -srcalias tomcat -srckeypass <span class="number">123456</span> -deststoretype PKCS12 -destkeystore sos.p12 -deststorepass <span class="number">123456</span> -destalias tomcat -destkeypass <span class="number">123456</span> -noprompt</div><div class="line"><span class="keyword">REM</span> <span class="number">4.</span> 使用 OpenSSL 解析 PKCS#<span class="number">12</span> 格式的 KeyStore，并转化为 PEM 格式(包含证书和私钥)</div><div class="line">openssl pkcs12 -<span class="keyword">in</span> sos.p12 -<span class="keyword">out</span> sos.pem.p12 -passin pass:<span class="number">123456</span> -passout pass:<span class="number">123456</span></div><div class="line"><span class="keyword">REM</span> <span class="number">5.</span> 单独输出私钥和公钥</div><div class="line">openssl rsa -<span class="keyword">in</span> sos.pem.p12 -passin pass:<span class="number">123456</span> -<span class="keyword">out</span> sos.pem.key -passout pass:<span class="number">123456</span></div><div class="line">openssl rsa -<span class="keyword">in</span> sos.pem.p12 -passin pass:<span class="number">123456</span> -<span class="keyword">out</span> sos.pem.pub -pubout</div><div class="line"><span class="keyword">REM</span> <span class="number">6.</span> 单独输出证书</div><div class="line">openssl x509 -<span class="keyword">in</span> sos.pem.p12 -<span class="keyword">out</span> sos.pem.cer</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转载自：<a href="http://blog.chinaunix.net/uid-631975-id-3313151.html" class="uri" target="_blank" rel="external">http://blog.chinaunix.net/u]]>
    </summary>
    
      <category term="SSL" scheme="http://valleylord.github.io/tags/SSL/"/>
    
      <category term="转载" scheme="http://valleylord.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="SSL" scheme="http://valleylord.github.io/categories/SSL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[捉虫笔记 3 则（2016.05）]]></title>
    <link href="http://valleylord.github.io/post/201605-bug-report/"/>
    <id>http://valleylord.github.io/post/201605-bug-report/</id>
    <published>2016-05-26T11:53:30.000Z</published>
    <updated>2016-06-03T11:55:47.595Z</updated>
    <content type="html"><![CDATA[<p>最近的工作中，突然出现很多奇怪的bug，本文记录其中的3则。本文以真实的问题为蓝本，但并非百分百原样描述。</p>
<h2>问题1：Tomcat 的 CLOSE_WAIT 状态的连接过多</h2>
<h3>问题现象</h3>
<p>项目中的一个系统，即将第一版上线，时间压的比较紧，半个月前刚刚发布到 UAT 环境。除去一些业务上的 bug 不提，发现一个很诡异的现象：系统的一个模块在工作2天之后连不上了。</p>
<p>经过检查，发现是服务器后台 TCP 连接有很多处于 CLOSE_WAIT 状态。问题短时间内无法查明，于是决定重启应用，不耽误测试进度。第二天，问题重现，无解，重启，第三天，仍然重现，周而复始。</p>
<p>完全不知问题所在，一筹莫展。</p>
<h3>问题原因</h3>
<p>开始怀疑是 Tomcat 的<code>keepAliveTimeout</code>或<code>connectionLinger</code>相关参数设置有问题，导致 HTTP 连接长时间没有释放，但实际上并不是这个原因。</p>
<p>系统的大致架构是这样，共有2个应用，A 应用对外提供 REST 访问；B 应用对内提供 REST 访问，同时，B 应用上连接了很多 ActiveMQ，用于请求其他系统的数据。A、B 应用和 MQ 均部署在同一服务器上。</p>
<p>真正的原因是，实际上的多个 CLOSE_WAIT 状态是因为连了很多 <code>tcp://xxxxxxx</code> 的MQ造成的。细节是这样，A 应用的一个访问请求，通过 REST 访问 B 应用，再通过 B 上的 MQ 去获取外部的数据，B 在请求外部数据的时候，使用了 <code>responseQueue.poll()</code> 这样的写法来异步等待 MQ 的返回（别问我为什么不用同步的请求，外部的接口就只能提供这些）。因此，在外部系统处理发生异常的时候，该消息就永远不会返回，而可怜的 B 应用只能傻傻在那里等，并耗费一条 Tomcat 的线程，A 应用则因为 REST 请求超时，早早收回了资源，进入了 TCP 所谓的半关闭状态。</p>
<p>如果仅仅如此的话，请求不会返回，我们应该也能很快发现这个问题。实际上，奇葩的是，来自 A 应用的这个请求是一个定时请求，每隔一段时间请求一次，如果取不到数据，就用前一次的数据返回。更奇葩的是，MQ 另一端的数据提供方并不是每次都会产生错误，前几次数据请求是返回正常的，后几次会发生问题。更更奇葩的是，数据提供方的这个数据并没有经常变，在生产环境中该数据变动频率会比较高，但是在测试环境，可能没去造数据，每天的数据都一样。种种特例情况导致了我们开始查问题的时候根本没去往这个方向想。</p>
<h3>问题解法</h3>
<p>改为使用 <code>responseQueue.poll(timeout, timeUnit)</code> 这样的写法来异步等待 MQ 的返回，最多等待 30 秒，如无返回直接超时。修改代码总量仅3行。</p>
<h2>问题2：HTTPClient 遇到 <code>Connection Reset</code> 问题</h2>
<h3>问题现象</h3>
<p>还是这个项目，在上一个新版之后，发现原先能用的 HTTPClient 请求，无法请求到了，客户端提示的异常中有 <code>Connection Reset</code>。</p>
<h3>问题原因</h3>
<p>有了之前那个 CLOSE_WAIT 问题的经验，在查这个问题的时候，对 TCP、HTTP 什么的已经有一些经验了。造成这个问题的原因基本上是，TCP 的一端（通常是服务器端）在向另一端写数据的时候，在数据尚未写完的时候，就强行关闭了连接，导致发的数据不全。类似的原因还可能提示 <code>BROKEN PIPE</code> 这样的错误。</p>
<p>多数情况下，该连接的服务器端应该在打开 socket 连接的时候启用了 <code>SO_LINGER</code> 这样的参数，并设置 <code>linger=0</code>，对 Tomcat 来说，就是设置了 <code>connectionLinger=0</code>。但是仅仅这样，仍然不足以产生这样的问题，问题是在 HTTPClient 连接的时候，设置了 HTTP Header 参数 <code>Connection: close</code>，默认情况下，该参数是 <code>Connection: keep-alive</code>，表示请求完之后，不立即关闭 TCP 连接，如果马上还有 HTTP 连接的话，可以继续使用这条连接，如果该参数值是 close，那就表示立刻关闭。正因为有 <code>Connection: close</code> 和 <code>connectionLinger=0</code> 的配合，才导致了一请求完成，立刻关闭连接，并且不等待数据发送完毕，因此造成 TCP 数据包不完整。</p>
<h3>问题解法</h3>
<p>删掉使用 HTTPClient 的时候设置的 HTTP Header <code>Connection: close</code>，即这一行 <code>webClient.replaceHeader(&quot;Connection&quot;, &quot;close&quot;);</code>。修改代码总量仅1行。</p>
<h2>问题3：Chrome 在 POST 或 PUT 比较大的数据包时，提示 <code>net::ERR_SSL_PROTOCOL_ERROR</code></h2>
<h3>问题现象</h3>
<p>还是这个项目，使用 Chrome 浏览器测试，在 POST、PUT 少量数据的时候，系统正常；当 HTTP 数据包大于 8k（近似值）的时候，提示 <code>net::ERR_SSL_PROTOCOL_ERROR</code>。系统采用 HTTPS 协议。</p>
<p>这是一个很诡异的问题，在开发测试环境没有发生，在 UAT 环境发生了。首先怀疑是操作系统和依赖库的原因，查了一遍，无果。使用旧版的浏览器没这个问题，但是新版的有；使用其他浏览器提示的信息不一致，FireFox 没有提示，仅仅是空返回，某国产浏览器提示 <code>Connection Reset</code>。总之，找不到该问题必然发生的条件。</p>
<h3>问题原因</h3>
<p>其实，HTTPS 背后的 SSL/TLS 协议是有分版本的，做 Java 的可以参考<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext" target="_blank" rel="external">这个</a>。对 Tomcat 来说，有以下一些版本可以设置（<code>sslEnabledProtocols</code> 参数），SSLv2、SSLv3、TLSv1、TLSv1.1、TLSv1.2、SSLv2Hello。我们设置的是 <code>sslEnabledProtocols=&quot;TLSv1,TLSv1.1,TLSv1.2,SSLv2Hello&quot;</code></p>
<p>在服务器端启用了这么多 SSL/TLS 协议版本的时候，浏览器在访问的时候会先握手，以确定要用哪个版本的协议（我猜这部分应该是明文），最后会选择一个服务器和浏览器都支持的协议版本，如果符合要求的协议版本有多个，应该会选择版本最高的那个（不确定是不是最高版本）。</p>
<p>我们的问题发生在库文件上，服务器和浏览器在握手阶段，判定使用 TLSv1.2 协议是没问题的，于是接下来使用该协议。但是，实际上该协议在服务器端的实现有 Bug，不能处理超过 8k 的包，因此就会报错 <code>net::ERR_SSL_PROTOCOL_ERROR</code>，Chrome 的报错还是比较准确的。为什么不怀疑是浏览器的问题，因为 Chrome、FireFox、IE 都有问题，所以应该是服务器的问题。但是，具体这个问题是发生在 OpenSSL、JDK、还是 Tomcat，就不得而知了，OpenSSL 1.0.1p、JDK 1.8.0_66、Tomcat 8.0.32。</p>
<p>该问题在以下一些场景必然不会发生，</p>
<ol>
<li>OpenSSL 0.9.8 版本，只要是 0.9.8 这个大版本就不会有这个问题，因为 OpenSSL 的这个版本不支持 TLSv1.2（参考<a href="https://www.openssl.org/news/changelog.html" target="_blank" rel="external">这里</a>），所以握手的时候不会选到这个协议；</li>
<li>老的浏览器，比如 Chrome 27，这么老的浏览器还不支持 TLSv1.2，因此也选不到 TLSv1.2；</li>
</ol>
<p>问题的发现是采用 FireFox 中的隐藏参数 <code>security.tls.version.max</code>，限制浏览器可选的 TLS 协议版本，可以参考<a href="https://www.douban.com/note/328832976/" target="_blank" rel="external">这里</a>。</p>
<h3>问题解法</h3>
<p>将 Tomcat 中的参数改为 <code>sslEnabledProtocols=&quot;TLSv1,TLSv1.1,SSLv2Hello&quot;</code>。修改代码总量仅8个字符。</p>
<h3>问题遗留</h3>
<p>虽然找到的解决方法和可能的原因，但是仍然没有最终解决这个问题。因为同样的操作系统、库、JDK、Tomcat，在开发测试环境就没有碰到这样的问题，这个还没有找到解释。</p>
<h2>总结</h2>
<p>问题的修改可能很简单，但是问题本身可能很复杂（当然，对大牛来说，这都是简单问题），需要坚实的基本功才能找到问题，对症下药。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近的工作中，突然出现很多奇怪的bug，本文记录其中的3则。本文以真实的问题为蓝本，但并非百分百原样描述。</p>
<h2>问题1：Tomcat 的 CLOSE_WAIT 状态的连接过多</h2>
<h3>问题现象</h3>
<p>项目中的一个系统，即将第一版上线，时间压的]]>
    </summary>
    
      <category term="Tomcat" scheme="http://valleylord.github.io/tags/Tomcat/"/>
    
      <category term="Bug" scheme="http://valleylord.github.io/tags/Bug/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Bug" scheme="http://valleylord.github.io/categories/Bug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT Catlet分析]]></title>
    <link href="http://valleylord.github.io/post/201605-mycat-catlet/"/>
    <id>http://valleylord.github.io/post/201605-mycat-catlet/</id>
    <published>2016-05-01T04:41:35.000Z</published>
    <updated>2016-05-25T15:04:52.789Z</updated>
    <content type="html"><![CDATA[<p>Catlet 是 MyCAT 2.0上计划的新功能，预期可以完成多个数据中不同表之间的表连接（JOIN），目前还处于开发阶段。</p>
<p>Catlet 的入口类是在 <code>HintCatletHandler</code>，该类实现了 <code>HintHandler</code> 接口，可以在 <code>RouteService.route()</code> 中有 Hint 的时候使用，可见，Catlet 的调用需要使用注释。<code>HintCatletHandler.route()</code> 方法是该类的主要方法，其重要的代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Catlet catlet = (Catlet) MycatServer.getInstance()</div><div class="line">		.getCatletClassLoader().getInstanceofClass(cateletClass);</div><div class="line">catlet.route(sysConfig, schema, sqlType, realSQL, charset, sc,</div><div class="line">		cachePool);</div><div class="line">catlet.processSQL(realSQL, new EngineCtx(sc.getSession2()));</div></pre></td></tr></table></figure></p>
<p>先初始化一个 <code>Catlet</code> 类，再依次调用其 <code>route()</code> 和 <code>processSQL()</code> 方法，这两个方法也是 Catlet 的入口方法。实际上，<code>Catlet</code> 是一个接口，有多个实现，<code>route()</code> 和 <code>processSQL()</code> 是其中两个重要的抽象方法。对于跨数据的多表连接，目前只有一个开发中的类 <code>ShareJoin</code>，该类文件中定义了3个类，<code>ShareJoin</code>、<code>ShareDBJoinHandler</code> 和 <code>ShareRowOutPutDataHandler</code>。</p>
<p><code>Catlet.route()</code> 的代码并不是特别复杂，重要代码是以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MySqlSelectQueryBlock mysqlSelectQuery = (MySqlSelectQueryBlock)<span class="keyword">st</span>.getSelect().getQuery();</div><div class="line">joinParser=<span class="keyword">new</span> JoinParser(mysqlSelectQuery,realSQL);</div><div class="line">joinParser.parser();</div></pre></td></tr></table></figure></p>
<p>即调用 <code>JoinParser.parser()</code> 方法来解析 SQL。重要的代码基本都在 <code>Catlet.processSQL()</code> 方法中，这个方法相对复杂一些，调用的层次也比较多，会调用到 <code>ShareDBJoinHandler</code> 和 <code>ShareRowOutPutDataHandler</code>，重要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ShareDBJoinHandler joinHandler <span class="subst">=</span> <span class="literal">new</span> ShareDBJoinHandler(this,joinParser<span class="built_in">.</span>getJoinLkey());		</div><div class="line">ctx<span class="built_in">.</span>executeNativeSQLSequnceJob(dataNodes, ssql, joinHandler);</div><div class="line">  		EngineCtx<span class="built_in">.</span>LOGGER<span class="built_in">.</span>info(<span class="string">"Catlet exec:"</span><span class="subst">+</span>getDataNode(getDataNodes())<span class="subst">+</span><span class="string">" sql:"</span> <span class="subst">+</span>ssql);</div><div class="line"></div><div class="line">ctx<span class="built_in">.</span>setAllJobFinishedListener(<span class="literal">new</span> AllJobFinishedListener() {</div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div></pre></td></tr></table></figure></p>
<p>以上代码中，先使用之前 <code>route()</code> 方法中 <code>JoinParser</code> 的结果，获取所有用于表连接列（<code>getJoinLkey()</code>），并以此为参数初始化 <code>ShareDBJoinHandler</code> 类；然后把 <code>ShareDBJoinHandler</code> 作为执行 SQL 的回调类，执行 SQL；最后，设置所有工作都完成之后的监听类 <code>AllJobFinishedListener</code>。因此，<code>ShareDBJoinHandler</code> 是处理 JOIN 的关键类，并且，处理的算法与表连接的列有关。</p>
<p>在 <code>ShareDBJoinHandler</code> 类中，<code>onRowData</code> 方法用于处理收到查询结果，是主要的回调方法，这个方法主要调用了同一个类中的 <code>putDBRow</code> 方法。<code>putDBRow</code> 方法也比较短，主要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int batchSize = <span class="number">999</span>;</div><div class="line"><span class="regexp">//</span> 满<span class="number">1000</span>条，发送一个查询请求</div><div class="line"><span class="input"><span class="prompt">if (ids.size() &gt;</span> batchSize) {</span></div><div class="line">	createQryJob(batchSize);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>先设置了一个批处理的大小，999（实际应该是1000，因为使用的是 <code>&gt;</code> 而不是 <code>&gt;=</code>），然后调用 <code>createQryJob</code>。<code>createQryJob</code> 相对复杂一点，先是使用 <code>StringBuilder sb</code> 做了比较长的一段字符串拼接，然后有几行比较重要的代码，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> sql = <span class="built_in">String</span>.format(joinParser.getChildSQL(), sb);</div><div class="line">  getRoute(sql);</div><div class="line">ctx.executeNativeSQLParallJob(getDataNodes(),sql, <span class="keyword">new</span> ShareRowOutPutDataHandler(<span class="keyword">this</span>,fields,joinindex,joinParser.getJoinRkey(), batchRows));</div></pre></td></tr></table></figure></p>
<p>先根据之前字符串拼接的结果，生成了一个 SQL，然后就是正常的调用路由并执行，执行的回调类是 <code>ShareRowOutPutDataHandler</code>。如果不求甚解的话，感觉是 ShareJoin 把原有的 SQL 按每 1000 个表连接列的值为大小，生成一些子 SQL，并执行这些子 SQL，但并不清楚是如何拆分的。<code>ShareRowOutPutDataHandler</code> 类的 <code>onRowData</code> 方法，用于处理子 SQL 的返回。这个方法里面的代码没有什么特别，基本就是将处理的数据写回。</p>
<p>因此，拆分子 SQL 的方法实际上与字符串拼接有关，字符串拼接部分的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; e: ids.entrySet() ){</div><div class="line">	theId=e.getKey();</div><div class="line">	batchRows.put(theId, rows.remove(theId));</div><div class="line">	<span class="keyword">if</span> (!svalue.equals(e.getValue())){</div><div class="line">		<span class="keyword">if</span>(joinKeyType == Fields.FIELD_TYPE_VAR_STRING </div><div class="line">				|| joinKeyType == Fields.FIELD_TYPE_STRING){ <span class="comment">// joinkey 为varchar</span></div><div class="line">			sb.<span class="keyword">append</span>(<span class="string">"'"</span>).<span class="keyword">append</span>(e.getValue()).<span class="keyword">append</span>(<span class="string">"'"</span>).<span class="keyword">append</span>(<span class="string">','</span>); <span class="comment">// ('digdeep','yuanfang') </span></div><div class="line">		}<span class="keyword">else</span>{ <span class="comment">// 默认joinkey为int/long</span></div><div class="line">			sb.<span class="keyword">append</span>(e.getValue()).<span class="keyword">append</span>(<span class="string">','</span>); <span class="comment">// (1,2,3) </span></div><div class="line">		}</div><div class="line">	}</div><div class="line">	svalue=e.getValue();</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">count</span>++ &gt; batchSize) {</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	}			</div><div class="line">}</div><div class="line">......</div><div class="line">sb.deleteCharAt(sb.length() - <span class="number">1</span>).<span class="keyword">append</span>(<span class="string">')'</span>);</div></pre></td></tr></table></figure></p>
<p>实际上也没有特别复杂，就是根据连接列的类型，如果是 String 的话，就拼接为 <code>('a','b','c')</code> 这样；如果是 int/long 类型，就拼接为 <code>(1,2,3)</code> 这样。然后在生成 SQL 的时候，调用 <code>String sql = String.format(joinParser.getChildSQL(), sb);</code>，<code>joinParser.getChildSQL()</code> 的代码是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//String sql="<span class="operator"><span class="keyword">select</span> <span class="string">"+joinRkey+"</span>,<span class="string">"+sql+"</span> <span class="keyword">from</span> <span class="string">"+mtable+"</span> <span class="keyword">where</span> <span class="string">"+joinRkey+"</span> <span class="keyword">in</span> <span class="string">";</span></span></div><div class="line">String sql=tableFilter.getTableJoin().getSQL();</div><div class="line">return sql;</div></pre></td></tr></table></figure></p>
<p>代码并未深究，从注释来看，是在连接的列上加了 <code>in</code>，也就是说，最后拼成的 SQL 会是类似这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> XXXXXXX <span class="keyword">from</span> XXXXXXXTABLES <span class="keyword">where</span> joinRkey <span class="keyword">in</span> YYYYYYYY</div></pre></td></tr></table></figure></p>
<p>其中的 <code>YYYYYYYY</code> 是之前字符拼接的结果。因此，从此可以得知 Catlet 在处理多表连接算法的大致步骤，假设原先的 SQL 是 <code>select a.name, b.dept from tableA a, tableB b where a.id = b.id</code>，流程是，</p>
<ol>
<li>先将 SQL 改写为 <code>select a.name, a.id from tableA a</code>，然后在相应节点上执行；</li>
<li>将1的返回按 <code>a.id</code> 拆分，每 1000 个值生成一个子 SQL，生成的 SQL 大致是 <code>select b.dept, b.id from tableB b where b.id in (YYYYYYYY)</code>，其中，YYYYYYYY 是 <code>a.id</code> 的值每 1000 个拼出来的逗号分割的字符串；</li>
<li>等待2的返回，并将所有返回的结果拼接，写回；</li>
</ol>
<p>以上是 MyCAT Catlet 的大致处理流程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Catlet 是 MyCAT 2.0上计划的新功能，预期可以完成多个数据中不同表之间的表连接（JOIN），目前还处于开发阶段。</p>
<p>Catlet 的入口类是在 <code>HintCatletHandler</code>，该类实现了 <code>HintHandl]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 代码分析]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-code/"/>
    <id>http://valleylord.github.io/post/201604-mycat-code/</id>
    <published>2016-04-30T11:31:06.000Z</published>
    <updated>2016-05-25T15:04:53.133Z</updated>
    <content type="html"><![CDATA[<p>本文以 MyCAT 2.0-dev 代码为例，分析 MyCAT SQL执行部分的代码。</p>
<h2>系统启动</h2>
<p>系统的入口方法在 <code>io.mycat.MycatStartup</code> 中的 <code>main</code> 方法，主要代码如下两行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MycatServer <span class="keyword">server</span> = MycatServer.getInstance();</div><div class="line"></div><div class="line"><span class="keyword">server</span>.startup();</div></pre></td></tr></table></figure></p>
<p><code>MycatServer</code> 是一个单例类，所以，等于直接调用 <code>MycatServer</code> 中的 <code>startup()</code> 方法。<code>startup()</code> 方法中，除去一些打印 log 的代码，主要初始化了一些系统参数（如网络、datasource）和连接池，重要的代码是以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NIOReactorPool reactorPool = <span class="keyword">new</span> NIOReactorPool(</div><div class="line">		BufferPool.LOCAL_BUF_THREAD_PREX + <span class="string">"NIOREACTOR"</span>, processorCount);</div><div class="line">NIOConnector connector = <span class="keyword">new</span> NIOConnector(</div><div class="line">		BufferPool.LOCAL_BUF_THREAD_PREX + <span class="string">"NIOConnector"</span>, reactorPool);</div><div class="line">connector.start();</div><div class="line">netSystem.setConnector(connector);</div><div class="line"></div><div class="line">MySQLFrontConnectionFactory frontFactory = <span class="keyword">new</span> MySQLFrontConnectionFactory(</div><div class="line">		<span class="keyword">new</span> MySQLFrontConnectionHandler());</div><div class="line">NIOAcceptor server = <span class="keyword">new</span> NIOAcceptor(BufferPool.LOCAL_BUF_THREAD_PREX</div><div class="line">		+ NAME + <span class="string">"Server"</span>, <span class="built_in">system</span>.getBindIp(), <span class="built_in">system</span>.getServerPort(),</div><div class="line">		frontFactory, reactorPool);</div><div class="line">server.start();</div></pre></td></tr></table></figure></p>
<p>首先初始化了一个 NIOReactor 的线程池 <code>NIOReactorPool</code> 和一个 MySQL 连接的工厂类 <code>MySQLFrontConnectionFactory</code>，然后以这两个为参数，构造了 <code>NIOAcceptor</code> 类，并在主线程中启动 <code>start()</code>。其中，<code>NIOReactorPool</code> 主要包含一个 <code>NIOReactor</code> 的数组，每个数组都是一个线程对象，处理每一个客户端网络连接，该类在初始化完成的时候，已经调用了 <code>reactor.startup()</code>，启动了所有 <code>NIOReactorPool</code> 中的所有线程。<code>NIOReactorPool</code>、<code>NIOReactorPool</code> 和 <code>NIOReactor</code> 这3个类组成了 MyCAT 处理客户端连接的几乎全部代码。MyCAT 主要使用 NIO （java.nio）网络模型，对高并发请求有更好的处理，但是其程序结构中有很多回调函数的写法，不是很容易理解和掌握。另外，<code>MySQLFrontConnectionFactory</code> 是工厂类，主要用于生成处理连接的 <code>MySQLFrontConnection</code> 类（该类继承自 <code>GenalMySQLConnection</code>，<code>GenalMySQLConnection</code> 继承自 <code>Connection</code>）。这些类都是之后代码分析中非常重要的类。</p>
<p>至此，主线程已经完成初始化，并启动了 <code>NIOAcceptor</code>，<code>NIOAcceptor</code> 继承了 <code>Thread</code>，下面的代码入口在 <code>NIOAcceptor.run()</code>。</p>
<h2>处理网络连接</h2>
<p>处理网络连接的入口在 <code>NIOAcceptor.run()</code>，该方法中启动了一个无限循环，主要调用了该类中的 <code>accept()</code> 方法，方法的主要代码有以下几行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">channel =</span> serverChannel.accept();</div><div class="line">channel.configureBlocking(<span class="constant">false</span>);</div><div class="line">Connection <span class="variable">c =</span> factory.make(channel);</div><div class="line">......</div><div class="line">NIOReactor <span class="variable">reactor =</span> reactorPool.getNextReactor();</div><div class="line">reactor.postRegister(c);</div></pre></td></tr></table></figure></p>
<p>先是调用 <code>serverChannel.accept()</code>，这是 NIO 的调用，用于接受一个新的连接 <code>channel</code>，然后设置连接为 nonblocking 模式。然后以新连接 <code>channel</code>为参数创建 <code>Connection</code>，然后，从线程池中获取一个 <code>NIOReactor</code> 线程，并调用 <code>postRegister(c)</code>，将 <code>Connection</code> 注册在该线程中，所有连接的请求都调用该 <code>Connection</code> 中的方法来处理。由于 <code>NIOReactor</code> 线程已经启动，所以会直接调用其中的 <code>run()</code> 方法。而实际上，<code>NIOReactor</code> 中有一个内部类 <code>RW</code>，线程调用的是 <code>RW.run()</code>。</p>
<p>注意，这里通过工厂类创建的 <code>Connection</code> 实际上是 <code>MySQLFrontConnection</code> 类，因为工厂类是传入的 <code>MySQLFrontConnectionFactory</code> 类。严格来说，该工厂类在设计模式上应该属于抽象工厂，其父类 <code>ConnectionFactory</code> 会通过 <code>Connection make(SocketChannel channel)</code> 方法创建 <code>Connection</code>类，该方法代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">channel.setOption(<span class="type">StandardSocketOptions</span>.<span class="type">SO_REUSEADDR</span>, <span class="built_in">true</span>);</div><div class="line"><span class="comment">// 子类完成具体连接创建工作</span></div><div class="line"><span class="type">Connection</span> <span class="built_in">c</span> = makeConnection(channel);</div><div class="line"><span class="comment">// 设置连接的参数</span></div><div class="line"><span class="type">NetSystem</span>.getInstance().setSocketParams(<span class="built_in">c</span>,<span class="built_in">true</span>);</div><div class="line"><span class="comment">// 设置NIOHandler</span></div><div class="line"><span class="built_in">c</span>.setHandler(getNIOHandler());</div><div class="line"><span class="keyword">return</span> <span class="built_in">c</span>;</div></pre></td></tr></table></figure></p>
<p>该方法中，依次调用 <code>makeConnection()</code> 和 <code>setHandler()</code> 这两个抽象方法用于创建连接，并将请求处理类设置为 <code>NIOHandler</code>，而子工厂类中，需要实现这两个方法用于创建连接实例。在 <code>MySQLFrontConnectionFactory</code> 类中，<code>makeConnection()</code> 方法创建了 <code>MySQLFrontConnection</code>，<code>NIOHandler</code> 设置为初始化该工厂类时的 <code>MySQLFrontConnectionHandler</code>。这两个类是处理 sql 请求的主要类，关于这两个类，后文再详细描述。</p>
<p>在 <code>RW.run()</code> 方法中，主要有一些 NIO 相关的调用，最重要的调用是 <code>con.asynRead();</code>，该方法比较简单，重要代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> got = channel.<span class="keyword">read</span>(readBuffer);</div><div class="line">onReadData(got);</div></pre></td></tr></table></figure></p>
<p>先是将网络数据读入到 <code>readBuffer</code> 中，然后调用 <code>onReadData()</code>。在 <code>onReadData()</code> 方法中，有很多读入字节的代码，重要的代码是调用 <code>handle(readBuffer, offset, length);</code> 方法，实际上是调用 <code>NIOHandler</code> 的 <code>handle()</code> 方法，也就是 <code>MySQLFrontConnectionHandler</code> 类的 <code>handle()</code> 方法。</p>
<p>至此，MyCAT 处理网络连接部分的代码已经完成，对于网络请求的数据已经完成读入到 Buffer，之后的代码入口在 <code>MySQLFrontConnectionHandler.handle()</code>。</p>
<h2>处理 SQL 请求</h2>
<p>处理 SQL 请求的入口在 <code>MySQLFrontConnectionHandler.handle()</code>，其中，根据 Connection 的状态，分别调用了 <code>doConnecting</code> 和 <code>doHandleBusinessMsg</code>，<code>doHandleBusinessMsg</code> 方法主要用来处理 SQL 请求。该方法中，处理一般 SQL 的代码是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MySQLPacket.COM_QUERY:</div><div class="line">	<span class="keyword">source</span>.query(data);</div><div class="line">	<span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>其中的 <code>source</code> 是之前的 <code>MySQLFrontConnection</code> 类，也就是执行其中的 <code>query(byte[])</code> 方法，该方法中做了一些字符处理的操作，最主要的应该是 <code>sql = mm.readString(charset);</code> 这一行，用于处理字符集。最后调用了 <code>query(String)</code> ，该方法先执行了 SQL 的检查，最后开始真正执行 SQL，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="keyword">switch</span> (sqlType) {</div><div class="line"><span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line">	ExplainHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SET:</div><div class="line">	SetHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SHOW:</div><div class="line">	ShowHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SELECT:</div><div class="line">	SelectHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.START:</div><div class="line">	StartHandler.handle(sql, <span class="keyword">this</span>, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.BEGIN:</div><div class="line">	BeginHandler.handle(sql, <span class="keyword">this</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ServerParse.SAVEPOINT:</div><div class="line">	SavepointHandler.handle(sql, <span class="keyword">this</span>);</div><div class="line">	<span class="keyword">break</span>;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>其中，用于执行一般 SQL 查询的是 <code>SelectHandler.handle(sql, this, rs &gt;&gt;&gt; 8);</code>，该方法中，对 SQL 的类型做了一些判断，一般的 SQL 会执行最后一行的 <code>c.execute(stmt, ServerParse.SELECT);</code>（该方法属于 <code>MySQLFrontConnection</code> 类）。该方法中会检查数据库 Schema 的配置，最后调用 <code>routeEndExecuteSQL(sql, type, schema);</code>，该方法对 SQL 进行路由（即寻找执行 SQL 的数据库），然后执行 SQL（PS：我猜测方法名应该是取错了，应该是 <code>routeAndExecuteSQL</code>，而不是 <code>routeEndExecuteSQL</code>）。其中重要的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="constant">rrs</span> = MycatServer</div><div class="line">	.getInstance()</div><div class="line">	.getRouterservice()</div><div class="line">	.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line">			schema, type, sql, this.charset, this);</div><div class="line">......</div><div class="line">session.execute(rrs, type);</div></pre></td></tr></table></figure></p>
<p>前一个调用是将 SQL 路由到数据库，后一个调用是执行解析之后的 SQL，这两部分的代码都比较独立，可以分别解析。其中，<code>session</code> 是 <code>NonBlockingSession</code> 类，该类有两个比较重要的 field，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> MySQLFrontConnection source;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;RouteResultsetNode, BackendConnection&gt; target;</div></pre></td></tr></table></figure></p>
<p><code>source</code> 是前端连接，表示 MyCAT 面向客户端的连接，<code>target</code> 是后端连接，表示若干个连接到后端 MySQL 上的连接。</p>
<h2>SQL 路由</h2>
<p>SQL 路由的入口在 <code>RouteService.route()</code>，该方法先判断 SQL 路由是否有之前解析的结果，如果有直接使用；否则，开始解析 SQL。解析 SQL 的时候，会先判断该 SQL 有没有 Hint，如果有，按Hint中指定路径进行解析；否则，调用 <code>RouteStrategyFactory.getRouteStrategy().route()</code> 方法寻找合适的路由。<code>RouteStrategyFactory</code> 是一个路由策略的工厂类，目前，MyCAT 中只有一个基于 <code>druidParser</code> 的路由策略，对应 <code>DruidMycatRouteStrategy</code> 类。</p>
<p>MyCAT 中的 SQL 路由相关的类有：<code>RouteResultset</code> 用于保存路由结果；<code>RouteStrategyFactory</code> 是路由工厂，生成 <code>RouteStrategy</code>；<code>RouteStrategy</code> 是路由类最顶层的接口，其中只有一个 <code>route()</code> 抽象方法；<code>AbstractRouteStrategy</code> 是路由类的抽象类，实现了 <code>RouteStrategy</code>，定义了路由的基本步骤，返回 <code>RouteResultset</code>，其中，最重要的抽象方法是 <code>routeNormalSqlWithAST</code>，基于 AST 树来寻找路由；<code>DruidMycatRouteStrategy</code> 继承了 <code>AbstractRouteStrategy</code>，实现了 <code>AbstractRouteStrategy</code> 中的所有抽象方法。</p>
<p><code>DruidMycatRouteStrategy</code> 的 <code>routeNormalSqlWithAST</code> 方法中，有以下一些比较重要的调用，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="variable">statement =</span> parser.parseStatement();</div><div class="line">          <span class="variable">visitor =</span> new MycatSchemaStatVisitor();</div><div class="line">          		......</div><div class="line">checkUnSupportedStatement(statement);</div><div class="line"></div><div class="line">      DruidParser <span class="variable">druidParser =</span> DruidParserFactory.create(schema,statement,visitor);</div><div class="line">druidParser.parser(schema, rrs, statement, stmt,cachePool,visitor);</div></pre></td></tr></table></figure></p>
<p>由于 MyCAT 使用的是第三方的 Druid SQL 解析工具，因此要在 Druid 解析器中加入自己的处理，这里，Druid 解析器使用了 visitor 模式，<code>MycatSchemaStatVisitor</code> 类继承 <code>MySqlSchemaStatVisitor</code> 并实现了其中的多个重载的 <code>visit</code> 方法，在调用 <code>druidParser.parser()</code> 的时候进行计算。<code>routeNormalSqlWithAST</code> 方法的最后，解析之后的 SQL 被路由到若干个分片节点上，并保存在 <code>RouteResultset</code> 中，然后返回。</p>
<h2>SQL 执行</h2>
<p>SQL 执行的入口在 <code>NonBlockingSession.execute()</code>，该方法主要分两个分支，单节点 SQL 执行和多节点 SQL 执行，分别是 <code>SingleNodeHandler</code> 和 <code>MultiNodeQueryHandler</code> 两个类，在每个分支中，依次调用了 <code>setPrepared()</code> 方法和 <code>execute()</code> 方法。</p>
<p>对于单节点情况，<code>SingleNodeHandler.execute()</code> 先获取该单节点的 MySQL 后端连接，然后调用 <code>_execute(conn)</code>，在 <code>_execute(conn)</code> 中，主要代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">conn<span class="built_in">.</span>setResponseHandler(this);</div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div><div class="line">	conn<span class="built_in">.</span>execute(node, session<span class="built_in">.</span>getSource(), session<span class="built_in">.</span>getSource()</div><div class="line">			<span class="built_in">.</span>isAutocommit());</div></pre></td></tr></table></figure></p>
<p>先将 SQL 返回的回调类设为 <code>SingleNodeHandler</code>，也就是自己，然后调用后端连接 <code>BackendConnection</code> 类的 <code>execute</code> 方法，真正的执行 SQL。对于后端是 MySQL 数据库的时候，实际上使用的的是 <code>MySQLBackendConnection</code> 类，该类的 <code>execute</code> 方法调用了 <code>synAndDoExecute</code>，并在 <code>synAndDoExecute</code> 中调用了 <code>sendQueryCmd</code>，向 MySQL 发送 SQL 请求。对于 SQL 的返回，是实现 <code>ResponseHandler</code> 接口来实现的，该接口定义了不同的 SQL 返回处理方法。</p>
<p>对于多节点的情况，<code>MultiNodeQueryHandler</code> 类的基本流程和 <code>SingleNodeHandler</code> 一样，不同之处有几个地方。一个是，在 <code>execute()</code> 方法中，对每一个节点分别调用 <code>_execute(conn)</code> 执行 SQL；还有一个是，回调的接口实现要更加复杂一些，例如，<code>rowEofResponse</code> 接口的实现中，调用了 <code>DataMergeService</code>，用于合并多个数据库上查询返回的结果。</p>
<h2>总体结构图</h2>
<p>总体大致的结构图如下，比较粗略，</p>
<p><img src="/images/201604-mycat-code/mycat-code-class1.png"></p>
<p><img src="/images/201604-mycat-code/mycat-code-class2.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文以 MyCAT 2.0-dev 代码为例，分析 MyCAT SQL执行部分的代码。</p>
<h2>系统启动</h2>
<p>系统的入口方法在 <code>io.mycat.MycatStartup</code> 中的 <code>main</code> 方法，主要代码]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 的优缺点]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-drawback/"/>
    <id>http://valleylord.github.io/post/201604-mycat-drawback/</id>
    <published>2016-04-16T03:00:59.000Z</published>
    <updated>2016-05-25T15:04:53.785Z</updated>
    <content type="html"><![CDATA[<p>Mysql 的 proxy 中间件有比较多的工具，例如，mysql-proxy, atlas , cobar, mycat, tddl, tinnydbrouter等等。相比较而言，Mycat并不是最快的，但是功能比较丰富，对读写分离和分库分表都有支持，而且比较易用，对原有的应用系统侵入比较小，系统改造比较易于实现。</p>
<p>如果说Mycat有一些不足的话，那就是，在整个系统中，Mycat会成为一个单点。因为所有的sql都会通过Mycat来路由，在数据库比较多的情况下，Mycat本身的cpu性能压力就会随之增大。因此，在生产系统中，Mycat不可避免的会需要一些多活的高可用手段。同样，由于Mycat本身需要解析sql，也需要合并各个数据库返回的结果，本身的CPU消耗就会比较高，在数据库较多的情况下，CPU可能不堪重负。</p>
<p>因此，在数据库比较多的情况下，生产环境的部署可能是这样的，</p>
<p><img src="/images/201604-mycat-drawback/mycat-drawback.png"></p>
<p>按之前的讨论，Mycat 会成为系统的单点，性能压力比较大。如果，Mycat 可以开发一个嵌入式 Mycat 系统，将 Mycat 代码嵌入在每个客户端中，这样，原先在 Mycat 上的集中压力就分散到了每个客户端上。当然，这样的架构需要对 Mycat 做一些改造，比如需要引入配置中心概念，将原来的分库分表配置集中管理，这样，每个客户端上的配置就一致了。同时，如果配置发生变化，还需要同步给每个客户端。引入嵌入式 Mycat（Mycat Embeded）之后的系统架构可能如下（图中略去了配置中心部分），</p>
<p><img src="/images/201604-mycat-drawback/mycat-drawback2.png"></p>
<p>当然，目前而言，Mycat 的优势还是非常明显的，相比与嵌入式 Mycat，现有的架构对原有系统的侵入非常小，现有架构模拟了 Mysql 数据库的接口，应用系统完全不用引入新的依赖，只需要改写部分 sql 即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mysql 的 proxy 中间件有比较多的工具，例如，mysql-proxy, atlas , cobar, mycat, tddl, tinnydbrouter等等。相比较而言，Mycat并不是最快的，但是功能比较丰富，对读写分离和分库分表都有支持，而且比较易用，对原有]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mycat-eye 安装]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-web-install/"/>
    <id>http://valleylord.github.io/post/201604-mycat-web-install/</id>
    <published>2016-04-10T03:04:11.000Z</published>
    <updated>2016-05-25T15:04:53.553Z</updated>
    <content type="html"><![CDATA[<p>Mycat-web 是对mycat-server提供监控服务。功能不局限于对mycat-server使用。他基于jmx对所有JVM监控。通过JDBC连接对Mycat、Mysql 监控。基于snmp协议，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘。Mycat-web 最近改名 Mycat-eye。</p>
<h1>安装与配置</h1>
<p>Mycat-eye 运行过程中需要依赖 zookeeper，因此需要先安装 zookeeper，我安装的是 zookeeper-3.4.8。</p>
<p>先下载 zookeeper-3.4.8.tar.gz，然后解压，在 <code>conf/</code> 目录下找到 zoo-sample.cfg，将其复制为 zoo.cfg。其内容主要如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">tickTime=</span><span class="number">2000</span></div><div class="line"><span class="variable">initLimit=</span><span class="number">10</span></div><div class="line"><span class="variable">syncLimit=</span><span class="number">5</span></div><div class="line"><span class="variable">dataDir=</span>/tmp/zookeeper</div><div class="line"><span class="variable">clientPort=</span><span class="number">2181</span></div></pre></td></tr></table></figure></p>
<p>要记得的是端口号2181，启动 Mycat-eye 的时候会用到。然后启动 zookeeper，启动的入口在 <code>bin/</code> 目录下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># arnes@Ubuntu-Asus [192.168.2.201] in ~/project/mycat-web/zookeeper-3.4.8 [11:30:51]</span></div><div class="line">$ bin/zkServer.sh start; bin/zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /home/arnes/project/mycat-web/zookeeper-<span class="number">3.4</span><span class="number">.8</span>/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper <span class="keyword">...</span> STARTED</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /home/arnes/project/mycat-web/zookeeper-<span class="number">3.4</span><span class="number">.8</span>/bin/../conf/zoo.cfg</div><div class="line">Mode: standalone</div></pre></td></tr></table></figure></p>
<p>可见，在启动的过程中，读取了刚才配置的 zoo.cfg。由于仅仅是实验，我们这里只使用了 zookeeper 的单机（standalone）模式。</p>
<p>然后安装 Mycat-eye，我安装的是 Mycat-web-1.0-SNAPSHOT-20160331220346-linux.tar.gz，同样需要先解压，解压后得到 mycat-web 目录。Mycat-eye 的配置文件在 <code>mycat-web/WEB-INF/classes/mycat.properties</code>，确认其中配置的 zookeeper 地址正确，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">zookeeper</span>=<span class="string">localhost:2181</span></div></pre></td></tr></table></figure></p>
<p>然后可以启动 Mycat-eye，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># arnes<span class="yardoctag">@Ubuntu</span>-Asus [192.168.2.201] in ~/project/mycat-web/mycat-web [12:44:13]</span></div><div class="line"><span class="variable">$ </span>./start.sh </div><div class="line"><span class="symbol">nohup:</span> 忽略输入并把输出追加到<span class="string">"nohup.out"</span></div></pre></td></tr></table></figure></p>
<h2>使用 Mycat-eye</h2>
<p>首先要登陆 Mycat-eye，浏览器打开页面 <code>http://localhost:8082/mycat/</code>，即可看到初始界面，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web1.png"></p>
<p>登陆之后，可以配置 Mycat 连接，在“mycat服务管理”中点击“新增”，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting1.png"></p>
<p>也可以配置 mysql 连接，在“mysql管理”中点击“新增”，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting2.png"></p>
<p>还可以查看 Mycat 的系统参数和日志，在“mycat系统参数”和“mycat日志管理”中，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting3.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-setting4.png"></p>
<p>使用之前做压力测试的脚本运行多个类似 <code>select * from travelrecord where id = ?</code> 这样的查询，查看 Mycat-eye 的监控数据。首先是“mycat性能监控”和“mysql性能监控”这两个菜单，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch1.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch2.png"></p>
<p>这两个菜单列出了 Mycat 的线程、TPS、内存等信息的时间变化图，以及 mysql 的缓存命中率、数据发送接收速度、线程、关键事件、临时表、恶性表联接等的统计数据。</p>
<p>还有专门针对 sql 的监控数据，在“SQL统计”、“SQL表分析”、“SQL监控”、“高频SQL”、“慢SQL统计”、“SQL解析”等这几个菜单中。</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch3.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch4.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch5.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch6.png"></p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch7.png"></p>
<p>其中，可能比较有用的有：“SQL表分析”可以列出 sql 的读写比例；“高频SQL”可以列出 sql 的使用频率；“慢SQL统计”可以列出执行时间比较长的 sql。另外，“SQL解析”可以在线分析一个 sql 的执行计划，省去了使用 mysql 客户端的麻烦。</p>
<p>此外，在“高频SQL”中，点击“分析”，还可以查看某个 sql 的请求数变化情况，如下，</p>
<p><img src="/images/201604-mycat-web-install/mycat-web-watch8.png"></p>
<p>总而言之，Mycat-eye 还是一款比较不错的监控工具，上手也比较简单。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mycat-web 是对mycat-server提供监控服务。功能不局限于对mycat-server使用。他基于jmx对所有JVM监控。通过JDBC连接对Mycat、Mysql 监控。基于snmp协议，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘。M]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 性能监控]]></title>
    <link href="http://valleylord.github.io/post/201604-mycat-performance/"/>
    <id>http://valleylord.github.io/post/201604-mycat-performance/</id>
    <published>2016-04-02T12:10:32.000Z</published>
    <updated>2016-05-25T15:04:53.837Z</updated>
    <content type="html"><![CDATA[<h2>使用 Jconsole 监控 MyCAT 运行</h2>
<p>Jconsole 是 Java 自带的性能监控工具，可以监控 Java 程序在运行过程中的 CPU、内存等的使用情况。</p>
<p>如果要使用 Jconsole 来监控 MyCAT 的运行状况，需要添加 MyCAT 的运行参数，在 <code>conf/wrapper.conf</code> 中，需要修改以下参数，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Java Additional Parameters</span></div><div class="line"><span class="comment">#wrapper.java.additional.1=</span></div><div class="line">wrapper.java.additional.<span class="number">1</span>=<span class="variable">-DMYCAT_HOME=</span>.</div><div class="line">wrapper.java.additional.<span class="number">2</span>=-server</div><div class="line">wrapper.java.additional.<span class="number">3</span>=-XX:<span class="variable">MaxPermSize=</span><span class="number">64</span>M</div><div class="line">wrapper.java.additional.<span class="number">4</span>=-XX:+AggressiveOpts</div><div class="line">wrapper.java.additional.<span class="number">5</span>=-XX:<span class="variable">MaxDirectMemorySize=</span><span class="number">2</span>G</div><div class="line">wrapper.java.additional.<span class="number">6</span>=-Dcom.sun.management.jmxremote</div><div class="line">wrapper.java.additional.<span class="number">7</span>=-Dcom.sun.management.jmxremote.<span class="variable">port=</span><span class="number">1984</span></div><div class="line">wrapper.java.additional.<span class="number">8</span>=-Dcom.sun.management.jmxremote.<span class="variable">authenticate=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">9</span>=-Dcom.sun.management.jmxremote.<span class="variable">ssl=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">10</span>=-Xmx4G</div><div class="line">wrapper.java.additional.<span class="number">11</span>=-Xms1G</div><div class="line">wrapper.java.additional.<span class="number">12</span>=-Djava.rmi.server.<span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">2.201</span></div></pre></td></tr></table></figure></p>
<p>其中，前11个参数是 MyCAT 默认的参数，最后一个参数 <code>-Djava.rmi.server.hostname=192.168.2.201</code> 是我本地的 rmi 监听 IP，即使用 Jconsole 远程连接的 IP。以上参数中，与 Jconsole 监控有关的参数还有以下几个，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wrapper.java.additional.<span class="number">6</span>=-Dcom.sun.management.jmxremote</div><div class="line">wrapper.java.additional.<span class="number">7</span>=-Dcom.sun.management.jmxremote.<span class="variable">port=</span><span class="number">1984</span></div><div class="line">wrapper.java.additional.<span class="number">8</span>=-Dcom.sun.management.jmxremote.<span class="variable">authenticate=</span><span class="constant">false</span></div><div class="line">wrapper.java.additional.<span class="number">9</span>=-Dcom.sun.management.jmxremote.<span class="variable">ssl=</span><span class="constant">false</span></div></pre></td></tr></table></figure></p>
<p>其中，<code>-Dcom.sun.management.jmxremote</code> 表示启用远程 jmx 监听；<code>-Dcom.sun.management.jmxremote.port=1984</code> 表示监听端口是1984；<code>-Dcom.sun.management.jmxremote.authenticate=false</code> 表示不启用登陆认证；<code>-Dcom.sun.management.jmxremote.ssl=false</code> 表示不启用 ssl 加密连接。因此，Jconsole 的远程连接地址就是 <code>192.168.2.201:1984</code>。</p>
<p>然后，运行 Jconsole，输入连接地址即可登陆开始监控，如下，</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-jconsole-login.png"></p>
<p>登陆之后，可以看到 MyCAT 进程使用CPU、内存的情况，如下，</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-jconsole-home.png"></p>
<h2>MyCAT 性能监控</h2>
<p>运行 MyCAT 自带的性能测试工具 testtool 来进行此次测试，测试用的表是 travelrecord，共有10个分片，采用主键 mod 10 的算法来执行分片，初始状态是空表，mysql 采用5.7版本，只有1个 mysql 实例，上面有10个数据库，本次测试固定100个连接。</p>
<p>先运行一个10000数据量的插入，得到在我的测试机上，单表插入 tps 大约是1600，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"0-10000"</span></div><div class="line">check JAVA_HOME & java</div><div class="line">---------set HOME_DIR------------</div><div class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM <span class="keyword">warning</span>: ignoring option MaxPermSize=64M; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">create jobs <span class="keyword">...</span></div><div class="line">success ful created connections ,total :<span class="number">100</span></div><div class="line">create jobs finished ,begin run test...</div><div class="line">success create job count: <span class="number">10</span> teset threads: <span class="number">100</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">32</span> finished records :<span class="number">0</span> failed:<span class="number">0</span> speed:<span class="number">0.0</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">33</span> finished records :<span class="number">1010</span> failed:<span class="number">0</span> speed:<span class="number">931.7343173431734</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">34</span> finished records :<span class="number">4444</span> failed:<span class="number">0</span> speed:<span class="number">2129.372304743651</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">35</span> finished records :<span class="number">5858</span> failed:<span class="number">0</span> speed:<span class="number">1897.020725388601</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">36</span> finished records :<span class="number">7171</span> failed:<span class="number">0</span> speed:<span class="number">1754.1585127201565</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">37</span> finished records :<span class="number">9617</span> failed:<span class="number">0</span> speed:<span class="number">1889.762232265671</span></div><div class="line">finishend:<span class="number">10001</span> failed:<span class="number">0</span></div><div class="line">used time total:6seconds</div><div class="line">tps:<span class="number">1639.5081967213116</span></div></pre></td></tr></table></figure></p>
<p>再做一个单表查询的测试，基于之前已经插入的表，qps 大约是5000左右，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$ ./test_stand_select_perf.sh jdbc:mysql://localhost:8066/TESTDB test test 100 1000 file=travelrecord_select.sql</div><div class="line"><span class="operator"><span class="keyword">check</span> JAVA_HOME & java</span></div><div class="line"><span class="comment">---------set HOME_DIR------------</span></div><div class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> <span class="keyword">Server</span> VM warning: ignoring <span class="keyword">option</span> MaxPermSize=<span class="number">64</span>M; support was removed in 8.0</div><div class="line"><span class="operator"><span class="keyword">execute</span> <span class="keyword">sql</span> times:<span class="number">1000</span></span></div><div class="line"><span class="keyword">create</span> thread <span class="number">0</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">1</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">2</span></div><div class="line"><span class="keyword">create</span> thread <span class="number">3</span></div><div class="line">......</div><div class="line"><span class="keyword">create</span> thread <span class="number">99</span></div><div class="line">success <span class="keyword">create</span> thread <span class="keyword">count</span>: <span class="number">100</span></div><div class="line"><span class="keyword">all</span> thread started,waiting finsh...</div><div class="line">finishend:<span class="number">4052</span> failed:<span class="number">0</span> qps:<span class="number">5346.46</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">99</span>ms,<span class="keyword">avg</span>:<span class="number">9.99</span></div><div class="line">finishend:<span class="number">8619</span> failed:<span class="number">0</span> qps:<span class="number">4972.03</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">117</span>ms,<span class="keyword">avg</span>:<span class="number">13.66</span></div><div class="line">finishend:<span class="number">13011</span> failed:<span class="number">0</span> qps:<span class="number">4787.22</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">18.11</span></div><div class="line">finishend:<span class="number">17134</span> failed:<span class="number">0</span> qps:<span class="number">4623.36</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.28</span></div><div class="line">finishend:<span class="number">21861</span> failed:<span class="number">0</span> qps:<span class="number">4635.94</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.94</span></div><div class="line">finishend:<span class="number">27917</span> failed:<span class="number">0</span> qps:<span class="number">4888.89</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">21.11</span></div><div class="line">finishend:<span class="number">34310</span> failed:<span class="number">0</span> qps:<span class="number">5113.82</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">20.06</span></div><div class="line">finishend:<span class="number">40371</span> failed:<span class="number">0</span> qps:<span class="number">5237.45</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">19.31</span></div><div class="line">finishend:<span class="number">45614</span> failed:<span class="number">0</span> qps:<span class="number">5239.43</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">19.11</span></div><div class="line">finishend:<span class="number">51195</span> failed:<span class="number">0</span> qps:<span class="number">5274.61</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">141</span>ms,<span class="keyword">avg</span>:<span class="number">18.97</span></div><div class="line">finishend:<span class="number">55691</span> failed:<span class="number">0</span> qps:<span class="number">5200.02</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">168</span>ms,<span class="keyword">avg</span>:<span class="number">19.00</span></div><div class="line">finishend:<span class="number">61247</span> failed:<span class="number">0</span> qps:<span class="number">5228.27</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">19.13</span></div><div class="line">finishend:<span class="number">67327</span> failed:<span class="number">0</span> qps:<span class="number">5295.13</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.89</span></div><div class="line">finishend:<span class="number">73218</span> failed:<span class="number">0</span> qps:<span class="number">5338.11</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.77</span></div><div class="line">finishend:<span class="number">78833</span> failed:<span class="number">0</span> qps:<span class="number">5364.28</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.62</span></div><div class="line">finishend:<span class="number">84058</span> failed:<span class="number">0</span> qps:<span class="number">5378.86</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.60</span></div><div class="line">finishend:<span class="number">89272</span> failed:<span class="number">0</span> qps:<span class="number">5423.15</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.54</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">49</span></div><div class="line">finishend:<span class="number">94340</span> failed:<span class="number">0</span> qps:<span class="number">5515.03</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">18.38</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">12</span></div><div class="line">finishend:<span class="number">99205</span> failed:<span class="number">0</span> qps:<span class="number">5688.55</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.72</span></div><div class="line">warning many test threads finished ,qps may <span class="keyword">NOT</span> Accurate ,alive threads:<span class="number">0</span></div><div class="line">finishend:<span class="number">100000</span> failed:<span class="number">0</span> qps:<span class="number">5727.72</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.52</span></div><div class="line">finishend:<span class="number">100000</span> failed:<span class="number">0</span> qps:<span class="number">5727.72</span>,<span class="keyword">query</span> <span class="keyword">time</span> <span class="keyword">min</span>:<span class="number">0</span>ms,<span class="keyword">max</span>:<span class="number">180</span>ms,<span class="keyword">avg</span>:<span class="number">17.52</span></div><div class="line">finished <span class="keyword">all</span>,total <span class="keyword">time</span> :<span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>其中，参数1000表示，每个线程执行1000次查询，而非总共执行1000次查询。travelrecord_select.sql 的内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql=<span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">where</span> id = ${<span class="keyword">int</span>(<span class="number">1</span>-<span class="number">10000</span>)}</div></pre></td></tr></table></figure></p>
<p>设计一个实验场景，先执行大约10分钟的插入，再 sleep 30秒，最后执行大约10分钟的查询。根据之前的测试数据，大约需要插入90万（1500<em>60</em>10）条数据，执行300万（5000<em>60</em>10）次查询（每个连接3万次查询），这个估算是根据数据量的增大仍然不影响 tps 和 qps 的基础上来进行的，实际上，数据量大的时候，插入和查询的效率都会受到影响，实验中，执行50万次插入，300万次查询。因此，编写测试脚本 perf-test.sh 如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">time ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"1-500000"</span></div><div class="line">sleep <span class="number">30</span></div><div class="line">time ./test_stand_select_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="number">30000</span> file=travelrecord_select.sql</div></pre></td></tr></table></figure></p>
<p>但是，MyCAT 的工具似乎有问题，在100个并发连接下，不能执行16000条数据以上的插入，否则会报错如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> jobs finished ,<span class="keyword">begin</span> run test...</span></div><div class="line">success <span class="keyword">create</span> job <span class="keyword">count</span>: <span class="number">40</span> teset threads: <span class="number">100</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">10</span> finished records :<span class="number">0</span> failed:<span class="number">1414</span> speed:-<span class="number">1801.2738853503186</span></div><div class="line"><span class="number">03</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">11</span> finished records :<span class="number">0</span> failed:<span class="number">5757</span> speed:-<span class="number">3225.2100840336134</span></div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div><div class="line">warn <span class="keyword">no</span> <span class="keyword">connection</span> <span class="keyword">in</span> pool,<span class="keyword">create</span> new one</div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Caused <span class="keyword">by</span>: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: <span class="comment">#HY000</span></div><div class="line">	<span class="keyword">at</span> sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)</div><div class="line">	<span class="keyword">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">422</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">389</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.getInstance(Util.java:<span class="number">372</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">958</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3835</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3771</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:<span class="number">2435</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:<span class="number">2582</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:<span class="number">2535</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:<span class="number">1911</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:<span class="number">2145</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:<span class="number">1777</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:<span class="number">1281</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.insert(TravelRecordInsertJob.java:<span class="number">71</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.<span class="command">run</span>(TravelRecordInsertJob.java:<span class="number">125</span>)</div><div class="line">	... <span class="number">3</span> more</div><div class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed <span class="keyword">after</span> connection closed.</div><div class="line">	<span class="keyword">at</span> sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)</div><div class="line">	<span class="keyword">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">422</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">389</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.Util.getInstance(Util.java:<span class="number">372</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">958</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">937</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">926</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">872</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.throwConnectionClosedException(ConnectionImpl.java:<span class="number">1236</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:<span class="number">1231</span>)</div><div class="line">	<span class="keyword">at</span> com.mysql.jdbc.ConnectionImpl.rollback(ConnectionImpl.java:<span class="number">4574</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.performance.TravelRecordInsertJob.<span class="command">run</span>(TravelRecordInsertJob.java:<span class="number">130</span>)</div><div class="line">	<span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</div><div class="line">	<span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">617</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
<p>怀疑是并发连接数量到达上线的原因，按官方文档的说法，在 schema.xml 中，增大了 minCon 参数，仍然不起效果，因此，实际运行的是如下脚本，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="number">50</span>; ++i))  </div><div class="line"><span class="keyword">do</span>  </div><div class="line">    j=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>*10000"</span> | bc`</div><div class="line">    start=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$j</span>+1"</span> | bc`</div><div class="line">    end=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$j</span>+10000"</span> | bc`</div><div class="line">    <span class="comment"># echo "${start} , ${end}"</span></div><div class="line">    ./test_stand_insert_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="string">"<span class="variable">${start}</span>-<span class="variable">${end}</span>"</span></div><div class="line">    sleep <span class="number">1</span></div><div class="line"><span class="keyword">done</span>  </div><div class="line"></div><div class="line">sleep <span class="number">30</span></div><div class="line"></div><div class="line">time ./test_stand_select_perf.sh jdbc:mysql://localhost:<span class="number">8066</span>/TESTDB test test <span class="number">100</span> <span class="number">30000</span> file=travelrecord_select.sql</div></pre></td></tr></table></figure></p>
<p>travelrecord_select.sql 脚本也需要修改查询范围，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql=<span class="keyword">select</span> * <span class="keyword">from</span> travelrecord <span class="keyword">where</span> id = ${<span class="keyword">int</span>(<span class="number">1</span>-<span class="number">500000</span>)}</div></pre></td></tr></table></figure></p>
<p>正式执行之前，可以先执行上述脚本一次，然后清空 travelrecord 表，再重启 MyCAT，这主要是用来预热 mysql，并将 MyCAT 重置，最后连接 Jconsole，开始监控。</p>
<p>在运行测试的过程中，使用管理端登陆可以看到进程的信息，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; show @@server;</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line"><span class="header">| UPTIME       | USED_MEMORY | TOTAL_MEMORY | MAX_MEMORY | RELOAD_TIME   | ROLLBACK_TIME | CHARSET | STATUS | AVG_BUFPOOL_ITEM_SIZE |</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line"><span class="header">| 4m 35s 925ms |   298996728 |   1063256064 | 3817865216 | 1459690848717 |            -1 | latin1  | ON     |                    95 |</span></div><div class="line">+--------------+-------------+--------------+------------+---------------+---------------+---------+--------+-----------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@processor;</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line"><span class="header">| NAME       | NET_IN  | NET_OUT | REACT_COUNT | R_QUEUE | W_QUEUE | FREE_BUFFER | TOTAL_BUFFER | BU_PERCENT | BU_WARNS | FC_COUNT | BC_COUNT |</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line">| Processor0 | 7398748 | 7696860 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       12 |       39 |</div><div class="line">| Processor1 | 9560214 | 9409852 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       10 |       44 |</div><div class="line">| Processor2 | 8904692 | 6975814 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |       12 |       34 |</div><div class="line"><span class="header">| Processor3 | 6765729 | 8399034 |           0 |       0 |       0 |        1264 |         4000 |         68 |       31 |        6 |       35 |</span></div><div class="line">+------------+---------+---------+-------------+---------+---------+-------------+--------------+------------+----------+----------+----------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@threadpool;</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line"><span class="header">| NAME             | POOL_SIZE | ACTIVE_COUNT | TASK_QUEUE_SIZE | COMPLETED_TASK | TOTAL_TASK |</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line">| Timer            |         2 |            0 |               0 |            579 |        579 |</div><div class="line"><span class="header">| BusinessExecutor |         8 |            0 |               0 |         223484 |     223484 |</span></div><div class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show @@datanode;</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line"><span class="header">| NAME | DATHOST            | INDEX | TYPE  | ACTIVE | IDLE | SIZE  | EXECUTE | TOTAL_TIME | MAX_TIME | MAX_SQL | RECOVERY_TIME |</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line">| dn0  | localhost1/dbtest0 |     0 | mysql |      0 |   15 | 10000 |    2209 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn1  | localhost1/dbtest1 |     0 | mysql |      0 |   16 | 10000 |    2275 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn2  | localhost1/dbtest2 |     0 | mysql |      0 |   16 | 10000 |    2210 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn3  | localhost1/dbtest3 |     0 | mysql |      0 |   15 | 10000 |    2193 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn4  | localhost1/dbtest4 |     0 | mysql |      0 |   14 | 10000 |    2203 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn5  | localhost1/dbtest5 |     0 | mysql |      0 |   16 | 10000 |    2226 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn6  | localhost1/dbtest6 |     0 | mysql |      0 |   15 | 10000 |    2211 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn7  | localhost1/dbtest7 |     0 | mysql |      0 |   16 | 10000 |    2231 |          0 |        0 |       0 |            -1 |</div><div class="line">| dn8  | localhost1/dbtest8 |     0 | mysql |      0 |   15 | 10000 |    2211 |          0 |        0 |       0 |            -1 |</div><div class="line"><span class="header">| dn9  | localhost1/dbtest9 |     0 | mysql |      0 |   14 | 10000 |    2212 |          0 |        0 |       0 |            -1 |</span></div><div class="line">+------+--------------------+-------+-------+--------+------+-------+---------+------------+----------+---------+---------------+</div><div class="line">10 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>Jconsole 的监控截图如下，这里只做了30分钟的监控，整个测试运行了约26分30秒（包括其中 sleep 的时间），</p>
<p><img src="/images/201604-mycat-performance/mycat-performance-all.png"></p>
<p><img src="/images/201604-mycat-performance/mycat-performance-mem.png"></p>
<p><img src="/images/201604-mycat-performance/mycat-performance-thread.png"></p>
<p>从上述图表可知，内存的使用虽然波动比较剧烈，但是总体比较稳定，线程数量基本没有变化，CPU 的使用上，插入的时候比查询的时候用的要少，这应该是因为查询的 CPU 消耗比较密集，而插入的瓶颈仍然在 IO 部分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2>使用 Jconsole 监控 MyCAT 运行</h2>
<p>Jconsole 是 Java 自带的性能监控工具，可以监控 Java 程序在运行过程中的 CPU、内存等的使用情况。</p>
<p>如果要使用 Jconsole 来监控 MyCAT 的运行状况，需要添加 M]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ku8eye 开发环境部署]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-ku8eye/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-ku8eye/</id>
    <published>2016-03-28T10:28:57.000Z</published>
    <updated>2016-05-25T15:04:53.225Z</updated>
    <content type="html"><![CDATA[<p>ku8eye<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> 是一个谷歌 Kubernetes 的 Web 一站式管理系统，本文介绍其开发环境部署。</p>
<h2>安装 ku8eye</h2>
<p>ku8eye 是使用 docker 镜像来安装运行的。先下载 ku8eye，官方发布在<a href="http://pan.baidu.com/s/1gdYk4CV" target="_blank" rel="external">百度网盘</a>，我下载的是 ku8eye-web-0.6.tar.gz。</p>
<p>用gunzip解压缩后，得到文件ku8eye-web-0.6.tar（2.1G）。导入docker镜像，并给该镜像打上tag <code>ku8eye-web</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 ku8eye]# ls</div><div class="line">ku8eye-web-<span class="number">0.6</span>.tar</div><div class="line">[root@Centos-L410 ku8eye]# docker <span class="built_in">load</span> -i ku8eye-web-<span class="number">0.6</span>.tar </div><div class="line">[root@Centos-L410 ku8eye]# docker images</div><div class="line">REPOSITORY                                            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">registry.access.redhat.com/rhel7/pod-infrastructure   latest              b22dd4643451        <span class="number">5</span> weeks ago         <span class="number">427.6</span> MB</div><div class="line">&lt;none&gt;                                                &lt;none&gt;              <span class="number">7608</span>c10ea730        <span class="number">5</span> weeks ago         <span class="number">125.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/mysql                                       latest              <span class="number">082e0</span>ea24cc0        <span class="number">5</span> weeks ago         <span class="number">361.2</span> MB</div><div class="line">ku8eye-web                                            latest              b45596039ebb        <span class="number">8</span> weeks ago         <span class="number">2.193</span> GB</div><div class="line">registry                                              <span class="number">2</span>                   b2c682ed7e4c        <span class="number">3</span> months ago        <span class="number">224.5</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/guestbook-php-frontend            latest              <span class="number">38658844</span>a359        <span class="number">6</span> months ago        <span class="number">509.6</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      <span class="number">1.0</span>                 <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      <span class="number">2.0</span>                 <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/redis-master                      latest              <span class="number">423e126</span>c2ad4        <span class="number">7</span> months ago        <span class="number">419.1</span> MB</div><div class="line">docker.<span class="built_in">io</span>/kubeguide/guestbook-redis-slave             latest              <span class="number">5429</span>ea4e7990        <span class="number">7</span> months ago        <span class="number">109.5</span> MB</div></pre></td></tr></table></figure></p>
<p>实际上，默认情况下，已经是 ku8eye-web 命名了，不需要 tag。</p>
<p>运行开发环境，<code>docker run -tid --name ku8eye-web -p 3306:3306 -p 8080:8080 -p 9001:9001 ku8eye-web</code>，其中 3306 为mysql服务端口，8080 为tomcat服务端口，9001 为supervisor服务端口，均映射到宿主机上。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>ku8eye]<span class="comment"># docker run -tid --name ku8eye-web -p 3306:3306 -p 8081:8080 -p 9001:9001 ku8eye-web</span></div><div class="line"><span class="number">7199979</span>c1d0c53fc17fedc50a73e938addc4703f2b3c14bca6d57dc670aabc97</div><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>ku8eye]<span class="comment"># docker ps </span></div><div class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>                 <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>                                                                   <span class="constant">NAMES</span></div><div class="line"><span class="number">7199979</span>c1d0c        ku8eye-web          <span class="string">"/bin/sh -c /usr/bin/"</span>   <span class="number">8</span> seconds ago       <span class="constant">Up </span><span class="number">4</span> seconds        <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">9001</span>-&gt;<span class="number">9001</span>/tcp, <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp   ku8eye-web</div></pre></td></tr></table></figure></p>
<p>由于我的机器上8080端口已经被占用，这里用8081端口代替。</p>
<h2>安装 kubernetes 集群</h2>
<p>用网页的方式登陆宿主机的8081端口，例如，我的是 http://192.168.2.202:8081，会看到登陆界面，如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-login.png"></p>
<p>还挺好看的。然后用账号密码 <code>guest/123456</code> 登陆即可进行管理，点击左侧“资源管理”菜单，选择“集群安”装进行安装。如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster.png"></p>
<p>我选择的是”All In One Cluster“，因为我没有那么多虚拟机...... 这样就可以在本机安装 Kubernetes Master 等，如下</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster1.png"></p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-install-cluster2.png"></p>
<p>点击”开始安装“即可。不知道为什么总是提示安装失败，可能与我已经安装过 kubernetes 有关。</p>
<h2>应用管理</h2>
<p>ku8eye 的应用管理功能，感觉上和直接写 kubernetes 的 yaml 文件比较类似，如下，</p>
<p><img src="/images/201603-kubernetes-ku8eye/ku8eye-application.png"></p>
<p>将需要的要素填入，即可工作。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/bestcloud/ku8eye/blob/master/doc/ku8eye-web-dev-env.md" class="uri" target="_blank" rel="external">https://github.com/bestcloud/ku8eye/blob/master/doc/ku8eye-web-dev-env.md</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>ku8eye<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> 是一个谷歌 Kubernetes 的 Web 一站式管理系统，本文介绍其开发环境部署。</p>
<h2>安装 ku8eye</h2>
]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 MyCAT 的 Oracle 数据迁移]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-oracle-migration/"/>
    <id>http://valleylord.github.io/post/201603-mycat-oracle-migration/</id>
    <published>2016-03-27T01:07:28.000Z</published>
    <updated>2016-05-25T15:04:53.281Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 的应用场景很多，很多应用在数据路由场景，将许多异构的数据库放在一起，使用 MyCAT 做 sql 转发。由于有这样的特性，MyCAT 在去 IOE 中也有比较丰富的应用。例如，将 Oracle 中的数据逐步的迁移到 mysql 中，在逐步迁移的过程中，仍然能保持几乎不间断的对外访问。下面距举例说明。</p>
<h2>配置 MyCAT 连接 Oracle</h2>
<p>数据迁移的第一步就是使用 MyCAT 作为中间件隔离 Oracle，这其中可能涉及到部分 sql 和应用的改写。配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"oradn0"</span> <span class="variable">dataHost=</span><span class="string">"oracle1"</span> <span class="variable">database=</span><span class="string">"scott"</span> /&gt;</div><div class="line"></div><div class="line">&lt;dataHost <span class="variable">name=</span><span class="string">"oracle1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"1"</span> <span class="variable">balance=</span><span class="string">"0"</span> <span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"oracle"</span></div><div class="line">		<span class="variable">dbDriver=</span><span class="string">"jdbc"</span>&gt;</div><div class="line">	&lt;heartbeat&gt;select <span class="number">1</span> from dual&lt;/heartbeat&gt;</div><div class="line">	&lt;connectionInitSql&gt;alter session set <span class="variable">nls_date_format=</span>'yyyy-mm-dd hh24:mi:ss'&lt;/connectionInitSql&gt;</div><div class="line">	&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"jdbc:oracle:thin:@192.168.2.202:1521:orcl"</span> <span class="variable">user=</span><span class="string">"scott"</span> <span class="variable">password=</span><span class="string">"tiger"</span> &gt;</div><div class="line">	&lt;/writeHost&gt;</div><div class="line">&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>完成 MyCAT 的配置之后，应用程序将看不到 Oracle，后续的数据迁移对应用是透明的，此时，架构图如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-migration-architecture.png"></p>
<p>假设有 Oracle 中有3张表，用户表（c_user）、交易表（c_order）、转账表（c_transfer），需要迁移用户表和交易表到 mysql 中。这3张表在当前的 MyCAT 中可以做如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_user"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_order"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_transfer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h2>Oracle 数据导出</h2>
<p>假设 Oracle 中，上述3张表的建表语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_user(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, user_name <span class="built_in">varchar</span>(<span class="number">20</span>), passwd <span class="built_in">varchar</span>(<span class="number">20</span>), nick_name <span class="built_in">varchar</span>(<span class="number">40</span>));</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_order(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, user_id <span class="built_in">number</span>(<span class="number">20</span>), payment <span class="built_in">number</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_transfer(id <span class="built_in">number</span>(<span class="number">20</span>) <span class="keyword">primary</span> <span class="keyword">key</span>, from_user_id <span class="built_in">number</span>(<span class="number">20</span>), to_user_id <span class="built_in">number</span>(<span class="number">20</span>), amount <span class="built_in">number</span>);</span></div></pre></td></tr></table></figure></p>
<p>为了便于演示，测试数据库中的数据量比较小，每个表只有1000条，不过这不影响操作结果。另外，为了测试迁移中中文编码可能出现的问题，部分字段使用了中文，数据库字符集是 GBK，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">SQL&gt; <span class="keyword">select</span> count<span class="comment">(*) from c_user;</span></div><div class="line"></div><div class="line">  COUNT(*)</div><div class="line">----------</div><div class="line">      <span class="number">1000</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> c_user <span class="keyword">where</span> rownum&lt;=<span class="number">5</span>;</div><div class="line"></div><div class="line">	ID USER_NAME  PASSWD	 NICK_NAME</div><div class="line">---------- ---------- ---------- ----------</div><div class="line">      <span class="number">1000</span> a1000      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1001</span> a1001      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1002</span> a1002      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1003</span> a1003      <span class="number">111111</span>     王</div><div class="line">      <span class="number">1004</span> a1004      <span class="number">111111</span>     王</div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> count<span class="comment">(*) from c_order;</span></div><div class="line"></div><div class="line">  COUNT(*)</div><div class="line">----------</div><div class="line">      <span class="number">1000</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> c_order <span class="keyword">where</span> rownum&lt;=<span class="number">5</span>;</div><div class="line"></div><div class="line">	ID    USER_ID	 PAYMENT</div><div class="line">---------- ---------- ----------</div><div class="line">     <span class="number">10000</span>	 <span class="number">1000</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10001</span>	 <span class="number">1001</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10002</span>	 <span class="number">1002</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10003</span>	 <span class="number">1003</span>	     <span class="number">100</span></div><div class="line">     <span class="number">10004</span>	 <span class="number">1004</span>	     <span class="number">100</span></div><div class="line"></div><div class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> nls_database_parameters <span class="keyword">where</span> parameter = <span class="string">'NLS_CHARACTERSET'</span>;</div><div class="line"></div><div class="line">PARAMETER		  VALUE</div><div class="line">------------------------- --------------------</div><div class="line">NLS_CHARACTERSET	  ZHS16GBK</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-datasize.png"></p>
<p>在生产环境中，应该小步前进，对于数据比较多的表，逐个迁移（如果 join 的 sql 不多的话）。实验中，我们采用一次迁移两张表的做法。</p>
<p>将数据从 Oracle 中导出，采用 spool 方法，这主要是方便 MyCAT 后续导入，sqlplus 相关语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SET</span> HEADING OFF  </span></div><div class="line"><span class="keyword">SET</span> ECHO OFF  </div><div class="line"><span class="keyword">SET</span> FEEDBACK OFF  </div><div class="line"><span class="keyword">SET</span> PAGES <span class="number">0</span>  </div><div class="line"><span class="keyword">SET</span> LINESIZE <span class="number">32766</span>  </div><div class="line"><span class="keyword">SET</span> LONG <span class="number">1999999</span>  </div><div class="line"><span class="keyword">SET</span> TRIMOUT <span class="keyword">ON</span></div><div class="line"><span class="keyword">SET</span> TRIMSPOOL <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> NEWPAGE NONE  </div><div class="line"><span class="keyword">SET</span> SQLBLANKLINES OFF  </div><div class="line"><span class="keyword">SET</span> TRIMS <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> TIMING OFF  </div><div class="line"><span class="keyword">SET</span> SERVEROUTPUT <span class="keyword">ON</span>  </div><div class="line"><span class="keyword">SET</span> VERIFY OFF  </div><div class="line"></div><div class="line">SPOOL c_user.dat    </div><div class="line"><span class="keyword">SELECT</span> <span class="string">'"'</span>||id||<span class="string">'"|"'</span>||user_name||<span class="string">'"|"'</span>||passwd||<span class="string">'"|"'</span>||nick_name||<span class="string">'"'</span> <span class="keyword">FROM</span> c_user;</div><div class="line">spool off  </div><div class="line"></div><div class="line"></div><div class="line">SPOOL c_order.dat  </div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="string">'"'</span>||id||<span class="string">'"|"'</span>||user_id||<span class="string">'"|"'</span>||payment||<span class="string">'"'</span> <span class="keyword">FROM</span> c_order;</span></div><div class="line">spool off</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-spool1.png"></p>
<p>用这样的方法，导出的数据会比较整齐，而且连字符集也统一处理了（只要 sqlplus 的客户端字符集配置的对），如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-spool2.png"></p>
<p>同样的方法可以导出另一个表的数据，在此不再赘述。</p>
<h2>导入 MyCAT</h2>
<p>首先，先要在 MyCAT 中配置将要导入的数据库和表，假设导入的数据要分片到10个 mysql 数据库中，可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">	<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">	&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">	&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">		<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">	&lt;/writeHost&gt;</div><div class="line">&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>迁移的2张表采用 id 取余数算法分片，另外的表不做变动，如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_user"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_order"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">&lt;table <span class="variable">name=</span><span class="string">"c_transfer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"oradn0"</span> /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：此处采用简便的分片方法，实际上，这里应该使用ER分片会更好。参考另一篇文章《MyCAT 分片》。</p>
</blockquote>
<p>然后，重启 MyCAT，或者使用管理端的 <code>reload @@config_all</code>，使用如下语句建表，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_user(id <span class="built_in">bigint</span> <span class="keyword">primary</span> <span class="keyword">key</span>, user_name <span class="built_in">varchar</span>(<span class="number">20</span>), passwd <span class="built_in">varchar</span>(<span class="number">20</span>), nick_name <span class="built_in">varchar</span>(<span class="number">40</span>));</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> c_order(id <span class="built_in">bigint</span> <span class="keyword">primary</span> <span class="keyword">key</span>, user_id <span class="built_in">bigint</span>, payment <span class="built_in">decimal</span>);</span></div></pre></td></tr></table></figure></p>
<p>MyCAT 支持类似 mysql 的 load data，而且支持在导入的过程中完成数据路由，操作如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$ mysql -hworkstation -utest -DTESTDB -P8066 -ptest --local-infile=1</div><div class="line"></div><div class="line">mysql&gt; SET NAMES <span class="emphasis">'utf8'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; SHOW VARIABLES LIKE 'character%';</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line"><span class="header">| Variable_name            | Value                      |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character<span class="emphasis">_set_</span>client     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>connection | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>database   | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>filesystem | binary                     |</div><div class="line">| character<span class="emphasis">_set_</span>results    | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>server     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>system     | utf8                       |</div><div class="line"><span class="header">| character_sets_dir       | /usr/share/mysql/charsets/ |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; load DATA local INFILE <span class="emphasis">'/home/arnes/project/c_user.dat'</span> IGNORE INTO TABLE c<span class="emphasis">_user CHARACTER SET 'utf8' FIELDS TERMINATED BY '|' ENCLOSED BY '"' LINES TERMINATED BY '\n' (id, user_</span>name, passwd, nick<span class="emphasis">_name) ;</span></div><div class="line">Query OK, 1000 rows affected (0.16 sec)</div><div class="line">Records: 1000  Deleted: 0  Skipped: 0  Warnings: 0</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from c_user limit 5;</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line"><span class="header">| id   | user_name | passwd | nick_name |</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line">| 1001 | a1001     | 111111 | 王       |</div><div class="line">| 1011 | a1011     | 111111 | 王       |</div><div class="line">| 1021 | a1021     | 111111 | 王       |</div><div class="line">| 1031 | a1031     | 111111 | 王       |</div><div class="line"><span class="header">| 1041 | a1041     | 111111 | 王       |</span></div><div class="line">+------+-----------+--------+-----------+</div><div class="line">5 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select count(*) from c_user;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| COUNT0 |</span></div><div class="line">+--------+</div><div class="line"><span class="header">|   1000 |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.09 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata1.png"></p>
<p>其中，有一些地方需要特别注意。</p>
<ol>
<li>load data 命令中的 character set 参数，指定文件的编码，<strong>建议跟 mysql 的编码一致</strong>，否则可能乱码。其中字符集编码必项用单引号，否则会解析出错。因为我用的文件在导出的时候已经完成转码，因此这里选择 ‘utf8’；</li>
<li>根据 MyCAT 和 mysql 官方文档，如果用 mysql 客户端登陆执行 load data，必须在 mysql 客户端登陆时增加参数 <code>--local-infile=1</code>，否则不能导入，而 jdbc 不需要加这个参数（我估计没人用 jdbc 做这样的操作）；</li>
<li>MyCAT 的 load data 必须要指定导入的列名放在命令的最后，列名的顺序与数据要一致，而且必须要包含分片字段，如上面的 <code>(id, user_name, passwd, nick_name)</code>；</li>
<li>登陆 MyCAT 后需要检查 mysql 客户端和服务器端的字符集是否相同，如果不同，使用 <code>SET NAMES 'utf8';</code>，将客户端字符集统一设置成 utf-8，如下，</li>
</ol>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-characterset.png"></p>
<p>与上面相同的方法，可以导入另一张表，如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata2.png"></p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-loaddata3.png"></p>
<p>每个分片上有100条数据，如下，</p>
<p><img src="/images/201603-mycat-oracle-migration/mycat-oracle-dbtest0.png"></p>
<p>至此，MyCAT 已经可以将数据路由到新的 mysql 服务器上，迁移完成。</p>
<h2>后记</h2>
<p>如果不常用 mysql 的人，做 load data 应该会碰到挺多问题，在加上 MyCAT，估计一下很难发现问题，比如下面这个问题，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; load DATA local INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE INTO TABLE c_user FIELDS TERMINATED BY <span class="string">'|'</span> ENCLOSED BY <span class="string">'"'</span> LINES TERMINATED BY <span class="string">'\n'</span> (id, user_name, passwd, nick_name) ;</div><div class="line">ERROR <span class="number">2027</span> (HY000): Malformed packet</div><div class="line">mysql&gt; load DATA local INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE INTO TABLE c_user CHARACTER SET <span class="string">'utf8'</span> FIELDS TERMINATED BY <span class="string">'|'</span> ENCLOSED BY <span class="string">'"'</span> LINES TERMINATED BY <span class="string">'\n'</span> (id, user_name, passwd, nick_name) ;</div><div class="line">^CCtrl-C -- sending <span class="string">"KILL QUERY 24"</span> to server <span class="keyword">...</span></div><div class="line">Ctrl-C -- query aborted.</div><div class="line">^CCtrl-C -- sending <span class="string">"KILL 24"</span> to server <span class="keyword">...</span></div><div class="line">Ctrl-C -- query aborted.</div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection to MySQL server during query</div></pre></td></tr></table></figure></p>
<p>从字面上感觉是数据格式出错了，实际上是 mysql 客户端登陆的时候没有加 <code>--local-infile=1</code>参数，而且这个问题会导致 mysql 客户端卡死，并断掉连接。还有，如果导入的时候没有加列名，也会提示很诡异的错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql<span class="subst">&gt;</span> load <span class="built_in">DATA</span> <span class="built_in">local</span> INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE <span class="keyword">INTO</span> TABLE c_user  FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span> ENCLOSED <span class="keyword">BY</span> <span class="string">'"'</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">'\n'</span>;</div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection <span class="keyword">to</span> MySQL server during query</div><div class="line">mysql<span class="subst">&gt;</span> load <span class="built_in">DATA</span> <span class="built_in">local</span> INFILE <span class="string">'/home/arnes/project/c_user-10.dat'</span> IGNORE <span class="keyword">INTO</span> TABLE c_user  FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span> ENCLOSED <span class="keyword">BY</span> <span class="string">'"'</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">'\n'</span>;</div><div class="line">ERROR <span class="number">2006</span> (HY000): MySQL server has gone away</div><div class="line">No connection<span class="built_in">.</span> Trying <span class="keyword">to</span> reconnect<span class="attribute">...</span></div><div class="line">Connection id:    <span class="number">40</span></div><div class="line">Current database: TESTDB</div><div class="line"></div><div class="line">ERROR <span class="number">2013</span> (HY000): Lost connection <span class="keyword">to</span> MySQL server during query</div></pre></td></tr></table></figure></p>
<p>这个错误也会导致断掉客户端连接，甚至还会打印很多类似这样的日志，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">03/27 14:11:55.151   WARN [$_NIOREACTOR-2-RW] (ServerConnection.java:209) -ServerConnection [id=40, schema=TESTDB, host=192.168.2.201, user=test,txIsolation=3, autocommit=true, schema=TESTDB]<span class="comment">/*loaddata*/</span><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> C_USER <span class="keyword">values</span> (<span class="string">'1001'</span>,<span class="string">'a1001'</span>,<span class="string">'111111'</span>,<span class="string">'ç'</span>) err:java.<span class="keyword">sql</span>.SQLSyntaxErrorException: <span class="keyword">partition</span> <span class="keyword">table</span>, <span class="keyword">insert</span> must provide ColumnList</span></div><div class="line">java.<span class="keyword">sql</span>.SQLSyntaxErrorException: <span class="keyword">partition</span> <span class="keyword">table</span>, <span class="keyword">insert</span> must provide ColumnList</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidInsertParser.statementParse(DruidInsertParser.java:<span class="number">69</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DefaultDruidParser.parser(DefaultDruidParser.java:<span class="number">63</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.DruidMycatRouteStrategy.routeNormalSqlWithAST(DruidMycatRouteStrategy.java:<span class="number">64</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.AbstractRouteStrategy.route(AbstractRouteStrategy.java:<span class="number">76</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.RouteService.route(RouteService.java:<span class="number">129</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.routeSQL(ServerConnection.java:<span class="number">201</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.ServerLoadDataInfileHandler.parseOneLine(ServerLoadDataInfileHandler.java:<span class="number">391</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.ServerLoadDataInfileHandler.<span class="keyword">end</span>(ServerLoadDataInfileHandler.java:<span class="number">646</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.loadDataInfileEnd(FrontendConnection.java:<span class="number">268</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.rawHandle(FrontendConnection.java:<span class="number">426</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.handle(FrontendConnection.java:<span class="number">417</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.onReadData(AbstractConnection.java:<span class="number">313</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOSocketWR.asynRead(NIOSocketWR.java:<span class="number">186</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.asynRead(AbstractConnection.java:<span class="number">274</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOReactor$RW.run(NIOReactor.java:<span class="number">96</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
<p>如果从日志看的话，可以发现是 sql 里面缺少列名。因此，只有按照 MyCAT 官方文档的步骤，一步一步来，不可逾越。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 的应用场景很多，很多应用在数据路由场景，将许多异构的数据库放在一起，使用 MyCAT 做 sql 转发。由于有这样的特性，MyCAT 在去 IOE 中也有比较丰富的应用。例如，将 Oracle 中的数据逐步的迁移到 mysql 中，在逐步迁移的过程中，仍然能保持]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes 日志]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-log/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-log/</id>
    <published>2016-03-20T03:35:51.000Z</published>
    <updated>2016-05-25T15:04:52.821Z</updated>
    <content type="html"><![CDATA[<h2>iptables在kubernetes proxy中的作用</h2>
<p>当service有了port和nodePort之后，就可以对内/外提供服务。那么其具体是通过什么原理来实现的呢？奥妙就在kube-proxy在本地node上创建的iptables规则。</p>
<p>Kubernetes为每个service分配一个clusterIP（虚拟ip）。不同的service用不同的ip，所以端口也不会冲突。Kubernetes的虚拟ip是通过iptables机制实现的。每个service定义的端口，kube-proxy都会监听一个随机端口对应，然后通过iptables nat规则做转发。比如Kubernetes上有个dns服务，clusterIP:10.254.0.10，端口:53。应用对10.254.0.10:53的请求会被转发到该node的kube-proxy监听的随机端口上，然后再转发给对应的pod。如果该服务的pod不在当前node上，会先在kube-proxy之间进行转发。该转发完全通过iptables实现。</p>
<p>Kube-Proxy 通过配置 DNAT 规则（从容器出来的访问，从本地主机出来的访问两方面），将到这个服务地址的访问映射到本地的kube-proxy端口（随机端口）。然后 Kube-Proxy 会监听在本地的对应端口，将到这个端口的访问给代理到远端真实的 pod 地址上去。</p>
<h2>kubernetes 日志分析</h2>
<p>如果 kubernetes 的启动参数中有 <code>--logtostderr=true</code> 表示使用 systemd 接管 kubernetes 的输出，可以用 journalctl 查看，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]# journalctl -u kube-controller-manager | tail</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: W0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.599523</span>    <span class="number">9359</span> reflector.go:<span class="number">224</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: watch <span class="keyword">of</span> *api.PersistentVolume ended <span class="keyword">with</span>: <span class="number">502</span>:  (unhandled http status [OK] <span class="keyword">with</span> body [<span class="keyword">nil</span>]) [<span class="number">0</span>]</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.912642</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.914766</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: E0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.915664</span>    <span class="number">9359</span> reflector.go:<span class="number">206</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: Failed <span class="keyword">to</span> watch *api.Pod: Internal error occurred: too <span class="keyword">old</span> resource version: <span class="number">7704</span> (<span class="number">8379</span>)</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">01</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: W0320 <span class="number">11</span>:<span class="number">50</span>:<span class="number">01.967267</span>    <span class="number">9359</span> reflector.go:<span class="number">224</span>] /usr/lib/golang/src/runtime/asm_amd64.s:<span class="number">2232</span>: watch <span class="keyword">of</span> *api.<span class="keyword">Namespace</span> ended <span class="keyword">with</span>: <span class="number">502</span>:  (unhandled http status [OK] <span class="keyword">with</span> body [<span class="keyword">nil</span>]) [<span class="number">0</span>]</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">06</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">06.597924</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/redis-master</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">08</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">08.708102</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/redis-slave</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">10</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">10.770278</span>    <span class="number">9359</span> replication_controller.go:<span class="number">409</span>] Replication Controller <span class="keyword">has</span> been deleted <span class="keyword">default</span>/frontend</div><div class="line"><span class="number">3</span>月 <span class="number">20</span> <span class="number">12</span>:<span class="number">59</span>:<span class="number">41</span> Centos-L410 kube-controller-manager[<span class="number">9359</span>]: I0320 <span class="number">12</span>:<span class="number">59</span>:<span class="number">41.859582</span>    <span class="number">9359</span> <span class="keyword">event</span>.go:<span class="number">216</span>] <span class="keyword">Event</span>(api.ObjectReference<span class="comment">{Kind:"ReplicationController", Namespace:"default", Name:"redis-master", UID:"8e5fcf11-ee58-11e5-a10f-c80aa9c034dc", APIVersion:"v1", ResourceVersion:"8904", FieldPath:""}</span>): reason: <span class="string">'SuccessfulCreate'</span> Created pod: redis-master-xuv93</div></pre></td></tr></table></figure></p>
<p>从 log 中可以发现，刚刚创建了一个 redis-master-xuv93 的 Pod，这个 Pod 中运行了一个 redis。通过 <code>docker ps</code> 可以查看到对应的容器，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                        COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">56</span>f58c6fb142        kubeguide/redis-master:<span class="number">1.0</span>                                   <span class="string">"redis-server /etc/re"</span>   About an <span class="built_in">hour</span> ago   Up About an <span class="built_in">hour</span>                        k8s_master.b7750720_redis-master-xuv93_default_8e614b60-ee58-<span class="number">11e5</span>-a10f-c80aa9c034dc_bb2168d8</div><div class="line">d377dcefdbc5        registry.access.redhat.com/rhel7/pod-infrastructure:latest   <span class="string">"/pod"</span>                   About an <span class="built_in">hour</span> ago   Up About an <span class="built_in">hour</span>                        k8s_POD<span class="number">.4</span>f810ae8_redis-master-xuv93_default_8e614b60-ee58-<span class="number">11e5</span>-a10f-c80aa9c034dc_270230ab</div></pre></td></tr></table></figure></p>
<p>可以发现，当前有2个容器在运行，56f58c6fb142 就是 redis-master-xuv93 这个 Pod 对应的容器；另一个是 kubernetes 的控制节点，是 Pod 网络访问代理。可以用 <code>docker inspect</code> 查看这两个节点的 IP ，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-docker-inspect.png"></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@<span class="variable">Centos</span>-<span class="variable">L410</span> arnes]# docker inspect  <span class="number">56</span>f58c6fb142</div><div class="line">......</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_HOST=10.254.0.1"</span>,</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_PORT=443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT=tcp://10.254.0.1:443"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_SERVICE_HOST=10.254.225.16"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_PROTO=tcp"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_PROTO=tcp"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_PORT=443"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_SERVICE_PORT=6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT=tcp://10.254.225.16:6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP=tcp://10.254.225.16:6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_PORT=6379"</span>,</div><div class="line">            <span class="string">"REDIS_MASTER_PORT_6379_TCP_ADDR=10.254.225.16"</span>,</div><div class="line">            <span class="string">"KUBERNETES_SERVICE_PORT_HTTPS=443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP=tcp://10.254.0.1:443"</span>,</div><div class="line">            <span class="string">"KUBERNETES_PORT_443_TCP_ADDR=10.254.0.1"</span>,</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"HOME=/root"</span></div><div class="line">        ],</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>从容器的信息上来看，redis 容器 56f58c6fb142 本身并没有 IP 地址，但是，通过容器内部互联，监听了 <code>10.254.225.16:6379</code> 这个 虚拟IP+端口，因此，直接访问 10.254.225.16:6379 即可，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]<span class="comment"># telnet 10.254.225.16 6379</span></div><div class="line">Trying <span class="number">10.254</span><span class="number">.225</span><span class="number">.16</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">10.254</span><span class="number">.225</span><span class="number">.16</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>另外，由于 d377dcefdbc5 是 redis 的访问代理，因此，访问这个地址的6379端口，也是可以通的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 project]<span class="comment"># telnet 172.17.1.22 6379</span></div><div class="line">Trying <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>可以验证，这个 redis 服务的确是在监听 <code>10.254.225.16:6379</code>，只不过这个是 kubernetes service 的虚拟 IP，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">[root@Centos-L410 project]# kubectl get services</span></span></div><div class="line">NAME           CLUSTER_IP      EXTERNAL_IP   PORT(S)    SELECTOR            AGE</div><div class="line">kubernetes     10.254.0.1      &lt;none&gt;        <span class="number">443</span>/<span class="constant">TCP</span>    &lt;none&gt;              <span class="number">20</span>d</div><div class="line"><span class="input"><span class="prompt">redis-master   10.254.225.16   &lt;none&gt;</span>        <span class="number">6379</span>/<span class="constant">TCP</span>   name=redis-master   <span class="number">1</span>h</span></div></pre></td></tr></table></figure></p>
<h2>kubernetes 的客户端负载均衡方式</h2>
<p>通常情况下，kubernetes 的负载均衡方式是如下进行，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-loadbalance.png"></p>
<p>由 kube-proxy 进程负责将请求转发到每个工作 Pod 上，好处是对客户端透明，坏处是多了一次转发，性能上有所损耗。另一种办法是采用客户端负载均衡方式，如下，</p>
<p><img src="/images/201603-kubernetes-log/kubernetes-client-loadbalance.png"></p>
<p>客户端先去向 apiserver 询问可以服务的工作 Pod 的地址，然后直接访问该地址，这样的好处是少了一次转发，坏处是客户端需要做一些逻辑判断。</p>
<p>如果使用客户端负载均衡的方式，那么就可以用类似上述的方法来获取服务真正的监听端口。如果需要直接访问该 IP 的话，需要在访问端增加路由规则，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">12</span>:<span class="number">53</span> ~</div><div class="line"><span class="comment"># route add -net 172.17.1.0 netmask 255.255.255.0 gw 192.168.2.202</span></div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">54</span> ~</div><div class="line"><span class="comment"># ip rout</span></div><div class="line">default via <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> dev wlan0  proto static </div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> dev docker0  proto kernel  scope link  src <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> </div><div class="line"><span class="number">172.17</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> via <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span> dev wlan0 </div><div class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> dev wlan0  proto kernel  scope link  src <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>  metric <span class="number">9</span> </div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">56</span> ~</div><div class="line"><span class="comment"># telnet 172.17.1.22 6379</span></div><div class="line">Trying <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span><span class="keyword">...</span></div><div class="line">Connected to <span class="number">172.17</span><span class="number">.1</span><span class="number">.22</span>.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]q</div><div class="line"></div><div class="line">telnet&gt; q</div><div class="line">Connection closed.</div></pre></td></tr></table></figure></p>
<p>也可以使用 redis client 来访问，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt"># arnes@Ubuntu-Asus [192.168.2.201] in ~/download/redis-3.0.5/src [15:16:49]</span></span></div><div class="line">$ ./redis-cli -h 172.17.1.22 -p 6379</div><div class="line">172.17.1.22:6379&gt; scan <span class="number">0</span> count <span class="number">100</span></div><div class="line"><span class="input"><span class="prompt">1) "0"</span></span></div><div class="line">2) 1) "messages"</div><div class="line">172.17.1.22:6379&gt; get messages</div><div class="line"><span class="string">"Hello World!"</span></div></pre></td></tr></table></figure></p>
<p>这样，外部系统就可以直接访问 Pod。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2>iptables在kubernetes proxy中的作用</h2>
<p>当service有了port和nodePort之后，就可以对内/外提供服务。那么其具体是通过什么原理来实现的呢？奥妙就在kube-proxy在本地node上创建的iptables规则。</p>
<]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 数据迁移测试]]></title>
    <link href="http://valleylord.github.io/post/201603-mycat-migration/"/>
    <id>http://valleylord.github.io/post/201603-mycat-migration/</id>
    <published>2016-03-20T01:08:56.000Z</published>
    <updated>2016-05-25T15:04:53.549Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 在使用过程中可能出现性能不足，需要添加服务器的情况，在增加服务器过程中，需要做数据迁移，难免出现业务中断等情况。本文实现一个最简单的 MyCAT 数据迁移步骤。</p>
<h2>步骤总览</h2>
<p>假定 travelrecord 表共有10个分片，分布在一台mysql的10个数据库中（dbtest0~dbtest9），需要将10个分片中的2个分片（dbtest0、dbtest1）转移到第二台MySQL上。大致步骤如下，</p>
<ol>
<li>将需要迁移的2个分片设置为只读</li>
<li>将2个分片的数据导出，并在新增的数据库上将数据导入；</li>
<li>修改相应的 MyCAT 配置，并重新加载；</li>
</ol>
<p>当然，这样的步骤，业务中断时间会比较长，主要时间浪费在数据导出导入的过程中。实际使用中，应该使用主从复制的方式将数据同步到从数据库中，再以从数据库中的数据为基础，启动第二台 mysql，这样，中断时间会短很多。</p>
<p>假定 travelrecord 表中共有10万条数据，每个分片上1万条，再假定这10个分片数据库中，每个数据库都只有这一个表。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord limit 10;</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                 |</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line">| dn0       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn3       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn4       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn5       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn6       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn7       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line">| dn8       | SELECT * FROM travelrecord LIMIT 10 |</div><div class="line"><span class="header">| dn9       | SELECT * FROM travelrecord LIMIT 10 |</span></div><div class="line">+-----------+-------------------------------------+</div><div class="line">10 rows in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select count(*) from travelrecord;</span></div><div class="line">+--------+</div><div class="line"><span class="header">| COUNT0 |</span></div><div class="line">+--------+</div><div class="line"><span class="header">| 100000 |</span></div><div class="line">+--------+</div><div class="line">1 row in set (0.03 sec)</div></pre></td></tr></table></figure></p>
<h2>设置数据库只读</h2>
<p>先设置 dbtest0 为只读，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span>;</span></div><div class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> read_only = <span class="number">1</span>;</span></div></pre></td></tr></table></figure></p>
<p>设置只读之后，数据库的写操作将被阻塞。如果发现数据迁移的过程中发生错误，可以放弃迁移，恢复数据库可写，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> read_only = <span class="number">0</span>;</span></div><div class="line"><span class="operator"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span></div></pre></td></tr></table></figure></p>
<p>此时，如果 MyCAT 再有数据插入，就会阻塞，直到超时，如下，</p>
<p><img src="/images/201603-mycat-migration/mycat-migration-blocked.png"></p>
<h2>导出和导入数据库</h2>
<p>通常情况下，mysql 数据库可以使用 mysqldump 做导入导出，做全量备份。如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">mysqldump -hworkstation -uroot -P3306 -p111111 dbtest0 &gt;</span> dbtest<span class="number">0</span>.sql</span></div></pre></td></tr></table></figure></p>
<p>再将数据导入到目标数据库中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mysql</span> -hworkstation -uroot -P3316 -p111111 dbtest0 &lt; dbtest0.sql</div></pre></td></tr></table></figure></p>
<p>可以验证一下数据库中的数据是否已经导入成功。</p>
<h2>修改 MyCAT 配置文件</h2>
<p>原先，travelrecord 的分片是如下配置的，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line"></div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div></pre></td></tr></table></figure></p>
<p>只有一个数据库服务器，上面有10个数据库，实现了10个分片，采用的是 <code>mod-10</code> 算法（按10取余数），如果新增加了数据库服务器，就需要修改配置。修改后的配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn0,dn1,dn2,dn3,dn4,dn5,dn6,dn7,dn8,dn9"</span> <span class="variable">rule=</span><span class="string">"mod-10"</span> /&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line"></div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn0"</span> <span class="variable">dataHost=</span><span class="string">"localhost2"</span> <span class="variable">database=</span><span class="string">"dbtest0"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest3"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest4"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn5"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest5"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn6"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest6"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn7"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest7"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn8"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest8"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn9"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"dbtest9"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost2"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">		&lt;/writeHost&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>修改完配置，使用 MyCAT 管理端登陆，重新加载配置，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ mysql -hworkstation -utest -DTESTDB -P9066 -ptest</div><div class="line">Welcome to the MySQL monitor.  Commands <span class="operator"><span class="keyword">end</span> <span class="keyword">with</span> ;</span> or \g.</div><div class="line">Your MySQL connection id is 4</div><div class="line">Server version: 5.5.8-mycat-1.5-<span class="operator"><span class="keyword">RELEASE</span>-<span class="number">20160301083012</span> MyCat <span class="keyword">Server</span> (monitor)</span></div><div class="line"></div><div class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2015</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</div><div class="line"></div><div class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</div><div class="line">affiliates. Other <span class="keyword">names</span> may be trademarks <span class="keyword">of</span> their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> <span class="keyword">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> <span class="keyword">help</span>. Type <span class="string">'\c'</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> <span class="keyword">input</span> statement.</div><div class="line"></div><div class="line">mysql&gt; reload @@config_all;</div><div class="line">Query OK, 1 row affected (0.43 sec)</div><div class="line">Reload config success</div></pre></td></tr></table></figure></p>
<p>此时，再去做插入数据，发现已经是在向新的数据库做插入了。用以上同样的步骤，可以迁移 dbtest1 的数据，在此不再赘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 在使用过程中可能出现性能不足，需要添加服务器的情况，在增加服务器过程中，需要做数据迁移，难免出现业务中断等情况。本文实现一个最简单的 MyCAT 数据迁移步骤。</p>
<h2>步骤总览</h2>
<p>假定 travelrecord 表共有10个分片，分布在一]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flannel 网络组件]]></title>
    <link href="http://valleylord.github.io/post/201603-kubernetes-flannel/"/>
    <id>http://valleylord.github.io/post/201603-kubernetes-flannel/</id>
    <published>2016-03-13T05:21:25.000Z</published>
    <updated>2016-05-25T15:04:53.237Z</updated>
    <content type="html"><![CDATA[<p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。其设计目的就是为集群中的所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得“同属一个内网”且”不重复的”IP地址，并让属于不同节点上的容器能够直接通过内网IP通信。</p>
<p>Flannel实质上是一种“覆盖网络(overlay network)”，也就是将TCP数据包装在另一种网络包里面进行路由转发和通信，目前已经支持UDP、VxLAN、AWS VPC和GCE路由等数据转发方式。</p>
<h2>Flannel 是否需要在 Master 节点上安装</h2>
<p>Flannel 为每个节点分配不同的 IP，在每个几点上的 Docker 使用了不同的地址段，因为Flannel通过Etcd分配了每个节点可用的IP地址段后，偷偷的修改了Docker的启动参数，增加了 <code>-bip</code> 参数，从而，不同节点上的容器被限制在了不同的网段。除了 Flannel 需要一个中央的 Etcd 来记录分配了的 IP 地址段，并不需要其他的中央配置，因此，Master 节点上是不需要安装 Flannel 的。</p>
<h2>Flannel 是否控制了容器的 IP 分配</h2>
<p>由于 Flannel 是在 Docker 的启动参数中控制了节点的 IP 地址段，但是并没有控制每一个容器的 IP 的分配。容器的 IP 是由节点上的 Docker Daemon 自动分配的。</p>
<h2>多节点 Flannel 网络路由</h2>
<p>在有3个或3个以上节点的网络中，Flannel 网络的优势相比直接路由方式要简洁很多。</p>
<p>直接路由方式一般会借助 Quagga 来进行配置，Quagga 也是安装在每个节点上，启动之后，会根据本机的 docker0 网卡地址，将这个地址的路由规则加到其他节点的路由表中。也就是说，如果网络中有 N 个节点，那么每个节点上就需要有 N-1 条路由规则，在节点较多的时候，这个路由规则的规模比较庞大。</p>
<p>而 Flannel 网络路由就不同了，它采用了子网的概念。每个节点 docker0 所在的网络都是 flannel0 网络的子网，因此，当子网的 docker0 有数据发出的时候，数据会自然被发生到 flannel0 网卡上。由于 Flannel 统一分配了节点的子网段，数据被路由到指定的子网 docker0 即可。相对于直接路由方式，Flannel 网络少了很多路由规则的配置，而是由中央的 flannel0 来统一路由。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。其设计目的就是为集群中的所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得“同属]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
</feed>
