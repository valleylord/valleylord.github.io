<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[褚哥说|]]></title>
  <subtitle><![CDATA[我想写一些东西]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://valleylord.github.io/"/>
  <updated>2016-01-10T08:54:31.158Z</updated>
  <id>http://valleylord.github.io/</id>
  
  <author>
    <name><![CDATA[Valleylord]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker容器间网络互联]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-network/"/>
    <id>http://valleylord.github.io/post/201601-docker-network/</id>
    <published>2016-01-09T07:48:00.000Z</published>
    <updated>2016-01-10T05:20:37.401Z</updated>
    <content type="html"><![CDATA[<p>Docker容器默认情况下通过docker虚拟的docker0网卡与其他网络节点通信，如果是与宿主机本地的其他容器或进程通信，相对比较简单，只需要通过docker0网卡转发即可；如果是要与其他宿主机上的容器通信，就需要经过本地宿主机的eth0网卡转发。本文通过实例演示不同宿主机之间的网络通信，使用的2台实验机器是Ubuntu 14.04和Centos 7。</p>
<h2>指定网桥IP<code>--bip</code></h2>
<p>默认情况下，docker后台启动的时候，会给docker0网卡自动分配一个网段，类似<code>172.17.0.1/16</code>，这样，docker容器启动后就会自动在该网段获得一个IP，例如<code>172.17.0.2</code>。但是，如果是不同宿主机上的容器，就不能采用自动的方式来分配网段，会引发IP冲突。因此，需要先配置docker0的网卡IP，使用如下参数配置docker0的网段，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">bip</span> <span class="comment">172</span><span class="string">.</span><span class="comment">17</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1/16</span></div></pre></td></tr></table></figure></p>
<p>该参数可以配在<code>/etc/default/docker</code>(Ubuntu)，<code>/etc/sysconfig/docker</code>(Centos)或者直接启动docker后台时加上，如<code>docker daemon --bip 172.17.0.1/16</code>。</p>
<p>指定后重启docker后台进程，可以看到docker0的地址已经变化。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">// Ubuntu 192.168.2.201</span></span></div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [13:57:25]</div><div class="line">$ ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="constant">UNKNOWN</span> group default </div><div class="line">    link/loopback <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> brd <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span></div><div class="line">    inet <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">8</span> scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>/<span class="number">128</span> scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc mq state <span class="constant">UP</span> group default qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">6</span><span class="symbol">c:</span><span class="number">71</span><span class="symbol">:d9</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">d:</span><span class="symbol">ad:</span><span class="number">1</span>d brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">192.168</span>.<span class="number">2.201</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">2.255</span> scope global wlan<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">e71:</span><span class="symbol">d9ff:</span><span class="symbol">fe7d:</span>ad1d/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue state <span class="constant">DOWN</span> group default </span></div><div class="line">    link/ether <span class="number">02</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span>08<span class="symbol">:</span><span class="number">03</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">a:</span>e6 brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">16</span> scope global docker<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">ff:</span><span class="symbol">fe03:</span><span class="number">7</span>ae6/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">98: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast state <span class="constant">DOWN</span> group default qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">74</span><span class="symbol">:d0</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">b:</span><span class="number">71</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">a:</span><span class="number">73</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line"><span class="input"><span class="prompt"></span></span></div><div class="line">// Centos 192.168.2.202</div><div class="line">[root@Centos-L410 system]# ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="constant">UNKNOWN</span> </div><div class="line">    link/loopback <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> brd <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span></div><div class="line">    inet <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">8</span> scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>/<span class="number">128</span> scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">2: enp8s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast state <span class="constant">DOWN</span> qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="symbol">c8:</span>0<span class="symbol">a:</span><span class="symbol">a9:</span><span class="symbol">c0:</span><span class="number">34</span><span class="symbol">:dc</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line"><span class="input"><span class="prompt">3: wlp5s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc mq state <span class="constant">UP</span> qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">00</span><span class="symbol">:</span><span class="number">24</span><span class="symbol">:d6</span><span class="symbol">:</span><span class="number">57</span><span class="symbol">:d7</span><span class="symbol">:a0</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">192.168</span>.<span class="number">2.202</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">2.255</span> scope global wlp5s<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">224</span><span class="symbol">:d6ff</span><span class="symbol">:fe57</span><span class="symbol">:d7a0/</span><span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue state <span class="constant">DOWN</span> </span></div><div class="line">    link/ether <span class="number">02</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:f7</span><span class="symbol">:</span><span class="number">88</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">172.18</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">16</span> scope global docker<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">ff:</span><span class="symbol">fe14:</span>f788/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure></p>
<p>但此时，不同宿主机之间的容器仍然不通，需要增加路由规则。</p>
<h2>增加路由规则</h2>
<p>不同宿主机之间的容器不通的原因是因为不知道如何去寻找路由，因此，需要增加路由规则。在<code>192.168.2.201</code>(Ubuntu，以下简称<code>201</code>)和<code>192.168.2.202</code>(Centos，以下简称<code>202</code>)上分别增加路由规则如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ubuntu 192.168.2.201</span></div><div class="line"># root<span class="keyword">@Ubuntu</span>-Asus [<span class="number">192.168</span>.2.201] <span class="keyword">in</span> ~ [<span class="number">13</span>:<span class="number">57</span>:<span class="number">25</span>]</div><div class="line">$ route add -net <span class="number">172.18</span>.0.0/<span class="number">16</span> gw <span class="number">192.168</span>.2.202 </div><div class="line"></div><div class="line"><span class="comment">// Centos 192.168.2.202</span></div><div class="line">[root<span class="keyword">@Centos</span>-L410 arnes]# route add -net <span class="number">172.17</span>.0.0/<span class="number">16</span> gw <span class="number">192.168</span>.2.201</div></pre></td></tr></table></figure></p>
<p>增加路由规则后，<code>202</code>上的容器到<code>201</code>上的容器可以ping通，但是反过来仍然不能ping通。原因是防火墙规则导致的阻挡，<code>202</code>上需要增加防火墙规则，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// Centos <span class="number">192.168</span>.<span class="number">2.202</span></div><div class="line">[root@Centos-L410 arnes]# iptables -L</div><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere             state RELATED,ESTABLISHED</div><div class="line">ACCEPT     icmp --  anywhere             anywhere            </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">ACCEPT     tcp  --  anywhere             anywhere             state NEW tcp <span class="keyword">dp</span><span class="variable">t:ssh</span></div><div class="line">REJECT     <span class="keyword">all</span>  --  anywhere             anywhere             reject-with icmp-host-prohibited</div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">DOCKER     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">REJECT     <span class="keyword">all</span>  --  anywhere             anywhere             reject-with icmp-host-prohibited</div><div class="line">DROP       <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain DOCKER (<span class="number">1</span> references)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">[root@Centos-L410 arnes]# iptables -F</div><div class="line">[root@Centos-L410 arnes]# iptables -<span class="keyword">t</span> nat -F</div><div class="line">[root@Centos-L410 arnes]# iptables -L</div><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain DOCKER (<span class="number">0</span> references)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div></pre></td></tr></table></figure></p>
<p>完成之后，双方容器之间双向都可以ping通。</p>
<h2>抓包查看结果</h2>
<p>抓包的工具是tshark和tcpdump，tcpdump一般默认都有安装，tshark需要手动安装。Ubuntu上<code>apt-get install tshark</code>，Centos上<code>yum install wireshark</code>。从<code>201</code>上的容器，ip<code>172.17.0.2</code>，ping<code>202</code>上的容器<code>172.18.0.2</code>，为了防止干扰，只ping一个包，结果如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// Container on Ubuntu, 172.17.0.2</div><div class="line">root@8cd7c7950943:/# ping 172.18.0.2 -c 1</div><div class="line">PING 172.18.0.2 (172.18.0.2): 56 data bytes</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=0 ttl=62 time=8.500 ms</div><div class="line"><span class="comment">--- 172.18.0.2 ping statistics ---</span></div><div class="line">1 packets transmitted, 1 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max/stddev = 8.500/8.500/8.500/0.000 ms</div><div class="line"></div><div class="line">// Ubuntu 192.168.2.201</div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [14:43:23]</div><div class="line">$ tshark -i docker0</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string "/usr/share/wireshark/init.lua"]:46: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for <span class="operator"><span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</span></div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.005157</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>   <span class="number">3</span>   <span class="number">5.014861</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span>   <span class="number">5.014857</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span>   <span class="number">5.014891</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">6</span>   <span class="number">5.014897</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">6</span> </div><div class="line"></div><div class="line"># root@Ubuntu-Asus [<span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>] <span class="keyword">in</span> ~ [<span class="number">14</span>:<span class="number">41</span>:<span class="number">57</span>]</div><div class="line">$ tshark -i wlan0 -f icmp</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [<span class="keyword">string</span> <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due <span class="keyword">to</span> running Wireshark <span class="keyword">as</span> superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlan0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.005101</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span> </div><div class="line"></div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span></div><div class="line">[root@Centos-L410 arnes]# tshark -i docker0</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000082760</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line">  <span class="number">3</span> <span class="number">5.011219748</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span> <span class="number">5.011242376</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span> <span class="number">5.011382404</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span></div><div class="line">  <span class="number">6</span> <span class="number">5.011285676</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"></div><div class="line">[root@Centos-L410 arnes]# tshark -i wlp5s0 -f icmp</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlp5s0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000186751</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>可见，ping的过程中，已经找到正确的路由，尤其在<code>201</code>的wlan0和<code>202</code>的wlp5s0上，可以很清楚的看到这条路由<code>192.168.2.201 -&gt; 172.18.0.2</code>。反向的ping结果略有不同，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// Container on Centos, 172.18.0.2</div><div class="line">root@52e810043448:/# ping 172.17.0.2 -c 1</div><div class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</div><div class="line">64 bytes from 172.17.0.2: icmp_seq=0 ttl=62 time=7.790 ms</div><div class="line"><span class="comment">--- 172.17.0.2 ping statistics ---</span></div><div class="line">1 packets transmitted, 1 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max/stddev = 7.790/7.790/7.790/0.000 ms</div><div class="line"></div><div class="line">// Ubuntu 192.168.2.201</div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [14:51:07]</div><div class="line">$ tshark -i docker0</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string "/usr/share/wireshark/init.lua"]:46: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for <span class="operator"><span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</span></div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000102</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>   <span class="number">3</span>   <span class="number">5.014688</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span>   <span class="number">5.014700</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span>   <span class="number">5.014725</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">6</span>   <span class="number">5.014716</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">6</span> </div><div class="line"></div><div class="line"># root@Ubuntu-Asus [<span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>] <span class="keyword">in</span> ~ [<span class="number">14</span>:<span class="number">51</span>:<span class="number">11</span>]</div><div class="line">$ tshark -i wlan0 -f icmp</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [<span class="keyword">string</span> <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due <span class="keyword">to</span> running Wireshark <span class="keyword">as</span> superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlan0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000159</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>  </div><div class="line"></div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span></div><div class="line">[root@Centos-L410 arnes]# tshark -i docker0</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span></div><div class="line">  <span class="number">2</span> <span class="number">0.007591503</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line">  <span class="number">3</span> <span class="number">5.012667429</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span> <span class="number">5.012658629</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span> <span class="number">5.012732729</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span></div><div class="line">  <span class="number">6</span> <span class="number">5.012751586</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"></div><div class="line">[root@Centos-L410 arnes]# tshark -i wlp5s0 -f icmp</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlp5s0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span> <span class="number">0.007501200</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>与之前的区别在于，没有给出<code>192.168.2.202 -&gt; 172.17.0.2</code>这样的路由，而是直接给出了<code>172.18.0.2 -&gt; 172.17.0.2</code>，需要再深入研究。如果使用的是tcpdump的话，也能得到与上述相同的结果。</p>
<p>综上，ping的过程中，数据包的流向如下：Ubuntu上容器 -&gt; <code>201</code>docker0 -&gt; <code>201</code>wlan0 -&gt; <code>202</code>wlp5s0 -&gt; <code>202</code>docker0 -&gt; Centos上容器。</p>
<h2>连接mysql测试</h2>
<p>下面用实际的mysql连接来测试真实的网络连接，先在<code>202</code>上启动mysql容器，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>arnes]<span class="comment"># docker run  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=111111 -d mysql mysqld</span></div><div class="line">a6b839dfd602ba0880b495bae78e8c49d3f57a4a1708021209431441bf6bbd4<span class="number">0</span></div><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>arnes]<span class="comment"># docker ps</span></div><div class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>                 <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>                   <span class="constant">NAMES</span></div><div class="line">a6b839dfd602        mysql               <span class="string">"/entrypoint.sh mysql"</span>   <span class="number">7</span> seconds ago       <span class="constant">Up </span><span class="number">4</span> seconds        <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp   romantic_brahmagupta</div></pre></td></tr></table></figure></p>
<p>启动后，运行tshark抓取网卡上的数据包。然后，在<code>201</code>上启动mysql容器，运行bash，使用mysql客户端连接<code>202</code>上的容器，由于mysql连接上后有定时的心跳，为了防止这部分的干扰，连接后立刻运行<code>exit</code>退出客户端，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># root@Ubuntu-Asus [192.168.2.201] in /var/lib/docker [15:20:52]</span></div><div class="line">$ docker run -<span class="keyword">it</span> <span class="comment">--rm  mysql /bin/bash</span></div><div class="line">root@<span class="number">7</span>b598cc5e8c7:/<span class="comment"># mysql -h172.18.0.2 -P3306 -uroot -p111111</span></div><div class="line">mysql: [Warning] Using <span class="operator">a</span> password <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">command</span> <span class="title">line</span> <span class="title">interface</span> <span class="title">can</span> <span class="title">be</span> <span class="title">insecure</span>.</span></div><div class="line">Welcome <span class="built_in">to</span> <span class="operator">the</span> MySQL monitor.  Commands <span class="function"><span class="keyword">end</span> <span class="title">with</span> ; <span class="title">or</span> \<span class="title">g</span>.</span></div><div class="line">Your MySQL connection id is <span class="number">7</span></div><div class="line">Server <span class="built_in">version</span>: <span class="number">5.7</span><span class="number">.10</span> MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2015</span>, Oracle <span class="operator">and</span>/<span class="operator">or</span> its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is <span class="operator">a</span> registered trademark <span class="operator">of</span> Oracle Corporation <span class="operator">and</span>/<span class="operator">or</span> its</div><div class="line">affiliates. Other names may be trademarks <span class="operator">of</span> their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> <span class="operator">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> <span class="built_in">to</span> <span class="built_in">clear</span> <span class="operator">the</span> current input statement.</div><div class="line"></div><div class="line">mysql&gt; exit</div><div class="line">Bye</div><div class="line">root@<span class="number">7</span>b598cc5e8c7:/<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>在<code>201</code>和<code>202</code>上的抓包结果如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">// Ubuntu <span class="number">192.168</span>.<span class="number">2.201</span></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.201</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">27</span> ~</div><div class="line"><span class="comment"># tshark -i docker0</span></div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help <span class="keyword">in</span> running Wireshark as an unprivileged user.</div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'docker0'</div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; Broadcast    ARP <span class="number">42</span> Who has <span class="number">172.17</span>.<span class="number">0.1</span>?  Tell <span class="number">172.17</span>.<span class="number">0.2</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000033</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span>.<span class="number">0.1</span> is at <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">3</span>   <span class="number">0.000046</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">4</span>   <span class="number">0.032752</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">5</span>   <span class="number">0.032982</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line">  <span class="number">6</span>   <span class="number">0.057003</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">144</span> Server Greeting <span class="variable">proto=</span><span class="number">10</span> <span class="variable">version=</span><span class="number">5.7</span>.<span class="number">10</span></div><div class="line">  <span class="number">7</span>   <span class="number">0.057052</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line">  <span class="number">8</span>   <span class="number">0.057149</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">249</span> Login Request <span class="variable">user=</span>root</div><div class="line">  <span class="number">9</span>   <span class="number">0.091636</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"> <span class="number">10</span>   <span class="number">0.097889</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">77</span> Response OK</div><div class="line"> <span class="number">11</span>   <span class="number">0.098129</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">103</span> Request Query</div><div class="line"> <span class="number">12</span>   <span class="number">0.125942</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">158</span> Response</div><div class="line"> <span class="number">13</span>   <span class="number">0.162720</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">13</span>  <span class="number">14</span>   <span class="number">4.602119</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">71</span> Request Quit</div><div class="line"> <span class="number">15</span>   <span class="number">4.602301</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322574</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">16</span>   <span class="number">4.670611</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">17</span>   <span class="number">4.675746</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Previous segment not captured] mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">18</span>   <span class="number">4.843638</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">19</span>   <span class="number">4.843713</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">19</span>  <span class="number">20</span>   <span class="number">5.038625</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span>.<span class="number">0.2</span>?  Tell <span class="number">172.17</span>.<span class="number">0.1</span></div><div class="line"> <span class="number">21</span>   <span class="number">5.038670</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span>.<span class="number">0.2</span> is at <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">21</span> ^C</div><div class="line"></div><div class="line"><span class="comment"># root@Ubuntu-Asus [192.168.2.201] in ~ [15:21:59]</span></div><div class="line">$ tshark -i wlan0 | grep mysql</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help <span class="keyword">in</span> running Wireshark as an unprivileged user.</div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'wlan0'</div><div class="line"><span class="number">405</span> <span class="number">396</span>  <span class="number">64.586967</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">397</span>  <span class="number">64.619458</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">418</span> <span class="number">398</span>  <span class="number">64.619905</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line"><span class="number">400</span>  <span class="number">64.643935</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line"><span class="number">402</span>  <span class="number">64.678468</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"><span class="number">406</span>  <span class="number">64.749772</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">466</span> <span class="number">444</span>  <span class="number">69.189204</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322574</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">446</span>  <span class="number">69.257519</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">471</span> <span class="number">447</span>  <span class="number">69.262593</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Previous segment not captured] mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">448</span>  <span class="number">69.430439</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">449</span>  <span class="number">69.430616</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">613</span> ^C</div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span>.<span class="number">2.202</span></div><div class="line">[root@Centos-L410 docker]<span class="comment"># tshark -i docker0</span></div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'docker0'</div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000094913</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">3</span> <span class="number">0.030116575</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line">  <span class="number">4</span> <span class="number">0.030976025</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">144</span> Server Greeting <span class="variable">proto=</span><span class="number">10</span> <span class="variable">version=</span><span class="number">5.7</span>.<span class="number">10</span></div><div class="line">  <span class="number">5</span> <span class="number">0.056176778</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line">  <span class="number">6</span> <span class="number">0.066130572</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">249</span> Login Request <span class="variable">user=</span>root</div><div class="line">  <span class="number">7</span> <span class="number">0.066173733</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line">  <span class="number">8</span> <span class="number">0.066262220</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">77</span> Response OK</div><div class="line">  <span class="number">9</span> <span class="number">0.093104979</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">103</span> Request Query</div><div class="line"> <span class="number">10</span> <span class="number">0.093395793</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">158</span> Response</div><div class="line"> <span class="number">11</span> <span class="number">0.159316774</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">12</span> <span class="number">4.599128670</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">71</span> Request Quit</div><div class="line"> <span class="number">13</span> <span class="number">4.599292166</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">226</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283104</span> <span class="variable">TSecr=</span><span class="number">39322574</span></div><div class="line"> <span class="number">14</span> <span class="number">4.665013615</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">15</span> <span class="number">4.665053144</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">16</span> <span class="number">4.832475608</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">17</span> <span class="number">4.849718662</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"> <span class="number">18</span> <span class="number">5.014473661</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span>.<span class="number">0.2</span>?  Tell <span class="number">172.18</span>.<span class="number">0.1</span></div><div class="line"> <span class="number">19</span> <span class="number">5.014525272</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span>.<span class="number">0.2</span> is at <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line">^C19 packets captured</div><div class="line"></div><div class="line">[root@Centos-L410 arnes]<span class="comment"># tshark -i wlp5s0 | grep mysql</span></div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'wlp5s0'</div><div class="line"><span class="number">354</span> <span class="number">318</span> <span class="number">39.616348312</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">319</span> <span class="number">39.616526473</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">321</span> <span class="number">39.646494918</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line"><span class="number">324</span> <span class="number">39.672552747</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line"><span class="number">326</span> <span class="number">39.682593002</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"><span class="number">333</span> <span class="number">39.775693441</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">379</span> <span class="number">384</span> <span class="number">44.215727358</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">226</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283104</span> <span class="variable">TSecr=</span><span class="number">39322574</span></div><div class="line"><span class="number">386</span> <span class="number">44.281387627</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">387</span> <span class="number">44.281474299</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">421</span> <span class="number">389</span> <span class="number">44.448924489</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">391</span> <span class="number">44.466095818</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">596</span> ^C</div><div class="line"><span class="number">1</span> packet dropped</div></pre></td></tr></table></figure></p>
<p>由于<code>wlan0</code>和<code>wlp5s0</code>上的tcp包比较多，因此使用<code>grep mysql</code>，只留下了所有与mysql有关的包。从抓包的结果来看，登陆的流程是，先建立tcp连接，然后验证用户名密码（<code>Login Request user=root</code>），验证成功后就建立连接，然后开始发送心跳。退出的过程，需要发送一个关闭的请求（<code>Request Quit</code>），然后关闭连接。关闭的过程中可能发生tcp包的重传（<code>TCP Retransmission</code>），因为这时候连接是不稳定的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker容器默认情况下通过docker虚拟的docker0网卡与其他网络节点通信，如果是与宿主机本地的其他容器或进程通信，相对比较简单，只需要通过docker0网卡转发即可；如果是要与其他宿主机上的容器通信，就需要经过本地宿主机的eth0网卡转发。本文通过实例演示不同宿]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT安装与部署]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-install/"/>
    <id>http://valleylord.github.io/post/201601-mycat-install/</id>
    <published>2016-01-02T05:43:00.000Z</published>
    <updated>2016-01-02T10:00:58.808Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 是一款开源的Mysql企业级集群应用，它是基于阿里的开源产品Cobar发展出来的。MyCAT提供了类似Mysql的接口，可以平滑的将单机Mysql迁移到Mysql集群上，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。</p>
<p>MyCAT目前最新版本的下载地址在<a href="https://github.com/MyCATApache/Mycat-download/tree/master/1.5-ALPHA" target="_blank" rel="external">这里</a>。我使用的操作系统是Ubuntu 14.04，因此下载的是linux版Mycat-server-1.5-alpha-20151221110028-linux.tar.gz。</p>
<p>解压后可以发现，MyCAT的目录下主要包括以下文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ ls | xargs ls</div><div class="line">version.txt</div><div class="line"></div><div class="line">bin:</div><div class="line">init_zk_data.sh  mycat	rehash.sh  startup_nowrap.sh  wrapper-linux-ppc-64  wrapper-linux-x86-32  wrapper-linux-x86-64</div><div class="line"></div><div class="line">catlet:</div><div class="line"></div><div class="line">conf:</div><div class="line">autopartition-long.txt	     myid.properties	      schema.xml		     wrapper.conf</div><div class="line">cacheservice.properties      partition-hash-int.txt   sequence_conf.properties	     zk-<span class="operator"><span class="keyword">create</span>.yaml</span></div><div class="line">ehcache.<span class="keyword">xml</span>		     <span class="keyword">partition</span>-range-<span class="keyword">mod</span>.txt  sequence_db_conf.properties</div><div class="line">index_to_charset.properties  router.<span class="keyword">xml</span>		      sequence_time_conf.properties</div><div class="line">log4j.<span class="keyword">xml</span>		     rule.<span class="keyword">xml</span>		      <span class="keyword">server</span>.<span class="keyword">xml</span></div><div class="line"></div><div class="line">lib:</div><div class="line">curator-client-<span class="number">2.9</span><span class="number">.0</span>.jar     leveldb-<span class="number">0.7</span>.jar		   netty-<span class="number">3.7</span><span class="number">.0</span>.Final.jar</div><div class="line">curator-framework-<span class="number">2.9</span><span class="number">.0</span>.jar  leveldb-api-<span class="number">0.7</span>.jar	   sequoiadb-java-driver-<span class="number">1.0</span>-<span class="number">20150615.070208</span>-<span class="number">1.</span>jar</div><div class="line">dom4j-<span class="number">1.6</span><span class="number">.1</span>.jar		     libwrapper-linux-ppc-<span class="number">64.</span>so    slf4j-api-<span class="number">1.7</span><span class="number">.12</span>.jar</div><div class="line">druid-<span class="number">1.0</span><span class="number">.14</span>.jar	     libwrapper-linux-x86-<span class="number">32.</span>so    slf4j-log4j12-<span class="number">1.7</span><span class="number">.12</span>.jar</div><div class="line">ehcache-core-<span class="number">2.6</span><span class="number">.11</span>.jar      libwrapper-linux-x86-<span class="number">64.</span>so    snakeyaml-<span class="number">1.16</span>.jar</div><div class="line">fastjson-<span class="number">1.2</span><span class="number">.7</span>.jar	     log4j-<span class="number">1.2</span><span class="number">.17</span>.jar		   univocity-parsers-<span class="number">1.5</span><span class="number">.4</span>.jar</div><div class="line">guava-<span class="number">18.0</span>.jar		     mapdb-<span class="number">1.0</span><span class="number">.7</span>.jar		   wrapper.jar</div><div class="line">jline-<span class="number">0.9</span><span class="number">.94</span>.jar	     mongo-java-driver-<span class="number">2.11</span><span class="number">.4</span>.jar  <span class="keyword">xml</span>-apis-<span class="number">1.0</span>.b2.jar</div><div class="line">json-<span class="number">20151123.</span>jar	     Mycat-<span class="keyword">server</span>-<span class="number">1.5</span>-alpha.jar    zookeeper-<span class="number">3.4</span><span class="number">.6</span>.jar</div><div class="line"></div><div class="line"><span class="keyword">logs</span>:</div></pre></td></tr></table></figure></p>
<p>其中，<code>lib</code>目录下是MyCAT的主要的依赖库文件，<code>bin</code>目录下是MyCAT的运行脚本文件，<code>conf</code>目录下是MyCAT是主要配置文件。本次安装过程中需要改到的相关MyCAT配置主要在<code>schema.xml</code>和<code>server.xml</code>。</p>
<p><code>server.xml</code>是MyCAT对外的“虚拟数据库”配置文件。所谓的“虚拟数据库”是说，MyCAT将多个Mysql集群整合起来对外提供服务，提供服务的接口仍然采用Mysql的形式，因此，通过仿造Mysql接口，让调用程序以为自己是在访问Mysql数据库，就是所谓的“虚拟数据库”。<code>server.xml</code>的主要内容如下（已删除原有的注释），</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="doctype">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">mycat:server</span> <span class="attribute">xmlns:mycat</span>=<span class="value">"http://org.opencloudb/"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">system</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultSqlParser"</span>&gt;</span>druidparser<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">system</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">user</span> <span class="attribute">name</span>=<span class="value">"test"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>test<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"schemas"</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">user</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">user</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>user<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"schemas"</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readOnly"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">user</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">mycat:server</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该配置文件很容易读懂，表明该虚拟数据库有一个schema，<code>TESTDB</code>；有2个用户<code>test</code>和<code>user</code>，密码分别是<code>test</code>和<code>user</code>，<code>user</code>用户是只读的，<code>test</code>用户未设置只读；默认的SQL解析器是<code>druidparser</code>。</p>
<p><code>schema.xml</code>的主要内容如下（已删除部分注释），</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE mycat:schema SYSTEM <span class="string">"schema.dtd"</span>&gt;</div><div class="line">&lt;mycat:schema xmlns:<span class="variable">mycat=</span><span class="string">"http://org.opencloudb/"</span>&gt;</div><div class="line"></div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-long"</span> /&gt;</div><div class="line"></div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"company"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> /&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"goods"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span> /&gt;</div><div class="line">		&lt;!-- random sharding using mod sharind rule --&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"hotnews"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"mod-long"</span> /&gt;</div><div class="line">		&lt;!-- &lt;table <span class="variable">name=</span><span class="string">"dual"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dnx,dnoracle2"</span> <span class="variable">type=</span><span class="string">"global"</span> </div><div class="line">			<span class="variable">needAddLimit=</span><span class="string">"false"</span>/&gt; &lt;table <span class="variable">name=</span><span class="string">"worker"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"jdbc_dn1,jdbc_dn2,jdbc_dn3"</span> </div><div class="line">			<span class="variable">rule=</span><span class="string">"mod-long"</span> /&gt; --&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"employee"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"sharding-by-intfile"</span> /&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"customer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"sharding-by-intfile"</span>&gt;</div><div class="line">			&lt;childTable <span class="variable">name=</span><span class="string">"orders"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">				<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">				&lt;childTable <span class="variable">name=</span><span class="string">"order_items"</span> <span class="variable">joinKey=</span><span class="string">"order_id"</span></div><div class="line">					<span class="variable">parentKey=</span><span class="string">"id"</span> /&gt;</div><div class="line">			&lt;/childTable&gt;</div><div class="line">			&lt;childTable <span class="variable">name=</span><span class="string">"customer_addr"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">				<span class="variable">parentKey=</span><span class="string">"id"</span> /&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">		&lt;!-- &lt;table <span class="variable">name=</span><span class="string">"oc_call"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1$0-743"</span> <span class="variable">rule=</span><span class="string">"latest-month-calldate"</span> </div><div class="line">			/&gt; --&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line">	&lt;!-- &lt;dataNode <span class="variable">name=</span><span class="string">"dn1$0-743"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db$0-743"</span> </div><div class="line">		/&gt; --&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db3"</span> /&gt;</div><div class="line">	&lt;!--&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"sequoiadb1"</span> <span class="variable">database=</span><span class="string">"SAMPLE"</span> /&gt;</div><div class="line">	 &lt;dataNode <span class="variable">name=</span><span class="string">"jdbc_dn1"</span> <span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db1"</span> /&gt; </div><div class="line">	&lt;dataNode	<span class="variable">name=</span><span class="string">"jdbc_dn2"</span> <span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db2"</span> /&gt; </div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"jdbc_dn3"</span> 	<span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db3"</span> /&gt; --&gt;</div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;!-- can have multi write hosts --&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"localhost:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"123456"</span>&gt;</div><div class="line">			&lt;!-- can have multi read hosts --&gt;</div><div class="line"></div><div class="line">		&lt;/writeHost&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostS1"</span> <span class="variable">url=</span><span class="string">"localhost:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"123456"</span> /&gt;</div><div class="line">		&lt;!-- &lt;writeHost <span class="variable">host=</span><span class="string">"hostM2"</span> <span class="variable">url=</span><span class="string">"localhost:3316"</span> <span class="variable">user=</span><span class="string">"root"</span> <span class="variable">password=</span><span class="string">"123456"</span>/&gt; --&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">&lt;/mycat:schema&gt;</div></pre></td></tr></table></figure></p>
<p>这个配置文件稍微复杂一些，主要分3块。第1块是<code>schema</code>块，主要描述了虚拟数据库的schema<code>TESTDB</code>中有哪些表，每个表分布在哪些数据节点上，分布的方法采用哪种算法。例如<code>&lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt;</code>，表示<code>travelrecord</code>表分布在<code>dn1,dn2,dn3</code>这3个节点上，分布的方法采用<code>auto-sharding-long</code>算法。第2块是<code>dataNode</code>，表示该数据库有哪些数据节点，以及这些数据节点实际对应的数据服务器和数据库名，这里配置了3个节点<code>dn1,dn2,dn3</code>，都是在<code>localhost1</code>服务器上，数据库名分别是<code>db1,db2,db3</code>，其实，这也正是前面<code>schema</code>块中用到的。第3块是<code>dataHost</code>，这部分是实际的数据库服务器配置，这里配置了2个Mysql数据库，<code>hostM1</code>和<code>hostS1</code>，地址分别在“localhost:3306”，用户名都是<code>root</code>，密码是<code>123456</code>，并且指定了心跳是<code>select user()</code>。</p>
<p>有了这些信息之后，我们就可以根据自己的需要来进行设置。例如，我的数据库地址不在<code>localhost</code>密码也不是<code>123456</code>，安装在这里，</p>
<p><img src="/images/201601-mycat-install/mycat-install-mysql-1.png"></p>
<p>于是重设MyCAT中这部分配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">	<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">&lt;writeHost <span class="variable">host=</span><span class="string">"hostS1"</span> <span class="variable">url=</span><span class="string">"workstation:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">	<span class="variable">password=</span><span class="string">"111111"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>启动MyCAT之前，需要先检查一些配置：</p>
<ol>
<li>java的版本需要是1.7或以上；</li>
<li>Mysql的配置文件需要加一行<code>lower_case_table_names = 1</code>在<code>[mysqld]</code>栏目中，这个设置为Mysql大小写不敏感，否则可能会发生表找不到的问题；</li>
<li>在示例的2个数据<code>hostM1</code>和<code>hostS1</code>上，新建3个数据库<code>db1,db2,db3</code>，如不新建，可能提示找不到数据库<code>ERROR 3009 (HY000): java.lang.IllegalArgumentException: Invalid DataSource:0</code>（这个提示不够友好，是在运行很长一段时间后才提示）；</li>
<li>添加<code>MYCAT_HOME</code>环境变量指向解压的mycat目录，主要是为了一些<code>bin</code>目录下的脚本的使用。</li>
</ol>
<p>一些文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>中说，还需要创建mycat用户和用户组，实际中我发现这不是必须的。之后就可以启动MyCAT了，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./bin/mycat <span class="operator"><span class="keyword">start</span></span></div><div class="line"><span class="keyword">Starting</span> Mycat-<span class="keyword">server</span>...</div></pre></td></tr></table></figure></p>
<p>之后就可以登陆MyCAT了，可以使用mysql的客户端像登陆mysql那样登陆，如下，</p>
<p><img src="/images/201601-mycat-install/mycat-install-login.png"></p>
<p>如果登陆成功，可以建表了，建表语句<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>与普通sql一样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql<span class="subst">&gt;</span> create table travelrecord (id bigint <span class="literal">not</span> <span class="built_in">null</span> primary key,user_id varchar(<span class="number">100</span>),traveldate <span class="built_in">DATE</span>, fee <span class="built_in">decimal</span>,days int);</div><div class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.77</span> sec)</div><div class="line"></div><div class="line">mysql<span class="subst">&gt;</span> desc travelrecord;</div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="subst">|</span> Field      <span class="subst">|</span> <span class="keyword">Type</span>          <span class="subst">|</span> <span class="built_in">Null</span> <span class="subst">|</span> Key <span class="subst">|</span> Default <span class="subst">|</span> Extra <span class="subst">|</span></div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="subst">|</span> id         <span class="subst">|</span> bigint(<span class="number">20</span>)    <span class="subst">|</span> NO   <span class="subst">|</span> PRI <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> user_id    <span class="subst">|</span> varchar(<span class="number">100</span>)  <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> traveldate <span class="subst">|</span> <span class="built_in">date</span>          <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> fee        <span class="subst">|</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> days       <span class="subst">|</span> int(<span class="number">11</span>)       <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql<span class="subst">&gt;</span> create table abc (id bigint <span class="literal">not</span> <span class="built_in">null</span> primary key, name varchar(<span class="number">100</span>));</div><div class="line">ERROR <span class="number">1064</span> (HY000): op table <span class="literal">not</span> <span class="keyword">in</span> schema<span class="subst">----</span>ABC</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-create-table.png"></p>
<blockquote>
<p>注意：如果建立的表之前没有在<code>schema.xml</code>中定义，那么不可以建立此表。</p>
</blockquote>
<p>建表成功后，就可以插入数据了，而且还可以使用<code>explain</code>查看插入了哪个数据库，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt;  explain insert into travelrecord (id,user_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                                   |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into travelrecord (id,user_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3) |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt;  explain insert into travelrecord (id,user_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                                   |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into travelrecord (id,user_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3) |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.06 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-insert.png"></p>
<p>然后还可以select，可以发现，select 不过是对每个数据库上进行，同时默认加上了<code>limit 100</code>的限制。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord;</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                  |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line"><span class="header">| dn3       | SELECT * FROM travelrecord LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-select.png"></p>
<p>如果mysql是innodb存储引擎，还可以设置<code>autocommit</code>，之前的操作采用默认<code>autocommit=1</code>，如果设置<code>autocommit=0</code>，还可以使用事务，挺好用的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set autocommit=0;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(8000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; rollback;</div><div class="line">Query OK, 0 rows affected (0.09 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord limit 1000;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-autocommit.png"></p>
<p>在实验中还发现，如果使用<code>autocommit=0</code>还可以产生锁，与使用单Mysql数据库很相似，很有意思。</p>
<p>此时，返回来看看实际数据库Mysql中的数据，如下，</p>
<p><img src="/images/201601-mycat-install/mycat-install-mysql-2.png"></p>
<p>发现一个很奇怪的事情，端口3306的数据库，也就是配置文件中的<code>hostM1</code>似乎没有创建<code>travelrecord</code>表，也就是说，配置文件中的<code>hostS1</code>似乎覆盖了<code>hostM1</code>，这与注释中的“can have multi write hosts”似乎有不符之处，不知为何。</p>
<p>另外，在实验的过程中，<code>travelrecord</code>表中插入数据过程中，似乎总是无法将数据分片到<code>dn3</code>上，感觉是其分片算法<code>auto-sharding-long</code>有问题，不确定这是一个bug还是算法特性。</p>
<p>最后，吐槽下MyCAT的示例，其默认的几张表的建表语句我实在是找了半天，才在MyCAT的doc中找到，而且呈现形式还是.docx形式的一篇安装指南，实在太不规范。比较好一点的呈现，可能是一个sql脚本，包含了所有建表语句和示例数据的insert语句；或者分为建表语句sql脚本和insert示例数据sql脚本2个文件，也是个不错的主意。</p>
<p>综上，可以认为，MyCAT模拟了一个虚拟Mysql数据库，并通过简单的配置文件配置，将虚拟数据库中的表映射到实际数据库中。只有那些在配置文件中配置了的表，才可以被MyCAT管理，实现分片。MyCAT还提供了很多分片算法，本文没有详述。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/dreamcode/article/details/44307377" target="_blank" rel="external">http://blog.csdn.net/dreamcode/article/details/44307377</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/MyCATApache/Mycat-doc/blob/master/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/MyCat_%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%28linux%29.doc" target="_blank" rel="external">https://github.com/MyCATApache/Mycat-doc/blob/master/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/MyCat_%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%28linux%29.doc</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 是一款开源的Mysql企业级集群应用，它是基于阿里的开源产品Cobar发展出来的。MyCAT提供了类似Mysql的接口，可以平滑的将单机Mysql迁移到Mysql集群上，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。</p>
<p>MyCAT目前最新版本的]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker存储(Volumn)]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-volumn/"/>
    <id>http://valleylord.github.io/post/201601-docker-volumn/</id>
    <published>2016-01-01T06:25:00.000Z</published>
    <updated>2016-01-03T08:48:08.574Z</updated>
    <content type="html"><![CDATA[<h2>指定存储（Volumn）</h2>
<p>Volumn是Docker容器中，用于将数据存储在容器之外的路径的工具。</p>
<p>主要有两个地方会用到，一个是在使用<code>docker run</code>命令的时候，可以用<code>-v</code>参数指定存储，如<code>-v [host dir]:[container dir]</code>，将宿主机的目录<code>[host dir]</code>挂载到容器内的<code>[container dir]</code>，也可以只指定容器目录，如<code>-v [container dir]</code>，表示在容器内创建一个目录<code>container dir</code>，该目录的修改不会记录在容器的修改中，而会存在<code>/var/lib/docker</code>目录下的<code>./volumnes</code>目录中。<code>./volumnes</code>目录下的数据文件不会被docker删除，即使容器被删除也不会，如果要清理这个目录下的文件，只能手动进行。例如，可以使用<code>docker inspect</code>查看存储的路径，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">inspect</span> <span class="number">9</span>f47cb4bb97f</div><div class="line">...... <span class="comment">// 省略部分内容</span></div><div class="line">    <span class="string">"Mounts"</span>: [</div><div class="line">        {</div><div class="line">            <span class="string">"Name"</span>: <span class="string">"05d30758ebf0ca16e86026b2328b2c6b48cfaa62e9f7a262c0a6dfddde003a11"</span>,</div><div class="line">            <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/05d30758ebf0ca16e86026b2328b2c6b48cfaa62e9f7a262c0a6dfddde003a11/_data"</span>,</div><div class="line">            <span class="string">"Destination"</span>: <span class="string">"/var/lib/mysql"</span>,</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"local"</span>,</div><div class="line">            <span class="string">"Mode"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"RW"</span>: <span class="keyword">true</span></div><div class="line">        }</div><div class="line">    ],</div><div class="line">...... <span class="comment">// 省略部分内容</span></div></pre></td></tr></table></figure></p>
<p>Volumn的另一种用法是在dockerfile中，其含义与<code>docker run</code>的后一种用法相同。可以参考mysql的dockerfile的例子，无论是标准的mysql镜像，或者是mariadb镜像，又或者是Oracle的mysql镜像，其dockerfile<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>中指定volumn的都只有如下一行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VOLUME /<span class="keyword">var</span>/lib/mysql</div></pre></td></tr></table></figure></p>
<p>即创建容器的存储路径<code>/var/lib/mysql</code>。这是因为，mysql的数据存储目录就是<code>/var/lib/mysql</code>，在mysql的容器被删除之后，我们希望数据目录仍然存在，不要跟着容器被一并删除；同样，如果容器做了修改，提交时应该也不能包含该目录，因为我们不能将业务相关的数据跟着容器中的程序一并提交。这正式Volumn存在的意义。</p>
<h2>docker容器网络访问控制</h2>
<p>docker容器网络放开控制默认是通过iptables来完成。以tomcat的容器为例，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ docker run -p <span class="number">8080</span>:<span class="number">8080</span> -d tomcat </div><div class="line"><span class="number">9</span>a1b9aca0fddeb68489c974df5d09e6093d8e774ff7db9132d8d25606643dc1f</div><div class="line"></div><div class="line">$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line"><span class="number">9</span>a1b9aca0fdd        tomcat              <span class="string">"catalina.sh run"</span>   <span class="number">4</span> <span class="built_in">seconds</span> ago       Up <span class="number">2</span> <span class="built_in">seconds</span>        <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   silly_jennings</div><div class="line"></div><div class="line">$ iptables-save | grep <span class="number">8080</span></div><div class="line">-A POSTROUTING -s <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> -p tcp -m tcp <span class="comment">--dport 8080 -j MASQUERADE</span></div><div class="line">-A DOCKER -p tcp -m tcp <span class="comment">--dport 8080 -j DNAT --to-destination 172.17.0.2:8080</span></div><div class="line">-A DOCKER -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> ! -i docker0 -o docker0 -p tcp -m tcp <span class="comment">--dport 8080 -j ACCEPT</span></div></pre></td></tr></table></figure></p>
<p>可以发现，对容器8080端口配置了3条iptables规则。解释这几条规则，需要先理解docker的网络，默认情况下，所有的docker容器全都运行在docker0作为虚拟路由器的子网内，一般是一个172开头的网段，与外界的连接通过NAT方式桥接。</p>
<p>第一条规则是，容器（172.17.0.2）访问外网时做的源地址伪装；第二条规则是，任意网络节点访问8080端口，转发到172.17.0.2:8080，这是一个由外网节点向NAT内网机节点做转发的常见配置；第3条规则是，所有通过docker0访问172.17.0.2的8080端口的数据输入，除了输入是从docker0来的，都是被允许的，这是容器所在的NAT内网访问本节点的配置，也就是容器访问容器。以上所有转发规则都使用tcp协议。</p>
<p>如果在<code>docker run</code>的时候使用了<code>--net=host</code>或<code>--net=container:&lt;name|id&gt;</code>选项，那么容器将使用宿主机的网络，或使用另一个容器的网络。这种情况下不会产生新的iptables规则。如果使用了<code>--net=container:&lt;name|id&gt;</code>选项，在另一个容器被关闭的时候，本容器也会无法访问，即使另一个容器又重启，本容器也需要重启后才可以访问。</p>
<p>与iptables有关的选项在docker后台启动进程（daemon）上，<code>--icc=true</code>和<code>--iptables=true</code>，<code>--icc=true</code>表示不同容器之间是允许网络互通的，这是默认值，如果设置为false，那么只有使用<code>--link</code>才能实现两个容器之间的互联。如果设置了这个选项，即使设置<code>--iptables=false</code>也可以容器间互通，但这样是不安全的，建议设置<code>--icc=false</code>。<code>--iptables=true</code>，表示通过设置iptables实现特殊的网络连接，如果设置了这个选项，在容器启动的时候就会新增iptables规则。这些选项建议放在<code>/etc/default/docker</code>中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DOCKER_OPTS</span>=<span class="string">"--icc=false --iptables=true"</span></div></pre></td></tr></table></figure></p>
<p>也可以手动启动docker后台启动进程时加上，<code>docker daemon --icc=false --iptables=true</code>。上述的iptables的例子就已经设置了这些选项，如果没有加这些选项的话，默认<code>--icc=true</code>，以上的iptables规则会不一样，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ iptables-save| grep 8080</div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">POSTROUTING</span> -s <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> -d <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">MASQUERADE</span></span></div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">DOCKER</span> ! -i docker<span class="number">0</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">DNAT</span> --to-destination <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span><span class="symbol">:</span><span class="number">8080</span></span></div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">DOCKER</span> -d <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> ! -i docker<span class="number">0</span> -o docker<span class="number">0</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">ACCEPT</span></span></div></pre></td></tr></table></figure></p>
<p>注意，只有第二条规则不一样，增加了一个条件，所有输入来源不是docker0的网络访问，转发到172.17.0.2:8080。系统会添加一个iptables的全局ACCEPT规则，这个规则不受<code>--iptables</code>参数影响。</p>
<h2>docker端口映射</h2>
<p>容器可以在启动的时候使用<code>-p</code>选项来增加容器内和宿主机之间的端口映射。但是默认情况下，每增加一个端口映射都会产生一个docker-proxy进程，而这样一个进程需要消耗大约10M内存。如果映射的端口过多，就会导致内存耗尽，这样的情况，无论是宿主机上有一个映射端口很多的容器，还是容器虽然映射端口很少，但宿主机上有很多个这种容器，都会发生。为了解决这个问题，docker改进了设计，将docker-proxy进程设计为非必要。可以在docker后台启动进程中加入<code>--userland-proxy=false</code>选项来禁止docker-proxy进程的产生<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。同样这个参数可以加在后台启动进程上，也可以加在<code>/etc/default/docker</code>中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">DOCKER_OPTS="</span><span class="literal">-</span><span class="literal">-</span><span class="comment">icc=false</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">iptables=true</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">userland</span><span class="literal">-</span><span class="comment">proxy=false"</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-docker-volumn/docker-volumn-userland-proxy-1.png"></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/docker-library/mysql/blob/a1a948c19137b7843ff0c7de0c95d22b74ecfefd/5.6/Dockerfile" target="_blank" rel="external">https://github.com/docker-library/mysql/blob/a1a948c19137b7843ff0c7de0c95d22b74ecfefd/5.6/Dockerfile</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://github.com/docker-library/mariadb/blob/d960d3cd750accc47d620886cff901d87a600d37/10.1/Dockerfile" target="_blank" rel="external">https://github.com/docker-library/mariadb/blob/d960d3cd750accc47d620886cff901d87a600d37/10.1/Dockerfile</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/mysql/mysql-docker/blob/mysql-server/5.6/Dockerfile" target="_blank" rel="external">https://github.com/mysql/mysql-docker/blob/mysql-server/5.6/Dockerfile</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://github.com/docker/docker/issues/14856" target="_blank" rel="external">https://github.com/docker/docker/issues/14856</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<h2>指定存储（Volumn）</h2>
<p>Volumn是Docker容器中，用于将数据存储在容器之外的路径的工具。</p>
<p>主要有两个地方会用到，一个是在使用<code>docker run</code>命令的时候，可以用<code>-v</code>参数指定存储，]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[两年的dataguru学习总结]]></title>
    <link href="http://valleylord.github.io/post/201512-two-years-study/"/>
    <id>http://valleylord.github.io/post/201512-two-years-study/</id>
    <published>2015-12-31T12:48:00.000Z</published>
    <updated>2016-01-10T08:54:19.432Z</updated>
    <content type="html"><![CDATA[<p>我最早接触dataguru是在大约2年多前，那时我学校毕业已经好几年了，一直从事传统金融行业系统的开发工作，外面互联网企业的行情一浪高过一浪，难得我还能耐得住寂寞。</p>
<p>时间长了，总觉得工作的内容有些与市场脱节的厉害，虽然公司也有组织一些培训，但多数仍然是传统软件工业的范畴，虽然工作中用得上，但没什么太大意思。市场上有的一些培训，面授的课程比较贵，而且还有被忽悠的可能；网络课程的话，质量良莠不齐，即使有一些比较优质的课程，也都是基础课部分，略微高级的内容都是收费的，虽然收费比面授是便宜了很多，但也还是挺贵的。于是在这个时候见到了炼数成金（dataguru），那应该是在2013年秋冬左右的时候。</p>
<p>那时的dataguru还没有现在的课程数量多，也没有第一节试听，也没有现在很多的优惠折扣，免费听课卡之类的也很少，课程的分类大概是有R、SAS、Oracle、Hadoop、NoSQL这些。促使我报第一门课的动力是它有itpub的背景，而且收费也确实不贵。</p>
<p>说到收费，必须浓墨重彩的说一下dataguru的逆向收费制度，这个制度一直坚持到现在仍然没有变。每门课的学费分固定和浮动两部分，固定学费100元必须要交，浮动的部分一般是300元，如果学习成绩好，那么浮动的部分可以全部返还。也就是说，最便宜可以100元就学一门课，即使学习成绩没及格，也最多就收400元，相对市面上收费的网络授课，也算是便宜的了。</p>
<p>这个收费制度实在是太有意思了，如果把课程作为一个产品来看的话，这个制度应该是个杀手级的特性。它的确激励了一些学员努力学习，在完成作业的过程中巩固所学的知识。反过来看，完成作业好的学员，老师基本从他身上是赚不到钱的，而补偿老师工作最多的恰恰是完成作业差的学员，有点马太效应的感觉。我不确定这个制度是否是首创，但是这确实是dataguru的一大招牌。如果给dataguru想一句广告词的话，我会写“让想学的学员以最低的成本学习”。</p>
<p>实际上，以我学过的dataguru课程做例子，全部金额返还通过率在15~30%，部分金额返还的比例相当少，大约不到5%，其他的都是0返还的学员。如果把课程看成生意的话，以下保守估计，假定一门400元的课有30个学员，全额返还通过率在25%，其余是0返还，那么，一门课上完，老师的收入是30×400-30×25%×300=9750，大约是1万元，如果这门课程一年开3期，那么老师的收入会有3万元，如果该老师还有其他课程的话，以上数字可能继续翻倍。以上假定dataguru平台不从中抽取中介费，我这么算不仅是要预测老师的收入，而是要去推测这是否是一个可以持续的商业模式，相信大家应该有自己的判断。</p>
<p>当然，最初选课的时候也不是一点担心也没有，万一老师为了收到学费把作业出的很难怎么办？相信不只是我有这么想过。以我后来学的课程内容来看，大部分的每周作业，应该是半天到一天就能做完，偶尔可能有例外。我是写作业比较认真，几乎每次的作业我都发到了博客上，所以耗时长了点，如果不纠结这些格式的话，有的作业2小时内就搞定了。当然，这是我的情况，基本我学的课程都是听过但没用过的主题，不同人的专业基础、知识构成有不同，仅供参考。做作业的过程有些像在学校里面的时候，赶每学期期末的大作业，只是作业量并没那么多，不确定这是不是dataguru团队刻意想营造的，不过这确实让我想起了在学校的时光。</p>
<p>再之后，陆续在dataguru学了3门课，全满分过拿了优异，还参加了一些公开课，还有一门没坚持下来。然后dataguru有了V等级，我是V2，进了精英群，也在群里面认识了一些志同道合的朋友。中间有过大约半年多的时间，身边事情太多，停学了，直到现在。现在，我又重新开始了，对一个有2年dataguru学龄的学员来说，只有V2是不是应该好好努力了？</p>
<p>说了很多dataguru的特色制度，也说说这里的课程和老师。以我学过的课程来看，多数情况下，课程的内容确实是有一些干货的，认真跟老师的脚步，确实是能学到一些实用的东西，课程质量平均都比较高。黄校长的课应该依旧是这里的招牌，讲的认真，作业量也控制的不错，中等偏上。课程的内容上，有一些高端的课程，也的确是言之有物，不过没有看过其他网络平台的课程 ，不便比较。这里老师的普遍水平应该也是挺不错的，不过现在老师越来越多了，学员的看法也越来越多，有说个别老师比较水的，也有说某些老师过于严格的，也有说老师发视频总是延迟的。万一真的碰到这样的情况，认真和教务沟通，dataguru的教务还是很好沟通的。dataguru也在不断进步中，比如很久之前我在精英群里面提过助教制度和学员互批作业制度，其实这也不是我的原创，但是后来dataguru真的就引入了这些，很令我惊喜。</p>
<p>总之，dataguru还是性价比很高的网络培训，如果有一些课程的确是你感兴趣的主题，那么学一学绝对不会后悔。现在的dataguru相比最初的时候，已经好了很多，如果有一些地方能更一步改进，想必会更好。比如，我觉得有以下一些，</p>
<ol>
<li>老师经常有延迟发布视频的情况，经常发生在课程的第一期，这是很让人纠结的，一般来说，参加第一期的课程相对会和老师有比较好的互动，因为此时老师对自己的课程也需要一些反馈，和学员的沟通会比较积极；另一方面，老师也是正常人，也有个人生活，一周做一个视频可能实在时间太紧了，所以经常会有延迟发布视频的情况，3个月的课程有个别情况会拖到6个月。很多人提过这个问题，也提了很长时间，我也提过“老师准备好半数的视频之后再开课”之类，目前看来，dataguru目前似乎没有什么好的办法 ，而我还是希望他能够解决。</li>
<li>课程结构上，缺乏系列课程，比如，从入门，到熟练，到精通，把一个主题讲透，更多的是某门课对某个专题讲，讲的深浅就看老师个人的规划了。dataguru明显已经感觉到了这块的不足，现在推出“专业”这个概念，把专业内的课程分为初级、中级、高级，也有一些很少的课程推出了上下两部，建议学后者的学员先学前一门课。但是，“专业”内课程仍然感觉比较割裂，希望这一块可以进一步加强，推出学习路线图这类的功能。</li>
<li>课程结构设置上，dataguru仍然采用限定死一周一课的方式。但这个默认设置实际上是值得推敲的，比如，某个学员（比如我）是有短期项目的，不能确定下个月，或者下下个月是否有短期加急项目，而dataguru的课程（除去公开课和部分短课）一般都在3个月以上，很可能导致这样的学员无法正常完成课程。如果dataguru的课程可以在学员学完一节课提交作业之后，自动进入下一节课，那么对学员来说，在时间上就显得可控的多，当然，总的时间上仍然可以限制。当然这会导致不是所有的学员的作业都步调一致，老师改作业会有一些麻烦。我不确定这种情况是否可以克服，但我觉得这样的改进对学员，以及dataguru的长远发展来说，都是有益的，值得尝试。</li>
</ol>
<p>最后，我真的觉得dataguru是一个值得参与的网络课程平台，过去是，现在是，将来也将会是。她在成长，她即使现在有些微的不足，但是我们看着她变得越来越好，我们还可以期待她变得更好，一直好到你挑不出刺来。我很喜欢这里。</p>
<p>此文写给炼数成金4周年，感谢你教会我的，感谢这个优秀的平台，感谢这里遇到的每一个人，生日快乐 to dataguru！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我最早接触dataguru是在大约2年多前，那时我学校毕业已经好几年了，一直从事传统金融行业系统的开发工作，外面互联网企业的行情一浪高过一浪，难得我还能耐得住寂寞。</p>
<p>时间长了，总觉得工作的内容有些与市场脱节的厉害，虽然公司也有组织一些培训，但多数仍然是传统软件]]>
    </summary>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="other" scheme="http://valleylord.github.io/categories/other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu14.04无法无线上网]]></title>
    <link href="http://valleylord.github.io/post/201601-ubuntu-wifi/"/>
    <id>http://valleylord.github.io/post/201601-ubuntu-wifi/</id>
    <published>2015-12-31T10:09:00.000Z</published>
    <updated>2016-01-02T10:21:37.068Z</updated>
    <content type="html"><![CDATA[<p>安装了Ubuntu14.04之后，一直使用无线上网，直到今天。系统中什么事情也没做，只是在无线路由器上，给本机分配了一个固定ip。</p>
<p>找了一些文章，有说是无线驱动的问题的，需要重新编译内核；有说是需要更新驱动的，需要在更新中升级；等等很多，不一而足。</p>
<p>我的判断是，驱动应该是没啥问题，因为之前也能上网，而且更新里面显示为空，表示我的驱动已经是最新了。猜测可能是网络环境变了，导致之前的某个选项不能适配新环境。</p>
<p>在网上找到<a href="http://www.emmolution.org/?p=253" target="_blank" rel="external">这篇文章</a>，设置硬件加密为不启用即可。我照做了，然后就能正常用wifi了。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vi</span> /etc/modprobe.<span class="keyword">d</span>/ath9k.<span class="keyword">conf</span></div></pre></td></tr></table></figure></p>
<p>增加以下内容，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">options ath9k nohwcrypt</span>=<span class="string">1</span></div></pre></td></tr></table></figure></p>
<p>然后重启即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>安装了Ubuntu14.04之后，一直使用无线上网，直到今天。系统中什么事情也没做，只是在无线路由器上，给本机分配了一个固定ip。</p>
<p>找了一些文章，有说是无线驱动的问题的，需要重新编译内核；有说是需要更新驱动的，需要在更新中升级；等等很多，不一而足。</p>
<]]>
    </summary>
    
      <category term="Linux" scheme="http://valleylord.github.io/tags/Linux/"/>
    
      <category term="Linux" scheme="http://valleylord.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker创建镜像]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-build-image/"/>
    <id>http://valleylord.github.io/post/201512-docker-build-image/</id>
    <published>2015-12-27T01:43:00.000Z</published>
    <updated>2015-12-27T09:56:54.068Z</updated>
    <content type="html"><![CDATA[<p>通常情况下，我们使用dockerfile来创建镜像，主要是因为dockerfile可以实现脚本化，反复使用。</p>
<p>dockerfile通常是由一系列指令组成，一个常见的dockerfile的例子主要有以下一些指令<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<h2>dockerfile指令</h2>
<h3>FROM</h3>
<p>格式为 <code>FROM &lt;image&gt;</code>或<code>FROM &lt;image&gt;:&lt;tag&gt;</code>。</p>
<p>第一条指令必须为 <code>FROM</code> 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 <code>FROM</code> 指令（每个镜像一次）。</p>
<h3>MAINTAINER</h3>
<p>格式为 <code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p>
<h3>RUN</h3>
<p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</p>
<p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p>
<p>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 <code>\</code> 来换行。</p>
<h3>CMD</h3>
支持三种格式
<ul>
<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式；</li>
<li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用；</li>
<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</li>
</ul>
<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p>
<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p>
<h3>EXPOSE</h3>
<p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p>
<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>
<h3>ENV</h3>
格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。
<p>指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p>
<p>例如</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">ENV</span> <span class="constant">PG_MAJOR</span> <span class="number">9.3</span></div><div class="line"><span class="constant">ENV</span> <span class="constant">PG_VERSION</span> <span class="number">9.3</span>.<span class="number">4</span></div><div class="line"><span class="constant">RUN</span> curl -<span class="constant">SL</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/postgres</span>-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress && …</div><div class="line"><span class="constant">ENV</span> <span class="constant">PATH</span> /usr/local/postgres-<span class="variable">$PG_MAJOR</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<h3>ADD</h3>
<p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p>
该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。
<p>其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>
<h3>COPY</h3>
<p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p>
<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>
<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>
<h3>ENTRYPOINT</h3>
两种格式：
<ul>
<li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li>
<li><code>ENTRYPOINT command param1 param2</code>（shell中执行）。</li>
</ul>
<p>配置容器启动后执行的命令，并且不可被 <code>docker run</code> 提供的参数覆盖。</p>
<p>每个 Dockerfile 中只能有一个 <code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。</p>
<h3>VOLUME</h3>
<p>格式为 <code>VOLUME [&quot;/data&quot;]</code>。</p>
<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
<h3>USER</h3>
<p>格式为 <code>USER daemon</code>。</p>
<p>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户。</p>
<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：<code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code>。要临时获取管理员权限可以使用 <code>gosu</code>，而不推荐 <code>sudo</code>。</p>
<h3>WORKDIR</h3>
<p>格式为 <code>WORKDIR /path/to/workdir</code>。</p>
<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p>
<p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WORKDIR /a</div><div class="line">WORKDIR b</div><div class="line">WORKDIR c</div><div class="line">RUN <span class="built_in">pwd</span></div></pre></td></tr></table></figure></p>
<p>则最终路径为 <code>/a/b/c</code>。</p>
<h3>ONBUILD</h3>
<p>格式为 <code>ONBUILD [INSTRUCTION]</code>。</p>
<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>
<p>例如，Dockerfile 使用如下的内容创建了镜像 <code>image-A</code>。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">...</span>]</div><div class="line">ONBUILD ADD . /app/src</div><div class="line">ONBUILD RUN /usr/local/bin/python-build --dir /app/src</div><div class="line">[<span class="keyword">...</span>]</div></pre></td></tr></table></figure></p>
<p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 <code>FROM image-A</code>指定基础镜像时，会自动执行 <code>ONBUILD</code> 指令内容，等价于在后面添加了两条指令。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> image-A</div><div class="line"></div><div class="line">#Automatically run the following</div><div class="line">ADD . <span class="regexp">/app/</span>src</div><div class="line">RUN <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>python-build --dir <span class="regexp">/app/</span>src</div></pre></td></tr></table></figure></p>
<p>使用 <code>ONBUILD</code> 指令的镜像，推荐在标签中注明，例如 <code>ruby:1.9-onbuild</code>。</p>
<h2>构建镜像实例</h2>
<p>本文使用centos 7为基础镜像，构建一个包括jdk8、tomcat8、php、mysql、mycat的镜像。</p>
<h3>代码和文件准备</h3>
<p>镜像的dockerfile如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">FROM centos:<span class="number">7</span></div><div class="line">MAINTAINER arnes &lt;arsen_mmx<span class="variable">@163</span>.com&gt;</div><div class="line">ENV REFRESHED_AT <span class="number">2015</span>-<span class="number">12</span>-<span class="number">26</span></div><div class="line"></div><div class="line"><span class="comment"># add fast yum repos</span></div><div class="line">ADD ./CentOS-Base.repo  /etc/yum.repos.d/CentOS-Base.repo</div><div class="line">ADD ./mysql-community.repo /etc/yum.repos.d/mysql-community.repo</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install jdk 1.8</span></div><div class="line">COPY ./jdk1.<span class="number">8.0_66</span> /usr/java/jdk1.<span class="number">8.0_66</span></div><div class="line"></div><div class="line">ENV JAVA_HOME /usr/java/jdk1.<span class="number">8.0_66</span></div><div class="line">ENV JRE_HOME <span class="variable">$JAVA_HOME</span>/jre</div><div class="line">ENV PATH <span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></div><div class="line">ENV CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="regexp">/usr/java</span><span class="regexp">/jdk1.6.0_25/jre</span><span class="regexp">/lib:$CLASSPATH</span></div><div class="line"></div><div class="line"></div><div class="line">#install tomcat</div><div class="line">COPY ./apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span>  /usr/tomcat/apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span></div><div class="line"></div><div class="line">ENV TOMCAT_HOME /usr/tomcat/apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span></div><div class="line">ENV CATALINA_HOME <span class="variable">$TOMCAT_HOME</span></div><div class="line">ENV CATALINA_BASE <span class="variable">$TOMCAT_HOME</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install php</span></div><div class="line">RUN yum update</div><div class="line">RUN yum install -<span class="keyword">y</span> openssh-server php</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install mysql</span></div><div class="line">RUN groupadd -r mysql && useradd -r -g mysql mysql</div><div class="line"></div><div class="line"><span class="comment">#ADD ./mysql-community-release-el7-7.noarch.rpm /usr/mysql-community-release-el7-7.noarch.rpm</span></div><div class="line"><span class="comment">#ADD ./mysql-community-server-minimal-5.6.28-2.el7.x86_64.rpm /usr/mysql-community-server-minimal-5.6.28-2.el7.x86_64.rpm</span></div><div class="line"></div><div class="line"><span class="comment">#RUN rpm -ivh /usr/mysql-community-release-el7-7.noarch.rpm</span></div><div class="line"></div><div class="line">RUN rpmkeys --import http:<span class="regexp">//repo</span>.mysql.com/RPM-GPG-KEY-mysql </div><div class="line">RUN yum install -<span class="keyword">y</span> https:<span class="regexp">//repo</span>.mysql.com/yum/mysql-<span class="number">5.6</span>-community/docker/x86_64/mysql-community-server-minimal-<span class="number">5.6</span>.<span class="number">28</span>-<span class="number">2</span>.el7.x86_64.rpm </div><div class="line"><span class="comment">#RUN yum install -y mysql-community-server</span></div><div class="line">RUN yum install -<span class="keyword">y</span> libpwquality \</div><div class="line">  && rm -rf /var/cache/yum/*</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># config mysql</span></div><div class="line">ADD ./<span class="keyword">my</span>.cnf /etc/<span class="keyword">my</span>.cnf</div><div class="line">RUN sed -Ei <span class="string">'s/^(bind-address|log)/#&/'</span> /etc/<span class="keyword">my</span>.cnf \</div><div class="line">	&& echo -e <span class="string">"skip-host-cache\nskip-name-resolve\nlower_case_table_names=1"</span> | awk <span class="string">'{ print } $1 == "[mysqld]" && c == 0 { c = 1; system("cat") }'</span> /etc/<span class="keyword">my</span>.cnf &gt; <span class="regexp">/tmp/my</span>.cnf \</div><div class="line">	&& mv /tmp/<span class="keyword">my</span>.cnf /etc/<span class="keyword">my</span>.cnf</div><div class="line"></div><div class="line">VOLUME /var/lib/mysql</div><div class="line"></div><div class="line">ENV MYSQL_ROOT_PASSWORD <span class="string">"111111"</span></div><div class="line">ENV MYSQL_USER <span class="string">"mysql"</span></div><div class="line">ENV MYSQL_USER_DATABASE <span class="string">"mysql"</span></div><div class="line">ENV MYSQL_USER_PASSWORD <span class="string">"111111"</span></div><div class="line"></div><div class="line">COPY ./mysql-entrypoint.sh /usr/bin/mysql-entrypoint.sh</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install mycat</span></div><div class="line">RUN groupadd -r mycat && useradd -r -g mycat mycat</div><div class="line"></div><div class="line">COPY ./mycat /opt/mycat</div><div class="line">ADD ./schema.xml /opt/mycat/conf/schema.xml</div><div class="line">COPY ./mycat-run.sh /usr/bin/mycat-run.sh</div><div class="line"></div><div class="line">ENV MYCAT_HOME /opt/mycat</div><div class="line"></div><div class="line">RUN <span class="keyword">chown</span> -R mycat:mycat /opt/mycat</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># export port for tomcat, mysql, mycat</span></div><div class="line">EXPOSE <span class="number">8080</span> <span class="number">8066</span> <span class="number">9066</span> <span class="number">3306</span></div><div class="line"></div><div class="line"></div><div class="line">CMD <span class="variable">$TOMCAT_HOME</span>/bin/startup.sh \</div><div class="line">  && bash -c <span class="string">"/usr/bin/mysql-entrypoint.sh mysqld &"</span> \</div><div class="line">  && echo <span class="string">"Waiting mysql startup."</span> && <span class="keyword">sleep</span> <span class="number">30</span> \</div><div class="line">  && bash -c <span class="string">"/usr/bin/mycat-run.sh"</span> \</div><div class="line">  && <span class="regexp">/usr/sbin</span><span class="regexp">/sshd -D</span></div><div class="line">#CMD /usr<span class="regexp">/bin/mysql</span>-entrypoint.sh && <span class="regexp">/usr/sbin</span><span class="regexp">/sshd -D</span></div></pre></td></tr></table></figure></p>
<p>以上安装过程，主要就是按照jdk8-&gt;tomcat8-&gt;php-&gt;mysql-&gt;mycat的步骤来逐步安装的。需要用到的文件如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-needed-files.png"></p>
<p>其中，<code>Dockerfile</code>文件上文已经列出，<code>jdk-8u66-linux-x64.tar.gz</code>、<code>apache-tomcat-8.0.28.tar.gz</code>、<code>Mycat-server-1.5-alpha-20151221110028-linux.tar.gz</code>分别是jdk8、tomcat8、mycat1.5的安装包文件，解压后分别是<code>jdk1.8.0_66</code>、<code>apache-tomcat-8.0.28</code>、<code>mycat</code>。<code>CentOS-Base.repo</code>是Centos7的更新源配置文件，用来替代默认的更新源，以加快速度，我用的是上海交大的源，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CentOS-Base.repo</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></div><div class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></div><div class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></div><div class="line"><span class="comment"># unless you are manually picking other mirrors.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span></div><div class="line"><span class="comment"># remarked out baseurl= line instead.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">[base]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Base</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/os</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#released updates </span></div><div class="line">[updates]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Updates</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/updates</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#additional packages that may be useful</span></div><div class="line">[extras]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Extras</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/extras</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></div><div class="line">[centosplus]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Plus</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/centosplus</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div></pre></td></tr></table></figure></p>
<p><code>mysql-community.repo</code>是mysql的centos更新源，因为centos的默认mysql实现已经是mysql的mariadb分支，如果要用Oracle的mysql，现在在centos中改名为<code>mysql-community</code>，需要手动配置更新源，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[mysql-connectors-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="constant">Connectors</span> <span class="constant">Community</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-connectors-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line">[mysql-tools-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="constant">Tools</span> <span class="constant">Community</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-tools-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line"><span class="comment"># Enable to use MySQL 5.5</span></div><div class="line">[mysql55-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.5</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.5-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line"><span class="comment"># Enable to use MySQL 5.6</span></div><div class="line">[mysql56-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.6</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.6-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line">[mysql57-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.7</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.7-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div></pre></td></tr></table></figure></p>
<p><code>mysql-community.repo</code>的获取主要参考Oracle官方的Yum源配置方法，运行如下命令，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-<span class="number">7</span>.noarch.rpm</div><div class="line">rpm -Uvh mysql57-community-release-el7-<span class="number">7</span>.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>运行完后，发现在<code>/etc/yum.repos.d/</code>目录下多了<code>msql-community</code>的更新源配置<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，我只取其中的<code>mysql-community.repo</code>以精简Yum更新源。</p>
<p><code>my.cnf</code>是mysql的配置文件，这个文件主要配置了mysql的字符集UTF8，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">socket=/var/run/mysqld/mysql.sock</div><div class="line">default-character-<span class="operator"><span class="keyword">set</span>=utf8</span></div><div class="line"></div><div class="line">[mysqld]</div><div class="line">datadir=/<span class="keyword">var</span>/lib/mysql</div><div class="line">socket=/<span class="keyword">var</span>/run/mysqld/mysql.sock</div><div class="line"><span class="keyword">user</span>=mysql</div><div class="line"># Disabling symbolic-links <span class="keyword">is</span> recommended <span class="keyword">to</span> prevent assorted security risks</div><div class="line">symbolic-links=<span class="number">0</span></div><div class="line"></div><div class="line">skip-<span class="built_in">character</span>-<span class="keyword">set</span>-client-handshake=<span class="number">1</span></div><div class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</div><div class="line"><span class="keyword">collation</span>-<span class="keyword">server</span>=utf8_unicode_ci</div><div class="line"></div><div class="line">#<span class="keyword">log</span>-queries-<span class="keyword">not</span>-<span class="keyword">using</span>-indexes=<span class="number">1</span></div><div class="line">#slow-<span class="keyword">query</span>-<span class="keyword">log</span>=<span class="number">1</span></div><div class="line">#slow-<span class="keyword">query</span>-<span class="keyword">log</span>-file=/<span class="keyword">var</span>/lib/mysql/mysql-slow.<span class="keyword">log</span></div><div class="line"></div><div class="line">[mysqld_safe]</div><div class="line"><span class="keyword">log</span>-error=/<span class="keyword">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></div><div class="line">pid-file=/<span class="keyword">var</span>/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure></p>
<p><code>mysql-entrypoint.sh</code>是mysql的docker启动脚本，用法是<code>mysql-entrypoint.sh mysqld</code>，该文件以及dockerfile中的mysql安装步骤都参考了mysql5.6官方Docker镜像<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>中的构建方法，文件内如如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="keyword">set</span> <span class="operator">-e</span></div><div class="line"></div><div class="line"><span class="comment"># if command starts with an option, prepend mysqld</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">${1:0:1}</span>"</span> = <span class="string">'-'</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="keyword">set</span> -- mysqld <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'mysqld'</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="comment"># Get config</span></div><div class="line">	DATADIR=<span class="string">"<span class="variable">$("$@" --verbose --help 2&gt;/dev/null | awk '$1 == "datadir" { print $2; exit }')</span>"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"DATADIR=<span class="variable">$DATADIR</span>"</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ ! <span class="operator">-d</span> <span class="string">"$ /mysql"</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$MYSQL_ROOT_PASSWORD</span>"</span> <span class="operator">-a</span> -z <span class="string">"<span class="variable">$MYSQL_ALLOW_EMPTY_PASSWORD</span>"</span> <span class="operator">-a</span> -z <span class="string">"<span class="variable">$MYSQL_RANDOM_ROOT_PASSWORD</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'error: database is uninitialized and password option is not specified '</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD'</span></div><div class="line">			<span class="keyword">exit</span> <span class="number">1</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		mkdir -p <span class="string">"<span class="variable">$DATADIR</span>"</span></div><div class="line">		chown -R mysql:mysql <span class="string">"<span class="variable">$DATADIR</span>"</span></div><div class="line"></div><div class="line">		<span class="built_in">echo</span> <span class="string">'Initializing database'</span></div><div class="line">		mysql_install_db --user=mysql --datadir=<span class="string">"<span class="variable">$DATADIR</span>"</span> --rpm --keep-my-cnf</div><div class="line">		<span class="built_in">echo</span> <span class="string">'Database initialized'</span></div><div class="line"></div><div class="line">		<span class="string">"<span class="variable">$@</span>"</span> --skip-networking &</div><div class="line">		pid=<span class="string">"$!"</span></div><div class="line"></div><div class="line">		mysql=( mysql --protocol=socket -uroot )</div><div class="line"></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> {<span class="number">30</span>..<span class="number">0</span>}; <span class="keyword">do</span></div><div class="line">			<span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">'SELECT 1'</span> | <span class="string">"<span class="variable">${mysql[@]}</span>"</span> &&gt; /dev/null; <span class="keyword">then</span></div><div class="line">				<span class="keyword">break</span></div><div class="line">			<span class="keyword">fi</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">'MySQL init process in progress...'</span></div><div class="line">			sleep <span class="number">1</span></div><div class="line">		<span class="keyword">done</span></div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$i</span>"</span> = <span class="number">0</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'MySQL init process failed.'</span></div><div class="line">			<span class="keyword">exit</span> <span class="number">1</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$MYSQL_INITDB_SKIP_TZINFO</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="comment"># sed is for https://bugs.mysql.com/bug.php?id=20545</span></div><div class="line">			mysql_tzinfo_to_sql /usr/share/zoneinfo | sed <span class="string">'s/Local time zone must be set--see zic manual page/FCTY/'</span> | <span class="string">"<span class="variable">${mysql[@]}</span>"</span> mysql</div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$MYSQL_RANDOM_ROOT_PASSWORD</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			MYSQL_ROOT_PASSWORD=<span class="string">"<span class="variable">$(pwgen -1 32)</span>"</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">"GENERATED ROOT PASSWORD: <span class="variable">$MYSQL_ROOT_PASSWORD</span>"</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		<span class="string">"<span class="variable">${mysql[@]}</span>"</span> &lt;&lt;-EOSQL</div><div class="line">			-- What<span class="string">'s done in this file shouldn'</span>t be replicated</div><div class="line">			--  or products like mysql-fabric won<span class="string">'t work</span></div><div class="line">			SET @@SESSION.SQL_LOG_BIN=0;</div><div class="line">			DELETE FROM mysql.user ;</div><div class="line">			CREATE USER 'root<span class="string">'@'</span>%<span class="string">' IDENTIFIED BY '</span><span class="variable">${MYSQL_ROOT_PASSWORD}</span><span class="string">' ;</span></div><div class="line">			GRANT ALL ON *.* TO 'root<span class="string">'@'</span>%<span class="string">' WITH GRANT OPTION ;</span></div><div class="line">			DROP DATABASE IF EXISTS test ;</div><div class="line">			FLUSH PRIVILEGES ;</div><div class="line">		EOSQL</div><div class="line"></div><div class="line">		if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then</div><div class="line">			mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )</div><div class="line">		fi</div><div class="line"></div><div class="line">		if [ "$MYSQL_DATABASE" ]; then</div><div class="line">			echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"</div><div class="line">			mysql+=( "$MYSQL_DATABASE" )</div><div class="line">		fi</div><div class="line"></div><div class="line">		if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then</div><div class="line">			echo "CREATE USER '<span class="variable">$MYSQL_USER</span><span class="string">'@'</span>%<span class="string">' IDENTIFIED BY '</span><span class="variable">$MYSQL_PASSWORD</span><span class="string">' ;" | "${mysql[@]}"</span></div><div class="line"></div><div class="line">			if [ "$MYSQL_DATABASE" ]; then</div><div class="line">				echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* TO '<span class="variable">$MYSQL_USER</span><span class="string">'@'</span>%<span class="string">' ;" | "${mysql[@]}"</span></div><div class="line">			fi</div><div class="line"></div><div class="line">			echo 'FLUSH PRIVILEGES ;<span class="string">' | "${mysql[@]}"</span></div><div class="line">		fi</div><div class="line"></div><div class="line">		echo</div><div class="line">		for f in /docker-entrypoint-initdb.d/*; do</div><div class="line">			case "$f" in</div><div class="line">				*.sh)  echo "$0: running $f"; . "$f" ;;</div><div class="line">				*.sql) echo "$0: running $f"; "${mysql[@]}" &lt; "$f" && echo ;;</div><div class="line">				*)     echo "$0: ignoring $f" ;;</div><div class="line">			esac</div><div class="line">			echo</div><div class="line">		done</div><div class="line"></div><div class="line">		if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then</div><div class="line">			"${mysql[@]}" &lt;&lt;-EOSQL</div><div class="line">				ALTER USER 'root<span class="string">'@'</span>%<span class="string">' PASSWORD EXPIRE;</span></div><div class="line">			EOSQL</div><div class="line">		fi</div><div class="line">		if ! kill -s TERM "$pid" || ! wait "$pid"; then</div><div class="line">			echo &gt;&2 'MySQL init process failed.<span class="string">'</span></div><div class="line">			exit 1</div><div class="line">		fi</div><div class="line"></div><div class="line">		echo</div><div class="line">		echo 'MySQL init process done. Ready <span class="keyword">for</span> start up.<span class="string">'</span></div><div class="line">		echo</div><div class="line">	fi</div><div class="line"></div><div class="line">	chown -R mysql:mysql "$DATADIR"</div><div class="line">fi</div><div class="line"></div><div class="line">echo "$@"</div><div class="line">exec "$@"</div></pre></td></tr></table></figure></p>
<p><code>schema.xml</code>是mycat中的配置文件<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>，我注释掉了其中一行，</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...... // 省略部分内容</div><div class="line">	<span class="tag">&lt;<span class="title">dataHost</span> <span class="attribute">name</span>=<span class="value">"localhost1"</span> <span class="attribute">maxCon</span>=<span class="value">"1000"</span> <span class="attribute">minCon</span>=<span class="value">"10"</span> <span class="attribute">balance</span>=<span class="value">"0"</span></span></div><div class="line">		<span class="attribute">writeType</span>=<span class="value">"0"</span> <span class="attribute">dbType</span>=<span class="value">"mysql"</span> <span class="attribute">dbDriver</span>=<span class="value">"native"</span> <span class="attribute">switchType</span>=<span class="value">"1"</span>  <span class="attribute">slaveThreshold</span>=<span class="value">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="title">heartbeat</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- can have multi write hosts --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostM1"</span> <span class="attribute">url</span>=<span class="value">"localhost:3306"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">			<span class="attribute">password</span>=<span class="value">"111111"</span>&gt;</div><div class="line">			<span class="comment">&lt;!-- can have multi read hosts --&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;/<span class="title">writeHost</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostS1" url="localhost:3316" user="root"</span></div><div class="line">			password="123456" /&gt; --&gt;</div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">dataHost</span>&gt;</span></div><div class="line">...... // 省略部分内容</div></pre></td></tr></table></figure></p>
<p>注释掉的是有关<code>host=“hostS1”</code>的那一段，因为我只有一个mysql实例。<code>mycat-run.sh</code>是mycat的启动文件，主要添加了与mycat测试数据库一致的db1、db2、db3这3个数据库。文件内容如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db1;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db2;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db3;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"></div><div class="line"><span class="variable">$MYCAT_HOME</span>/bin/mycat start</div></pre></td></tr></table></figure></p>
<h3>构建和测试</h3>
<p>有了以上文件，就可以构建docker镜像了，<code>docker build -t arnes/my-centos7 .</code>，构建过程截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-1.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-2.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-3.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-4.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-5.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-6.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-7.png"></p>
<p>构建完成之后，就可以运行镜像了，运行的命令是<code>docker run -it -p 3306:3306 -p 8066:8066 -p 8080:8080 -p 9066:9066 -d arnes/my-centos7</code>，截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-1.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-2.png"></p>
<p>其中，大部分是mysql启动的log，这里主要是关注是否已经成功，正常使用的时候，建议使用<code>-d</code>后台启动。</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-3.png"></p>
<p>如上所示，宿主机的ip在<code>192.168.2.101</code>，从另一台机器可以访问该容器的服务，截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-1.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-2.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-3.png"></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-4.png"></p>
<p>综上，容器已经可以提供对外服务。</p>
<h3>改进</h3>
<p>可能的改进点有以下一些，</p>
<ol>
<li>mysql已经提供环境变量作为传入参数来设置数据库、密码等，但是mycat并没有，需要支持；</li>
<li>可以使用supervisord来做启动命令，但这需要先安装<code>python-pip</code>，有待进一步研究；</li>
<li>镜像应该还有可以精简的地方，有待发现；</li>
</ol>
<p>以上是本文的全部。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://dockerpool.com/static/books/docker_practice/dockerfile/instructions.html" target="_blank" rel="external">http://dockerpool.com/static/books/docker_practice/dockerfile/instructions.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="external">http://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/mysql/mysql-docker/tree/mysql-server/5.6" target="_blank" rel="external">https://github.com/mysql/mysql-docker/tree/mysql-server/5.6</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://blog.csdn.net/dreamcode/article/details/44307377" target="_blank" rel="external">http://blog.csdn.net/dreamcode/article/details/44307377</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>通常情况下，我们使用dockerfile来创建镜像，主要是因为dockerfile可以实现脚本化，反复使用。</p>
<p>dockerfile通常是由一系列指令组成，一个常见的dockerfile的例子主要有以下一些指令<a href="#fn1" class="foot]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker命令简介]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-commands/"/>
    <id>http://valleylord.github.io/post/201512-docker-commands/</id>
    <published>2015-12-18T13:03:00.000Z</published>
    <updated>2015-12-26T07:51:59.011Z</updated>
    <content type="html"><![CDATA[<h2>Docker命令概要</h2>
<p>常用的Docker命令有以下一些<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。</p>
<h3>1. docker version</h3>
<p>显示 Docker 版本信息。</p>
<h3>2. docker info</h3>
<p>显示 Docker 系统信息，包括镜像和容器数。</p>
<h3>3. docker search</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker search [options <span class="string">"o"</span>&gt;] term</div><div class="line">docker search <span class="operator">-s</span>  django</div></pre></td></tr></table></figure></p>
<p>从 Docker Hub 中搜索符合条件的镜像。</p>
<p>--automated 只列出 automated build类型的镜像；</p>
<p>--no-trunc 可显示完整的镜像描述；</p>
<p>-s 40 列出收藏数不小于40的镜像。</p>
<h3>4. docker pull</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull [<span class="operator">-a</span> <span class="string">"o"</span>&gt;] [user/ <span class="string">"o"</span>&gt;]name[:tag <span class="string">"o"</span>&gt;]</div><div class="line">docker pull laozhu/telescope:latest</div></pre></td></tr></table></figure></p>
<p>从 Docker Hub 中拉取或者更新指定镜像。</p>
<p>-a 拉取所有 tagged 镜像 。</p>
<h3>5. docker login</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@moon:~<span class="comment"># docker login</span></div><div class="line">Username: username</div><div class="line">Password: ****</div><div class="line">Email: user@domain.com</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<p>按步骤输入在 Docker Hub 注册的用户名、密码和邮箱即可完成登录。</p>
<h3>6. docker logout</h3>
<p>运行后从指定服务器登出，默认为官方服务器。</p>
<h3>7. docker images</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images [options <span class="string">"o"</span>&gt;] [name]</div></pre></td></tr></table></figure></p>
<p>列出本地所有镜像。其中 [name] 对镜像名称进行关键词查询。</p>
<p>-a 列出所有镜像（含过程镜像）；</p>
<p>-f 过滤镜像，如： -f ['dangling=true'] 只列出满足dangling=true 条件的镜像；</p>
<p>--no-trunc 可显示完整的镜像ID；</p>
<p>-q 仅列出镜像ID。</p>
<p>--tree 以树状结构列出镜像的所有提交历史。</p>
<h3>8. docker ps</h3>
<p>列出所有运行中容器。</p>
<p>-a 列出所有容器（含沉睡镜像）；</p>
<p>--before=&quot;nginx&quot; 列出在某一容器之前创建的容器，接受容器名称和ID作为参数；</p>
<p>--since=&quot;nginx&quot; 列出在某一容器之后创建的容器，接受容器名称和ID作为参数；</p>
<p>-f [exited=<int>] 列出满足exited=<int> 条件的容器；</int></int></p>
<p>-l 仅列出最新创建的一个容器；</p>
<p>--no-trunc 显示完整的容器ID；</p>
<p>-n=4 列出最近创建的4个容器；</p>
<p>-q 仅列出容器ID；</p>
<p>-s 显示容器大小。</p>
<h3>9. docker rmi</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker rmi [options <span class="string">"o"</span>&gt;] &lt;image&gt;  <span class="string">"o"</span>&gt;[image...]</div><div class="line">docker rmi nginx:latest postgres:latest python:latest</div></pre></td></tr></table></figure></p>
<p>从本地移除一个或多个指定的镜像。</p>
<p>-f 强行移除该镜像，即使其正被使用；</p>
<p>--no-prune 不移除该镜像的过程镜像，默认移除。</p>
<h3>10. docker rm</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker rm [options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div><div class="line">docker rm nginx-<span class="number">01</span> nginx-<span class="number">02</span> db-<span class="number">01</span> db-<span class="number">02</span></div><div class="line"><span class="built_in">sudo</span> docker rm <span class="operator">-l</span> /webapp/redis</div></pre></td></tr></table></figure></p>
<p>-f 强行移除该容器，即使其正在运行；</p>
<p>-l 移除容器间的网络连接，而非容器本身；</p>
<p>-v 移除与容器关联的空间。</p>
<h3>11. docker history</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker history  <span class="string">"o"</span>&gt;[options] &lt;image&gt;</div></pre></td></tr></table></figure></p>
<p>查看指定镜像的创建历史。</p>
<p>--no-trunc 显示完整的提交记录；</p>
<p>-q 仅列出提交记录ID。</p>
<h3>12. docker start|stop|restart</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start|stop <span class="string">"p"</span>&gt;|restart [options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div></pre></td></tr></table></figure></p>
<p>启动、停止和重启一个或多个指定容器。</p>
<p>-a 待完成</p>
<p>-i 启动一个容器并进入交互模式；</p>
<p>-t 10 停止或者重启容器的超时时间（秒），超时后系统将杀死进程。</p>
<h3>13. docker kill</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker kill  <span class="string">"o"</span>&gt;[options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div></pre></td></tr></table></figure></p>
<p>杀死一个或多个指定容器进程。</p>
<p>-s &quot;KILL&quot; 自定义发送至容器的信号。</p>
<h3>14. docker events</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker events [options <span class="string">"o"</span>&gt;]</div><div class="line">docker events --since= <span class="string">"s2"</span>&gt;<span class="string">"20141020"</span></div><div class="line">docker events --until= <span class="string">"s2"</span>&gt;<span class="string">"20120310"</span></div></pre></td></tr></table></figure></p>
<p>从服务器拉取个人动态，可选择时间区间。</p>
<h3>15. docker save</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker save -i <span class="string">"debian.tar"</span></div><div class="line">docker save &gt; <span class="string">"debian.tar"</span></div></pre></td></tr></table></figure></p>
<p>将指定镜像保存成 tar 归档文件， docker load 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
<p>-o &quot;debian.tar&quot; 指定保存的镜像归档。</p>
<h3>16. docker load</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker load [options]</div><div class="line">docker load &lt; debian.tar</div><div class="line">docker load -i <span class="string">"debian.tar"</span></div></pre></td></tr></table></figure></p>
<p>从 tar 镜像归档中载入镜像， docker save 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
<p>-i &quot;debian.tar&quot; 指定载入的镜像归档。</p>
<h3>17. docker export</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">export</span> &lt;container&gt;</div><div class="line">docker <span class="keyword">export</span> nginx-<span class="number">01</span> &gt; export.tar</div></pre></td></tr></table></figure></p>
<p>将指定的容器保存成 tar 归档文件， docker import 的逆操作。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
<h3>18. docker import</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker import url|-  <span class="string">"o"</span>&gt;[repository[:tag <span class="string">"o"</span>&gt;]]</div><div class="line">cat export.tar  <span class="string">"p"</span>&gt;| docker import - imported-nginx:latest</div><div class="line">docker import http://example.com/export.tar</div></pre></td></tr></table></figure></p>
<p>从归档文件（支持远程文件）创建一个镜像， export 的逆操作，可为导入镜像打上标签。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
<h3>19. docker top</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker top &lt;running_container&gt;  <span class="string">"o"</span>&gt;[ps options]</div></pre></td></tr></table></figure></p>
<p>查看一个正在运行容器进程，支持 ps 命令参数。</p>
<h3>20. docker inspect</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker instpect nginx:latest</div><div class="line">docker inspect nginx-container</div></pre></td></tr></table></figure></p>
<p>检查镜像或者容器的参数，默认返回 JSON 格式。</p>
<p>-f 指定返回值的模板文件。</p>
<h3>21. docker pause</h3>
<p>暂停某一容器的所有进程。</p>
<h3>22. docker unpause</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker unpause &lt;container&gt;</div></pre></td></tr></table></figure></p>
<p>恢复某一容器的所有进程。</p>
<h3>23. docker tag</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag [options <span class="string">"o"</span>&gt;] &lt;image&gt;[:tag <span class="string">"o"</span>&gt;] [repository/ <span class="string">"o"</span>&gt;][username/]name <span class="string">"o"</span>&gt;[:tag]</div></pre></td></tr></table></figure></p>
<p>标记本地镜像，将其归入某一仓库。</p>
<p>-f 覆盖已有标记。</p>
<h3>24. docker push</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker push name[:tag <span class="string">"o"</span>&gt;]</div><div class="line">docker push laozhu/nginx:latest</div></pre></td></tr></table></figure></p>
<p>将镜像推送至远程仓库，默认为 Docker Hub 。</p>
<h3>25. docker logs</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker logs [options <span class="string">"o"</span>&gt;] &lt;container&gt;</div><div class="line">docker logs <span class="operator">-f</span> -t --tail= <span class="string">"s2"</span>&gt;<span class="string">"10"</span> insane_babbage</div></pre></td></tr></table></figure></p>
<p>获取容器运行时的输出日志。</p>
<p>-f 跟踪容器日志的最近更新；</p>
<p>-t 显示容器日志的时间戳；</p>
<p>--tail=&quot;10&quot; 仅列出最新10条容器日志。</p>
<h3>26. docker run</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [options <span class="string">"o"</span>&gt;] &lt;image&gt; [ <span class="string">"nb"</span>&gt;command]  <span class="string">"o"</span>&gt;[arg...]</div></pre></td></tr></table></figure></p>
<p>启动一个容器，在其中运行指定命令。</p>
<p>-a stdin 指定标准输入输出内容类型，可选 STDIN/STDOUT / STDERR 三项；</p>
<p>-d 后台运行容器，并返回容器ID；</p>
<p>-i 以交互模式运行容器，通常与 -t 同时使用；</p>
<p>-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p>--name=&quot;nginx-lb&quot; 为容器指定一个名称；</p>
<p>--dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致；</p>
<p>--dns-search example.com 指定容器DNS搜索域名，默认和宿主一致；</p>
<p>-h &quot;mars&quot; 指定容器的hostname；</p>
<p>-e username=&quot;ritchie&quot; 设置环境变量；</p>
<p>--env-file=[] 从指定文件读入环境变量；</p>
<p>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot; 绑定容器到指定CPU运行；</p>
<p>-c 待完成</p>
<p>-m 待完成</p>
<p>--net=&quot;bridge&quot; 指定容器的网络连接类型，支持 bridge /host / none/container:<name|id> 四种类型；</name|id></p>
<p>--link=[] 待完成</p>
<p>--expose=[] 待完成</p>
<h2>详解docker run命令</h2>
<p><code>docker run</code>应该是Docker中最常用的命令了，Docker的官方文档也给予了非常详细的介绍<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>。</p>
<p>Docker在执行时会将相关进程封装到相互隔离的容器(container)中。当执行 docker run时，Docker会启动一个进程，同时给这个进程分配其独占的文件系统，独占的网络资源和以此进程为根进程的进程组。在Docker启动container时加载的Image，或许已经定义好了默认的启动进程，需要exposer的网络端口和其他在Dockerfile中定义好的资源。但使用docker run 都可以重新对这个image进行默认定义。这就是为什么run命令参数比docker其他命令参数都多的原因。</p>
<h3>基本形式</h3>
<p>最基本的docker run命令是如下格式：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="tag">sudo</span> <span class="tag">docker</span> <span class="tag">run</span> <span class="attr_selector">[OPTIONS]</span> <span class="tag">IMAGE</span><span class="attr_selector">[:TAG]</span> <span class="attr_selector">[COMMAND]</span> <span class="attr_selector">[ARG...]</span></div></pre></td></tr></table></figure></p>
<p>如果需要查看[OPTIONS]的详细使用说明，请参考Docker关于OPTIONS的说明。这里仅简要介绍Run所使用到的参数。</p>
<p>OPTIONS总起来说分为两类：</p>
<pre><code>1. 设定操作执行方式：
    1. 决定container的运行方式，前台执行还是后台执行
    2. 设定containerID
    3. 设定network参数
    4. 设定container的CPU和Memory参数
    5. 设定权限(Privileges )和LXC参数
2. 设定image的默认资源，也就是image使用者可以用此命令来覆盖image开发者在build阶段所设定的默认值。</code></pre>
<p>docker run [OPTIONS]可以让image使用者完全控制container的生命周期，允许image使用者覆盖所有image开发者在执行docker build时所设定的参数，甚至也可以修改本身由Docker所控制的内核级参数。</p>
<h3>Operator exclusive options</h3>
<p>当执行docker run时可以设定的资源如下：</p>
<pre><code>*Detached vs Foreground
*Container Identification
*IPC Setting
*Network Settings
*Clean Up (--rm)
*Runtime Constraints on CPU and Memory
*Runtime Privilege, Linux Capabilities, and LXC Configuration</code></pre>
<p>我们依次进行介绍。</p>
<h3>Detached vs foreground</h3>
<p>当我们启动一个container时，首先需要确定这个container是运行在前台模式还是运行在后台模式。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-d=<span class="built_in">false</span>: <span class="type">Detached</span> mode: <span class="type">Run</span> container <span class="keyword">in</span> the background, <span class="built_in">print</span> <span class="keyword">new</span> container id</div></pre></td></tr></table></figure></p>
<h4>Detached (-d)</h4>
<p>如果在docker run 后面追加-d=true或者-d，则containter将会运行在后台模式(Detached mode)。此时所有I/O数据只能通过网络资源或者共享卷组来进行交互。因为container不再监听你执行docker run的这个终端命令行窗口。但你可以通过执行docker attach 来重新挂载这个container里面。需要注意的时，<em>如果你选择执行-d使container进入后台模式，那么将无法配合&quot;--rm&quot;参数</em>。</p>
<h4>Foregroud</h4>
<p>如果在docker run后面没有追加-d参数，则container将默认进入前台模式(Foregroud mode)。Docker会启动这个container，同时将当前的命令行窗口挂载到container的标准输入，标准输出和标准错误中。也就是container中所有的输出，你都可以再当前窗口中查看到。甚至docker可以虚拟出一个TTY窗口，来执行信号中断。这一切都是可以配置的：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">a=[]          　　　　 <span class="symbol">:</span> <span class="constant">Attach</span> to `<span class="constant">STDIN</span>`, `<span class="constant">STDOUT</span>` <span class="keyword">and</span>/<span class="keyword">or</span> `<span class="constant">STDERR</span>`</span></div><div class="line">-<span class="ruby">t=<span class="keyword">false</span>        　　  <span class="symbol">:</span> <span class="constant">Allocate</span> a pseudo-tty</span></div><div class="line">-<span class="ruby">-sig-proxy=<span class="keyword">true</span>　<span class="symbol">:</span> <span class="constant">Proxify</span> all received signal to the process (non-<span class="constant">TTY</span> mode only)</span></div><div class="line">-<span class="ruby">i=<span class="keyword">false</span>        　　  <span class="symbol">:</span> <span class="constant">Keep</span> <span class="constant">STDIN</span> open even <span class="keyword">if</span> <span class="keyword">not</span> attached</span></div></pre></td></tr></table></figure></p>
<p>如果在执行run命令时没有指定-a，那么docker默认会挂载所有标准数据流，包括输入输出和错误。你可以特别指定挂载哪个标准流。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -<span class="operator">a</span> <span class="keyword">stdin</span> -<span class="operator">a</span> <span class="keyword">stdout</span> -i -t ubuntu /bin/bash (只挂载标准输入输出)</div></pre></td></tr></table></figure></p>
<p>对于执行容器内的交互式操作，例如shell脚本。我们必须使用 -i -t来申请一个控制台同容器进行数据交互。但是当通过管道同容器进行交互时，就不能使用-t. 例如这个命令<code>echo test | docker run -i busybox cat</code></p>
<h3>Container identification</h3>
<h4>Name (--name)</h4>
<p>给container命名有三种方式：</p>
　　1. 使用UUID长命名(&quot;f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778&quot;)
　　2. 使用UUID短命令(&quot;f78375b1c487&quot;)
<p>　　3. 使用Name(&quot;evil_ptolemy&quot;)</p>
<p>这个UUID标示是由Docker deamon来生成的。如果你在执行docker run时没有指定 --name，那么deamon会自动生成一个随机数字符串当做UUID。但是对于一个container来说有个name会非常方便，因为你可以当你需要link其它容器时或者其他类似需要区分其它容器时，使用容器名称会简化操作。无论container运行在前台或者后台，这个名字都是有效的。</p>
<h4>PID equivalent</h4>
<p>当你在运行docker时有自动化的要求，那么你可以要求Docker将containerID 输出到你指定的文件中(PIDfile).这种行为就类似于有些应用程序将自身ID输出到文件中，方便后续脚本操作。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--cidfile=<span class="string">""</span>: <span class="keyword">Write</span> the container ID to the <span class="keyword">file</span></div></pre></td></tr></table></figure></p>
<h4>Image[:tag]</h4>
<p>当一个image的名称不足以分辨这个image所代表的含义时，你可以在命令中通过添加<code>image[:tag]</code>来指定特定版本的image以运行容器。例如: <code>docker run ubuntu:14.04</code></p>
<h3>IPC Settings</h3>
<p>默认情况下，所有容器都开启了IPC命名空间。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--ipc=<span class="string">""</span>  : Set the IPC mode <span class="keyword">for</span> the container,</div><div class="line">            <span class="string">'container:&lt;name|id&gt;'</span>: reuses another containe<span class="string">r's IPC namespace</span></div><div class="line">            'host<span class="string">': use the host'</span>s IPC namespace inside the container</div></pre></td></tr></table></figure></p>
<p>IPC(POSIX/SysV IPC)命名空间提供了相互隔离的命名共享内存，信号灯变量和消息队列。</p>
<p>共享内存可以提高进程数据交互速度。共享内存一般用在database和高性能应用(C/OpenMPI, C++/using boost libraries)上或者金融服务上。如果需要容器里面部署上述类型的应用，那么就应该在多个容器直接采取共享内存了。</p>
<h3>Network settings</h3>
<p>默认情况下，所有的container都开启了网络接口，同时可以接受任何外部的数据请求。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--dns=[]         : Set custom dns servers <span class="keyword">for</span> the container</div><div class="line">--net=<span class="string">"bridge"</span>   : Set the Network mode <span class="keyword">for</span> the container</div><div class="line">                              <span class="string">'bridge'</span>: creates a new network stack <span class="keyword">for</span> the container on the docker bridge</div><div class="line">                              <span class="string">'none'</span>: no networking <span class="keyword">for</span> this container</div><div class="line">                              <span class="string">'container:&lt;name|id&gt;'</span>: reuses another container network stack</div><div class="line">                              <span class="string">'host'</span>: use the host network stack inside the container</div><div class="line">--add-host=<span class="string">""</span>    : Add a line to /etc/hosts (host:IP)</div><div class="line">--mac-address=<span class="string">""</span> : Sets the containe<span class="string">r's Ethernet device'</span>s MAC address</div></pre></td></tr></table></figure></p>
<p>可以通过docker run --net none 来关闭网络接口，此时将关闭所有网络数据的输入输出。这时，你只能通过STDIN,STDOUT或者files来完成I/O操作了。默认情况下，container使用host的DNS设置。但是你可以通过--dns来覆盖container内的dns设置。同时docker会对containter默认生成一个MAC地址，你可以通过--mac-address 12:34:56:78:9a:bc 来设置你自己的mac地址。</p>
<p>以下是网络设置中常用的参数：</p>
<pre><code>* none 关闭container内的网络连接
* bridge 通过veth接口来连接contianer 默认选项
* host 允许container使用host的网络堆栈信息。 注意：这种方式将允许container访问host中类似D-BUS之类的系统服务，所以被认为是不安全的。
* container 使用另外一个container的网络堆栈信息。</code></pre>
<h4>None：</h4>
<p>将网络模式设置为none时，这个container将不允许访问任何外部router。这个container内部只会有一个loopback接口，而且不存在任何可以访问外部网络的router。</p>
<h4>Bridge：</h4>
<p>Docker默认是将container设置为bridge模式。此时在host上面讲存在一个docker0的网络接口，同时会针对container创建一对veth接口。其中一个veth接口是在host充当网卡桥接作用，另外一个veth接口存在于container的命名空间中，并且指向container的loopback。Docker会自动给这个container分配一个IP，并且将container内的数据通过桥接转发到外部。</p>
<h4>Host：</h4>
<p>当网络模式设置为host时，这个container将完全共享host的网络堆栈。host所有的网络接口将完全对container开放。container的主机名也会存在于host的hostname中。这时，container所有对外暴露的port和对其它container的link，将完全失效。</p>
<h4>Container：</h4>
<p>当网络模式设置为Container时，这个container将完全复用另外一个container的网络堆栈。同时使用时这个container的名称必须要符合下面的格式：--net container:<name|id>.</name|id></p>
<p>比如当前有一个绑定了本地地址localhost的redis container。如果另外一个container需要复用这个网络堆栈，则需要如下操作：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -d <span class="comment">--name redis example/redis --bind 127.0.0.1</span></div><div class="line">$ # <span class="keyword">use</span> the redis container<span class="attribute">'s</span> network stack <span class="keyword">to</span> <span class="keyword">access</span> localhost</div><div class="line">$ sudo docker run <span class="comment">--rm -ti --net container:redis example/redis-cli -h 127.0.0.1</span></div></pre></td></tr></table></figure></p>
<h4>Managing /etc/hosts</h4>
<p>当一个container再启动时，在/etc/hosts文件里面将会存在包括localhost在内的一些hostname信息。我们也可以使用--add-host这个参数来动态添加/etc/hosts里面的数据。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ /docker run -ti --add-host db-<span class="keyword">static</span>:<span class="number">86.75</span>.<span class="number">30.9</span> ubuntu cat /etc/hosts</div><div class="line"><span class="number">172.17</span>.<span class="number">0.22</span>     <span class="number">09</span>d03f76bf2c</div><div class="line">fe00::<span class="number">0</span>         ip6-localnet</div><div class="line">ff00::<span class="number">0</span>         ip6-mcastprefix</div><div class="line">ff02::<span class="number">1</span>         ip6-allnodes</div><div class="line">ff02::<span class="number">2</span>         ip6-allrouters</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>       localhost</div><div class="line">::<span class="number">1</span>             localhost ip6-localhost ip6-loopback</div><div class="line"><span class="number">86.75</span>.<span class="number">30.9</span>      db-<span class="keyword">static</span></div></pre></td></tr></table></figure></p>
<h4>Clean up (--rm)</h4>
<p>默认情况下，每个container在退出时，它的文件系统也会保存下来。这样一方面调试会方便些，因为你可以通过查看日志等方式来确定最终状态。另外一方面，你也可以保存container所产生的数据。但是当你仅仅需要短期的运行一个前台container，这些数据同时不需要保留时。你可能就希望docker能在container结束时自动清理其所产生的数据。</p>
<p>这个时候你就需要--rm这个参数了。 注意：<em>--rm 和 -d不能共用！</em></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--rm=<span class="literal">false</span>: <span class="type">Automatically</span> remove the container <span class="keyword">when</span> it exits (incompatible <span class="keyword">with</span> -d)</div></pre></td></tr></table></figure></p>
<h3>Security configuration</h3>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:user:USER"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label user <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:role:ROLE"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label role <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:type:TYPE"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label type <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:level:LEVEL"</span> <span class="symbol">:</span> <span class="constant">Set</span> the label level <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:disable"</span>     <span class="symbol">:</span> <span class="constant">Turn</span> off label confinement <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-secutity-opt=<span class="string">"apparmor:PROFILE"</span>  <span class="symbol">:</span> <span class="constant">Set</span> the apparmor profile to be applied  to the container</span></div></pre></td></tr></table></figure></p>
<p>你可以通过--security-opt修改container中默认的schema标签。比如说，对于一个MLS系统来说(MLS可能是指Multiple Listing System，本人不确定.)，你可以指定MCS/MLS级别。</p>
<p>下面的这些级别将允许多个container共享content。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:level</span><span class="pseudo">:s0</span><span class="pseudo">:c100</span>,<span class="tag">c200</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">fedora</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p>如果是MLS系统，则使用下面的命令：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:level</span><span class="pseudo">:TopSecret</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">rhel7</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p>使用下面的命令可以在container内禁用安全策略：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --security-<span class="keyword">opt</span> labe<span class="variable">l:disable</span> -<span class="keyword">i</span> -<span class="keyword">t</span> fedora bash</div></pre></td></tr></table></figure></p>
<p>如果你需要在container内执行更为严格的安全策略，那么你可以为这个container指定一个策略替代。比如你可以使用下面的命令来指定container只允许监听apache port</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:type</span><span class="pseudo">:svirt_apache_t</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">centos</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p><em>注意：此时，在你的host环境中必须存在一个名为svirt_apache_t的安全策略。</em></p>
<h3>Runtime constraints on CPU and memory</h3>
<p>下面的参数可以用来调整container内的性能参数。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">m=<span class="string">""</span><span class="symbol">:</span> <span class="constant">Memory</span> limit (<span class="symbol">format:</span> &lt;number&gt;&lt;optional unit&gt;, where unit = b, k, m <span class="keyword">or</span> g)</span></div><div class="line">-<span class="ruby">c=<span class="number">0</span> <span class="symbol">:</span> <span class="constant">CPU</span> shares (relative weight)</span></div></pre></td></tr></table></figure></p>
<p>通过docker run -m 可以很方便的调整container所使用的内存资源。如果host支持swap内存，那么使用-m可以设定比host物理内存还大的值。</p>
<p>同样，通过-c 可以调整container的cpu优先级。默认情况下，所有的container享有相同的cpu优先级和cpu调度周期。但你可以通过Docker来通知内核给予某个或某几个container更多的cpu计算周期。</p>
<p>默认情况下，使用-c或者--cpu-shares 参数值为0，可以赋予当前活动container 1024个cpu共享周期。这个0值可以针对活动的container进行修改来调整不同的cpu循环周期。</p>
<p>比如，我们使用-c或者--cpu-shares =0启动了C0，C1，C2三个container，使用-c/--cpu-shares=512启动了C3.这时，C0，C1，C2可以100%的使用CPU资源(1024)，但C3只能使用50%的CPU资源(512)。如果这个host的OS是时序调度类型的，每个CPU时间片是100微秒，那么C0，C1，C2将完全使用掉这100微秒，而C3只能使用50微秒。</p>
<h3>Runtime privilege, Linux capabilities, and LXC configuration</h3>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-cap-<span class="symbol">add:</span> <span class="constant">Add</span> <span class="constant">Linux</span> capabilities</span></div><div class="line">-<span class="ruby">-cap-<span class="symbol">drop:</span> <span class="constant">Drop</span> <span class="constant">Linux</span> capabilities</span></div><div class="line">-<span class="ruby">-privileged=<span class="symbol">false:</span> <span class="constant">Give</span> extended privileges to this container</span></div><div class="line">-<span class="ruby">-device=[]<span class="symbol">:</span> <span class="constant">Allows</span> you to run devices inside the container without the --privileged flag.</span></div><div class="line">-<span class="ruby">-lxc-conf=[]<span class="symbol">:</span> (lxc exec-driver only) <span class="constant">Add</span> custom lxc options --lxc-conf=<span class="string">"lxc.cgroup.cpuset.cpus = 0,1"</span></span></div></pre></td></tr></table></figure></p>
<p>默认情况下，Docker的container是没有特权的。例如不能再container里面再启动一个container。这是因为默认情况下container是不能访问任何其他设备的。但是通过&quot;privileged&quot;，container就拥有了访问任何其他设备的权限。</p>
<p>当操作者执行docker run --privileged时，Docker将拥有访问host所有设备的权限，同时Docker也会在apparmor或者selinux做一些设置，使container可以容易的访问那些运行在container外部的设备。你可以访问Docker blog来获取更多关于--privileged的用法。</p>
<p>同时，你也可以限制container只能访问一些指定的设备。下面的命令将允许container只访问一些特定设备：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --device=/dev/snd:/dev/snd <span class="keyword">...</span></div></pre></td></tr></table></figure></p>
<p>默认情况下，container拥有对设备的读，写，创建设备文件的权限。使用:rwm来配合--device，你可以控制这些权限。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"></div><div class="line"><span class="constant">Command</span> (m <span class="keyword">for</span> help)<span class="symbol">:</span> q</div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:r</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"><span class="constant">You</span> will <span class="keyword">not</span> be able to write the partition table.</div><div class="line"></div><div class="line"><span class="constant">Command</span> (m <span class="keyword">for</span> help)<span class="symbol">:</span> q</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:w</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line">    crash....</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:m</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"><span class="symbol">fdisk:</span> unable to open /dev/<span class="symbol">xvdc:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div></pre></td></tr></table></figure></p>
<p>使用--cap-add和--cap-drop，配合--privileged，你可以更细致的控制container。默认使用这两个参数的情况下，container拥有一系列的内核修改权限。这两个参数都支持all值，如果你想让某个container拥有除了MKNOD之外的所有内核权限，那么可以执行下面的命令：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --cap-add=ALL --cap-drop=MKNOD <span class="keyword">...</span></div></pre></td></tr></table></figure></p>
<p>如果需要修改网络接口数据，那么就建议使用--cap-add=NET_ADMIN，而不是使用--privileged。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker run -t -i --rm  ubuntu:<span class="number">14.04</span> <span class="literal">ip</span> link <span class="keyword">add</span> dummy0 type dummy</div><div class="line">RTNETLINK answers: Operation <span class="keyword">not</span> permitted</div><div class="line">$ docker run -t -i --rm --cap-<span class="keyword">add</span>=NET_ADMIN ubuntu:<span class="number">14.04</span> <span class="literal">ip</span> link <span class="keyword">add</span> dummy0 type dummy</div></pre></td></tr></table></figure></p>
<p>如果要挂载一个FUSE文件系统，那么就需要--cap-add和--device了。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker run --rm -it --cap-add <span class="constant">SYS_ADMIN</span> sshfs sshfs sven<span class="variable">@10</span>.<span class="number">10.10</span>.<span class="number">20</span><span class="symbol">:/home/sven</span> /mnt</div><div class="line"><span class="symbol">fuse:</span> failed to open /dev/<span class="symbol">fuse:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div><div class="line"><span class="variable">$ </span>docker run --rm -it --device /dev/fuse sshfs sshfs sven<span class="variable">@10</span>.<span class="number">10.10</span>.<span class="number">20</span><span class="symbol">:/home/sven</span> /mnt</div><div class="line"><span class="symbol">fusermount:</span> mount <span class="symbol">failed:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div><div class="line"><span class="variable">$ </span>docker run --rm -it --cap-add <span class="constant">SYS_ADMIN</span> --device /dev/fuse sshfs</div><div class="line"><span class="comment"># sshfs sven@10.10.10.20:/home/sven /mnt</span></div><div class="line"><span class="constant">The</span> authenticity of host <span class="string">'10.10.10.20 (10.10.10.20)'</span> can<span class="string">'t be established.</span></div><div class="line">ECDSA key fingerprint is 25:34:85:75:25:b0:17:46:05:19:04:93:b5:dd:5f:c6.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">sven@10.10.10.20's <span class="symbol">password:</span></div><div class="line">root<span class="variable">@30aa0cfaf1b5</span><span class="symbol">:/</span><span class="comment"># ls -la /mnt/src/docker</span></div><div class="line">total <span class="number">1516</span></div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span>08 .</div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">11</span><span class="symbol">:</span><span class="number">46</span> ..</div><div class="line">-rw-rw-r-- <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>     <span class="number">16</span> <span class="constant">Oct</span>  <span class="number">8</span> <span class="number">00</span><span class="symbol">:</span>09 .dockerignore</div><div class="line">-rwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>    <span class="number">464</span> <span class="constant">Oct</span>  <span class="number">8</span> <span class="number">00</span><span class="symbol">:</span>09 .drone.yml</div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span><span class="number">11</span> .git</div><div class="line">-rw-rw-r-- <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>    <span class="number">461</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span>08 .gitignore</div></pre></td></tr></table></figure></p>
<p>如果docker启动时选择了lxc-driver，(docker -d --exec-driver=lxc)。那么就可以使用--lxc-conf来设定LXC参数。但需要注意的是，未来host上面的docker deamon有可能不会使用LXC，所以这些参数有可能会包含一些没有实现的配置功能。那么意味着，操作者在操作这些参数时必须要十分熟悉LXC。</p>
<p><em>特别注意：当你使用--lxc-conf修改container参数后，docker deamon将不再管理这些参数，那么必须由操作者自行进行管理。比如说，你使用--lxc-conf修改了container的IP地址，那么在/etc/hosts里面是不会自动体现的，需要你自行维护。</em></p>
<h3>Overriding Dockerfile image defaults</h3>
<p>当开发者使用Dockerfile进行build或者使用commit提交container时，开发人员可以设定一些image默认参数。</p>
<p>这些参数中，有四个是无法被覆盖的：FROM，MAINTAINER，RUN和ADD。其余参数都可以通过docker run进行覆盖。我们将介绍如何对这些参数进行覆盖。</p>
<pre><code>* CMD (Default Command or Options)
* ENTRYPOINT (Default Command to Execute at Runtime)
* EXPOSE (Incoming Ports)
* ENV (Environment Variables)
* VOLUME (Shared Filesystems)
* USER
* WORKDIR</code></pre>
<h4>CMD (default command or options)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="tag">sudo</span> <span class="tag">docker</span> <span class="tag">run</span> <span class="attr_selector">[OPTIONS]</span> <span class="tag">IMAGE</span><span class="attr_selector">[:TAG]</span> <span class="attr_selector">[COMMAND]</span> <span class="attr_selector">[ARG...]</span></div></pre></td></tr></table></figure></p>
<p>这条命令中的COMMAND部分是可选的。因为这个IMAGE在build时，开发人员可能已经设定了默认执行的command。作为操作人员，你可以使用上面命令中新的command来覆盖旧的command。</p>
<p>如果image中设定了ENTRYPOINT，那么命令中的CMD也可以作为参数追加到ENTRYPOINT中。</p>
<h4>ENTRYPOINT (default command to execute at runtime)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--entrypoint=<span class="string">""</span>: Overwrite the <span class="keyword">default</span> entrypoint <span class="keyword">set</span> <span class="keyword">by</span> the image</div></pre></td></tr></table></figure></p>
<p>这个ENTRYPOINT和COMMAND类似，它指定了当container执行时，需要启动哪些进程。相对COMMAND而言，ENTRYPOINT是比较困难进行覆盖的，这个ENTRYPOINT可以让container设定默认启动行为，所以当container启动时，你可以执行任何一个二进制可执行程序。你也可以通过COMMAND给这个ENTRYPOINT传递参数。但当你需要再container中执行其他进程时，你就可以指定其他ENTRYPOINT了。</p>
<p>下面就是一个例子，container可以在启动时自动执行shell，然后启动其它进程。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /bin/bash example/redis</span></div><div class="line">#<span class="keyword">or</span> two examples <span class="keyword">of</span> how <span class="keyword">to</span> pass more parameters <span class="keyword">to</span> that ENTRYPOINT:</div><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /bin/bash example/redis -c ls -l</span></div><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /usr/bin/redis-cli example/redis --help</span></div></pre></td></tr></table></figure></p>
<h4>EXPOSE (incoming ports)</h4>
<p>Dockefile在网络方面除了提供一个EXPOSE之外，没有提供其它选项。下面这些参数可以覆盖Dockefile的expose默认值：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--expose=[]: Expose a port or a range of ports from the container</span></div><div class="line">            <span class="keyword">without</span> publishing <span class="keyword">it</span> <span class="built_in">to</span> your host</div><div class="line">-P=<span class="constant">false</span>   : Publish all exposed ports <span class="built_in">to</span> <span class="operator">the</span> host interfaces</div><div class="line">-p=[]      : Publish <span class="operator">a</span> container᾿s port <span class="built_in">to</span> <span class="operator">the</span> host (<span class="built_in">format</span>:</div><div class="line">             ip:hostPort:containerPort | ip::containerPort |</div><div class="line">             hostPort:containerPort | containerPort)</div><div class="line">             (use <span class="string">'docker port'</span> <span class="built_in">to</span> see <span class="operator">the</span> actual mapping)</div><div class="line"><span class="comment">--link=""  : Add link to another container (name:alias)</span></div></pre></td></tr></table></figure></p>
<p>--expose可以让container接受外部传入的数据。container内监听的port不需要和外部host的port相同。比如说在container内部，一个HTTP服务监听在80端口，对应外部host的port就可能是49880.</p>
<p>操作人员可以使用--expose，让新的container访问到这个container。具体有三个方式：</p>
　　1. 使用-p来启动container。
　　2. 使用-P来启动container。
<p>　　3. 使用--link来启动container。</p>
<p>如果使用-p或者-P，那么container会开发部分端口到host，只要对方可以连接到host，就可以连接到container内部。当使用-P时，docker会在host中随机从49153 和65535之间查找一个未被占用的端口绑定到container。你可以使用docker port来查找这个随机绑定端口。</p>
<p>当你使用--link方式时，作为客户端的container可以通过私有网络形式访问到这个container。同时Docker会在客户端的container中设定一些环境变量来记录绑定的IP和PORT。</p>
<h4>ENV (环境变量)</h4>
<table>
<thead>
<tr class="header">
<th align="left">Variable</th>
<th align="left">Variable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">HOME</td>
<td align="left">Set based on the value of USER</td>
</tr>
<tr class="even">
<td align="left">HOSTNAME</td>
<td align="left">The hostname associated with the container</td>
</tr>
<tr class="odd">
<td align="left">PATH</td>
<td align="left">Includes popular directories, such as : /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</td>
</tr>
<tr class="even">
<td align="left">TERM</td>
<td align="left">xterm if the container is allocated a psuedo-TTY</td>
</tr>
</tbody>
</table>
<p>当container启动时，会自动在container中初始化这些变量。</p>
<p>操作人员可以通过-e来设定任意的环境变量。甚至覆盖已经存在的环境变量，或者是在Dockerfile中通过ENV设定的环境变量。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run <span class="operator">-e</span> <span class="string">"deep=purple"</span> --rm ubuntu /bin/bash -c <span class="keyword">export</span></div><div class="line"><span class="keyword">declare</span> -x HOME=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x HOSTNAME=<span class="string">"85bc26a0e200"</span></div><div class="line"><span class="keyword">declare</span> -x OLDPWD</div><div class="line"><span class="keyword">declare</span> -x PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line"><span class="keyword">declare</span> -x PWD=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x SHLVL=<span class="string">"1"</span></div><div class="line"><span class="keyword">declare</span> -x container=<span class="string">"lxc"</span></div><div class="line"><span class="keyword">declare</span> -x deep=<span class="string">"purple"</span></div></pre></td></tr></table></figure></p>
<p>操作人员可以通过-h来设定hostname。也可以使用&quot;--link name:alias&quot;来设定环境变量，当使用--link后，docker将根据后面提供的IP和PORT信息来连接服务端container。下面就是使用redis的例子：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># <span class="operator"><span class="keyword">Start</span> the service container, named redis-name</span></div><div class="line">$ sudo docker run -d <span class="comment">--name redis-name dockerfiles/redis</span></div><div class="line"><span class="number">4241164</span>edf6f5aca5b0e9e4c9eccd899b0b8080c64c0cd26efe02166c73208f3</div><div class="line"></div><div class="line"># The redis-name container exposed port <span class="number">6379</span></div><div class="line">$ sudo docker ps</div><div class="line">CONTAINER ID        IMAGE                      COMMAND                CREATED             <span class="keyword">STATUS</span>              PORTS               <span class="keyword">NAMES</span></div><div class="line"><span class="number">4241164</span>edf6f        $ dockerfiles/redis:latest   /redis-stable/src/re   <span class="number">5</span> seconds ago       Up <span class="number">4</span> seconds        <span class="number">6379</span>/tcp            redis-name</div><div class="line"></div><div class="line"># Note that there <span class="keyword">are</span> <span class="keyword">no</span> <span class="keyword">public</span> ports exposed since we didn᾿t <span class="keyword">use</span> -p <span class="keyword">or</span> -P</div><div class="line">$ sudo docker port <span class="number">4241164</span>edf6f <span class="number">6379</span></div><div class="line"><span class="number">2014</span>/<span class="number">01</span>/<span class="number">25</span> <span class="number">00</span>:<span class="number">55</span>:<span class="number">38</span> Error: <span class="keyword">No</span> <span class="keyword">public</span> port <span class="string">'6379'</span> published <span class="keyword">for</span> <span class="number">4241164</span>edf6f</div></pre></td></tr></table></figure></p>
<p>你使用--link后，就可以获取到关于Redis Container的相关信息。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run <span class="comment">--rm --link redis-name:redis_alias --entrypoint /bin/bash dockerfiles/redis -c export</span></div><div class="line"><span class="operator"><span class="keyword">declare</span> -x HOME=<span class="string">"/"</span></span></div><div class="line"><span class="keyword">declare</span> -x HOSTNAME=<span class="string">"acda7f7b1cdc"</span></div><div class="line"><span class="keyword">declare</span> -x OLDPWD</div><div class="line"><span class="keyword">declare</span> -x PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line"><span class="keyword">declare</span> -x PWD=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_NAME=<span class="string">"/distracted_wright/redis"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT=<span class="string">"tcp://172.17.0.32:6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP=<span class="string">"tcp://172.17.0.32:6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_ADDR=<span class="string">"172.17.0.32"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_PORT=<span class="string">"6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_PROTO=<span class="string">"tcp"</span></div><div class="line"><span class="keyword">declare</span> -x SHLVL=<span class="string">"1"</span></div><div class="line"><span class="keyword">declare</span> -x container=<span class="string">"lxc"</span></div><div class="line">#<span class="keyword">And</span> we can <span class="keyword">use</span> that information <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">from</span> another container <span class="keyword">as</span> a client:</div><div class="line">$ sudo docker run -i -t <span class="comment">--rm --link redis-name:redis_alias --entrypoint /bin/bash dockerfiles/redis -c '/redis-stable/src/redis-cli -h $REDIS_ALIAS_PORT_6379_TCP_ADDR -p $REDIS_ALIAS_PORT_6379_TCP_PORT'</span></div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.32</span>:<span class="number">6379</span>&gt;</div></pre></td></tr></table></figure></p>
<p>Docker也会将这个alias的IP地址写入到/etc/hosts文件中。然后你就可以通过别名来访问link后的container。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker <span class="command">run</span> -d <span class="comment">--name servicename busybox sleep 30</span></div><div class="line">$ sudo docker <span class="command">run</span> -i -t <span class="comment">--link servicename:servicealias busybox ping -c 1 servicealias</span></div></pre></td></tr></table></figure></p>
<p>如果你重启了源container(servicename)，相关联的container也会同步更新/etc/hosts。</p>
<h4>VOLUME (shared filesystems)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-v=[]: Create a bind mount <span class="keyword">with</span>: [host-dir]:[container-dir]:[rw|ro].</div><div class="line">       <span class="keyword">If</span> <span class="string">"container-dir"</span> <span class="keyword">is</span> missing, <span class="keyword">then</span> docker creates a <span class="keyword">new</span> volume.</div><div class="line">--volumes-<span class="keyword">from</span>=<span class="string">""</span>: Mount all volumes <span class="keyword">from</span> the given container(s)</div></pre></td></tr></table></figure></p>
<p>关于volume参数，可以再 Managing data in containers 查看详细说明。需要注意的是开发人员可以在Dockerfile中设定多个volume，但是只能由操作人员设置container直接的volume访问。</p>
<h4>USER</h4>
<p>container中默认的用户是root。但是开发人员创建新的用户之后，这些新用户也是可以使用的。开发人员可以通过Dockerfile的USER设定默认的用户，操作人员可以通过&quot;-u &quot;来覆盖这些参数。</p>
<h4>WORKDIR</h4>
<p>container中默认的工作目录是根目录(/)。开发人员可以通过Dockerfile的WORKDIR来设定默认工作目录，操作人员可以通过&quot;-w&quot;来覆盖默认的工作目录。</p>
<h2>docker create与docker run的区别</h2>
<p>docker create表示新增一个容器，但是并不启动；docker run表示新增一个容器，并启动运行，直到运行结束。参照容器的生命周期<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>，如下图，</p>
<p><img src="http://7xpbnt.com1.z0.glb.clouddn.com/docker-architecture-v12-15-638.jpg"></p>
<p>详细来说，docker create只是新增一个容器，并进入容器生命周期中的created状态；而docker run不但新增一个容器，还立刻start并进入running状态，如运行过程中没有被pause或者kill，会一直运行到程序结束，容器进入stopped状态。因此，docker create命令没有-d参数，而docker run有。在docker run中，-d参数表示后台运行容器，而对于docker create来讲，仅仅只创建了容器，容器并未开始运行，因此也不存在所谓后台运行的概念，因此，docker create没有-d参数。</p>
<h2>镜像与容器存放的路径</h2>
<p>镜像的存放路径可以看我的另一篇文章《Docker入门介绍》中有提到，在<code>/var/lib/docker</code>下。具体细节来说，一些镜像本身信息相关的文件放在<code>./graph</code>下，容器相关的设置，如一些网络（eg，ip、hostname、hosts等）、unix mq、unix共享内存等信息放在<code>./containers</code>下，镜像本身的文件和容器相关的文件都放在该目录下的<code>./aufs/diff</code>目录下。该目录下有很多以镜像id和容器id命名的目录，每个目录下都是镜像与容器本身的文件。</p>
<h2>常用docker命令实践</h2>
<p>由于docker需要使用root权限，以下命令如无特别说明，均使用root用户执行，运行环境是Ubuntu 14.04 LTS。</p>
<h3>搭建docker registry</h3>
<p>docker hub是最大的共有docker镜像仓库，但是对公司内部，往往需要自己的私有仓库，这就是docker registry<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>。搭建registry很简单，只要使用以下命令从docker hub上拉一个镜像下来即可，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">docker</span> <span class="tag">run</span> <span class="tag">-d</span> <span class="tag">-p</span> 5000<span class="pseudo">:5000</span> <span class="tag">--name</span> <span class="tag">registry</span> <span class="tag">registry</span><span class="pseudo">:2</span></div></pre></td></tr></table></figure></p>
<p>这样，就在本地的5000端口开了一个registry的服务，可以通过localhost、或本机ip来访问该服务。为了访问ip统一，可以通过修改hosts来达到访问一致，例如，在hosts中增加一行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&lt;docker registry ip&gt;</span>   reg-server</span></div></pre></td></tr></table></figure></p>
<p>还需要在docker的配置文件<code>/etc/default/docker</code>中添加参数<code>DOCKER_OPTS=&quot;--insecure-registry reg-server:5000&quot;</code>，本文使用的是Ubuntu，如果是Centos的话，需要修改<code>/etc/sysconfig/docker</code>。</p>
<p>这样，以后就可以通过访问<code>reg-server</code>来访问该registry，如果registry地址发生变化，也只需要修改hosts文件中的地址就能及时适配。registry的使用与docker hub类似，将在后文中介绍。</p>
<h3>下载镜像和运行容器</h3>
<p>假设我们要运行busybox这个镜像，这是一个最小linux环境的镜像，可以使用<code>docker pull</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker pull busybox</span></div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/busybox</div><div class="line">c00ef186408b: Pull complete </div><div class="line">ac6a7980c6c2: Pull complete </div><div class="line">Digest: sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> busybox:latest</div></pre></td></tr></table></figure></p>
<p>使用<code>docker pull</code>的时候，一个命令只能下载一个镜像，但是可以运行多个命令同时下载，这对于需要一次下载多个镜像的情况很有用。</p>
<p>简单的运行其中的某个命令，只要使用<code>docker run</code>即可，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=<span class="number">0</span>ac2c8dee5a9</div><div class="line">HOME=/root</div></pre></td></tr></table></figure></p>
<p>如果需要后台运行的话，可以使用<code>-d</code>参数，其他<code>docker run</code>的参数可参考上文。</p>
<h3>镜像和容器维护</h3>
<p>假设当前系统中下载了多个镜像，可以用<code>docker image</code>查看现有镜像，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox             latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>这里只列出了最上层的镜像，如果需要查看所有镜像的话，需要<code>-a</code>参数；如果需要查看完整镜像id，需要<code>--no-trunc=true</code>参数；如果只列出镜像id，其他信息不列出的话，需要使用<code>-q</code>参数。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images -a -q --no-trunc=true |wc -l</span></div><div class="line"><span class="number">66</span></div><div class="line"></div><div class="line"><span class="comment"># docker images -q --no-trunc=true </span></div><div class="line">a07681abeb6<span class="built_in">cd</span>68402477f783d994145137146de3911e42b99f605cecb3e138e</div><div class="line"><span class="number">5328</span>fdfe9b8e0c5a19a0773f3e29f9002d444f86521f8f61f3fcb8216ad5287a</div><div class="line">af28fa31b54b2e45d53e80c5a7cbfd2693f198fdb8ba53d44d8a432832ad1012</div><div class="line">ac6a7980c6c2fb4d29e406efb4f9784b3c67e161eb68a97ffb428d07e3e97693</div><div class="line"><span class="number">0643</span>f0c7d17d348881b2dab88cfdb57ad86dcf32ea22bd0b2<span class="built_in">cd</span>0957b6c7ab8c3</div><div class="line"><span class="number">975</span>b84d108f1024953937167506c2935a081c8c55ae9e9f7b7deee118605367f</div></pre></td></tr></table></figure></p>
<p>如果需要列出容器，可以使用<code>docker ps</code>，默认情况下列出正在运行的容器。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run -d redis redis-server</span></div><div class="line"><span class="number">7</span>d57630f67d10346b2583e7950ce7c55a4225475c5d5a0265682aad83611946d</div><div class="line"></div><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">11</span> seconds ago      Up <span class="number">10</span> seconds       <span class="number">6379</span>/tcp            small_torvalds</div></pre></td></tr></table></figure></p>
<p><code>-a</code>参数可以列出所有容器，包括已退出运行的容器；<code>-s</code>参数可以列出容器的大小，比较有用；<code>--before=</code>和<code>--since=</code>参数可以列出在某个容器之前和之后运行的容器，参数值是容器id。<code>docker ps</code>也有<code>-q</code>和<code>--no-trunc=true</code>参数，含义与<code>docker images</code>的相同。具体细节如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a -s</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES                SIZE</div><div class="line"><span class="number">800</span>f0acc667c        tomcat              <span class="string">"java -version"</span>          <span class="number">35</span> seconds ago      Exited (<span class="number">0</span>) <span class="number">34</span> seconds ago                       tender_mietner       <span class="number">0</span> B (virtual <span class="number">346.2</span> MB)</div><div class="line"><span class="number">39</span>ea34d89ea3        hello-world         <span class="string">"/hello"</span>                 <span class="number">2</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">2</span> minutes ago                        agitated_blackwell   <span class="number">0</span> B (virtual <span class="number">972</span> B)</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">28</span> minutes ago      Up <span class="number">28</span> minutes               <span class="number">6379</span>/tcp            small_torvalds       <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div><div class="line"><span class="number">0</span>ac2c8dee5a9        busybox             <span class="string">"env"</span>                    <span class="number">52</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">52</span> minutes ago                       cocky_ritchie        <span class="number">0</span> B (virtual <span class="number">1.113</span> MB)</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a -s --before=800f0acc667c --since=0ac2c8dee5a9</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES                SIZE</div><div class="line"><span class="number">39</span>ea34d89ea3        hello-world         <span class="string">"/hello"</span>                 <span class="number">3</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">3</span> minutes ago                       agitated_blackwell   <span class="number">0</span> B (virtual <span class="number">972</span> B)</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">28</span> minutes ago      Up <span class="number">28</span> minutes              <span class="number">6379</span>/tcp            small_torvalds       <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div></pre></td></tr></table></figure></p>
<p>如果想删除容器，可以使用<code>docker rm</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker rm 800f0acc667c 39ea34d89ea3</span></div><div class="line"><span class="number">800</span>f0acc667c</div><div class="line"><span class="number">39</span>ea34d89ea3</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a -s</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES               SIZE</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">29</span> minutes ago      Up <span class="number">29</span> minutes               <span class="number">6379</span>/tcp            small_torvalds      <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div><div class="line"><span class="number">0</span>ac2c8dee5a9        busybox             <span class="string">"env"</span>                    <span class="number">54</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">54</span> minutes ago                       cocky_ritchie       <span class="number">0</span> B (virtual <span class="number">1.113</span> MB)</div></pre></td></tr></table></figure></p>
<p><code>-f</code>参数可以强行删除容器，即使容器在运行。<code>docker rm</code>可以一次输入多个容器id，删除多个容器。</p>
<p>如果需要删除容器，可以使用<code>docker rmi</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker rmi busybox</span></div><div class="line">Error response from daemon: conflict: unable to remove repository reference <span class="string">"busybox"</span> (must force) - container <span class="number">0</span>ac2c8dee5a9 is using its referenced image ac6a7980c6c2</div><div class="line">Error: failed to remove images: [busybox]</div><div class="line"></div><div class="line"><span class="comment"># docker rm 0ac2c8dee5a9</span></div><div class="line"><span class="number">0</span>ac2c8dee5a9</div><div class="line"></div><div class="line"><span class="comment"># docker rmi busybox</span></div><div class="line">Untagged: busybox:latest</div><div class="line">Deleted: ac6a7980c6c2fb4d29e406efb4f9784b3c67e161eb68a97ffb428d07e3e97693</div><div class="line">Deleted: c00ef186408b85d9657e8241f53ccd1e7071f03b3d4b38863b2cdae88845b587</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：删除容器前，需要先删除所有的镜像，即使该镜像状态是已退出。强制删除，需要使用<code>-f</code>参数，不推荐。</p>
</blockquote>
<h3>容器操作</h3>
<p>多数情况下，我们使用<code>docker run</code>就可以运行一个容器。但是如果希望对容器生命周期加以更细节的控制，可以使用更多的命令。</p>
<table>
<thead>
<tr class="header">
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>docker create</code></td>
<td align="left">创建容器</td>
</tr>
<tr class="even">
<td align="left"><code>docker start</code></td>
<td align="left">启动容器</td>
</tr>
<tr class="odd">
<td align="left"><code>docker stop</code></td>
<td align="left">停止容器</td>
</tr>
<tr class="even">
<td align="left"><code>docker restart</code></td>
<td align="left">重启容器</td>
</tr>
<tr class="odd">
<td align="left"><code>docker kill</code></td>
<td align="left">杀死容器进程</td>
</tr>
<tr class="even">
<td align="left"><code>docker pause</code></td>
<td align="left">暂停容器进程</td>
</tr>
<tr class="odd">
<td align="left"><code>docker unpause</code></td>
<td align="left">回复重启进程</td>
</tr>
</tbody>
</table>
<p>命令如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker create nginx</span></div><div class="line"><span class="number">427</span>bb755b40aa50c8506862867b41f444e2fd317aac70a3336740d7f8f423e77</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">3</span> seconds ago       Created                                 modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker start 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">18</span> seconds ago      Up <span class="number">6</span> seconds        <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker pause 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">29</span> seconds ago      Up <span class="number">16</span> seconds (Paused)   <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker unpause 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">42</span> seconds ago      Up <span class="number">30</span> seconds       <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker stop 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                     PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   About a minute ago   Exited (<span class="number">0</span>) <span class="number">3</span> seconds ago                       modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker restart 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   About a minute ago   Up <span class="number">1</span> seconds        <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker kill 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">2</span> minutes ago       Exited (<span class="number">137</span>) <span class="number">2</span> seconds ago                       modest_allen</div></pre></td></tr></table></figure></p>
<p>以上操作的顺序是：create-&gt;start-&gt;pause-&gt;unpause-&gt;stop-&gt;restart-&gt;kill。注意每个操作完成之后，容器的status，主要有以下几个：</p>
<table>
<thead>
<tr class="header">
<th align="left">状态</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Created</td>
<td align="left">容器已创建，尚未运行</td>
</tr>
<tr class="even">
<td align="left">Running（显示为 Up X seconds）</td>
<td align="left">容器运行中</td>
</tr>
<tr class="odd">
<td align="left">Paused</td>
<td align="left">容器已暂停</td>
</tr>
<tr class="even">
<td align="left">Stopped（显示为 Exited X seconds ago ）</td>
<td align="left">容器已退出运行</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意，使用stop和kill两者均能够退出容器，退出容器的区别在于，stop是正常退出，退出的返回码是0；kill是强行退出，退出的返回码是一个异常编号。</p>
</blockquote>
<h3>修改和提交镜像</h3>
<p>由于提交docker hub比较慢，本文都以提交到私有的docker registry为例，即前文的reg-server。</p>
<p>对于需要修改的镜像，建议先标记tag，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox             latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker tag tomcat reg-server:5000/my-tomcat</span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>tag是个很有用的命令，可以用于标记一个本地镜像（通常是即将要修改的），也可以将一个镜像归类到另一个仓库。上述命令就将tomcat镜像归类到reg-server中，并重命名为my-tomcat。注意，虽然tag重新标记了一个镜像，但是这个镜像的id并没有改变，因为镜像的id本质上是一个类似与镜像hash值的概念，只要镜像本身没有发生变化，镜像id就不会变。</p>
<p>删除tag与删除镜像一样，使用<code>docker rmi</code>，在此不再赘述。</p>
<p>修改镜像的方法有多种，可以挂载外部的目录到镜像的<code>/mnt</code>上来替换文件，也可以直接修改，本文采用直接修改的方式，比较简单。假设我们希望增加一个脚本<code>bin/datehost.sh</code>，打印当前的时间和hostname。可以如下操作，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run -it  reg-server:5000/my-tomcat /bin/bash</span></div><div class="line">root@<span class="number">3</span>fa12ef20974:/usr/local/tomcat<span class="comment"># echo "echo \"\`date\` @ \`hostname\`\"" &gt; bin/datehost.sh</span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># chmod +x bin/datehost.sh </span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># ls -al bin/datehost.sh </span></div><div class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">27</span> Dec <span class="number">20</span> <span class="number">05</span>:<span class="number">34</span> bin/datehost.sh</div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># more bin/datehost.sh </span></div><div class="line"><span class="built_in">echo</span> <span class="string">"`date` @ `hostname`"</span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># exit</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.104</span> <span class="number">13</span>:<span class="number">35</span>:<span class="number">51</span> /var/lib/docker</div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS                     PORTS               NAMES</div><div class="line">eb95d2ffe224        reg-server:<span class="number">5000</span>/my-tomcat   <span class="string">"/bin/bash"</span>         <span class="number">2</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">6</span> seconds ago                       insane_bhabha</div><div class="line"></div><div class="line"><span class="comment"># docker commit -m "add datehost.sh" eb95d2ffe224 reg-server:5000/my-tomcat</span></div><div class="line"><span class="number">1</span>a4f794fa3d4e507bc81c77d9daab4746f9d3eb51b06aaf6afbe55823ce4668c</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">11</span> seconds ago      <span class="number">350.1</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>到这里可以发现，my-tomcat镜像已经被修改，其镜像id值已经和原先不再一样。运行一下可以发现改动已经生效，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run reg-server:5000/my-tomcat bash bin/datehost.sh</span></div><div class="line">Sun Dec <span class="number">20</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">57</span> UTC <span class="number">2015</span> @ <span class="number">0</span>e903602b939</div></pre></td></tr></table></figure></p>
<p>修改完成之后，可以将修改后的镜像push到服务器上，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker push reg-server:5000/my-tomcat</span></div><div class="line">The push refers to a repository [reg-server:<span class="number">5000</span>/my-tomcat] (len: <span class="number">1</span>)</div><div class="line"><span class="number">1</span>a4f794fa3d4: Pushed </div><div class="line">af28fa31b54b: Pushed </div><div class="line"><span class="number">7</span>a2b734804b7: Pushed </div><div class="line">e6c09147e1be: Pushed </div><div class="line"><span class="number">1945</span>b5ae9698: Pushed </div><div class="line"><span class="number">5</span>effacac81b9: Pushed </div><div class="line"><span class="number">0</span>a769fec47c8: Pushed </div><div class="line"><span class="number">5</span>e5f21412e19: Pushed </div><div class="line"><span class="number">9</span>ee13ca3b908: Pushed </div><div class="line">latest: digest: sha256:<span class="number">3</span>f4bc8f312bf0113c8867b8c095f7e6a4420f654e95d93559d8215c838491cb9 size: <span class="number">37164</span></div></pre></td></tr></table></figure></p>
<p>之后，可以和正常使用其他容器一样使用my-tomcat。</p>
<h3>查找镜像</h3>
<p>如果是在docker hub上查询，可以直接使用docker search，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker search redis</span></div><div class="line">NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">redis                     Redis is an open <span class="built_in">source</span> key-value store th...   <span class="number">1420</span>      [OK]       </div><div class="line">torusware/speedus-redis   Always updated official Redis docker image...   <span class="number">27</span>                   [OK]</div><div class="line">sameersbn/redis                                                           <span class="number">20</span>                   [OK]</div><div class="line">bitnami/redis             Bitnami Redis Docker Image                      <span class="number">9</span>                    [OK]</div><div class="line">orchardup/redis           https://github.com/orchardup/docker-redis       <span class="number">6</span>                    [OK]</div><div class="line">williamyeh/redis          Redis image <span class="keyword">for</span> Docker                          <span class="number">3</span>                    [OK]</div><div class="line">webhippie/redis           Docker images <span class="keyword">for</span> redis                         <span class="number">2</span>                    [OK]</div><div class="line">anapsix/redis             <span class="number">11</span>MB Redis server image over AlpineLinux        <span class="number">2</span>                    [OK]</div><div class="line">clue/redis-benchmark      A minimal docker image to ease running the...   <span class="number">2</span>                    [OK]</div><div class="line">unblibraries/redis        Leverages phusion/baseimage to deploy a ba...   <span class="number">1</span>                    [OK]</div><div class="line">wasabeef/redis            Install latest redis-server                     <span class="number">1</span>                    [OK]</div><div class="line">clue/php-redis-server     The php-redis-server is a pure PHP impleme...   <span class="number">1</span>                    [OK]</div><div class="line">kampka/redis              A Redis image build from <span class="built_in">source</span> on top of ...   <span class="number">1</span>                    [OK]</div><div class="line">greytip/redis             redis <span class="number">3.0</span>.<span class="number">3</span>                                     <span class="number">1</span>                    [OK]</div><div class="line">nicescale/redis           Redis services <span class="keyword">in</span> NiceScale Platform, you ...   <span class="number">1</span>                    [OK]</div><div class="line">nanobox/redis             Redis service <span class="keyword">for</span> nanobox.io                    <span class="number">0</span>                    [OK]</div><div class="line">yfix/redis                Yfix docker redis                               <span class="number">0</span>                    [OK]</div><div class="line">trelllis/redis            Redis Replication                               <span class="number">0</span>                    [OK]</div><div class="line">frodenas/redis            A Docker Image <span class="keyword">for</span> Redis                        <span class="number">0</span>                    [OK]</div><div class="line">appelgriebsch/redis       Configurable redis container based on Alpi...   <span class="number">0</span>                    [OK]</div><div class="line">rounds/<span class="number">10</span>m-redis          redis <span class="keyword">for</span> hubot brain                           <span class="number">0</span>                    [OK]</div><div class="line">envygeeks/redis           A tiny Redis image on Alpine Linux.             <span class="number">0</span>                    [OK]</div><div class="line">khipu/redis               customized redis                                <span class="number">0</span>                    [OK]</div><div class="line">fulbito/redis             redis                                           <span class="number">0</span>                    [OK]</div><div class="line">steeeveen/redis           Redis server configured <span class="keyword">for</span> migration           <span class="number">0</span>                    [OK]</div></pre></td></tr></table></figure></p>
<p>如果是查找registry上的镜像，可以使用以下命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="array"># curl </span>-XGET http:<span class="comment">//reg-server:5000/v2/_catalog</span></div><div class="line">{<span class="string">"repositories"</span>:[<span class="string">"my-hello-world"</span>,<span class="string">"my-tomcat"</span>]}</div></pre></td></tr></table></figure></p>
<p>可以看到，这里有刚才push到服务器上的my-tomcat。查看单个镜像可以用这个命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="array"># curl </span>-XGET http:<span class="comment">//reg-server:5000/v2/my-tomcat/tags/list</span></div><div class="line">{<span class="string">"name"</span>:<span class="string">"my-tomcat"</span>,<span class="string">"tags"</span>:[<span class="string">"latest"</span>]}</div></pre></td></tr></table></figure></p>
<h3>镜像和容器的导入和导出</h3>
<p>镜像导出和导入，可以使用<code>docker save</code>和<code>docker load</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker tag mysql test-mysql</span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">27</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker save -o test-mysql.tar test-mysql</span></div><div class="line"></div><div class="line"><span class="comment"># docker rmi test-mysql</span></div><div class="line">Untagged: test-mysql:latest</div><div class="line"></div><div class="line"><span class="comment"># docker images </span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">29</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker load --input test-mysql.tar </span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">30</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>以上命令中，<code>docker load --input test-mysql.tar</code>也可以用<code>docker load &lt; test-mysql.tar</code>替换。</p>
<p>容器导出并导入镜像，可以使用<code>docker export</code>和<code>docker import</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.103</span> <span class="number">13</span>:<span class="number">52</span>:<span class="number">34</span> /var/lib/docker/aufs</div><div class="line"><span class="comment"># docker run -d -e MYSQL_ROOT_PASSWORD=111111 mysql</span></div><div class="line">f89fbfefb0ed4d23251766a4b9906175d01c767e41bf6056f6eb0d76f591774f</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                      PORTS               NAMES</div><div class="line">f89fbfefb0ed        mysql                       <span class="string">"/entrypoint.sh mysql"</span>   <span class="number">8</span> seconds ago       Up <span class="number">7</span> seconds                <span class="number">3306</span>/tcp            happy_mcnulty</div><div class="line"></div><div class="line"><span class="comment"># docker export f89fbfefb0ed &gt; mysql-container.tar</span></div><div class="line"></div><div class="line"><span class="comment"># cat mysql-container.tar | docker import - test-mysql-container</span></div><div class="line"><span class="number">59</span>d9e79d5010c22648585a3a41d5d0ee6889c0e3b92e866b0dafc99dd6aaa930</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</div><div class="line">test-mysql-container        latest              <span class="number">59</span>d9e79d5010        About a minute ago   <span class="number">358.4</span> MB</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">56</span> minutes ago       <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago           <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago           <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago           <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago          <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago          <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago          <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago          <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># ls -l *mysql* </span></div><div class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">365428736</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">14</span>:<span class="number">15</span> mysql-container.tar</div><div class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">367499776</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">14</span>:<span class="number">06</span> test-mysql.tar</div></pre></td></tr></table></figure></p>
<p>可以发现导入后的test-mysql的镜像id与原先不同，而且两种导出方法导出的文件大小也不一样，容器导出方式产生的文件更小一些。</p>
<h3>其他命令</h3>
<p><code>docker history</code>可以用来查看镜像的创建历史，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker history test-mysql</span></div><div class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</div><div class="line">a07681abeb6c        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) CMD ["mysqld"]                0 B                 </span></div><div class="line"><span class="number">2</span>a044f65c047        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) EXPOSE 3306/tcp               0 B                 </span></div><div class="line"><span class="number">0</span>e44274c48b8        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) ENTRYPOINT &{["/entrypoint.   0 B                 </span></div><div class="line"><span class="number">993</span>a9b023e8d        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) COPY file:64d55f44397821c7f   3.046 kB            </span></div><div class="line">e8dd98df99bf        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) VOLUME [/var/lib/mysql]       0 B                 </span></div><div class="line">ccb812e818f0        <span class="number">3</span> days ago          /bin/sh -c sed -Ei <span class="string">'s/^(bind-address|log)/#&/   1.771 kB            </span></div><div class="line">ba90d2543c21        3 days ago          /bin/sh -c {   echo mysql-community-server my   202 MB              </div><div class="line">040e89b06cd2        3 days ago          /bin/sh -c echo "deb http://repo.mysql.com/ap   55 B                </div><div class="line">7aa0121e10fe        3 days ago          /bin/sh -c #(nop) ENV MYSQL_VERSION=5.7.10-1d   0 B                 </div><div class="line">a61429b086f9        2 weeks ago         /bin/sh -c #(nop) ENV MYSQL_MAJOR=5.7           0 B                 </div><div class="line">0d5f060b62c4        2 weeks ago         /bin/sh -c apt-key adv --keyserver ha.pool.sk   20.52 kB            </div><div class="line">1b0e180fd8fa        2 weeks ago         /bin/sh -c apt-get update && apt-get install    32.87 MB            </div><div class="line">e3a6552a83c2        2 weeks ago         /bin/sh -c mkdir /docker-entrypoint-initdb.d    0 B                 </div><div class="line">410c2fae2283        2 weeks ago         /bin/sh -c groupadd -r mysql && useradd -r -g   330.4 kB            </div><div class="line">8b9a99209d5c        2 weeks ago         /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B                 </div><div class="line">6d1ae97ee388        2 weeks ago         /bin/sh -c #(nop) ADD file:863d6edd178364362a   125.1 MB            </div><div class="line"></div><div class="line"># docker history test-mysql-container</div><div class="line">IMAGE               CREATED             CREATED BY          SIZE                COMMENT</div><div class="line">59d9e79d5010        2 minutes ago                           358.4 MB            Imported from -</div></pre></td></tr></table></figure></p>
<p>由此可以看出，采用镜像导出的方式，导出过程中丢失了每一层的信息，而是把所有层合并到一层里面，也因此，导出文件略小。</p>
<p><code>docker top</code>可以查看一个容器正在运行的进程，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d redis redis-server</span></div><div class="line"><span class="number">5</span>adefd06e5cc4434674618948e144c202b6a3560550ab42b3a44516994a99a38</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</div><div class="line"><span class="number">5</span>adefd06e5cc        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">9</span> seconds ago       Up <span class="number">8</span> seconds                <span class="number">6379</span>/tcp            sleepy_poitras</div><div class="line"></div><div class="line"><span class="comment"># docker top 5adefd06e5cc</span></div><div class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</div><div class="line"><span class="number">999</span>                 <span class="number">18602</span>               <span class="number">6097</span>                <span class="number">0</span>                   <span class="number">14</span>:<span class="number">39</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            redis-server *:<span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p><code>docker inspect</code>可以查看镜像或者容器的参数，返回json格式。查看镜像的时候，与镜像本身的json文件信息一致；查看容器的时候，更多是一些运行时的参数。输出比较长，在此不列出。</p>
<p><code>docker logs</code>可以查看容器运行时的输出日志，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">5</span>adefd06e5cc        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">7</span> minutes ago       Up <span class="number">7</span> minutes        <span class="number">6379</span>/tcp            sleepy_poitras</div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.103</span> <span class="number">14</span>:<span class="number">46</span>:<span class="number">12</span> ~</div><div class="line"><span class="comment"># docker logs -f --tail 10 5adefd06e5cc</span></div><div class="line">  `-._    `-._`-.__.-<span class="string">'_.-'</span>    _.-<span class="string">'                                   </span></div><div class="line">      `-._    `-.__.-'    _.-<span class="string">'                                       </span></div><div class="line">          `-._        _.-'                                           </div><div class="line">              `-.__.-<span class="string">'                                               </span></div><div class="line"></div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</div><div class="line">1:M 20 Dec 06:39:11.737 # Server started, Redis version 3.0.5</div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = <span class="number">1</span><span class="string">' to /etc/sysctl.conf and then reboot or run the command '</span>sysctl vm.overcommit_memory=<span class="number">1</span><span class="string">' for this to take effect.</span></div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command '<span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled<span class="string">' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></div><div class="line">1:M 20 Dec 06:39:11.737 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure></p>
<p>其中，<code>-f</code>参数表示以阻塞的方式跟踪输出日志，与linux中tail命令的-f参数含义相似；<code>--tail n</code>表示打印最后n行log。</p>
<h3><code>docker run</code> 命令</h3>
<p><code>docker run</code>应该是使用最多，参数也最多的docker命令了，以下介绍其中部分参数。</p>
<p><code>-d</code>参数，表示后台运行，默认情况下docker是前台运行的，多数情况下，如果启动的是一个服务进程，我们会使用这个参数。上文已经有很多示例，在此不再举例。</p>
<p><code>-i</code>和<code>-t</code>参数，<code>-t</code>选项让Docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上，<code>-i</code>则让容器的标准输入保持打开。也就是说，如果要使用和用户有交互的命令，比如bash，那么需要两个选项都打开；如果只是系统自己运行，不需要与外界有输入，那么两个选项都不需要打开；如果是使用类似管道的方式进行交互，那么可以不需要<code>-t</code>选项，但是需要<code>-i</code>选项。如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo test | docker run busybox cat</span></div><div class="line"></div><div class="line"><span class="comment"># echo test | docker run -i busybox cat</span></div><div class="line">test</div></pre></td></tr></table></figure></p>
<p><code>--name</code>参数，可以为容器命名，如下例，注意<code>docker ps -a</code>的最后一列，已经是我们指定的名字，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d --name my-redis-node redis redis-server </span></div><div class="line"><span class="number">8</span>e0cbe8ea2877c0b68d9792804a6b64d5e13105596fae71090c3095393fcf66a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">8</span>e0cbe8ea287        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">5</span> seconds ago       Up <span class="number">4</span> seconds        <span class="number">6379</span>/tcp            my-redis-node</div></pre></td></tr></table></figure></p>
<p><code>-p</code>参数，可以将容器内部的端口映射到宿主机器，可以使用多个<code>-p</code>参数完成多个端口映射。之前启动服务的时候，只是用来演示docker，并没有配这一项，其实这项是非常重要的，因为如果不将端口映射到宿主机器的话，容器内的服务对容器之外的进程都是不可见的。如下例，完成端口映射之后，可以使用宿主机上的redis client访问redis容器，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d -p 16379:6379 redis redis-server </span></div><div class="line">c925ce0df258fe4b36c5295eda2a2f798bc6cde48deff73e81c0238e456c0f0c</div><div class="line"></div><div class="line"><span class="comment"># telnet localhost 16379</span></div><div class="line">Trying <span class="number">127.0</span>.<span class="number">0.1</span>...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">$ ./redis-cli -p <span class="number">16379</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16379</span>&gt; scan <span class="number">0</span> count <span class="number">100</span></div><div class="line"><span class="number">1</span>) <span class="string">"0"</span></div><div class="line"><span class="number">2</span>) (empty list or <span class="keyword">set</span>)</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16379</span>&gt;</div></pre></td></tr></table></figure></p>
<p><code>-e</code>参数，可以增加和修改环境变量，可以使用多个<code>-e</code>参数完成多个环境变量的增加修改。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=f405a1d5be32</div><div class="line">HOME=/root</div><div class="line"></div><div class="line"><span class="comment"># docker run -e "MYENV=test" -e "HOSTNAME=my-host" busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=my-host</div><div class="line">MYENV=test</div><div class="line">HOME=/root</div></pre></td></tr></table></figure></p>
<p><code>-c</code>和<code>-m</code>参数，分别用来表示cpu和内存的使用限制。<code>-c</code>表示容器间使用cpu的优先级，默认使用100%cpu，总的cpu分成1024份，-c参数如果设置为512，那么容器只能使用50%的cpu资源。<code>-m</code>参数表示使用内存的上限，<code>-m=256m</code>表示使用内存上限是256mb。如果想限制使用cpu百分比的上限，可以使用<code>--cpu-quota=0</code>参数。</p>
<p><code>--rm</code>参数，表示运行容器结束后，删除该容器。之前没有使用这个参数，在容器运行之后，<code>docker ps -a</code>还可以看到这个容器；使用之后，容器被删除，<code>docker ps -a</code>将看不到这个容器。相当与程序中的临时变量的概念。如下例，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run --rm busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=a804e934d55f</div><div class="line">HOME=/root</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div></pre></td></tr></table></figure></p>
<p>以上是<code>docker run</code>的主要参数，还有其他很多参数，在此不一一列举。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.server110.com/docker/201411/11122.html" target="_blank" rel="external">http://www.server110.com/docker/201411/11122.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.bubuko.com/infodetail-1027194.html" target="_blank" rel="external">http://www.bubuko.com/infodetail-1027194.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.open-open.com/lib/view/open1422492851548.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1422492851548.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="external">https://docs.docker.com/engine/reference/run/</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.open-open.com/lib/view/open1422492851548.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1422492851548.html</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://segmentfault.com/a/1190000000667514" target="_blank" rel="external">http://segmentfault.com/a/1190000000667514</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="https://docs.docker.com/registry/" target="_blank" rel="external">https://docs.docker.com/registry/</a><a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<h2>Docker命令概要</h2>
<p>常用的Docker命令有以下一些<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker入门介绍]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-starter/"/>
    <id>http://valleylord.github.io/post/201512-docker-starter/</id>
    <published>2015-12-13T01:46:00.000Z</published>
    <updated>2015-12-19T10:07:29.545Z</updated>
    <content type="html"><![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machine）的效果。与虚拟机主要的不同在于，虚拟机是对硬件的抽象，也就是说，需要在虚拟机上先运行操作系统，然后在操作系统中运行应用程序；而容器是对资源的抽象，也就是说，容器是建立在操作系统之上，将操作系统提供的资源予以隔离并分别提供给不同的应用。两种虚拟化的方式各有千秋，从隔离度上来说，虚拟机要比容器强，但在性能上，容器的方式更优，因为容器少运行了一层操作系统。</p>
<p>本文使用Ubuntu 14.04 LTS完成实验。</p>
<h2>Linux CGroup</h2>
<p>Linux的CGroup技术为Docker提供了系统资源上的隔离，常用的被隔离资源有cpu、内存、网络流量等等<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。提供这些资源隔离的主要目的是，让单个容器无法占用全部资源，这样会影响系统中其他容器或进程。</p>
<p>CGroup支持隔离的资源有以下一些。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">blkio — 这​​​个​​​子​​​系​​​统​​​为​​​块​​​设​​​备​​​设​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​，比​​​如​​​物​​​理​​​设​​​备​​​（磁​​​盘​​​，固​​​态​​​硬​​​盘​​​，USB 等​​​等​​​）。</div><div class="line"><span class="built_in">cpu</span> — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​ <span class="built_in">CPU</span> 的​​​ cgroup 任​​​务​​​访​​​问​​​。​​​</div><div class="line">cpuacct — 这​​​个​​​子​​​系​​​统​​​自​​​动​​​生​​​成​​​ cgroup 中​​​任​​​务​​​所​​​使​​​用​​​的​​​ <span class="built_in">CPU</span> 报​​​告​​​。​​​</div><div class="line">cpuset — 这​​​个​​​子​​​系​​​统​​​为​​​ cgroup 中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​ <span class="built_in">CPU</span>（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​。​​​</div><div class="line">devices — 这​​​个​​​子​​​系​​​统​​​可​​​允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备​​​。​​​</div><div class="line">freezer — 这​​​个​​​子​​​系​​​统​​​挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务​​​。​​​</div><div class="line">memory — 这​​​个​​​子​​​系​​​统​​​设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告​​​。​​​</div><div class="line">net_cls — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​等​​​级​​​识​​​别​​​符​​​（classid）标​​​记​​​网​​​络​​​数​​​据​​​包​​​，可​​​允​​​许​​​ Linux 流​​​量​​​控​​​制​​​程​​​序​​​（tc）识​​​别​​​从​​​具​​​体​​​ cgroup 中​​​生​​​成​​​的​​​数​​​据​​​包​​​。​​​</div><div class="line">net_prio — 这个子系统用来设计网络流量的优先级</div><div class="line">hugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。</div></pre></td></tr></table></figure></p>
<p>下面举个简单的例子说明一下，假设有一个死循环的程序，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"PID [%5d]\n"</span>, getpid());</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;) i++;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该程序先打印自己的pid，然后进入死循环。编译后运行，然后运行<code>top</code>查看cpu占用率，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./test </div><div class="line">PID [ <span class="number">9271</span>]</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">632</span>    <span class="number">544</span> R <span class="number">100.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">27.75</span> test</div></pre></td></tr></table></figure></p>
<p>不要退出<code>./test</code>，然后在<code>/sys/fs/cgroup/cpu/</code>下建立一个目录<code>test</code>（需要root权限），然后在<code>cpu.cfs_quota_us</code>中写入30000。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir test</span></div><div class="line"></div><div class="line"><span class="comment"># ls test</span></div><div class="line">cgroup.clone_children  cpu.cfs_period_us  cpu.shares  notify_on_release</div><div class="line">cgroup.procs           cpu.cfs_quota_us   cpu.stat    tasks</div><div class="line"></div><div class="line"><span class="comment"># echo 30000 &gt; /sys/fs/cgroup/cpu/test/cpu.cfs_quota_us</span></div></pre></td></tr></table></figure></p>
<p>但是运行下面命令之后，cpu立刻降低到30%（与之前的30000对应），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo 9271 &gt;&gt; /sys/fs/cgroup/cpu/test/tasks</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">796</span>    <span class="number">716</span> R  <span class="number">29.9</span>  <span class="number">0.0</span>   <span class="number">1</span>:<span class="number">55.29</span> test</div></pre></td></tr></table></figure></p>
<p>可以看到，使用CGroup限制cpu占用率已经生效。</p>
<h2>Linux Namespace</h2>
<p>只有资源的隔离显然不足以隔离不同的应用，还需要有对访问权限的隔离，这就是Linux Namespace的主要作用。Linux Namespace是Linux提供的一种内核级别环境隔离的方法<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，主要是在使用<code>clone</code>系统调用的时候，添加不同的隔离效果参数来达到。注意，此处的隔离仅仅是应用层面的隔离，这些clone出来的进程仍然使用相同的Linux内核。</p>
<p>可以达到的不同的隔离效果有：</p>
<table>
<thead>
<tr class="header">
<th align="left">分类</th>
<th align="left">系统调用参数</th>
<th align="left">相关内核版本</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Mount namespaces</td>
<td align="left">CLONE_NEWNS</td>
<td align="left">Linux 2.4.19</td>
</tr>
<tr class="even">
<td align="left">UTS namespaces</td>
<td align="left">CLONE_NEWUTS</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="odd">
<td align="left">IPC namespaces</td>
<td align="left">CLONE_NEWIPC</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="even">
<td align="left">PID namespaces</td>
<td align="left">CLONE_NEWPID</td>
<td align="left">Linux 2.6.24</td>
</tr>
<tr class="odd">
<td align="left">Network namespaces</td>
<td align="left">CLONE_NEWNET</td>
<td align="left">始于Linux 2.6.24 完成于 Linux 2.6.29</td>
</tr>
<tr class="even">
<td align="left">User namespaces</td>
<td align="left">CLONE_NEWUSER</td>
<td align="left">始于 Linux 2.6.23 完成于 Linux 3.8)</td>
</tr>
</tbody>
</table>
<p>下面举例看一下Namespace的隔离效果，假设有如下c代码，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _GNU_SOURCE</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/wait.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sched.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;signal.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义一个给 clone 用的栈，栈大小1M */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> STACK_SIZE (1024 * 1024)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> container_stack[STACK_SIZE];</div><div class="line"></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> container_args[] = {</div><div class="line">    <span class="string">"/bin/bash"</span>,</div><div class="line">    NULL</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> container_main(<span class="keyword">void</span>* arg)</div><div class="line">{</div><div class="line">    <span class="comment">/* 查看子进程的PID，我们可以看到其输出子进程的 pid 为 1 */</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Container [%5d] - inside the container!\n"</span>, getpid());</div><div class="line">    sethostname(<span class="string">"container"</span>,<span class="number">10</span>);</div><div class="line">    system(<span class="string">"mount -t proc proc /proc"</span>);</div><div class="line">    execv(container_args[<span class="number">0</span>], container_args);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Something's wrong!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent [%5d] - start a container!\n"</span>, getpid());</div><div class="line">    <span class="comment">/*启用PID namespace - CLONE_NEWPID*/</span></div><div class="line">    <span class="keyword">int</span> container_pid = clone(container_main, container_stack+STACK_SIZE,</div><div class="line">            CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);</div><div class="line">    waitpid(container_pid, NULL, <span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent - container stopped!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码主要使用了<code>CLONE_NEWPID | CLONE_NEWNS</code>两个参数，在Namespace中隔离出pid=1的父进程，同时使用文件系统隔离，将<code>/proc</code>与外界隔离开来，这样也就看不到容器外的进程。在这样的环境下运行bash，可以看到如下效果（需要root运行），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> ./test </div><div class="line">Parent [<span class="number">10328</span>] - start a container!</div><div class="line">Container [    <span class="number">1</span>] - inside the container!</div><div class="line"></div><div class="line"><span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         <span class="number">1</span>     <span class="number">0</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">12</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</div><div class="line">root       <span class="number">107</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">20</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</div><div class="line"></div><div class="line"><span class="comment"># exit</span></div><div class="line"><span class="keyword">exit</span></div><div class="line">Parent - container stopped!</div></pre></td></tr></table></figure></p>
<p>可见，在Namespace的隔离下，bash已经获得pid=1的特权，并且，运行ps也看不到外界的进程。</p>
<h2>AUFS</h2>
<p>Docker三大基础技术中，唯一还没有进入Linux内核的就是AUFS。AUFS的作用，是把不同物理位置的目录合并mount到同一个目录中<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。具体实现上，AUFS采用的是层状结构，把文件的改动通过不同的层，一层层叠加上去，每一层的改动都依赖于上一层，最终看到的结果实际上是文件叠加后的结果。实现的原理上有些类似于git。</p>
<h2>基于Docker的开发流程</h2>
<p>传统软件开发中，经常会出现的问题就是环境的不一致、部署困难、权限管理不便等等问题。例如，开发提交代码之后，运维人员需要根据开发的架构编写部署脚本；在部署环境确定之后，开发人员需要一套一致的环境来开发应用，但是这样的环境需要通过虚拟机来搭建，比较费时；如果共用开发环境的话，开发人员需要修改某个系统文件，需要申请系统权限，而他要改的很可能仅仅是一个host文件。</p>
<p>种种的不便利，都是因为“环境”的不统一，而统一环境，正是Docker容器所解决的问题。如果在开发流程中使用docker，那么运维的部分工作将转为开发工作，比如部分环境变量中的信息，端口信息，数据库连接信息等等，都可以包含在容器中，而运维人员需要负责的仅仅是容器与容器之间的连接。一个系统中的多个容器可以部署在不同的机器上（比如测试环境、生产环境），也可以 部署在一台机器上（比如开发环境），在引入容器这一层抽象的同时，并没有像虚拟机带来的运行效率降低等问题，这也是Docker能够被广泛接受的原因。</p>
<p>由于环境统一，对环境的依赖降低，持续集成变得更加容易完成；由于环境统一，应用的模块化变得更加容易，SOA、微服务等架构，会更加容易被部署；同样由于环境统一，单个模块的更新、优化、版本控制也会变得更加容易。</p>
<h2>Docker镜像文件浅析</h2>
<p>由于Docker Hub比较慢，本文从国内的DockerPool上来获取镜像，用来展示AUFS的层状结构，以java 8的jdk为例<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。先获取这个镜像，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker pull dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk         </div><div class="line">Pulling repository dl.dockerpool.com:<span class="number">5000</span>/java</div><div class="line"><span class="number">816120</span>cec693: Download complete </div><div class="line"><span class="number">511136</span>ea3c5a: Download complete </div><div class="line">bb250545c9c9: Download complete </div><div class="line">f872462c7730: Download complete </div><div class="line"><span class="number">0</span>b98a314e4e3: Download complete </div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java: this image was pulled from a legacy registry.  Important: This registry version will not be supported <span class="keyword">in</span> future versions of docker.</div></pre></td></tr></table></figure></p>
<p>注意，为了获取该镜像，需要在docker的配置文件<code>/etc/default/docker</code>中添加参数<code>DOCKER_OPTS=&quot;--insecure-registry dl.dockerpool.com:5000&quot;</code>，本文使用的是Ubuntu，如果是Centos的话，需要修改<code>/etc/sysconfig/docker</code>。从获取的log中发现，总共获取了5个镜像，分别是</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec693</div><div class="line"><span class="number">511136</span>ea3c5a</div><div class="line">bb250545c9c9</div><div class="line">f872462c7730</div><div class="line"><span class="number">0</span>b98a314e4e3</div></pre></td></tr></table></figure></p>
<p>这几个镜像最上面的<code>816120cec693</code>是最上层的镜像文件。运行<code>docker images</code>可以证实这一点。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">hello-world                   latest              <span class="number">975</span>b84d108f1        <span class="number">8</span> weeks ago         <span class="number">960</span> B</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jre               <span class="number">5</span>ceb47bbfcb2        <span class="number">13</span> months ago       <span class="number">284.2</span> MB</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jdk               <span class="number">816120</span>cec693        <span class="number">13</span> months ago       <span class="number">634.9</span> MB</div></pre></td></tr></table></figure></p>
<p>docker的镜像存储在<code>/var/lib/docker</code>下，需要用root账户来查看。在该目录下查找镜像文件<code>816120cec693</code>，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span> <span class="comment">find</span> <span class="string">.</span> <span class="literal">-</span><span class="comment">name</span> <span class="comment">"816120cec693*"</span> <span class="comment">|</span> <span class="comment">xargs</span> <span class="comment">ls</span> <span class="literal">-</span><span class="comment">al</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>  <span class="comment">260</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="comment">/aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">40</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">10</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">bin</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">33</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">etc</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">4</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span>  <span class="comment">8月</span> <span class="comment">17</span>  <span class="comment">2014</span> <span class="comment">lib</span></div><div class="line"><span class="comment">drwxrwxrwt</span>  <span class="comment">3</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">tmp</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">8</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">usr</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">5</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">var</span></div><div class="line"><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>    <span class="comment">0</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">aufs</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">orph</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">plnk</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">8</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">716</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">11</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">1330</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">json</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>      <span class="comment">9</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">layersize</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">710180</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">tar</span><span class="literal">-</span><span class="comment">data</span><span class="string">.</span><span class="comment">json</span><span class="string">.</span><span class="comment">gz</span></div></pre></td></tr></table></figure></p>
<p>可见，docker镜像的id实际上是一个更长的id，<code>816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>，通常情况下，docker只显示前12位当做id。docker的本地文件中，<code>./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个文本文件，里面记录了本镜像的所有父镜像id。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more ./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p><code>./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，里面记录了镜像的实际文件，从目录结构可以大致看出来这实际上是一个linux根目录。<code>./aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>默认是一个空目录。<code>./graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，用于记录镜像相关的信息，该目录下的3个文件非常有助于理解AUFS的结构。<code>json</code>是记录镜像概要信息的json格式文件，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">512900817</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    <span class="string">"config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/bash"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"container"</span>: <span class="string">"029cecc8157b465ce92e5559d6231261452b571e93734e08da5081eef4a8af41"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/sh"</span>,</div><div class="line">            <span class="string">"-c"</span>,</div><div class="line">            <span class="string">"apt-get update && apt-get install -y curl openjdk-8-jdk=\"</span><span class="number">8</span>u40\<span class="string">"* unzip wget"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2014-10-23T23:08:01.12431458Z"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"1.3.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该文件中记录了镜像的大小、系统amd64、hostname、系统id、操作系统、环境变量、以及父镜像id等信息。<code>layersize</code>文件记录了文件大小，这个值和<code>json</code>文件中的值是一样的。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more layersize</span></div><div class="line"><span class="number">512900817</span></div></pre></td></tr></table></figure></p>
<p>可以看到，镜像的大小大概是513MB。可以与实际的文件大小做对比。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># du -sh ./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">516</span>M	./aufs/diff/<span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div></pre></td></tr></table></figure></p>
<p>可见，大小基本一致。<code>tar-data.json.gz</code>中记录了该镜像中的每个文件的信息，文件比较大，在此不在赘述。从<code>json</code>文件中，找到了父镜像<code>0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</code>，我们可以继续查看该父镜像的信息，然后查看父镜像的父镜像信息，一直查到根镜像。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more 0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f/json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">121995138</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"x86_64"</span>,</div><div class="line">    <span class="string">"comment"</span>: <span class="string">"Imported from -"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: null,</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: null,</div><div class="line">        <span class="string">"Env"</span>: null,</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"OnBuild"</span>: null,</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: null,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2013-06-13T14:03:50.821769-07:00"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"0.4.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>最后可见，根镜像id是<code>511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</code>，该镜像总共5层，根镜像在最下层，本镜像在最上层，按顺序分别是，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p>以上是Docker镜像文件的AUFS简单介绍。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://coolshell.cn/articles/17049.html" target="_blank" rel="external">http://coolshell.cn/articles/17049.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://coolshell.cn/articles/17010.html" target="_blank" rel="external">http://coolshell.cn/articles/17010.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://coolshell.cn/articles/17061.html" target="_blank" rel="external">http://coolshell.cn/articles/17061.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.csdn.net/article/2014-11-18/2822693" target="_blank" rel="external">http://www.csdn.net/article/2014-11-18/2822693</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machin]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用hexo搭建这个博客]]></title>
    <link href="http://valleylord.github.io/post/201412-hexo-blog/"/>
    <id>http://valleylord.github.io/post/201412-hexo-blog/</id>
    <published>2014-12-08T04:49:00.000Z</published>
    <updated>2015-12-13T05:58:00.074Z</updated>
    <content type="html"><![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>、<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>、<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，其中也介绍了一些额外的配置，比如rss、域名绑定、博客迁移等等。我建博客的主要步骤也是跟这几篇博客的描述基本类似，由于原先的博客是放在farbox和SAE的JustWriting(以下简称JustWriting)上，直接就是可用的markdown文本，迁移的步骤算是省了不少功夫，以下说一些碰到的坑。</p>
<h2>1 frontmatter不一致</h2>
<p>frontmatter不是markdown的标准，应该属于博客系统自定义的扩展，一般是用于表示该篇文章的属性信息，写在文章的开头，例如，本文的frontmatter就是，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 用hexo搭建这个博客</div><div class="line">date: 2014-12-08 12:49</div><div class="line">tags: [Hexo, Blog]</div><div class="line">category: Blog</div><div class="line"><span class="header">toc: yes</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>各个博客系统支持的frontmatter各不相同，原先在farbox和JustWriting写的时候，是可以这么写的，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: 用hexo搭建这个博客</div><div class="line">Date: 2014-12-08 12:49</div><div class="line">Tags: [Hexo, Blog]</div><div class="line">Category: Blog</div><div class="line">Toc: yes</div></pre></td></tr></table></figure></p>
<p>主要差别有，frontmatter中的title、date什么的都是可以首字母大写的，例如，Title、Date，但是hexo要求必须是全部小写才可以识别，所以就一篇一篇的都改为小写。JustWriting是大小写都可以支持，farbox由于不打算继续用了就没有测试过。</p>
<p>还有一个是tags里面的写法，hexo要求，如果有多个的话，需要放在方括号([])，并用逗号(,)分隔，如<code>[Hexo, Blog]</code>，而之前farbox和JustWriting是可以不需要方括号，空格分隔，如<code>Hexo Blog</code>。JustWriting经测试是可以支持方括号的写法，farbox没有测试。</p>
<p>最后的差别是，hexo需要在frontmatter结束后，用<code>---</code>隔开，而JustWriting和farbox不需要。</p>
<p>改完这些，hexo中就可以在主页正常的显示博文的标题等信息了。感觉起来，hexo要求的写法更加严谨，值得称道的是JustWriting，不仅支持了原先farbox的写法，也支持现在的hexo写法，更加宽泛。虽然这些改动在farbox上都没有测试过，我猜应该也是可以的，JustWriting和farbox非常相似，JustWriting是用php写的，猜测farbox可能也是用php实现的，两者支持的markdown语法应该是一致的。</p>
<h2>2 使用mathjax支持数学公式</h2>
<p>公式的支持可以安装hexo-math和hexo-renderer-mathjax来实现，好像是只要安装前者就可以实现了，但是我安装了2个。hexo-math的安装方法可以去该项目的github上去看看，在<a href="https://github.com/akfish/hexo-math" target="_blank" rel="external">这里</a>，按照步骤操作就可以了。hexo-renderer-mathjax的github在<a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">这里</a>，步骤和前者一样。</p>
<p>安装完之后应该就能看到公式了，支持行间和行内的公式。测试一下效果，代码如下，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">测试一下数学公式和尾注[^LaTeX]: </div><div class="line"></div><div class="line">$$E=mc^2$$</div><div class="line"></div><div class="line">[<span class="link_label">^LaTeX</span>]: 支持 <span class="strong">**LaTeX**</span> 编辑显示支持，例如：$\sum<span class="emphasis">_{i=1}^n a_</span>i=0$和$[<span class="link_label">((n-k)/i+m)</span>]$， 访问 [<span class="link_label">MathJax</span>][<span class="link_reference">4</span>] 参考更多使用方法。</div></pre></td></tr></table></figure></p>
<p>生成的效果可以看<a href="http://valleylord.github.io/post/README/" target="_blank" rel="external">这里</a>。</p>
<h2>3 php markdown中脚注的支持</h2>
<p>老实说，之前我从来没有关注过markdown的方言，markdown就是markdown，就跟java就是java的感觉一样。后来知道了有个GFW(Github Flavored Markdown)，感觉它支持代码高亮的方式好一些，于是以为自己写的就是GFW。直到这次做博客迁移的时候才发现，原来我一直写的都是php markdown，比GFW还多一些特性。而hexo默认支持的是GFW，对php markdown的一些特性不支持，而我最需要的就是php markdown中的脚注功能。</p>
<p>其实主流的markdown方言有以下几种，分别是(摘自pandoc的readme)：markdown (pandoc’s extended markdown), markdown_strict (original unextended markdown), markdown_phpextra (PHP Markdown Extra extended markdown), markdown_github (github extended markdown)，markdown_mmd (MultiMarkdown)。这也看出，原始的markdown支持的写法是很少的，所以才有了这么多各有特色的方言版本，github markdown支持多种编程语言的高亮，pandoc markdown支持的东西很多，写法比较类似tex，我用的php markdown有简易的脚注功能。以上的特性，都可以在pandoc中有选项可以支持。</p>
<p>说了这么多，那么问题来了，pandoc是什么？在我的理解，pandoc是一个标记语言(也可以说排版语言)转换器。可以将一种标记语言(如markdown、textile、tex、latex、html、epub等)转换到另一种标记语言，感觉很强大有木有？我就是想用pandoc对php markdown的支持来生成博客的html页面。</p>
<p>问题又来了，那么如何在hexo中使用pandoc来解析php markdown呢？要使用hexo-renderer-pandoc插件，项目主页在github上，<a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">这里</a>。其readme中的介绍有些太简略了，对于我这样一个连pandoc都没听过的人，实在不太容易上手。我详细说一下使用时候的步骤，</p>
<blockquote>
<ol>
<li>根据<a href="http://johnmacfarlane.net/pandoc/installing.html" target="_blank" rel="external">pandoc的安装文档</a>，安装pandoc，在windows下要把pandoc配到PATH环境变量下；</li>
<li>安装这个插件，<code>npm install hexo-renderer-pandoc --save</code>；</li>
<li>删除默认的markdown插件，<code>npm uninstall hexo-renderer-marked --save</code>，确保是使用pandoc在解析；</li>
<li>修改该插件的代码，将index.js中的<code>var args = [ '-f', 'markdown', '-t', 'html', '--mathjax', '--smart'];</code>改为<code>var args = [ '-f', 'markdown_phpextra', '-t', 'html', '--mathjax', '--smart'];</code></li>
</ol>
</blockquote>
<p>之后就可以用pandoc解析php markdown了，在<code>hexo generate</code>的时候表现的灰常好。</p>
<p>说一下需要特别注意的坑，如果是在windows下安装pandoc，一定需要把pandoc的可执行文件目录配置到PATH环境变量中，即，<code>C:\Users\Administrator\AppData\Local\Pandoc</code>(pandoc的默认安装目录)需要加到PATH中，这个坑在pandoc的官方installing中完全没提到，而在我的mint linux中只需要简单的apt-get就一次搞定，差距啊。如果没有配对的话，在<code>hexo server</code>的时候会出现这个错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Error: This socket is closed.</div><div class="line">    at Socket._write (net.js:637:19)</div><div class="line">    at doWrite (_stream_writable.js:226:10)</div><div class="line">    at writeOrBuffer (_stream_writable.js:216:5)</div><div class="line">    at Socket.Writable.write (_stream_writable.js:183:11)</div><div class="line">    at Socket.write (net.js:615:40)</div><div class="line">    at pandoc (E:<span class="command">\my</span>_blog<span class="command">\node</span>_modules<span class="command">\hexo</span>-renderer-pandoc<span class="command">\index</span>.js:23:15)</div><div class="line">    at C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\lib</span><span class="command">\core</span><span class="command">\render</span>.js:96:9</div><div class="line">    at fn (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:641:34)</div><div class="line">    at Object._onImmediate (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:557:34)</div><div class="line">    at processImmediate <span class="special">[</span>as _immediateCallback<span class="special">]</span> (timers.js:330:15)</div></pre></td></tr></table></figure></p>
<p>模模糊糊的，也算指向了找不到pandoc的错误。测试pandoc是否在PATH中了，可以用<code>pandoc -v</code>来查看版本，如果已经设置对了，会看到以下这些，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">F:\&gt;pandoc -v</div><div class="line">pandoc <span class="number">1.13</span>.<span class="number">1</span></div><div class="line">Compiled <span class="keyword">with</span> texmath <span class="number">0.8</span>, highlighting-kate <span class="number">0.5</span>.<span class="number">8.5</span>.</div><div class="line">Syntax highlighting <span class="keyword">is</span> supported <span class="keyword">for</span> the following languages:</div><div class="line">    actionscript, ada, apache, asn1, asp, awk, bash, bibtex, boo, c, changelog,</div><div class="line">    clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css, curry, d,</div><div class="line">    diff, djangotemplate, doxygen, doxygenlua, dtd, eiffel, email, erlang,</div><div class="line">    fortran, fsharp, gcc, gnuassembler, go, haskell, haxe, html, ini, isocpp,</div><div class="line">    java, javadoc, javascript, json, jsp, julia, latex, lex, literatecurry,</div><div class="line">    literatehaskell, lua, makefile, mandoc, markdown, matlab, maxima, metafont,</div><div class="line">    mips, modelines, modula2, modula3, monobasic, nasm, noweb, objectivec,</div><div class="line">    objectivecpp, ocaml, octave, <span class="keyword">pascal</span>, perl, php, pike, postscript, prolog,</div><div class="line">    pure, python, r, relaxngcompact, restructuredtext, rhtml, roff, ruby, rust,</div><div class="line">    scala, scheme, sci, sed, sgml, sql, sqlmysql, sqlpostgresql, tcl, texinfo,</div><div class="line">    verilog, vhdl, xml, xorg, xslt, xul, yacc, yaml</div><div class="line"><span class="keyword">Default</span> user data directory: C:\Users\Administrator\AppData\Roaming\pandoc</div><div class="line">Copyright (C) <span class="number">2006</span>-<span class="number">2014</span> John MacFarlane</div><div class="line">Web:  http:<span class="comment">//johnmacfarlane.net/pandoc</span></div><div class="line">This <span class="keyword">is</span> free software; see the source <span class="keyword">for</span> copying conditions.</div><div class="line">There <span class="keyword">is</span> no warranty, <span class="keyword">not</span> even <span class="keyword">for</span> merchantability <span class="keyword">or</span> fitness</div><div class="line"><span class="keyword">for</span> a particular purpose.</div></pre></td></tr></table></figure></p>
<p>另一个坑是，hexo-renderer-pandoc插件的作者使用的是pandoc markdown，所以默认是只支持pandoc markdown，修改代码之后才可以识别php markdown的脚注，像这样<code>[^1]</code>，示例可以参考前面的例子。</p>
<p>顺便说一下，hexo-renderer-pandoc插件代码的逻辑还是很清楚的(也很短)，主要就几个部分，打开文件，处理文件，关闭文件，还有按文件扩展名注册文件的代码放在最后。修改的地方就是pandoc运行时候的参数，参考pandoc的User Guide就可以知道这些参数是干什么的，甚至可以通过修改参数获得更多文件的支持。<code>var pandoc = spawn('pandoc', args);</code>这一行是pandoc运行的命令，可以看到pandoc前面没有任何路径信息，所以要放到PATH环境变量中。</p>
<h2>4 pacman系列主题中的代码内空行bug</h2>
<p>hexo的主题主要有几个系列，从官方主题更改的landscape系列、light系列，还有开发者自己贡献的pacman系列，我自己比较偏好pacman和landscape系列的主题，pacman中比较喜欢<a href="https://github.com/wizicer/iceman" target="_blank" rel="external">iceman</a>和<a href="https://github.com/zhanglun/hexo-theme/tree/master/Tinny" target="_blank" rel="external">tinny</a>，landscape系列中比较喜欢<a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="external">landscape-plus</a>和<a href="https://github.com/myqianlan/hexo-theme-moyi" target="_blank" rel="external">moyi</a>，还有很多漂亮的主题，虽然有demo，但是我使用的时候都报错。最后还是选取了tinny，其实我更加喜欢landscape系列主题，但是其文章是默认在首页中显示全文的，需要手动加入<code>&lt;!-- more --&gt;</code>才能生成首页预览的效果，我比较懒，不想加了，因此选择了pacman系列的。</p>
<p>pacman系列主题有一个共有的问题，代码中的空行会被压缩，而landscape系列主题就没有这个问题。干说不是很好理解，看例子，比如这样一段markdown，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`<span class="javascript"></span>``<span class="javascript">python</span></div><div class="line">import <span class="keyword">this</span></div><div class="line"></div><div class="line">print <span class="string">'something'</span></div><div class="line">``<span class="javascript"></span>`</div></pre></td></tr></table></figure></p>
<p>中间有一个空行，pacman主题默认情况下会压缩掉这个空行，生成类似这样的页面，</p>
<p><img src="/images/201412-hexo-blog/hexo-code-err.png"></p>
<p>中间的空行不见了，而且代码行数的数字和代码的内容视觉上也没有在同一行上，而实际上，我们想要的是应该是这样的结果</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> this</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'something'</span></div></pre></td></tr></table></figure></p>
<p>几乎所有，至少是我尝试过的所有的，pacman主题都有这个问题，解决方法是，在主题的<code>source/css/_base/code.styl</code>文件中<code>.gist</code>之前，加入下面两行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  .gutter <span class="keyword">pre</span></div><div class="line">    @extend $<span class="built_in">line</span>-numbers</div><div class="line">    text-align <span class="keyword">right</span></div><div class="line">    padding-<span class="keyword">right</span> <span class="number">1.5</span><span class="keyword">em</span></div><div class="line">  </div><div class="line">  // <span class="built_in">add</span> follows</div><div class="line">  .<span class="built_in">line</span></div><div class="line">    heigh<span class="variable">t:</span> <span class="number">24</span>px</div><div class="line">    </div><div class="line">.gist</div><div class="line">  margin <span class="number">0.5</span><span class="keyword">em</span> <span class="number">0</span></div><div class="line">  background <span class="keyword">highlight</span>-background</div></pre></td></tr></table></figure></p>
<p>加入<code>.line</code>设置，强制指定了代码的每一行的行高都是24px，我尝试了其他的变量来替代，都不是很好，如果有更好的改法，可以联系我。这是整个格式优化中我花时间最长的一个改动，尤其对于我这种从来没做过前端，而且css、js又都不太懂的人。</p>
<h2>5 代码高亮的着色方案改为monokai</h2>
<p>代码高亮的着色方案在多数的hexo主题中，都是tomorrow着色，我是monokai着色的忠实粉丝，有木有办法改为monokai呢？</p>
<p>landscape-plus给出了一个monokai着色的方法，原来主题的颜色都是在code.styl中写死的，只要改这段即可。原本的着色方案可能是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#1d1f21</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#282a2e</span></div><div class="line"><span class="variable">highlight-line-numbers =</span> <span class="comment">#666</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#373b41</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#c5c8c6</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#969896</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#cc6666</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#de935f</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#f0c674</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#b5bd68</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#8abeb7</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#81a2be</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#b294bb</span></div></pre></td></tr></table></figure></p>
<p>可以看到，颜色的rgb值都被赋值在了一系列变量中，只要修改这些常数值即可，这个活儿landscape-plus已经做了，把他们的code.styl中的这一段copy过来替换原有的即可，新的着色方案是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#272822</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#3E3D32</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#49483E</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#F8F8F2</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#75715E</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#F92672</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#FD971F</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#E6DB74</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#A6E22E</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#A1EFE4</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#66D9EF</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#AE81FF</span></div></pre></td></tr></table></figure></p>
<p>code.styl的末尾<code>pre</code>那一行到结束，还有一段不同的代码引用那一种着色方案的声明，同样也用landscape-plus中的相应内容替换。替换完之后，就能发现hexo已经开始用monokai着色了。</p>
<p>可以看出来，这种着色方案的修改方法比较死板，如果你需要某种着色方案但并不清楚颜色的rgb值，就无解了。其实，tinny主题本身其实提供了highlightjs着色方案，按主题的readme上所说，只要在主题的_config.yml中更改配置项即可，可惜我没有试成功……可能有其他主题可以做到。</p>
<h2>6 tinny主题的字体修改</h2>
<p>tinny主题的作者把pacman的一些字体给改了，用了更小更紧凑的一些字体。但是我还是喜欢原先的pacman的字体，怎么办呢？通过和iceman对比文件发现，<code>source/css/_partial/</code>目录下的article.styl的内容有差异，用iceman的这个文件替代；还有，tinny在该目录下多了一个addByMe.styl文件，为了和iceman一致，删除之。</p>
<p>改完之后，基本和iceman比较相似了，感觉字体还是比较小，不知道为什么。</p>
<h2>7 主题的顶部横幅(header)宽度调整</h2>
<p>改完这些之后，设置自己的博客名、作者名、想说的话等等，基本已经挺好的了，还有不足的就是博客的顶部横幅，是这样，</p>
<p><img src="/images/201412-hexo-blog/hexo-header-err.png"></p>
<p>感觉明明可以一行显示的内容，被强迫分在了两行中显示，左上角和右下角的内容如果可以合并在一行里面显示就比较好了。如果需要这样，可以调整做上角的文本的宽度，在<code>source/css/_partial/</code>目录下的header.styl中，大约30多行的位置，有这样一段，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#textlogo</span></div><div class="line">  <span class="attribute">float</span> <span class="attribute">left</span></div><div class="line">  <span class="attribute">margin-left</span> 0<span class="class">.5em</span></div><div class="line">  <span class="attribute">width</span> 65%</div></pre></td></tr></table></figure></p>
<p>可能表示左上角的文本宽度要占用整个横幅的65%，像我的博客，左上角的文本并不长，缩短这个宽度也是可以的，改为55%就变成现在这样的效果。</p>
<h2>8 仍然存在的bug</h2>
<p>我做的主要修改就是以上这些，如果说还有一些值得进一步折腾的话，还可以继续。比如，在顶部的横幅中，目前没有支持categories，但是tags是支持的，如果要设置categories，可以按主题中的说明，在categories目录中建立一个index.md的文件，内容是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: categories</div><div class="line"><span class="header">title: categories</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>但是，我这样操作了，但是网页的内容还是tags的，所以我把categories从顶部横幅中去掉了。还有一个问题是，代码中的区块注释没有显示对颜色，但是单行注释是没有问题的。错误的颜色如下，</p>
<p><img src="/images/201412-hexo-blog/hexo-comment-err.png"></p>
<p>第一行显示对了颜色，为灰色，但是第二行一直到最后一行都是白色，颜色错误。除此之外，也有整个注释区块都是白色的错误情况，至今没有找到很好的解决办法，试了一些别的主题，多数都有这个问题，只有一些个别的主题，似乎是用动态调用highlightjs的方法解决了这个问题，但是其主题的代码结构和普通的差异很大，不太会改。</p>
<p>以上是我折腾这个博客的过程，到此为止，已经花了两个周末多了，不能再往下花时间了。基本上，如果使用pandoc，hexo可以变的非常灵活，任何的markdown方言都不在话下。</p>
<p>感谢文中所有提到的开源项目的贡献者。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://code.wileam.com/build-a-hexo-blog-and-optimize/" target="_blank" rel="external">http://code.wileam.com/build-a-hexo-blog-and-optimize/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<a]]>
    </summary>
    
      <category term="Hexo" scheme="http://valleylord.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/tags/Blog/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/categories/Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的性能监控工具pgCluu试用]]></title>
    <link href="http://valleylord.github.io/post/201412-postgres-pgcluu/"/>
    <id>http://valleylord.github.io/post/201412-postgres-pgcluu/</id>
    <published>2014-12-03T12:00:00.000Z</published>
    <updated>2014-12-05T01:20:41.000Z</updated>
    <content type="html"><![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托管在github上，其项目主页在<a href="https://github.com/darold/pgcluu" target="_blank" rel="external">这里</a>，也可以使用<code>git clone</code>从仓库克隆该项目。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy Downloads]$ git clone https://github.com/darold/pgcluu.git </div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/postgres/Downloads/pgcluu/.git/</div><div class="line">remote: Counting objects: <span class="number">807</span>, done.</div><div class="line">remote: Total <span class="number">807</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">807</span>/<span class="number">807</span>), <span class="number">958.99</span> KiB | <span class="number">14</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">529</span>/<span class="number">529</span>), done.</div></pre></td></tr></table></figure></p>
<p>如果是用于生产使用，还是建议去下载稳定的release版本，在<a href="https://github.com/darold/pgcluu/releases" target="_blank" rel="external">这里</a>有下载，本文使用的是<a href="https://github.com/darold/pgcluu/archive/v2.1.tar.gz" target="_blank" rel="external">2.1稳定版本</a>。</p>
<p>然后就是和大多数linux软件一样，开始做<code>make &amp; make install</code>，pgCluu比较特别的地方是，没有用<code>configure</code>生成Makefile，而是用一个perl脚本来生成。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ perl Makefile.PL </div><div class="line">Checking <span class="keyword">if</span> your kit is complete...</div><div class="line">Looks good</div><div class="line">Writing Makefile <span class="keyword">for</span> pgCluu</div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ make</div><div class="line">cp pgcluu_collectd blib/script/pgcluu_collectd</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu_collectd</div><div class="line">cp pgcluu blib/script/pgcluu</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu</div><div class="line">Manifying blib/man1/pgcluu.<span class="number">1</span></div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ <span class="built_in">sudo</span> make install</div><div class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> postgres: </div><div class="line">Installing /usr/local/share/man/man1/pgcluu.<span class="number">1</span></div><div class="line">Installing /usr/local/bin/pgcluu_collectd</div><div class="line">Installing /usr/local/bin/pgcluu</div><div class="line">Appending installation info to /usr/lib64/perl5/perllocal.pod</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-install.png"></p>
<p>默认情况下，<code>pgcluu</code>和<code>pgcluu_collectd</code>这两个程序安装在<code>/usr/local/bin</code>目录下，两个程序都是用perl写的。</p>
<p>要测试PostgreSQL的性能，为了能看到明显一些的结果，要给数据库加一些压力，本文采用之前的文章用pgbench的初始化方式，给数据库加一些DML和DDL操作的压力。命令如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)); </div><div class="line"><span class="keyword">do</span></div><div class="line">    time pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">16</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench; </div><div class="line"><span class="keyword">done</span>;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-pgbench.png"></p>
<p>以上命令中，测试用的数据库名是pgbench。为了可以持续增加数据库压力，对数据库反复执行了8次初始化，每次初始化的时间大约在15～20s(在我的测试机器上)，因此数据库繁忙的时间总共大约有120～160s。</p>
<p>然后建立收集数据的目录，并开始收集数据库的性能数据，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ mkdir /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -D -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line">LOG: Detach from terminal with pid: <span class="number">13352</span></div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -k</div><div class="line">OK: pgcluu_collectd exited with value <span class="number">0</span></div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect1.png"></p>
<p>上述参数中，<code>-D</code>表示后台运行；<code>-i 30</code>表示30秒收集一次数据；<code>/tmp/stat_db1/</code>是收集数据保存的目录；其他参数表示数据库的地址，用户名和数据库名。由于程序在后台运行，如果需要结束程序需要使用<code>-k</code>参数，表示kill掉后台的pgcluu_collectd。本文采用的方式是另一种自动退出的方法，即<code>-E 200</code>表示程序运行200秒之后自动退出，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -E <span class="number">200</span> -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">1</span> (pid:<span class="number">8551</span>) started at Thu Dec  <span class="number">4</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">06</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">sh: LC_ALL=C sar -t -p -A <span class="number">1</span> <span class="number">1</span>: No such file or directory</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2-error.png"></p>
<p>以上脚本确保可以收集到6(200/3)次数据，但是发现了错误，提示找不到sar命令，尝试了使用-s命令指定sar的位置，以及修改源代码，仍然不能解决。决定采用<a href="https://github.com/darold/pgcluu/archive/v2.0.tar.gz" target="_blank" rel="external">2.0版</a>，重复上述操作，2.0版没有这样的问题，但是2.0版本没有提供<code>-E</code>参数，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">0</span> (pid:<span class="number">13908</span>) started at Thu Dec  <span class="number">4</span> <span class="number">22</span>:<span class="number">29</span>:<span class="number">24</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">^CLOG: Received terminating signal.</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2.png"></p>
<p>此次收集正常，运行一段时间后<code>Ctrl+C</code>退出。接下来就可以用pgcluu做报表了，一般的报表呈现是使用html，就可以简单的使用默认参数即可，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ rm -rf /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ mkdir /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu -o /tmp/report_db1/ /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ ls /tmp/report_db1/</div><div class="line">bootstrap.min.css         pgbench-index-scan.html              postgres-table-size.html                system-device0.html</div><div class="line">bootstrap.min.js          pgbench-index-size.html              regression-index-scan.html              system-device1.html</div><div class="line">cluster.html              pgbench-missing-index.html           regression-index-size.html              system.html</div><div class="line">database-pgbench.html     pgbench-statio-table.html            regression-missing-index.html           test-index-size.html</div><div class="line">database-postgres.html    pgbench-table-indexes.html           regression-redundant-index.html         test-table-indexes.html</div><div class="line">database-regression.html  pgbench-table-kind-tuples.html       regression-table-indexes.html           test-table-kind-tuples.html</div><div class="line">database-test.html        pgbench-table-query-tuples.html      regression-table-kind-tuples.html       test-table-query-tuples.html</div><div class="line">font-awesome.min.css      pgbench-table-size.html              regression-table-query-tuples.html      test-table-size.html</div><div class="line">index.html                pgbench-table-vacuums-analyzes.html  regression-table-size.html              test-table-vacuums-analyzes.html</div><div class="line">jquery.min.js             pgcluu.css                           regression-table-vacuums-analyzes.html</div><div class="line">network-device0.html      pgcluu.js                            regression-unused-index.html</div><div class="line">network-device1.html      postgres-index-size.html             sorttable.js</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-generate-report.png"></p>
<p>生成的报表直接用浏览器打开即可，主入口是<code>index.html</code>，以下列举几张图，</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report1.png"></p>
<p>这个是CPU使用情况的图，可以看到系统突然有一个激增，这是开始做初始化的时候。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report2.png"></p>
<p>这个是各个种类锁争用的情况，也是突然有一个激增。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report3.png"></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report4.png"></p>
<p>除去动态信息的图表，pgcluu也收集了静态信息，如上图中，首页上的概要数据汇总，和数据库分页下数据库大小的数据等等。</p>
<p>以上是pgCluu的使用简述。本文的操作主要参考官方代码中的<a href="https://github.com/darold/pgcluu/blob/master/README" target="_blank" rel="external">Readme</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托管]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的rpm打包]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-rpm/"/>
    <id>http://valleylord.github.io/post/201411-postgres-rpm/</id>
    <published>2014-11-30T07:58:00.000Z</published>
    <updated>2014-12-03T01:16:58.000Z</updated>
    <content type="html"><![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ tar -zcf mypostgresql.tar.gz mypostgresql/</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ ls</div><div class="line">my_extension  mypostgresql  mypostgresql.tar.gz  postgresql</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-tar.png"></p>
<p>将打包好的源码包文件放到<code>$HOME/rpmbuild/SOURCES/</code>目录下，然后编辑描述rpm包的spec文件，spec文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Summary:   test mypostgresql </div><div class="line">Name:      mypostgresql </div><div class="line">Version:   <span class="number">1.0</span><span class="number">.0</span></div><div class="line">Release:   <span class="number">1</span></div><div class="line">License:   MIT</div><div class="line">Group:     Applications/Databases </div><div class="line">Source:    mypostgresql.tar.gz</div><div class="line">BuildRoot: <span class="variable">%{_tmppath}</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span>-<span class="variable">%{release}</span>-root</div><div class="line">Url:       http:<span class="comment">//www.test.com</span></div><div class="line">Packager:  test</div><div class="line">Prefix:    <span class="variable">%{_prefix}</span></div><div class="line">Prefix:    <span class="variable">%{_sysconfdir}</span></div><div class="line"><span class="variable">%define</span>    userpath /home/mypostgresql</div><div class="line"></div><div class="line"><span class="variable">%description</span></div><div class="line">test mypostgresql. </div><div class="line"></div><div class="line"><span class="variable">%prep</span></div><div class="line"><span class="variable">%setup</span> -c</div><div class="line"><span class="variable">%install</span></div><div class="line">install -d <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line">cp -a <span class="variable">%{name}</span>* <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line"></div><div class="line"><span class="variable">%clean</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_ROOT</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_DIR</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span></div><div class="line"></div><div class="line"><span class="variable">%files</span></div><div class="line"><span class="variable">%defattr</span>(-,root,root)</div><div class="line"><span class="variable">%{userpath}</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-spec.png"></p>
<p>由于需要用rpmbuild来打包，所以需要先安装rpmbuild。</p>
<p><img src="/images/201411-postgres-rpm/rpm-install-rpmbuild.png"></p>
<p>然后运行<code>rpmbuild -ba mypostgresql.spec</code>来打包，打包过程有很长的输出，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Checking for unpackaged file(s): /usr/lib/rpm/check-files /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</div><div class="line">Wrote: /home/postgres/rpmbuild/SRPMS/mypostgresql-1.0.0-1.src.rpm</div><div class="line">Wrote: /home/postgres/rpmbuild/RPMS/x86_64/mypostgresql-1.0.0-1.x86_64.rpm</div><div class="line">Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.MdWKRJ</div><div class="line"><span class="addition">+ umask 022</span></div><div class="line"><span class="addition">+ cd /home/postgres/rpmbuild/BUILD</span></div><div class="line"><span class="addition">+ cd mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILD/mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ exit 0</span></div><div class="line">[postgres@anzhy pg9.3.4]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-pack.png"></p>
<p>看到以上结果，就可以认为打包成功。进一步的确认可以查看生成的打包文件，目录在<code>$HOME/rpmbuild/RPMS/x86_64/</code>下，是程序包文件；还有一个是源码包文件，在<code>$HOME/rpmbuild/SRPMS/</code>下。</p>
<p><img src="/images/201411-postgres-rpm/rpm-file.png"></p>
<p>本文参考了<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.chinaunix.net/uid-24347760-id-1989580.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-24347760-id-1989580.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.chinaunix.net/uid-7530389-id-2050100.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-7530389-id-2050100.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr><]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 8新特性(What's New in Java 8 中文翻译版)]]></title>
    <link href="http://valleylord.github.io/post/201411-java-new-features/"/>
    <id>http://valleylord.github.io/post/201411-java-new-features/</id>
    <published>2014-11-29T05:16:00.000Z</published>
    <updated>2014-12-08T04:49:17.000Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多人一样，当得知它被推迟的时候，我感到很失望。不过，推迟总比没有好。</p>
<p>Java 8是Java语言的一大步改进，写这本书的过程强迫我学习了很多。在Lambda项目中，Java有了闭包语法、方法引用和接口的默认方法，项目规划加入了很多函数式语言的特性，并且如Java开发者期待的那样，并没有损失清晰性和简洁性。</p>
<p>除去Lambda项目，Java 8也有很多其他改动，包括新的Date和Time的API(JSR 310)、Nashorn JavaScript引擎、在HotSpot虚拟机中移除了永久代等等。</p>
<p>感谢以下作者提供了很有价值的资源：</p>
<ul>
<li>Brian Goetz – <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="external">Lambda综述</a></li>
<li>Aleksey Shipilev – <a href="https://github.com/shipilev/jdk8-lambda-samples" target="_blank" rel="external">jdk8 lambda示例</a></li>
<li>Richard Warburton – <a href="http://shop.oreilly.com/product/0636920030713.do" target="_blank" rel="external">Java 8 Lambdas</a></li>
<li>Julien Ponge – Oracle Nashorn, 2014年1~2月的Java Magazine 上的一篇文章</li>
<li>Venkat Subramaniam – <a href="http://blog.agiledeveloper.com/" target="_blank" rel="external">agiledeveloper.com</a></li>
<li>Java 8的所有开发人员</li>
<li>Guava、joda-time、Groovy和Scala的开发人员</li>
</ul>
<h2>1 概览</h2>
<p>本书是Java 8的简短介绍，读完后，你会对这些新特性有一个基本的了解，并可以开始使用。</p>
<p>本书假定读者已经很了解Java语言和JVM虚拟机，如果不熟悉包含Java 7在内的语言特性，书中的一些例子可能会比较困难。</p>
<p>Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
<li>其他</li>
</ul>
<p>阅读本书的最好办法是打开一个支持Java 8的IDE来试试这些新特性。</p>
<blockquote>
<p>代码示例在<a href="https://github.com/adamd/hellojava8" target="_blank" rel="external">这里</a></p>
</blockquote>
<h2>2 lambda表达式</h2>
<p>Java 8最大的新特性就是语言级的支持了<em>lambda表达式</em>(Lambda项目)。lambda表达式很像包含一个自动推断类型方法的匿名类的语法糖<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，然而对于简化开发有重大意义。</p>
<h3>2.1 语法</h3>
<p>lambda表达式的主要语法是：参数-&gt;方法体。编译器通常可以根据lambda表达式的上下文，来确定使用的函数接口<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>和参数类型。这个语法中有4个重要规则：</p>
<ul>
<li>声明参数的类型是非强制的；</li>
<li>如果只有一个参数，那么参数外的括号()是非强制的；</li>
<li>使用大括号{}是非强制的(除非需要使用多个语句)；</li>
<li>如果只有一个语句返回一个结果，那么<code>return</code>关键字是非强制的。</li>
</ul>
<p>这里是一些语法的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">() -&gt; System.out.println(<span class="keyword">this</span>)</div><div class="line">(String str) -&gt; System.out.println(str)</div><div class="line">str -&gt; System.out.println(str)</div><div class="line">(String s1, String s2) -&gt; { <span class="keyword">return</span> s2.length() - s1.length(); }</div><div class="line">(s1, s2) -&gt; s2.length() - s1.length()</div></pre></td></tr></table></figure></p>
<p>最后一个表达式可以用来做list的排序，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strArray, </div><div class="line">  (String s1, String s2) -&gt; s2.length() - s1.length());</div></pre></td></tr></table></figure></p>
<p>在此例中，lambda表达式实现了<code>Comparator</code>接口来按长度排序字符串。</p>
<h3>2.2 范围</h3>
<p>这是一个使用lambda及Runnable接口的短例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</div><div class="line">	Runnable r1 = () -&gt; out.println(<span class="keyword">this</span>);</div><div class="line">	Runnable r2 = () -&gt; out.println(toString());</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String <span class="title">toString</span>() { <span class="keyword">return</span> <span class="string">"Hello, world!"</span>; }</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String... args) {</div><div class="line">		<span class="keyword">new</span> Hello().r1.run(); <span class="comment">//Hello, world!</span></div><div class="line">		<span class="keyword">new</span> Hello().r2.run(); <span class="comment">//Hello, world!</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>值得关注的是<code>r1</code>和<code>r2</code>两个lambda调用<code>Hello</code>类的<code>toStrin()</code>方法，这展示了lambda可用的范围。</p>
<p>也可以引用常量或<em>实际上</em>的常量(effectively final variables)，变量如果只被赋值一次，就是实际上的常量。</p>
<p>例如，使用Spring的Hibernate模板：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"delete * from User"</span>;</div><div class="line">getHibernateTemplate().execute(session -&gt; </div><div class="line">    session.createSQLQuery(sql).uniqueResult());</div></pre></td></tr></table></figure></p>
<p>以上代码中，你可以引用变量<code>sql</code>因为它只被赋值了一次，如果它再被赋值一次的话，就会导致编译错误。</p>
<h3>2.3 方法引用</h3>
<p>lambda表达式类似一个非对象的方法，如果我们可以引用已有方法来替代lambda表达式岂非更好？这正是<em>方法引用</em>所能做的。</p>
<p>例如，如果你需要经常根据文件的类型来过滤一系列文件，假定你已有以下一些用于确定文件类型的方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilters</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsPdf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsTxt</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsRtf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>在需要过滤文件的时候，你可以用方法引用，如下例所示(假设已经定义了方法<code>getFiles</code>返回<code>Stream</code>)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;File&gt; pdfs = getFiles().filter(FileFilters::fileIsPdf);</div><div class="line">Stream&lt;File&gt; txts = getFiles().filter(FileFilters::fileIsTxt);</div><div class="line">Stream&lt;File&gt; rtfs = getFiles().filter(FileFilters::fileIsRtf);</div></pre></td></tr></table></figure></p>
<p>方法引用可以指向：</p>
<ul>
<li>静态方法</li>
<li>实例方法</li>
<li><em>特定</em>实例上的方法</li>
<li>构造器(如，<code>TreeSet::new</code>)</li>
</ul>
<p>例如，使用新的<code>java.nio.file.Files.lines</code>方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">         .map(String::trim)</div><div class="line">         .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码读入文件&quot;Nio.java&quot;，对每一行调用<code>trim()</code>，并打印每一行。</p>
<p>注意，<code>System.out::println</code>表示<code>PrintStream</code>实例的<code>println</code>方法。</p>
<h3>2.4 函数接口</h3>
<p>Java 8中定义的<em>函数接口</em>是仅包含一个抽象方法的接口，这对之前版本的Java中添加的接口也有效。</p>
<p>Java 8在<code>java.util.function</code>包中引入了一些新的函数接口。</p>
<ul>
<li>Function<t,r> - 输入T类型的对象返回R类型的对象。</t,r></li>
<li>Supplier<t> - 仅返回T类型对象。</t></li>
<li>Predicate<t> - 根据T类型的输入返回布尔值。</t></li>
<li>Consumer<t> - 根据T类型的输入执行操作。</t></li>
<li>BiFunction - 和Function类似，但有2个参数。</li>
<li>BiConsumer - 和Consumer类似，但有2个参数。</li>
</ul>
<p>它也为基础类型引入了一些派生的接口，例如：</p>
<ul>
<li>IntConsumer</li>
<li>IntFunction<r></r></li>
<li>IntPredicate</li>
<li>IntSupplier</li>
</ul>
<blockquote>
<p>更多信息请参考<a href="http://download.java.net/jdk8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function Javadocs</a></p>
</blockquote>
<p>函数接口最屌的是可以用任何能完成其职责的对象来赋值给它，正如以下代码示例，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function&lt;String, String&gt; atr = (name) -&gt; {<span class="keyword">return</span> <span class="string">"@"</span> + name;};</div><div class="line">Function&lt;String, Integer&gt; leng = (name) -&gt; name.length();</div><div class="line">Function&lt;String, Integer&gt; leng2 = String::length;</div></pre></td></tr></table></figure></p>
<p>这些代码在Java 8中是完全合法的，第一行定义了在String前插入'@'的函数；后两行是相同的，定义了获取String长度的函数。</p>
<p>Java编译器已经足够聪明到可以将String的<code>length()</code>的方法引用转换为<code>Function</code>(函数接口)，其<code>apply</code>方法输入String并返回Integer。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String s : args) out.println(leng2.apply(s));</div></pre></td></tr></table></figure></p>
<p>会打印所有输入字符串的长度。</p>
<p>任意接口都可以是函数接口，而不仅仅是哪些由Java引入的方法。可以使用注解<code>@FunctionalInterface</code>来表示你认为一个接口是函数接口。尽管不必要，如果你的接口不满足要求(如，只有一个抽象方法)，将会导致编译错误。</p>
<blockquote>
<p><strong>Github</strong></p>
</blockquote>
<blockquote>
<p>更多例子请参考jdk8 lambda示例</p>
</blockquote>
<h3>2.5 与Java 7的比较</h3>
<p>为了更好的阐述lambda表达式的优势，这里的一些例子展示了如何在Java 8中简化Java 7的代码。</p>
<p><strong>创建<code>ActionListener</code></strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">ActionListener al = <span class="keyword">new</span> ActionListener() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span>(ActionEvent e) {</div><div class="line">        System.out.println(e.getActionCommand());</div><div class="line">    }</div><div class="line">};</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">ActionListener al8 = e -&gt; System.out.println(e.getActionCommand());</div></pre></td></tr></table></figure></p>
<p><strong>打印一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (String s : list) {</div><div class="line">    System.out.println(s);</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">list.forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>排序一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String s1, String s2) {</div><div class="line">        <span class="keyword">return</span> s1.length() - s2.length();</div><div class="line">    }</div><div class="line">});</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">Collections.sort(list, (s1, s2) -&gt; s1.length() - s2.length());</div><div class="line"><span class="comment">// or</span></div><div class="line">list.sort(Comparator.comparingInt(String::length));</div></pre></td></tr></table></figure></p>
<p><strong>排序</strong></p>
<p>对排序的例子，假定已有如下的<code>Person</code>类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</div><div class="line"></div><div class="line">    String firstName;</div><div class="line">    String lastName;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getFirstName</span>() {</div><div class="line">        <span class="keyword">return</span> firstName;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getLastName</span>() {</div><div class="line">        <span class="keyword">return</span> lastName;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以下展示了你如何在Java 7中按姓和名来排序：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Person p1, Person p2) {</div><div class="line">        <span class="keyword">int</span> n = p1.getLastName().compareTo(p2.getLastName());</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">return</span> p1.getFirstName().compareTo(p2.getFirstName());</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure></p>
<p>在Java 8中，代码可以减短为如下这样：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list.sort(Comparator.comparing(Person::getLastName)</div><div class="line">        .thenComparing(Person::getFirstName));</div></pre></td></tr></table></figure></p>
<blockquote>
<p>本例使用了接口(<code>comparing</code>)的静态方法和下一章讨论的默认方法(<code>thenComparing</code>)。</p>
</blockquote>
<h2>3 默认方法</h2>
<p>为了在核心的Collection API中加入<code>stream</code>方法，Java需要另一个新特性——<em>默认方法</em>(也称作Defender方法，或虚拟扩展方法Virtual Extension methods)。这样，就可以为<code>List</code>接口增加新的方法而不破坏所有已有的实现(向后兼容性)。</p>
<p>默认方法可以加入到任何接口中，如默认方法这个名称表达的意思，任何实现了接口单没有重写方法的类会获得默认实现。</p>
<p>例如，<code>Collection</code>接口中的<code>stream</code>方法就类似如下的定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span> <span class="keyword">public</span> Stream <span class="title">stream</span>() {</div><div class="line">	<span class="keyword">return</span> StreamSupport.stream(spliterator());</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多分隔符(spliterator)的信息可以参考<a href="http://download.java.net/jdk8/docs/api/java/util/Collection.html#spliterator--" target="_blank" rel="external">the Java docs</a></p>
</blockquote>
<p>如果你需要其他行为的话，你可以重载默认方法。</p>
<h3>3.1 默认的和函数的(接口)</h3>
<p>接口可以有一个或多个默认方法，并且仍然是函数接口。</p>
<p>例如，来看看<code>Iterable</code>接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span> </span>{</div><div class="line">	Iterator iterator();</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> forEach(Consumer&lt; ? <span class="keyword">super</span> T&gt; action) {</div><div class="line">		Objects.requireNonNull(action);</div><div class="line">		<span class="keyword">for</span> (T t : <span class="keyword">this</span>) {</div><div class="line">			action.accept(t);</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>它包含了<code>iterator()</code>方法和<code>forEach</code>方法。</p>
<h3>3.2 多个默认方法</h3>
<p>在一些罕见的例子里，你的类实现了2个或多个接口，这些接口中可能定义了相同的默认方法，此时Java会跑出编译错误。你必须重载这些方法或选择其中一个接口的实现。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface Foo {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Foo!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">interface Bar {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Bar!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">class FooBar implements Foo, Bar {</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">void</span> talk() { Foo.<span class="keyword">super</span>.talk(); }			</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码中，<code>talk</code>被重载了，它调用了<code>Foo</code>的<code>talk</code>方法。这与你引用一个Java 8之前的超类的语法相类似。</p>
<h3>3.3 接口中的静态方法</h3>
<p>尽管与默认方法不是强相关，可以给接口加入静态方法对Java语言来说也是一个类似的改动。</p>
<p>例如，<em>Stream</em>接口中有很多静态方法。这让&quot;帮助&quot;方法很容易就能找到，因为他们能很容易在接口中直接定位，而不是在另一个类中，如<em>StreamUtil</em>或<em>Streams</em>。</p>
<p>这是一个新的<em>Stream</em>接口的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span>(T... values) {</div><div class="line"> <span class="keyword">return</span> Arrays.stream(values);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上方法根据给定值创建一个新的流。</p>
<h2>4 Stream(流)</h2>
<p><code>Stream</code>接口在Java 8中是如此基础的一部分，因此值得为其单独花一章来说。</p>
<h3>4.1 什么是Stream？</h3>
<p><code>Stream</code>接口在<code>java.util.stream</code>包中，它表示一列对象，有些类似Iterator接口。然而，与Iterator不同的是，它支持并行执行。</p>
<p>Stream接口支持map/filter/reduce模式，且惰性执行，这构成了Java 8函数式编程的基石(和lambda一起)。</p>
<p>出于性能考虑，也有一些派生自原始流的IntStream、DoubleStream和LongStream。</p>
<h3>4.2 生成Stream</h3>
<p>Java 8中有很多种方法来创建流，很多现有的Java核心库的类都有返回Stream的方法。</p>
<p><strong>Stream化的Collection(集合)</strong></p>
<p>最常见的创建Stream的方法是从<code>Collection</code>。</p>
<p>Colletion接口有两个默认方法来创建Stream：</p>
<ul>
<li><code>stream()</code>：返回源是Collection的一个顺序流；</li>
<li><code>parallelStream()</code>：返回源是Collection的一个可能并行的流。</li>
</ul>
<p>Stream的顺序性依赖于源头的Collection，正如Iterator一样。</p>
<p><strong>Stream化的文件</strong></p>
<p><code>BufferedReader</code>现在有了<code>lines()</code>方法可以返回Stream，例如<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"file"</span>);</div><div class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr)) {</div><div class="line">    br.lines().forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>也可以使用<code>Files.lines(Path filePath)</code>来把文件当做Stream来读取，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream st = Files.lines(Paths.get(<span class="string">"file"</span>))) {</div><div class="line">    st.forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>注意，这会惰性求值，它不会读取整个文件，仅在你调用时读取。</p>
<blockquote>
<p>！！！<code>Files.lines(Path)</code>：任何在处理文件时(在文件打开之后)抛出的<code>IOException</code>会被包装在<code>UncheckedIOException</code>中并抛出。</p>
</blockquote>
<p><strong>Stream化文件树</strong></p>
<p><code>Files</code>类中有几个静态方法可以用Stream来浏览文件树。</p>
<ul>
<li><code>list(Path dir)</code> – 给定目录中的文件Stream。</li>
<li><code>walk(Path dir)</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> – 从给定目录开始以深度有些方式便利文件树的Stream。</li>
<li><code>walk(Path dir, int maxDepth)</code> – 和<code>walk(dir)</code>相同，但是有最大深度限制。</li>
</ul>
<p><strong>Stream化文本模式</strong></p>
<p><a href="http://download.java.net/jdk8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">Pattern</a>类现在有了方法<code>splitAsStream(CharSequence)</code>可以创建Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"><span class="comment">// later on...</span></div><div class="line">Pattern patt = Pattern.compile(<span class="string">","</span>);</div><div class="line">patt.splitAsStream(<span class="string">"a,b,c"</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码使用了一个简易的模式，逗号','，将文本拆分成Stream并打印。这会产生以下输出：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line"><span class="built_in">c</span></div></pre></td></tr></table></figure></p>
<p><strong>无限Stream</strong></p>
<p>使用Stream的<code>generate</code>和<code>iterate</code>静态方法，你可以创建Stream包含无穷的对象。例如，可以调用<code>generate</code>来创建提供无穷对象的Stream，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; <span class="keyword">new</span> Dragon());</div></pre></td></tr></table></figure></p>
<p>例如，你可以使用这样的技术来产生CPU负载或内存使用信息的Stream。但是，你必须小心使用，它和无穷循环很类似。</p>
<p>你也可以使用<code>generate</code>来创建无穷随机数源的Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; Math.random());</div></pre></td></tr></table></figure></p>
<p>然而，<code>java.util.Random</code>类已经在新方法中提供了这些功能：<code>ints()</code>、<code>longs()</code>和<code>doubles()</code>。这些方法的每一个都类似如下定义：</p>
<ul>
<li><code>ints()</code>：随机整数的无穷Stream。</li>
<li><code>ints(int n, int m)</code>：n(含)和m(不含)之间的随机整数的无穷Stream。</li>
<li><code>ints(long size)</code>：给定长度的随机整数Stream。</li>
<li><code>ints(long size, int n, int m)</code>：给定长度，给定范围的随机整数Stream。</li>
</ul>
<p><code>iterate</code>方法和<code>generate</code>方法类似，但是它提供了初始值，和改变值的<code>Function</code>。例如，你可以用以下代码来便利整数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>)</div><div class="line">    .forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<p>这会持续打印出&quot;1234......&quot;直到你停止程序。</p>
<blockquote>
<p>我们之后会讨论一些停止无穷Stream的方法(<code>filter</code>和<code>limit</code>)。</p>
</blockquote>
<p><strong>Range</strong></p>
<p>还有一些方法是用于创建一段有限的整数Stream。</p>
<p>例如，<code>IntStream</code>接口的静态方法<code>range</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码会打印数字1到10。</p>
<p>每个基本Stream(IntStream、DoubleStream和LongStream)都有一个相应的<code>range</code>方法。</p>
<p><strong>Stream化任何对象</strong></p>
<p>使用以下两个方法，就可以从任意个元素或者数组创建Stream：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; s = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">Stream&lt;Object&gt; s2 = Arrays.stream(array);</div></pre></td></tr></table></figure></p>
<p><code>Stream.of</code>可以输入任意类型的任意个参数。</p>
<h3>4.3 For Each</h3>
<p>对Stream可以进行最基础操作就是循环，可以使用<code>forEach</code>方法来完成。</p>
<p>例如，打印当前目录下的所有文件，可以如下操作：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>对大多数情况而言，可以替代&quot;for循环&quot;，而且更加简洁，并且更加面向对象，因为代理了实际循环的实现。</p>
<h3>4.4 Map/Filter/Reduce</h3>
<p>lambda表达式和默认方法让我们在Java 8中可以实现map/filter/reduce，实际上，标准库中已经实现了这些。</p>
<p>例如，设想你从一列运动员姓名中获取他们的当前分数，并找出其中最高的分数。一个简单的<code>PlayerPoints</code>类和<code>getPoints</code>方法可以如下定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerPoints</span> </span>{</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> String name;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> points;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="title">PlayerPoints</span>(String name, <span class="keyword">long</span> points) {</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.points = points;</div><div class="line"> } </div><div class="line"> </div><div class="line"> <span class="keyword">public</span> String <span class="title">toString</span>() {</div><div class="line">   <span class="keyword">return</span> name + <span class="string">":"</span> + points;</div><div class="line"> }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getPoints</span>(<span class="keyword">final</span> String name) {</div><div class="line">	<span class="comment">// gets the Points for the Player</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>找出最高分运动员可以使用Java 8非常简单的实现，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  names.stream().map(name -&gt; <span class="keyword">new</span> PlayerPoints(name, getPoints(name)))</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">			(s1, s2) -&gt; (s1.points &gt; s2.points) ? s1 : s2);</div></pre></td></tr></table></figure></p>
<p>在Java 7中也可以使用<code>dollar</code>库(或其他类似Guava和Functional-Java的库)来实现，但是可能会非常的冗长，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  $(names).map(<span class="keyword">new</span> Function&lt;String, PlayerPoints&gt;() { </div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(String name) { </div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> PlayerPoints(name, getPoints(name));</div><div class="line">		}</div><div class="line">	})</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">	<span class="keyword">new</span> BiFunction&lt;PlayerPoints, PlayerPoints, PlayerPoints&gt;() {</div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(PlayerPoints s1, PlayerPoints s2) { </div><div class="line">			<span class="keyword">return</span> (s1.points &gt; s2.points) ? s1 : s2;</div><div class="line">		}</div><div class="line">	});</div></pre></td></tr></table></figure></p>
<p>用这种方法编程的最大益处(除了代码行数减少)是可以隐藏map/reduce的内在实现的能力。例如，map和reduce可能是并发实现的，允许你容易的发挥多处理器的优势。我们将在下面的章节介绍一种这么做的方法(ParallelArray)。</p>
<h3>4.5 Parallel Array(并行数组)</h3>
<p><code>ParallelArray</code>是JSR-166的一部分，但最终<a href="http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/" target="_blank" rel="external">被排除在标准的Java库</a>。它确实存在，并被发布到公共领域(可以通过JSR网站下载)。</p>
<p>虽然它早就在那，但是实在不易使用，直到闭包出现在Java语言中才改变了这一点。在Java 7中可以如下使用ParallelArray：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// with this class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> graduationYear;</div><div class="line">    <span class="keyword">double</span> gpa;</div><div class="line">}</div><div class="line"><span class="comment">// this predicate</span></div><div class="line"><span class="keyword">final</span> Ops.Predicate&lt;Student&gt; isSenior = </div><div class="line">	<span class="keyword">new</span> Ops.Predicate&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span>(Student s) {</div><div class="line">			<span class="keyword">return</span> s.graduationYear == Student.THIS_YEAR;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// and this conversion operation</span></div><div class="line"><span class="keyword">final</span> Ops.ObjectToDouble&lt;Student&gt; selectGpa = </div><div class="line">	<span class="keyword">new</span> Ops.ObjectToDouble&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> <span class="title">op</span>(Student student) {</div><div class="line">			<span class="keyword">return</span> student.gpa;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool fjPool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(fjPool, data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students.withFilter(isSenior)</div><div class="line">                         .withMapping(selectGpa)</div><div class="line">                         .max();</div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以这么做：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(pool,data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .withFilter((Student s) -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .withMapping((Student s) -&gt; s.gpa)</div><div class="line">    .max();</div></pre></td></tr></table></figure></p>
<p>然而，Java 8提供了<code>stream()</code>和<code>parallelStream()</code>使这项工作更加容易：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .parallelStream()</div><div class="line">    .filter(s -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .mapToDouble(s -&gt; s.gpa)</div><div class="line">    .max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p>这使从顺序执行的实现转为并行实现变得格外简单。</p>
<blockquote>
<p><strong>Groovy GPars</strong></p>
<p>如果使用Groovy和GPars库，现在可以类似的使用，如下所示：</p>
</blockquote>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GParsPool.withPool {</div><div class="line">   <span class="comment">// a map-reduce functional style (students is a Collection)</span></div><div class="line">   def bestGpa = students.parallel</div><div class="line">       .filter{ s -&gt; s.graduationYear == Student.THIS_YEAR }</div><div class="line">       .map{ s -&gt; s.gpa }</div><div class="line">       .max()</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>静态方法<code>GParsPool.withPool</code>输入一个闭包并使用多个方法增强任意Collection(使用Groovy的类别方法)。<code>parallel</code>方法实际上从给定的Collection创建了<code>ParallelArray</code>，并通过一个薄包装来使用它。</p>
</blockquote>
<h3>4.6 Peek(偷看)</h3>
<p>你可以&quot;偷看&quot;Stream来做一些操作但却不中断Stream。</p>
<p>例如，可以打印元素来调试代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName)</div><div class="line">    .peek(System.out::println)</div><div class="line">    .forEach(p -&gt; doSomething(p));</div></pre></td></tr></table></figure></p>
<p>可以使用任何想要的操作，但是<em>不能</em>修改元素，如果想修改的话，可以使用<code>map</code>来替代。</p>
<h3>4.7 Limit(限制)</h3>
<p><code>limit(int n)</code>方法可以用来限制Stream中元素为给定个数，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Random rnd = <span class="keyword">new</span> Random();</div><div class="line">rnd.ints().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码打印10个随机整数。</p>
<h3>4.8 Sort(排序)</h3>
<p>Stream也有<code>sort()</code>方法来给流排序。像所有Stream的<em>中间方法</em>(例如map、filter和peek)，<code>sort()</code>方法是惰性执行的，在中止操作调用(如reduce和forEach)之前，什么也不做。但是，你必须在对无限流调用<code>sort()</code>之前调用限制操作如<code>limit</code>。</p>
<p>例如，以下代码会抛出运行时异常(使用构建版本1.8.0-b132)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().sorted().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>然而，以下代码就工作正常：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().limit(<span class="number">10</span>).sorted()</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>也可以在调用<code>filter()</code>之后调用<code>sorted()</code>。例如，以下代码打印当前目录下的前5个Java文件的文件名：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName) <span class="comment">// still a path</span></div><div class="line">    .map(Path::toString) <span class="comment">// convert to Strings</span></div><div class="line">    .filter(name -&gt; name.endsWith(<span class="string">".java"</span>))</div><div class="line">    .sorted() <span class="comment">// sort them alphabetically</span></div><div class="line">    .limit(<span class="number">5</span>) <span class="comment">// first 5</span></div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码做了这些事情：</p>
<ul>
<li>列出当前目录下的所有文件。</li>
<li>将这些文件映射到文件名(译者注：即获取文件名)。</li>
<li>获取那些以&quot;.java&quot;结尾的文件名。</li>
<li>只取前5个文件名(按字母排序)。</li>
<li>打印这些文件名。</li>
</ul>
<h3>4.9 Collector(收集器)和统计量</h3>
<p>正因Stream是惰性求值，并支持并行执行，因此需要特别的方法来汇总结果，这就是Collector(收集器)。</p>
<p>Collector表示汇总Stream的元素成一个结果的方法，它包含3个部分：</p>
<ul>
<li>初始值。</li>
<li>将值加到初始值上的累加器。</li>
<li>将两个结果合并成一个的归并器。</li>
</ul>
<p>有两个方法来完成：<code>collect(supplier,accumulator,combiner)</code>和<code>collect(Collector)</code>(省略类型)。</p>
<p>可喜的是，Java 8提供的多个内建的Collector。可以通过如下方法Import这些类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.*;</div></pre></td></tr></table></figure></p>
<p><strong>简单的Collector</strong></p>
<p>最简单的collector是像<code>toList()</code>和<code>toCollection()</code>那样的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Accumulate names into a List</span></div><div class="line">List&lt;String&gt; list = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toList());</div><div class="line"></div><div class="line"><span class="comment">// Accumulate names into a TreeSet</span></div><div class="line">Set&lt;String&gt; set = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toCollection(TreeSet::<span class="keyword">new</span>));</div></pre></td></tr></table></figure></p>
<p><strong>Join(合并)</strong></p>
<p>如果你熟悉Apache Common的<code>StringUtil.join</code>，<code>joining</code>collector与其很相似。它可以使用给定的分隔符合并Stream，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String names = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<p>以上代码合并所有的名字为一个字符串，并使用逗号分割。</p>
<p><strong>统计量</strong></p>
<p>更加复杂的collector合并成单一值，例如，可以使用&quot;averaging&quot;Collector来获取平均值，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"\n-----&gt;Average line length:"</span>);</div><div class="line">System.out.println(</div><div class="line">    Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(averagingInt(String::length))</div><div class="line">        );</div></pre></td></tr></table></figure></p>
<p>以上代码计算文件&quot;Nio.java&quot;中的所有非空行长度的平均值。</p>
<p>有些情况下需要获取集合的多个统计量，但是因为Stream会因为调用<code>collect</code>而被消费，所以，必须一次性计算所有的统计量。这正是<strong>SummaryStatistics</strong>的功能，如果要使用的话，需要先import：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.IntSummaryStatistics;</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<code>summarizingInt</code>collector，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(summarizingInt(String::length));</div><div class="line"></div><div class="line">System.out.println(stats.getAverage());</div><div class="line">System.out.println(<span class="string">"count="</span> + stats.getCount());</div><div class="line">System.out.println(<span class="string">"max="</span> + stats.getMax());</div><div class="line">System.out.println(<span class="string">"min="</span> + stats.getMin());</div></pre></td></tr></table></figure></p>
<p>以上代码得到了和之前一样的平均值，并且同时也计算出了最大值、最小值和元素个数。</p>
<blockquote>
<p>也提供了<code>summarizingLong</code>和<code>summarizingDouble</code>。</p>
</blockquote>
<p>另一个等价的方法是，把Stream map到基础类型，然后调用<code>summaryStatistics()</code>，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">    .map(String::trim)</div><div class="line">    .filter(s -&gt; !s.isEmpty())</div><div class="line">    .mapToInt(String::length)</div><div class="line">    .summaryStatistics();</div></pre></td></tr></table></figure></p>
<h3>4.10 分组和分块</h3>
<p><code>groupingBy</code> collector根据提供的方法把元素分组，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by first letter of name</span></div><div class="line">List&lt;Dragon&gt; dragons = getDragons();</div><div class="line">Map&lt;Character,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(groupingBy(dragon -&gt; dragon.getName().charAt(<span class="number">0</span>)));</div></pre></td></tr></table></figure></p>
<p>类似的，<code>partitioningBy</code>方法创建一个布尔类型为键的映射，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by whether or not the dragon is green</span></div><div class="line">Map&lt;Boolean,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(partitioningBy(Dragon::isGreen));</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>并行分组</strong></p>
<p>为了并行的执行分组(如果不关心顺序的话)，可以使用<code>groupingByConcurrent</code>方法。被操作的Stream应该是无序的，这样分组才能并行执行，例如：</p>
<p><code>dragons.parallelStream().unordered().collect(groupingByConcurrent(Dragon::getColor));.</code></p>
</blockquote>
<h3>4.11 与Java 7的比较</h3>
<p>为了更好的展示Java 8的Stream的优势，以下是一些Java 7里的示例代码和新版代码的比较：</p>
<p><strong>求最大值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">double</span> max = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    <span class="keyword">if</span> (d &gt; max) {</div><div class="line">        max = d;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">max = list.stream().reduce(<span class="number">0.0</span>, Math::max);</div><div class="line"><span class="comment">// or</span></div><div class="line">max = list.stream().mapToDouble(Number::doubleValue).max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>计算平均值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">double</span> ave = <span class="number">0</span>;</div><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    total += d;</div><div class="line">}</div><div class="line">ave = total / ((<span class="keyword">double</span>) list.size());</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">ave = list.stream().mapToDouble(Number::doubleValue).average().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>打印数字1到10</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) {</div><div class="line">    System.out.println(i);</div><div class="line">}</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div><div class="line"><span class="comment">//or</span></div><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>).limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>合并多个字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7 using commons-util</span></div><div class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (Dragon dragon : dragons) </div><div class="line">    names.add(dragon.getName());</div><div class="line">String names = StringUtils.join(names, <span class="string">","</span>);</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">String names = dragons.stream()</div><div class="line">    .map(Dragon::getName)</div><div class="line">    .collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<h2>5 Optional类</h2>
<p>Java 8在<code>java.util</code>包中提供了<code>Optional</code>类来防止返回null值(会导致<code>NullPointerException</code>)。它和Google Guava的<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html" target="_blank" rel="external">Optional</a>很相似，也类似Nat Pryce的<a href="http://www.natpryce.com/articles/000776.html" target="_blank" rel="external">Maybe</a>类和Scala的Option类。</p>
<blockquote>
<p><strong>百万美元错误</strong></p>
<p>Tony Hoare，null的发明者，已经因为它的<a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake" target="_blank" rel="external">&quot;百万美元错误&quot;</a>而被记录在案。除了你对nul的看法，已经有人在编译期null检查部分和自动代码检查过程中做出了很大努力，例如，JSR-305中的<code>@Nonnull</code>注解。<code>Optional</code>让API设计者可以更简单的来避免null。</p>
</blockquote>
<p>可以用<code>Optional.of(x)</code>来包装一个非null值，<code>Optional.empty()</code>来表示值缺失，<code>Optional.ofNullable(x)</code>来从可能为空的引用创建<code>Optional</code>。</p>
<p>在创建Optional的实例之后，然后使用<code>isPresent()</code>确认是否有值，并用<code>get()</code>来获取值。Optional提供了一些其他有用的方法来处理值缺失：</p>
<ul>
<li><code>orElse(T)</code> – 如果Optional是空，则返回给定的值。</li>
<li><code>orElseGet(Supplier&lt;T&gt;)</code> – 如果Optional是空，则调用给定的提供者来产生一个值。</li>
<li><code>orElseThrow(Supplier&lt;X extends Throwable&gt;)</code> – 如果Optional是空，则调用给定的提供者来抛出一个异常。</li>
</ul>
<p>也提供了一些函数式(对lambda友好)的方法，如下：</p>
<ul>
<li><code>filter(Predicate&lt;? super T&gt; predicate)</code> – 过滤值并返回新的Optional。</li>
<li><code>flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code> – 进行Map操作并返回Optional。</li>
<li><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code> – 仅当有值(无返回值)的时候，执行给定的消费者</li>
<li><code>map(Function&lt;? super T,? extends U&gt; mapper)</code> – 用给定的Map方法并返回新的Optional。</li>
</ul>
<blockquote>
<p><strong>Stream Optional(流的Optional)</strong></p>
<p>新的<code>Stream</code>接口有一些返回Optional的方法(当Stream中没有值的时候)：</p>
<ul>
<li><code>reduce(BinaryOperator&lt;T&gt; accumulator)</code> – 把Stream reduce成单个值。、</li>
<li><code>max(Comparator&lt;? super T&gt; comparator)</code> – 返回最大值。</li>
<li><code>min(Comparator&lt;? super T&gt; comparator)</code> – 返回最小值。</li>
</ul>
</blockquote>
<h2>6 Nashorn</h2>
<p><em>Nashorn</em>替换了<code>Rhino</code>成为了Oracle JVM中默认的JavaScript引擎。由于使用的JVM的<code>invokedynamic</code>特性，Nashorn更加快，它也包含了命令行工具(<code>jjs</code>)。</p>
<h3>6.1 <code>jjs</code></h3>
<p>JDK 8包含了命令行工具<code>jjs</code>来运行JavaScript。</p>
<p>你可以通过命令行运行JavaScript文件(假定你已经把Java 8的bin目录放在了<code>$PATH</code>里面)：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jjs script.js</div></pre></td></tr></table></figure></p>
<p>这对运行脚本很有用，例如，假如你想很快求出几个数的和，如下：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line"><span class="keyword">var</span> sum = data.reduce(<span class="function"><span class="keyword">function</span><span class="params">(x, y)</span> </span>{<span class="keyword">return</span> x + y}, <span class="number">0</span>)</div><div class="line">print(sum)</div></pre></td></tr></table></figure></p>
<p>运行上述代码会打印<code>27</code>。</p>
<h3>6.2 脚本</h3>
<p>使用<code>-scripting</code>参数运行jjs进入交互的shell，然后就可以键入并执行JavaScript。</p>
<p>可以在字符串中嵌入变量并对它们求值，例如：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jjs&gt; <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">jjs&gt; print(<span class="string">"${date}"</span>)</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出当前的日期和时间。</p>
<h3>6.3 脚本引擎</h3>
<p>也可以在Java中动态的运行JavaScript。</p>
<p>首先，需要import脚本引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</div><div class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</div></pre></td></tr></table></figure></p>
<p>然后，调用<code>ScriptEngineManager</code>来获取Nashorn引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ScriptEngineManager engineManager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">ScriptEngine engine = engineManager.getEngineByName(<span class="string">"nashorn"</span>);</div></pre></td></tr></table></figure></p>
<p>现在就可以任意时候对JavaScript代码求值了：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">engine.eval(<span class="string">"p('Hello Nashorn');"</span>);</div></pre></td></tr></table></figure></p>
<p><code>eval</code>方法也可以用<code>Filereader</code>类型做输入参数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="keyword">new</span> FileReader(<span class="string">'library.js'</span>));</div></pre></td></tr></table></figure></p>
<p>这样就可以引入并运行任何JavaScript代码。然而，需要知道的是，浏览器中提供的典型变量（窗口，文档等）将不可用。</p>
<h3>6.4 引入</h3>
<p>在JavaScript中，可以通过<em>JavaImporter</em>引入并使用Java类和包。</p>
<p>例如，引入<code>java.util</code>、IO和NIO的包：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var imports = <span class="keyword">new</span> JavaImporter(java.util, java.io, java.nio.file);</div><div class="line">with (imports) {</div><div class="line">        var paths = <span class="keyword">new</span> LinkedList();</div><div class="line">        print(paths <span class="keyword">instanceof</span> LinkedList); <span class="comment">//true</span></div><div class="line">        paths.add(Paths.get(<span class="string">"file1"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file2"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file3"</span>));</div><div class="line">        print(paths) <span class="comment">// [file1, file2, file3]</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上展示了<code>paths</code>是<code>LinkedList</code>的实例，并打印list。</p>
<p>之后，就可以添加如下代码来把文本写入文件：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i &lt; paths.size(); i++)</div><div class="line">	Files.newOutputStream(paths.get(i))</div><div class="line">		.write(<span class="string">"test\n"</span>.getBytes());</div></pre></td></tr></table></figure></p>
<p>我们可以使用已有的Java类，也可以创建新的类。</p>
<h3>6.5 扩展</h3>
<p>可以使用<code>Java.type</code>和<code>Java.extend</code>方法来扩展Java类和接口。例如，可以扩展Callable接口并实现<code>call</code>方法：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> concurrent = <span class="keyword">new</span> JavaImporter(java.util, java.util.concurrent);</div><div class="line"><span class="keyword">var</span> Callable = Java.type(<span class="string">"java.util.concurrent.Callable"</span>);</div><div class="line"><span class="keyword">with</span> (concurrent) {</div><div class="line">  <span class="keyword">var</span> executor = Executors.newCachedThreadPool();</div><div class="line">  <span class="keyword">var</span> tasks = <span class="keyword">new</span> LinkedHashSet();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">200</span>; i++) {</div><div class="line">    <span class="keyword">var</span> MyTask = Java.extend(Callable, {call: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{print(<span class="string">"task "</span> + i)}})</div><div class="line">    <span class="keyword">var</span> task = <span class="keyword">new</span> MyTask();</div><div class="line">    tasks.add(task);</div><div class="line">    executor.submit(task);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3>6.6 Invocable</h3>
<p>也可以直接从Java中调用JavaScript方法。</p>
<p>首先，需要将引擎的类型转换为Invocable接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Invocable inv = (Invocable) engine;</div></pre></td></tr></table></figure></p>
<p>然后，调用任何方法只要简单的使用<code>invokeFunction</code>方法，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">inv.invokeFunction(<span class="string">"p"</span>, <span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p>
<p>最后，就可以调用<code>getInterface</code>方法用JavaScript来实现任意接口。</p>
<p>例如，已有如下的<code>JPrinter</code>接口，可以如下调用：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">JPrinter</span> </span>{</div><div class="line">    <span class="keyword">void</span> p(String s);</div><div class="line">}</div><div class="line"><span class="comment">// later on...</span></div><div class="line">JPrinter printer = inv.getInterface(JPrinter.class);</div><div class="line">printer.p(<span class="string">"Hello again!"</span>);</div></pre></td></tr></table></figure></p>
<h2>7 新的Date和Time API</h2>
<p>Java 8引入了新的Date/Time API，这些API线程安全、易用、比之前的API更加全面。Java的Calendar实现没有很多变化，这是因为它是首次引入，且<a href="http://www.joda.org/joda-time/" target="_blank" rel="external">Joda-Time</a>广泛的被认为是一个很好的替代。Java 8的新Date/Time API与Joda-Time非常相似。</p>
<h3>7.1 新的类</h3>
<p>引人注意的最注意差别是有多个不同的类来表示时间、日期、时间段、和特定时区的数据，也有一些不同日期类和时间类之间的转换器。</p>
<p>对不含时区信息的日期和时间，使用如下类：</p>
<ul>
<li><code>LocalDate</code> – 日、月、年。</li>
<li><code>LocalTime</code> – 仅含时间。</li>
<li><code>LocalDateTime</code> – 含日期和时间。</li>
</ul>
<p>对特定时区的时间，可以用<code>ZonedDateTime</code>。</p>
<p>在Java 8之前，为了计算之后8消失的时间，需要像下面这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Calendar cal = Calendar.getInstance();</div><div class="line">cal.add(Calendar.HOUR, <span class="number">8</span>);</div><div class="line">cal.getTime(); <span class="comment">// actually returns a Date</span></div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以更简单的这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime now = LocalTime.now();</div><div class="line">LocalTime later = now.plus(<span class="number">8</span>, HOURS);</div></pre></td></tr></table></figure></p>
<p>也有命名清晰的方法，如<code>plusDays</code>、<code>plusMonths</code>、<code>minusDays</code>、<code>minusMonths</code>。如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate thirtyDaysFromNow = today.plusDays(<span class="number">30</span>);</div><div class="line">LocalDate nextMonth = today.plusMonths(<span class="number">1</span>);</div><div class="line">LocalDate aMonthAgo = today.minusMonths(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>注意，每个方法都返回不同的<code>LocalDate</code>实例，原本的LocalDate对象<code>today</code>并未变化。这是因为新的Date-Time类型是不可变的，是它们变得线程安全和可缓存的。</p>
<h3>7.2 创建</h3>
<p>创建性的日期和时间对象在Java 8中更加容易也更加不易犯错。每个类型都是不可变的，且有静态工厂方法。</p>
<p>例如，创建新的LocalDate在2014-03-15这天，可以如下简单的创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>考虑跟多类型安全的话，可以使用新的枚举类型<code>Month</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>也可以通过结合LocalDate和LocalTime的实例来简单的创建LocalDateTime对象：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.of(<span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>);</div><div class="line">LocalDateTime datetime = date.atTime(time);</div></pre></td></tr></table></figure></p>
<p>也能调用(LocalDate的)以下方法：</p>
<ul>
<li><code>atTime(int hour, int minute)</code></li>
<li><code>atTime(int hour, int minute, int second)</code></li>
<li><code>atTime(int hour, int minute, int second, int nanoOfSecond)</code></li>
</ul>
<p>每个类都有<code>now()</code>方法，相应的返回调用时瞬间的时间(或日期)。</p>
<h3>7.3 枚举类型</h3>
<p>Java 8增加了一些枚举类型，如<code>java.time.temporal.ChronoUnit</code>用来表示类似&quot;天&quot;或&quot;小时&quot;的概念替换掉Calendar API中的整数常量，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</div><div class="line">LocalDate nextMonth = today.plus(<span class="number">1</span>, ChronoUnit.MONTHS);</div><div class="line">LocalDate nextYear = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</div><div class="line">LocalDate nextDecade = today.plus(<span class="number">1</span>, ChronoUnit.DECADES);</div></pre></td></tr></table></figure></p>
<p>也有<code>java.time.DayOfWeek</code>、<code>java.time.Month</code>枚举类型。</p>
<p><code>Month</code>枚举类型可以用来创建LocalDates，也可以由<code>LocalDate::getMonth</code>返回。如，以下是创建LocalDate并打印月份的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import java.time.Month;</span></div><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">27</span>);</div><div class="line">System.out.println(date.getMonth());</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出&quot;MARCH&quot;。</p>
<h3>7.4 Clock(时钟)</h3>
<p><code>Clock</code>类可以用于连接日期和时间以构建测试。在生成环境可以用普通时钟，在测试环境可以用另一个时钟。</p>
<p>获取默认的时钟，可以用以下代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clock.systemDefaultZone();</div></pre></td></tr></table></figure></p>
<p>然后clock就可以传入进工厂方法，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.now(clock);</div></pre></td></tr></table></figure></p>
<h3>7.5 时间区间和时间长度</h3>
<p>模拟人的理解，Java 8有两个类型来表示时间差，时间区间和时间长度(Period and Duration)。</p>
<p>时间长度是基于时间的时间量，例如&quot;34.5秒&quot;；时间区间是基于日期的时间量，例如&quot;2年3个月4天&quot;。</p>
<p>时间区间和时间长度可以通过<code>between</code>方法来确定：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Period p = Period.between(date1, date2);</div><div class="line">Duration d = Duration.between(time1, time2);</div></pre></td></tr></table></figure></p>
<p>也可以通过静态方法来创建，例如，时间长度可以通过任意值的天、小时、分、秒来创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Duration twoHours = Duration.ofHours(<span class="number">2</span>);</div><div class="line">Duration tenMinutes = Duration.ofMinutes(<span class="number">10</span>);</div><div class="line">Duration thirtySecs = Duration.ofSeconds(<span class="number">30</span>);</div></pre></td></tr></table></figure></p>
<p>Java 8的LocalTime类型可以加减时间区间和时间长度，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime t2 = time.plus(twoHours);</div></pre></td></tr></table></figure></p>
<h3>7.6 时间调整(<code>TemporalAdjusters</code>)</h3>
<p><code>TemporalAdjusters</code>可以用来做很麻烦的日期&quot;数学计算&quot;，这在业务功能中很常用。例如，可以用来获取&quot;某月的第一天&quot;和&quot;下个周二&quot;。</p>
<p><code>java.time.temporal.TemporalAdjusters</code>类包含了一批有用的方法来创建TemporalAdjuster，以下是其中一部分：</p>
<ul>
<li><code>firstDayOfMonth()</code></li>
<li><code>firstDayOfNextMonth()</code></li>
<li><code>firstInMonth(DayOfWeek)</code></li>
<li><code>lastDayOfMont()</code></li>
<li><code>next(DayOfWeek)</code></li>
<li><code>nextOrSame(DayOfWeek)</code></li>
<li><code>previous(DayOfWeek)</code></li>
<li><code>previousOrSame(DayOfWeek)</code></li>
</ul>
<p>用<code>TemporalAdjuster</code>的<code>with</code>方法，该方法返回date-time或date对象调整后的副本，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</div><div class="line"><span class="comment">//...</span></div><div class="line">LocalDate nextTuesday = LocalDate.now().with(next(DayOfWeek.TUESDAY));</div></pre></td></tr></table></figure></p>
<h3>7.7 Instant(即时)</h3>
<p><code>Instant</code>类表示精确到纳秒的时间点，它构成了Java 8的date-time API中计算时间的基础。</p>
<p>跟老的Date类很像，<code>Instant</code>也是从&quot;纪元&quot;(1970-01-01)开始计算时间的，且不考虑时区。</p>
<h3>7.8 时区</h3>
<p>时区是用<code>java.time.ZoneId</code>类来表示的。共有两种时区标识，基于固定偏移的和基于地理区域的。这可以用来补偿类似&quot;夏令时&quot;之类复杂情况的时间。</p>
<p>可以通过很多方法来获取时区标识的实例，以下是两个示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ZoneId mountainTime = ZoneId.of(<span class="string">"America/Denver"</span>);</div><div class="line">ZoneId myZone = ZoneId.systemDefault();</div></pre></td></tr></table></figure></p>
<p>如果要打印所有可用的标识，可以调用<code>getAvailableZoneIds()</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(ZoneId.getAvailableZoneIds());</div></pre></td></tr></table></figure></p>
<h3>7.9 向后兼容性</h3>
<p>原始的Date和Calendar对象包含<code>toInstant()</code>方法来转换到新的Date-Time API，可以调用<code>ofInstant(Insant,ZoneId)</code>方法来获取<code>LocalDateTime</code>或<code>ZonedDateTime</code>对象，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Date date = <span class="keyword">new</span> Date();</div><div class="line">Instant now = date.toInstant();</div><div class="line">LocalDateTime dateTime = LocalDateTime.ofInstant(now, myZone);</div><div class="line">ZonedDateTime zdt = ZonedDateTime.ofInstant(now, myZone);</div></pre></td></tr></table></figure></p>
<h2>8 再也没有永久代了</h2>
<blockquote>
<p>发布的实现将把类的元数据放在本地内存，并将内部的字符串和静态类移至Java堆中。<a href="http://openjdk.java.net/jeps/122" target="_blank" rel="external">http://openjdk.java.net/jeps/122</a></p>
</blockquote>
<p>大多数情况的类元数据内存分配现在被分配在了本地内存。这意味着不用再设置&quot;XX:PermSize&quot;选项了(实际上也没有了)。</p>
<p>这也意味着，在内存溢出的时候，你会得到&quot;java.lang.OutOfMemoryError: Metadata space&quot;的错误信息，而不是之前的&quot;java.lang.OutOfMemoryError: Permgen space&quot;</p>
<p>这是某种程度上Oracle JRockit和HotSpot两个JVM的一致性。</p>
<h2>9 杂项</h2>
<p>Java 8有大量你可能会忽略的新功能，因为你的注意了都被lambda吸引去了。以下是这些功能的部分：</p>
<ul>
<li><code>java.util.Base64</code></li>
<li>加密算法更新(很多)</li>
<li>JDBC 4.2</li>
<li>可重复的注解</li>
<li>类型的注解</li>
</ul>
<p>如果想获得更完整的列表，请参考<a href="http://openjdk.java.net/projects/jdk8/features/" target="_blank" rel="external">官方列表</a>。</p>
<h3>9.1 Base64</h3>
<p>知道现在，Java开发者必须依赖第三方库来编码和解码Base-64。由于这是个很常用的操作，大型的项目通常会包含多个不同的Base64实现。例如：Apache common-codec、Spring和Guava都有独立的实现。</p>
<p>出于这个原因，Java 8引入了<code>java.util.Base64</code>，其行为类似Base64的编码和解码器，有以下方法：</p>
<ul>
<li><code>getEncoder()</code></li>
<li><code>getDecoder()</code></li>
<li><code>getUrlEncoder()</code></li>
<li><code>getUrlDecoder()</code></li>
</ul>
<p>每个工厂方法返回编码器或者解码器。</p>
<p>URL Base64编码器提供URL和文件地址安全(62是-，63是_)的编码。</p>
<h3>9.2 Java类型的注解</h3>
<p>Java 8之前，注解可以用于任意的申明。在Java 8中，注解可以用于<em>类型的使用</em>，以下是一些示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Class instance creation:</span></div><div class="line"><span class="keyword">new</span> <span class="annotation">@Interned</span> RocketShip();</div><div class="line"></div><div class="line"><span class="comment">// Type cast:</span></div><div class="line">notNullString = (<span class="annotation">@NonNull</span> String) str;</div><div class="line"></div><div class="line"><span class="comment">// implements clause:</span></div><div class="line">class ImmutableSet&lt;T&gt; implements</div><div class="line">        <span class="annotation">@Readonly</span> Set&lt;<span class="annotation">@Readonly</span> T&gt; { ... }</div><div class="line"></div><div class="line"><span class="comment">// Thrown exception declaration:</span></div><div class="line"><span class="keyword">void</span> launchRocket() <span class="keyword">throws</span></div><div class="line">   	<span class="annotation">@Critical</span> FireException { ... }</div></pre></td></tr></table></figure></p>
<p>新功能注意目标在于支持类型检查的框架，如<a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="external">Checker</a>。这些框架在编译期就可以协助找到代码中的错误。</p>
<h3>9.3 可重复的注解</h3>
<p>Java 8允许使用<code>@Repeatable</code>注解的注解重复使用。</p>
<p>例如，假设你在编写一个游戏，并且想使用注解来调度方法何时被调用，你可以使用多个注解申明多个调度策略：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the first of the month and every monday at 7am</span></div><div class="line"><span class="annotation">@Schedule</span>(dayOfMonth=<span class="string">"first"</span>)</div><div class="line"><span class="annotation">@Schedule</span>(dayOfWeek=<span class="string">"Monday"</span>, hour=<span class="number">7</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGoblinInvasion</span>() { ... }</div></pre></td></tr></table></figure></p>
<p>为了将这些变得可能，你需要：</p>
<ul>
<li><code>Schedule</code>注解需要使用元注解<code>@Repeatable</code>。</li>
<li>需要另一个注解通过<code>@Repeatable</code>注解来申明。</li>
</ul>
<p>由于Java注重向后兼容性，重复的注解实际上是和另一个注解(即你的注解)一起保存的。<code>@Repeatable</code>注解的输入是一个包含注解的类，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Schedule.java</span></div><div class="line"><span class="annotation">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedule</span> </span>{...}</div><div class="line"><span class="comment">// Schedules.java</span></div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedules</span> </span>{</div><div class="line">    Schedule[] value;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>现在Schedule就是一个<code>可重复的注解</code>。</p>
<p>可以使用反射在运行期访问可重复的注解。完成这些的新方法是<code>getAnnotationsByType</code>(Class annotationClass)，在<code>Class</code>、<code>Constructor</code>和<code>Method</code>等上都有。他返回所有这样注解的数组(如果没有的话，返回空数组)。</p>
<h2>10 Java 8中的函数式编程</h2>
<p>Java 8计划添加很多函数式语言的特性却不很显著的改动Java语言。</p>
<p>当lambda表达式、方法引用、Stream接口和不可变的数据类型结合在一起，Java就可以进行所谓的&quot;函数式编程&quot;(“functional programming” (FP))了。</p>
<p>处于本书的目的，函数式编程的三大支柱是：</p>
<ul>
<li>函数</li>
<li>不可变性</li>
<li>并发性</li>
</ul>
<h3>10.1 函数</h3>
<p>当然，如其名所示，函数式编程是基于函数是第一类型的特性。Java 8可以说通过Lambda项目和<em>函数接口</em>把函数提升到了第一类型。</p>
<p><code>Function</code>接口(包括相关的接口<code>IntFunction</code>、<code>DoubleFunction</code>、<code>LongFunction</code>、<code>BiFunction</code>等)体现了Java 8在提升函数到对象过程中做出的妥协。该接口允许函数像参数一样传递，像变量一样保存，以及可以由方法返回。</p>
<p><code>Function</code>接口有以下默认方法：</p>
<ul>
<li><code>andThen(Function)</code>: 返回一个合成函数，该函数先在输入上调用本函数，在在结果上调用给定的函数。</li>
<li><code>compose(Function)</code>: 和<code>andThen</code>类似，但是顺序不一样(即，先在输入上调用给定的函数，再调用本函数)。</li>
<li><code>identity()</code>: 返回一个函数，该函数总是返回其输入值。</li>
</ul>
<p>你可以使用这些方法来创建一个创建函数的链，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer,String&gt; f = Function.&lt;Integer&gt;identity()</div><div class="line">        .andThen(i -&gt; <span class="number">2</span>*i).andThen(i -&gt; <span class="string">"str"</span> + i);</div></pre></td></tr></table></figure></p>
<p>返回的函数输入一个整数，乘以2，然后在前面添加&quot;str&quot;。</p>
<p>可以使用<code>andThen</code>任意多次来创建一个函数，记住，函数可以被传递进和返回自方法。以下是一个使用新的Date-Time API的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Function&lt;LocalDate,LocalDateTime&gt; <span class="title">dateTimeFunction</span>(</div><div class="line">    <span class="keyword">final</span> Function&lt;LocalDate,LocalDate&gt; f) {</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> f.andThen(d -&gt; d.atTime(<span class="number">2</span>, <span class="number">2</span>));</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该方法输入是一个操作<code>LocalDate</code>的函数，并转换为输出<code>LocalDateTime</code>(在时间上午<code>02:02</code>)的函数。</p>
<p><strong>Tuple(元组)</strong></p>
<p>如果需要一个有多于两个参数方法的函数接口(如，&quot;TriFunction&quot;)，那么你需要使用库自己生成。另一个处理这个问题的方法是使用一个叫<em>Tuple</em>的数据结构。</p>
<p>Tuple是一个有类型的数据结构，用于保存一列元素。一些语言，如Scala，对Tuple有内建的支持。Tuple在处理多个相关的值，但却不希望有创建新类的开销的时候很有用。</p>
<p>以下一个非常简单的实现两个元素Tuple的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A _1;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B _2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Tuple2</span>(A a, B b) {</div><div class="line">            <span class="keyword">this</span>._1 = a;</div><div class="line">            <span class="keyword">this</span>._2 = b;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> A <span class="title">get_1</span>() {</div><div class="line">            <span class="keyword">return</span> _1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> B <span class="title">get_2</span>() {</div><div class="line">            <span class="keyword">return</span> _2;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>元组也能让你近似返回多个值。</p>
<blockquote>
<p>Java中有多个可用的Tuple的实现，例如<a href="http://www.javatuples.org/" target="_blank" rel="external">javatuples</a>和<a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a>。</p>
</blockquote>
<h3>10.2 不可变性</h3>
<p>在函数式编程中，状态被认为是有害的，需要尽可能去避免，相反，<em>immutable</em>(不可变的)数据结构很受推荐。例如，<code>String</code>就是Java中的一个不可变类型。</p>
<p>正如你所知，Java 8的新Date-Time类是不可变的。而你可能没有意识到的是，<em>几乎所有</em>新加入Java 8的类都是不可变的(如Optional和Stream)。</p>
<p>然而，在使用Java 8的函数式模式的时候，必须小心防止又陷入可变模式的思维定势。例如，以下代码是应当避免的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] myCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">list.forEach(dragon -&gt; {</div><div class="line">    <span class="keyword">if</span> (dragon.isGreen()) myCount[<span class="number">0</span>]++;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>虽然你可能很聪明，但是这样的代码会导致问题，相反，你应该使用类似下面的做法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.stream().filter(Dragon::isGreen).count();</div></pre></td></tr></table></figure></p>
<p>如果发现你自己又要求助于可变性的时候，考虑是否可以使用“filter”、“map”、“reduce”和“collect”的结合做替代。</p>
<h3>10.3 并发性</h3>
<p>由于多核处理器越来越普及，并发编程变得更加重要。函数式编程为并发编程创建了坚实的基础，Java 8也使用多种方式支持并发性。</p>
<p>第一种方式是Collection的<code>parallelStream()</code>方法。它提供了一条并发使用Stream的捷径，然而，和所有优化一样，你需要测试来确认代码实际上变得更快了，并保守是使用它。太多的并发性，实际上会导致程序变慢。</p>
<p>第二种Java 8支持并发的方式是使用新的<code>CompletableFuture</code>类。它包含<code>supplyAsync</code>静态方法，其输入是函数接口<code>Supplier</code>(生产者)；它还包含方法<code>thenAccept</code>，其输入是<code>Consumer</code>(消费者)，用于处理任务的完成。<code>CompletableFuture</code>在另一个线程中调用给定的<code>Supplier</code>，并在完成时执行<code>Consumer</code>。</p>
<p>当和类似<code>CountDownLatch</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>等的类连接起来，就可以实现线程安全，并发的类似函数式的代码，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    AtomicReference&lt;DragonDistance&gt; closest = </div><div class="line">        <span class="keyword">new</span> AtomicReference&lt;&gt;(DragonDistance.worstMatch());</div><div class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(dragons.size());</div><div class="line">    dragons.forEach(dragon -&gt; {</div><div class="line">        CompletableFuture.supplyAsync(() -&gt; dragon.distance(location))</div><div class="line">          .thenAccept(result -&gt; {</div><div class="line">            closest.accumulateAndGet(result, DragonDistance::closest);</div><div class="line">            latch.countDown();</div><div class="line">            });</div><div class="line">        });</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        latch.await();</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Interrupted during calculations"</span>, e);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> closest.get().getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上例找到最近的龙的位置(假设Dragon的<code>distance</code>方法会导致耗时的计算)。</p>
<p>然而，这可以用<code>parallelStream()</code>默认方法来简化(因为过程中只有一种计算)，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    <span class="keyword">return</span> dragons.parallelStream()</div><div class="line">      .map(dragon -&gt; dragon.distance(location))</div><div class="line">      .reduce(DistancePair.worstMatch(), DragonDistance::closest)</div><div class="line">      .getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码进行了和之前的例子实质上相同的任务，但是更加简洁(函数式)。</p>
<h3>10.4 尾调用优化</h3>
<p>函数式编程的一个标志是<em>尾调用递归</em><a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>。它用迭代的方式(函数式编程中没有迭代)处理相同的问题，不幸的是，如果没有编译器适当的优化，它会导致栈溢出。</p>
<p><em>尾调用优化</em>指编译器将递归的函数调用转化为循环来避免栈溢出。例如，Lisp中使用尾调用递归的函数会自动进行这样的优化。</p>
<p>Java 8和很多其他语言一样不支持尾调用优化(目前为止)。然而，使用类似下面这样的接口来预估是可能的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tail</span>&lt;<span class="title">T</span>&gt; </span>{</div><div class="line"></div><div class="line">    Tail&lt;T&gt; apply();</div><div class="line"></div><div class="line">    <span class="keyword">default</span> <span class="keyword">boolean</span> isDone() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T result() {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not done yet."</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T invoke() {</div><div class="line">        <span class="keyword">return</span> Stream.iterate(<span class="keyword">this</span>, Tail::apply)</div><div class="line">                .filter(Tail::isDone)</div><div class="line">                .findFirst()</div><div class="line">                .get()</div><div class="line">                .result();</div><div class="line">    }</div></pre></td></tr></table></figure></p>
<p><code>Tail</code>接口有3个默认方法和1个抽象方法(<code>apply</code>)，<code>invoke()</code>方法包含了&quot;尾调用优化&quot;的主体：</p>
<ul>
<li>它使用了Stream的<code>iterate</code>方法带来的便利来创建无限Stream，这回持续的调用尾的<code>apply</code>方法。</li>
<li>然后，直到<code>isDone()</code>返回真的时候，调用<code>filter</code>和<code>findFirst</code>来停止Stream。</li>
<li>最后，返回结果。</li>
</ul>
<p>为了实现&quot;完成&quot;条件，Tail需要有以下额外的静态方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &lt;T&gt; Tail&lt;T&gt; done(<span class="keyword">final</span> T value) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tail&lt;T&gt;() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> T <span class="title">result</span>() {</div><div class="line">          <span class="keyword">return</span> value;</div><div class="line">        }  </div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span>() {</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> Tail&lt;T&gt; <span class="title">apply</span>() {</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not supported."</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用<code>Tail</code>接口，你就可以在Java 8中轻易的模拟尾调用递归。以下是使用这个接口计算<em>阶乘</em>的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">fastFactorial</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> fastFactorial(<span class="number">1</span>L, n).invoke();</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Tail&lt;Long&gt; <span class="title">fastFactorial</span>(<span class="keyword">long</span> x, <span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> () -&gt; {</div><div class="line">        <span class="keyword">switch</span> (n) {</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> Tail.done(x);</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> fastFactorial(x * n, n - <span class="number">1</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用这个方法，就可以获取极快的程序运行速度而仍然使用函数式风格。</p>
<p>当然，JVM本身已经做了很多优化，因此这可能不总是最佳的方法。但是，这值得记在脑子里。</p>
<h2>11 结论</h2>
<p>感谢你阅读了这个Java 8的简短介绍。希望你已经学到很多，并已经准备好开始自己使用。</p>
<p>综上，Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional</li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
</ul>
<p>如果要更总Java未来可能的加入的特性，可能需要参考<a href="http://openjdk.java.net/jeps/0" target="_blank" rel="external">JEPS</a></p>
<h2>反向移植</h2>
<p>如果处于一些原因无法立即更新到Java 8。也有一些方法反向移植一些Java 8的特性到之前版本。</p>
<p>对每个特性，以下是反向移植或类似的库：</p>
<ul>
<li>Lambdas – <a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a></li>
<li>Lazily Evaluated Sequences – <a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a></li>
<li>Optional – <a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">guava</a></li>
<li>Date/Time – <a href="http://www.threeten.org/" target="_blank" rel="external">ThreeTen</a></li>
<li>Nashorn – <a href="https://bitbucket.org/ramonza/nashorn-backport" target="_blank" rel="external">nashorn-backport</a></li>
</ul>
<p>请谨慎使用反向移植。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p>译者注：本文原地址在<a href="https://leanpub.com/whatsnewinjava8/read" target="_blank" rel="external">https://leanpub.com/whatsnewinjava8/read</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>译者注：这里指Optional类<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>lambda表达式<em>不是</em>匿名类，实际上它在字节码中使用了<code>invokedynamic</code>(译者注：动态调用)。<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>下一节中介绍&quot;函数接口&quot;的含义。<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>当然，你这里需要加一个<code>catch</code>语句处理异常。<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>实际的方法签名是<code>walk(Path start, FileVisitOption... options)</code>，但是可能用<code>walk(Path start)</code>就可以。<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>尾调用递归是一个函数的调用作为这个函数的最后动作发生。<a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多人一]]>
    </summary>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Translation" scheme="http://valleylord.github.io/tags/Translation/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL物化视图简介]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-mv/"/>
    <id>http://valleylord.github.io/post/201411-postgres-mv/</id>
    <published>2014-11-23T02:22:00.000Z</published>
    <updated>2014-12-03T01:17:05.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL从9.3版本开始支持物化视图(materialized view)。虽然有些功能上不如Oracle来的强大，多数情况下也足够使用了。</p>
<h2>物化视图功能比较</h2>
<p>postgres的物化视图和Oracle的比较如下表，</p>
<table>
<thead>
<tr class="header">
<th align="left">功能点</th>
<th align="left">PostgreSQL</th>
<th align="left">Oracle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">创建视图</td>
<td align="left">create materialized view ...</td>
<td align="left">create materialized view ...</td>
</tr>
<tr class="even">
<td align="left">删除视图</td>
<td align="left">drop materialized view ...</td>
<td align="left">drop materialized view ...</td>
</tr>
<tr class="odd">
<td align="left">定时刷新</td>
<td align="left">通过插件pgagent</td>
<td align="left">on demand start with ... next 参数</td>
</tr>
<tr class="even">
<td align="left">增量刷新</td>
<td align="left">不支持</td>
<td align="left">refresh fast 参数</td>
</tr>
<tr class="odd">
<td align="left">读时刷新</td>
<td align="left">预期9.4版本支持</td>
<td align="left">支持</td>
</tr>
<tr class="even">
<td align="left">commit刷新</td>
<td align="left">通过trigger实现</td>
<td align="left">on commit 参数</td>
</tr>
<tr class="odd">
<td align="left">手动刷新</td>
<td align="left">refresh materialized view ...</td>
<td align="left">EXEC DBMS_MVIEW.REFRESH( ... )</td>
</tr>
<tr class="even">
<td align="left">自动刷新</td>
<td align="left">不支持</td>
<td align="left">force 参数</td>
</tr>
<tr class="odd">
<td align="left">添加索引</td>
<td align="left">create index ...</td>
<td align="left">create index ...</td>
</tr>
<tr class="even">
<td align="left">视图直接查询</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr class="odd">
<td align="left">计划自动替换</td>
<td align="left">不支持</td>
<td align="left">支持</td>
</tr>
</tbody>
</table>
<h2>postgres物化视图功能演示</h2>
<p>本文使用的测试数据是使用pgbench生成的1600000条数据，详见我的另一篇文章<a href="http://valleylord.sinaapp.com/post/201411-postgres-pgbench#content" target="_blank" rel="external">pgbench压力测试工具简介</a>。在pgbench_accounts表中有1600000条数据，其中bid列有16个取值，每个取值分别有100000条数据。测试用的数据库是PostgreSQL 9.3.4版本</p>
<h3>使用create materialized view创建物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pgbench=# <span class="operator"><span class="keyword">create</span> materialized <span class="keyword">view</span> mv_pgbench_accounts <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid &lt; <span class="number">3</span>;</span></div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="number">200000</span></span></div></pre></td></tr></table></figure></p>
<p>默认情况下，创建物化视图的时候会全量刷新视图，即启用<code>with data</code>选项。</p>
<h3>查询物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pgbench=# select count(*) from mv_pgbench_accounts;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=# explain select count(*) from mv_pgbench_accounts;</div><div class="line">                                   QUERY PLAN                                    </div><div class="line">---------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=5779.00..5779.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on mv_pgbench_accounts  (cost=0.00..5279.00 rows=200000 width=0)</div><div class="line">(2 rows)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p>从查询计划中可以发现，物化视图已经起作用了。但是，使用等价的直接查询，不能自动转化为物化视图的查询，也就是没有执行计划自动替换功能，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pgbench=# explain select count(*) from pgbench_accounts where bid &lt; 3;</div><div class="line">                                  QUERY PLAN                                   </div><div class="line">-------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=47134.25..47134.26 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on pgbench_accounts  (cost=0.00..46635.38 rows=199548 width=0)</div><div class="line">         Filter: (bid &lt; 3)</div><div class="line">(3 rows)</div><div class="line"></div><div class="line">pgbench=# select count(*) from pgbench_accounts where bid &lt; 3;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-select1.png"></p>
<h3>修改源表数据，刷新物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pgbench=# <span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> pgbench_accounts <span class="keyword">select</span> aid+<span class="number">1600000</span>,bid,abalance,filler <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid = <span class="number">1</span>;</span></div><div class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">100000</span></span></div><div class="line">pgbench=# <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid &lt; <span class="number">3</span>;</div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 300000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p>再次插入<code>bid=1</code>的数据100000条到pgbench_accounts中(会话设置为自动commit)，postgres的视图没有自动刷新，需要手动刷新，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pgbench=# refresh materialized view mv_pgbench_accounts with no data;</div><div class="line">REFRESH MATERIALIZED VIEW</div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line">ERROR:  materialized view "mv_pgbench_accounts" has not been populated</div><div class="line">HINT:  <span class="operator"><span class="keyword">Use</span> the REFRESH MATERIALIZED <span class="keyword">VIEW</span> command.</span></div><div class="line">pgbench=# refresh materialized <span class="keyword">view</span> mv_pgbench_accounts <span class="keyword">with</span> <span class="keyword">data</span>;</div><div class="line">REFRESH MATERIALIZED VIEW</div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 300000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-refresh.png"></p>
<p>刷新的时候，如果使用了参数<code>with no data</code>，那么会将物化视图的数据重置为未发布的状态；使用<code>with data</code>参数，才会将数据写入。再次查询，就可以得到合理的结果。如果想做到插入数据后自动刷新，可以将刷新动作写在trigger里面。</p>
<h3>物化视图上建立索引</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pgbench=# create index mv_pgbench_accounts_bid_idx on mv_pgbench_accounts(bid);</div><div class="line">CREATE INDEX</div><div class="line">pgbench=# explain select count(*) from mv_pgbench_accounts where bid = 2;</div><div class="line">                                                        QUERY PLAN                                                        </div><div class="line">--------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=7370.77..7370.78 rows=1 width=0)</div><div class="line">   -&gt;  Index Only Scan using mv_pgbench_accounts_bid_idx on mv_pgbench_accounts  (cost=0.42..6995.52 rows=150100 width=0)</div><div class="line">         Index Cond: (bid = 2)</div><div class="line">(3 rows)</div><div class="line"></div><div class="line">pgbench=# select count(*) from mv_pgbench_accounts where bid = 2;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 100000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-index.png"></p>
<p>物化视图上建立索引的方法和表上建立索引的方法几乎一样，使用方法也一样。从执行计划中可以看到，在物化视图上建立的索引可以被查询所用。</p>
<p>以上是对PostgreSQL的物化视图功能做的简单功能对比和使用方法演示。</p>
<p>本文参考了以下文章，<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>, <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>，和PostgreSQL9.3的官方文档<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>, <a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>, <a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.linuxidc.com/Linux/2013-09/90045.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-09/90045.htm</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.cnblogs.com/gaojian/archive/2012/11/12/2765749.html" target="_blank" rel="external">http://www.cnblogs.com/gaojian/archive/2012/11/12/2765749.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://blog.csdn.net/tianlesoftware/article/details/4713553" target="_blank" rel="external">http://blog.csdn.net/tianlesoftware/article/details/4713553</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.cnblogs.com/Ronger/archive/2012/03/28/2420962.html" target="_blank" rel="external">http://www.cnblogs.com/Ronger/archive/2012/03/28/2420962.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://soft.chinabyte.com/database/403/12429903.shtml" target="_blank" rel="external">http://soft.chinabyte.com/database/403/12429903.shtml</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="https://wiki.postgresql.org/wiki/Materialized_Views" target="_blank" rel="external">https://wiki.postgresql.org/wiki/Materialized_Views</a><a href="#fnref7">↩</a></p></li>
<li id="fn8"><p><a href="http://www.postgresql.org/docs/9.3/static/sql-creatematerializedview.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/static/sql-creatematerializedview.html</a><a href="#fnref8">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL从9.3版本开始支持物化视图(materialized view)。虽然有些功能上不如Oracle来的强大，多数情况下也足够使用了。</p>
<h2>物化视图功能比较</h2>
<p>postgres的物化视图和Oracle的比较如下表，</p>
<ta]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pgbench压力测试工具简介]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-pgbench/"/>
    <id>http://valleylord.github.io/post/201411-postgres-pgbench/</id>
    <published>2014-11-19T12:40:00.000Z</published>
    <updated>2014-12-03T01:17:01.000Z</updated>
    <content type="html"><![CDATA[<p>pgbench是基于tpc-b模型的postgresql测试工具。它属于开源软件，主要为对 PostgreSQL 进行压力测试的一款简单程序, SQL命令可以在一个连接中顺序地执行，通常会开多个数据库 Session, 并且在测试最后形成测试报告，得出每秒平均事务数，pgbench可以测试 select,update,insert,delete 命令，用户可以编写自己的脚本进行测试。</p>
<h2>pgbench的参数</h2>
<p>pgbench的参数如下表。</p>
<table>
<thead>
<tr class="header">
<th align="left">类别</th>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">初始化</td>
<td align="left">-i</td>
<td align="left">invokes initialization mode//调用初始化模式</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-F NUM</td>
<td align="left">fill factor（指定建表的fill_factor（heap page的保留空间，对于更新频繁的表，可以产生HOT，有利于降低索引膨胀及索引更新的可能性）</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-n</td>
<td align="left">do not run VACUUM after initialization//数据初始化后不执行vacuum</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-q</td>
<td align="left">quiet logging (one message each 5 seconds)//每隔5秒钟输出一次消息</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-s NUM</td>
<td align="left">scaling的值为倍数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--foreign-keys</td>
<td align="left">create foreign key constraints between tables//表间创建主外键</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">--index-tablespace=TABLESPACE</td>
<td align="left">create tables in the specified tablespace//在特定的表空间创建表</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--unlogged-tables</td>
<td align="left">create tables as unlogged tables//创建无日志表</td>
</tr>
<tr class="odd">
<td align="left">测试执行参数</td>
<td align="left">-c NUM</td>
<td align="left">number of concurrent database clients (default: 1)//测试时模拟的客户端个数，默认为1</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-C</td>
<td align="left">establish new connection for each transaction//是否使用短连接（每个请求一个连接，用于没有连接池环境，tps峰值，使用-C后 -M不能使用prepared，使用extend模式）</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-D VARNAME=VALUE</td>
<td align="left">define variable for use by custom script//设置变量，在自定义脚本中使用varname引用，可使用多个-D设置多个变量</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-f FILENAME</td>
<td align="left">read transaction script from FILENAME//指定自定义的测试文件（由元命令和SQL组成），可使用多个-f指定多个文件，每个文件作为一个事务，每次执行事务时随机选择一个文件执行</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-j NUM</td>
<td align="left">number of threads (default: 1)//pgbench的工作线程，-l和-c之间是倍数，c是l的倍数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-l</td>
<td align="left">write transaction times to log file//开启事务统计，输出文件名格式pgbench_log.$PID.$threadID(当-j&gt;=2时，threadID从1开始)</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-M simple, extended, prepared</td>
<td align="left">protocol for submitting queries to server (default: simple) //libpg接口</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-n</td>
<td align="left">do not run VACUUM before tests//测试之前不执行vacuum</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-N</td>
<td align="left">do not update tables &quot;pgbench_tellers&quot; and &quot;pgbench_branches&quot;//TPC-B非默认测试模式，少两个表的更新</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-r</td>
<td align="left">report average latency per command//报告测试文件中每条（包括元命令和SQL）的平均执行延迟</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-s NUM</td>
<td align="left">report this scale factor in output//使用自定义脚本测试时，指定scale的输出，没有实质意义</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-S</td>
<td align="left">perform SELECT-only transactions//TPC-B非默认测试模式，只查询</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-t NUM</td>
<td align="left">number of transactions each client runs (default: 10)//指定每个连接的执行事务数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-T NUM</td>
<td align="left">duration of benchmark test in seconds//指定总的压力测试时间，与-t不能同时使用</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-v</td>
<td align="left">vacuum all four standard tables before tests//测试前先vacuum4个和tpc-b相关的表</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--aggregate-interval=NUM</td>
<td align="left">aggregate data over NUM seconds//输出聚合后的事务统计信息</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">--sampling-rate=NUM</td>
<td align="left">fraction of transactions to log (e.g. 0.01 for 1% sample)//指定采样百分比，得出的TPC将只有正常tps*rate |</td>
</tr>
<tr class="even">
<td align="left">通用参数</td>
<td align="left">-d</td>
<td align="left">print debugging output</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-h HOSTNAME</td>
<td align="left">database server host or socket directory</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-p PORT</td>
<td align="left">database server port number</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-U USERNAME</td>
<td align="left">connect as specified database user</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-V, --version</td>
<td align="left">output version information, then exit</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-?, --help</td>
<td align="left">show this help, then exit</td>
</tr>
</tbody>
</table>
<h2>pgbench的异步接口实现</h2>
<p>pgbench支持3种异步接口：简单调用、扩展调用、绑定变量调用，参考Postgres官方文档。</p>
<h3>简单调用PQsendQuery(<code>-M simple</code>)</h3>
<p>向服务器提交一个命令而不等待结果。如果查询成功发送则返回 1，否则返回 0。 （此时，可以用PQerrorMessage获取关于失败的信息）。</p>
<p>在成功调用PQsendQuery后，调用PQgetResult一次或者多次获取结果 。在PQsendQuery返回 NULL 指针，表明命令完成之前， 我们不能再调用PQsendQuery（在同一次连接里）。</p>
<p>注：每次调用会带来比较大的开销，每次执行都需要sql解析，因为没有没有执行计划缓存。</p>
<h3>扩展调用PQsendQueryParams(<code>-M extended</code>)</h3>
<p>给服务器提交一个命令和（命令需要的）分隔的参数，而不等待结果。</p>
<p>这个等效于 PQsendQuery，只是查询参数可以和查询字串分开声明。 函数的参数处理和 PQexecParams 一样。和 PQexecParams 类似， 它不能在 2.0 版本的协议连接上工作，并且它只允许在查询字串里出现一条命令。</p>
<p>注：也有和简单调用一样的问题，没有执行计划缓存</p>
<h3>绑定变量调用PQsendPrepare和PQsendQueryPrepared(<code>-M prepared</code>)</h3>
<p>PQsendPrepare发送一个请求，创建一个给定参数的准备好语句，而不等待结束。</p>
<p>这是 PQprepare 的异步版本：如果它能发送这个请求，则返回 1， 如果不能，则返回 0。在成功调用之后，调用 PQgetResult 判断服务器是否成功创建了准备好语句。 这个函数的参数的处理和 PQprepare 一样。 类似 PQprepare，它不能在 2.0 版本协议的连接上运转。</p>
<p>PQsendQueryPrepared发送一个执行带有给出参数的准备好的语句的请求，不等待结果。</p>
<p>这个函数类似 PQsendQueryParams，但是要执行的命令是通过给一个前面准备好的语句命名来声明的， 而不是给出一个查询字串。函数的参数处理和 PQexecPrepared 一样。类似 PQexecPrepared， 它也不能在 2.0 版本的协议连接上跑。</p>
<p>注：绑定变量可以重用执行计划，相似的SQL但是参数不同，只需解析SQL一次即可。</p>
<p>以下代码段摘选自pgbench.c的代码，显示了pgbench根据不同的SQL接口模式，调用不同的postgres函数接口，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (querymode == QUERY_SIMPLE)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>       *sql;</div><div class="line">    sql = pg_strdup(command-&gt;argv[<span class="number">0</span>]);</div><div class="line">    sql = assignVariables(st, sql);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, sql);</div><div class="line">    r = PQsendQuery(st-&gt;con, sql);</div><div class="line">    <span class="built_in">free</span>(sql);</div><div class="line">}</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (querymode == QUERY_EXTENDED)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sql = command-&gt;argv[<span class="number">0</span>];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *params[MAX_ARGS];</div><div class="line">    getQueryParams(st, command, params);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, sql);</div><div class="line">    r = PQsendQueryParams(st-&gt;con, sql, command-&gt;argc - <span class="number">1</span>,</div><div class="line">                          NULL, params, NULL, NULL, <span class="number">0</span>);</div><div class="line">}</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (querymode == QUERY_PREPARED)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>        name[MAX_PREPARE_NAME];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *params[MAX_ARGS];</div><div class="line">    <span class="keyword">if</span> (!st-&gt;prepared[st-&gt;use_file])</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span>         j;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; commands[j] != NULL; j++)</div><div class="line">        {</div><div class="line">            PGresult   *res;</div><div class="line">            <span class="keyword">char</span>        name[MAX_PREPARE_NAME];</div><div class="line">            <span class="keyword">if</span> (commands[j]-&gt;type != SQL_COMMAND)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            preparedStatementName(name, st-&gt;use_file, j);</div><div class="line">            res = PQprepare(st-&gt;con, name,</div><div class="line">                  commands[j]-&gt;argv[<span class="number">0</span>], commands[j]-&gt;argc - <span class="number">1</span>, NULL);</div><div class="line">            <span class="keyword">if</span> (PQresultStatus(res) != PGRES_COMMAND_OK)</div><div class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">"%s"</span>, PQerrorMessage(st-&gt;con));</div><div class="line">            PQclear(res);</div><div class="line">        }</div><div class="line">        st-&gt;prepared[st-&gt;use_file] = <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    getQueryParams(st, command, params);</div><div class="line">    preparedStatementName(name, st-&gt;use_file, st-&gt;state);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, name);</div><div class="line">    r = PQsendQueryPrepared(st-&gt;con, name, command-&gt;argc - <span class="number">1</span>,</div><div class="line">                            params, NULL, NULL, <span class="number">0</span>);</div><div class="line">}</div><div class="line"><span class="keyword">else</span>    <span class="comment">/* unknown sql mode */</span></div><div class="line">    r = <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<h2>pgbench的安装和测试准备</h2>
<p>pgbench的源码在postgres源码目录的contrib/pgbench目录下，进入该路径下进行<code>make</code>，<code>make install</code>即可。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy contrib]$ <span class="built_in">cd</span> pgbench/</div><div class="line">[postgres@anzhy pgbench]$ ls</div><div class="line">Makefile  pgbench.c</div><div class="line">[postgres@anzhy pgbench]$ make all</div><div class="line">gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security</div><div class="line"> -fno-strict-aliasing -fwrapv -g -pthread  -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS -I../../src/interfaces/libpq</div><div class="line"> -I. -I. -I../../src/include -D_GNU_SOURCE   -c -o pgbench.o pgbench.c -MMD -MP -MF .deps/pgbench.Po</div><div class="line">gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security</div><div class="line"> -fno-strict-aliasing -fwrapv -g -pthread  -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS pgbench.o -L../../src/port</div><div class="line"> -lpgport -L../../src/common -lpgcommon -L../../src/interfaces/libpq -lpq -lpthread    -L../../src/port -L../../src/common</div><div class="line"> -Wl,--as-needed -Wl,-rpath,<span class="string">'/home/postgres/postgres/lib'</span>,--enable-new-dtags  -lpgport -lpgcommon -lz -lreadline -lcrypt -ldl -lm  -o pgbench</div><div class="line">[postgres@anzhy pgbench]$ make install</div><div class="line">/bin/mkdir -p <span class="string">'/home/postgres/postgres/bin'</span></div><div class="line">/usr/bin/install -c  pgbench <span class="string">'/home/postgres/postgres/bin'</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-compile.png"></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-install.png"></p>
<p>测试之前当然还要建立一个测试数据库，这里就使用<code>pgbench</code>这个数据库名。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ psql -U postgres -p <span class="number">5432</span></div><div class="line">psql (<span class="number">9.3</span>.<span class="number">4</span>)</div><div class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</div><div class="line"></div><div class="line">postgres=<span class="comment"># create database pgbench;</span></div><div class="line">CREATE DATABASE</div><div class="line">postgres=<span class="comment"># \q</span></div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<h2>初始化命令</h2>
<p>初始化数据库中的测试数据，使用<code>pgbench -i</code>进入初始化模式。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">2</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">Connection to database <span class="string">"pgbench"</span> failed:</div><div class="line">FATAL:  database <span class="string">"pgbench"</span> does not exist</div><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">2</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">NOTICE:  table <span class="string">"pgbench_history"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_tellers"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_accounts"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_branches"</span> does not exist, skipping</div><div class="line">creating tables...</div><div class="line"><span class="number">100000</span> of <span class="number">200000</span> tuples (<span class="number">50</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.24</span> s, remaining <span class="number">0.24</span> s).</div><div class="line"><span class="number">200000</span> of <span class="number">200000</span> tuples (<span class="number">100</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.52</span> s, remaining <span class="number">0.00</span> s).</div><div class="line">vacuum...</div><div class="line"><span class="keyword">set</span> primary keys...</div><div class="line">done.</div><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">16</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">creating tables...</div><div class="line"><span class="number">100000</span> of <span class="number">1600000</span> tuples (<span class="number">6</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.16</span> s, remaining <span class="number">2.46</span> s).</div><div class="line"><span class="number">200000</span> of <span class="number">1600000</span> tuples (<span class="number">12</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.35</span> s, remaining <span class="number">2.43</span> s).</div><div class="line"><span class="number">300000</span> of <span class="number">1600000</span> tuples (<span class="number">18</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.51</span> s, remaining <span class="number">2.23</span> s).</div><div class="line"><span class="number">400000</span> of <span class="number">1600000</span> tuples (<span class="number">25</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.70</span> s, remaining <span class="number">2.09</span> s).</div><div class="line"><span class="number">500000</span> of <span class="number">1600000</span> tuples (<span class="number">31</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.91</span> s, remaining <span class="number">2.01</span> s).</div><div class="line"><span class="number">600000</span> of <span class="number">1600000</span> tuples (<span class="number">37</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.16</span> s, remaining <span class="number">1.94</span> s).</div><div class="line"><span class="number">700000</span> of <span class="number">1600000</span> tuples (<span class="number">43</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.36</span> s, remaining <span class="number">1.75</span> s).</div><div class="line"><span class="number">800000</span> of <span class="number">1600000</span> tuples (<span class="number">50</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.60</span> s, remaining <span class="number">1.60</span> s).</div><div class="line"><span class="number">900000</span> of <span class="number">1600000</span> tuples (<span class="number">56</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.13</span> s, remaining <span class="number">1.66</span> s).</div><div class="line"><span class="number">1000000</span> of <span class="number">1600000</span> tuples (<span class="number">62</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.39</span> s, remaining <span class="number">1.44</span> s).</div><div class="line"><span class="number">1100000</span> of <span class="number">1600000</span> tuples (<span class="number">68</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.64</span> s, remaining <span class="number">1.20</span> s).</div><div class="line"><span class="number">1200000</span> of <span class="number">1600000</span> tuples (<span class="number">75</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.87</span> s, remaining <span class="number">0.96</span> s).</div><div class="line"><span class="number">1300000</span> of <span class="number">1600000</span> tuples (<span class="number">81</span>%) <span class="keyword">done</span> (elapsed <span class="number">3.62</span> s, remaining <span class="number">0.84</span> s).</div><div class="line"><span class="number">1400000</span> of <span class="number">1600000</span> tuples (<span class="number">87</span>%) <span class="keyword">done</span> (elapsed <span class="number">3.95</span> s, remaining <span class="number">0.56</span> s).</div><div class="line"><span class="number">1500000</span> of <span class="number">1600000</span> tuples (<span class="number">93</span>%) <span class="keyword">done</span> (elapsed <span class="number">4.20</span> s, remaining <span class="number">0.28</span> s).</div><div class="line"><span class="number">1600000</span> of <span class="number">1600000</span> tuples (<span class="number">100</span>%) <span class="keyword">done</span> (elapsed <span class="number">4.54</span> s, remaining <span class="number">0.00</span> s).</div><div class="line">vacuum...</div><div class="line"><span class="keyword">set</span> primary keys...</div><div class="line">done.</div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-init.png"></p>
<p>以上参数中，<code>-i</code>表示初始化模式，<code>--unlogged-tables</code>表示创建没有log的表，<code>-s 16</code>和<code>-s 2</code>表示默认的数据的几倍，默认是100000条数据，其他是postgres连接的参数。每次测试默认会清除之前的表，创建完之后可以发现，pgbench_accounts表中有了1600000条数据。</p>
<p><img src="/images/201411-postgres-pgbench/pgbench-init2.png"></p>
<h2>pgbench进行postgres的压力测试</h2>
<p>在不使用<code>-i</code>参数的时候，pgbench都是表示在进行压力测试，如下命令表示一个压力测试的案例。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">pgbench -M prepared   -r -c <span class="number">8</span> -j <span class="number">2</span> -T <span class="number">10</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench <span class="operator">-l</span></div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</div><div class="line">scaling factor: <span class="number">16</span></div><div class="line">query mode: prepared</div><div class="line">number of clients: <span class="number">8</span></div><div class="line">number of threads: <span class="number">2</span></div><div class="line">duration: <span class="number">10</span> s</div><div class="line">number of transactions actually processed: <span class="number">4508</span></div><div class="line">tps = <span class="number">449.584997</span> (including connections establishing)</div><div class="line">tps = <span class="number">450.698796</span> (excluding connections establishing)</div><div class="line">statement latencies <span class="keyword">in</span> milliseconds:</div><div class="line">	<span class="number">0.049447</span>	\<span class="keyword">set</span> nbranches <span class="number">1</span> * :scale</div><div class="line">	<span class="number">0.047364</span>	\<span class="keyword">set</span> ntellers <span class="number">10</span> * :scale</div><div class="line">	<span class="number">0.045153</span>	\<span class="keyword">set</span> naccounts <span class="number">100000</span> * :scale</div><div class="line">	<span class="number">0.036945</span>	\setrandom aid <span class="number">1</span> :naccounts</div><div class="line">	<span class="number">0.040092</span>	\setrandom bid <span class="number">1</span> :nbranches</div><div class="line">	<span class="number">0.039480</span>	\setrandom tid <span class="number">1</span> :ntellers</div><div class="line">	<span class="number">0.036813</span>	\setrandom delta -<span class="number">5000</span> <span class="number">5000</span></div><div class="line">	<span class="number">2.554601</span>	BEGIN;</div><div class="line">	<span class="number">2.468227</span>	UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</div><div class="line">	<span class="number">2.355124</span>	SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</div><div class="line">	<span class="number">2.481090</span>	UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</div><div class="line">	<span class="number">2.758949</span>	UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</div><div class="line">	<span class="number">2.271135</span>	INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</div><div class="line">	<span class="number">2.370568</span>	END;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-test.png"></p>
<p>以上参数中，<code>-M prepared</code>表示绑定变量形式的调用SQL，<code>-r</code>表示报告测试文件中每条SQL的平均执行延迟，<code>-c 8</code>表示模拟8个客户端，<code>-j 2</code>表示pgbench的工作线程是2个，<code>-T 10</code>表示压力测试的时间是10秒，<code>-l</code>表示把事务统计写入log，其余的是postgres连接相关的参数。</p>
<p>执行上述命令后，屏幕上开始显示执行过程，最后给出测试总结，可以看出在这个testcase下，tps是450。如果觉得不想看执行的时候输出，可以将这些输出重定向到文件，使用<code>nohup</code>和<code>&gt;</code>。如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ nohup pgbench -M prepared   -r -c <span class="number">8</span> -j <span class="number">2</span> -T <span class="number">10</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench <span class="operator">-l</span>  &gt; pgbench.log <span class="number">2</span>&gt;&<span class="number">1</span></div><div class="line">[postgres@anzhy ~]$ tail -<span class="number">27</span> pgbench.log</div><div class="line">client <span class="number">5</span> receiving</div><div class="line">client <span class="number">3</span> receiving</div><div class="line">pghost:  pgport: <span class="number">5432</span> nclients: <span class="number">8</span> duration: <span class="number">10</span> dbName: pgbench</div><div class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</div><div class="line">scaling factor: <span class="number">16</span></div><div class="line">query mode: prepared</div><div class="line">number of clients: <span class="number">8</span></div><div class="line">number of threads: <span class="number">2</span></div><div class="line">duration: <span class="number">10</span> s</div><div class="line">number of transactions actually processed: <span class="number">7287</span></div><div class="line">tps = <span class="number">727.437968</span> (including connections establishing)</div><div class="line">tps = <span class="number">729.205960</span> (excluding connections establishing)</div><div class="line">statement latencies <span class="keyword">in</span> milliseconds:</div><div class="line">	<span class="number">0.061104</span>	\<span class="keyword">set</span> nbranches <span class="number">1</span> * :scale</div><div class="line">	<span class="number">0.060691</span>	\<span class="keyword">set</span> ntellers <span class="number">10</span> * :scale</div><div class="line">	<span class="number">0.063393</span>	\<span class="keyword">set</span> naccounts <span class="number">100000</span> * :scale</div><div class="line">	<span class="number">0.058017</span>	\setrandom aid <span class="number">1</span> :naccounts</div><div class="line">	<span class="number">0.065122</span>	\setrandom bid <span class="number">1</span> :nbranches</div><div class="line">	<span class="number">0.064820</span>	\setrandom tid <span class="number">1</span> :ntellers</div><div class="line">	<span class="number">0.063816</span>	\setrandom delta -<span class="number">5000</span> <span class="number">5000</span></div><div class="line">	<span class="number">1.449164</span>	BEGIN;</div><div class="line">	<span class="number">1.518156</span>	UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</div><div class="line">	<span class="number">1.456869</span>	SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</div><div class="line">	<span class="number">1.509500</span>	UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</div><div class="line">	<span class="number">1.620091</span>	UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</div><div class="line">	<span class="number">1.371588</span>	INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</div><div class="line">	<span class="number">1.498616</span>	END;</div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-test2.png"></p>
<p>将输出重定向到pgbench.log中，然后用tail查看即可。</p>
<p>以上是使用pgbench做PostgreSQL的压力测试，本文参考了<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.open-open.com/lib/view/open1341845783994.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1341845783994.html</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>pgbench是基于tpc-b模型的postgresql测试工具。它属于开源软件，主要为对 PostgreSQL 进行压力测试的一款简单程序, SQL命令可以在一个连接中顺序地执行，通常会开多个数据库 Session, 并且在测试最后形成测试报告，得出每秒平均事务数，pgb]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL扩展函数和触发器]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-trigger-example/"/>
    <id>http://valleylord.github.io/post/201410-postgres-trigger-example/</id>
    <published>2014-10-26T01:38:00.000Z</published>
    <updated>2014-12-03T01:55:18.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL是一个对扩展和程序开发很友好的数据库，有很多的外部扩展接口，很易于扩展。本文使用PostgreSQL的C扩展编写扩展函数，并提供给触发器调用，本文的例子来源与官方文档。</p>
<p>PostgreSQL的扩展函数可以有“version-0”和“version-1”两种格式，但是触发器只支持“version-1”格式，这也是在“version-0”基础上做过改进的一种格式。一段“version-1”的触发器代码如下，</p>
<p><figure class="highlight C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "postgres.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "executor/spi.h"        /* 你用SPI的时候要用的头文件 */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "commands/trigger.h"    /* 用触发器时要用的头文件 */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "utils/rel.h"          /* ... and relations */</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef PG_MODULE_MAGIC</span></div><div class="line">PG_MODULE_MAGIC;</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> Datum trigf(PG_FUNCTION_ARGS);</div><div class="line"></div><div class="line">PG_FUNCTION_INFO_V1(trigf);</div><div class="line"></div><div class="line">Datum</div><div class="line">trigf(PG_FUNCTION_ARGS)</div><div class="line">{</div><div class="line">    TriggerData *trigdata = (TriggerData *) fcinfo-&gt;context;</div><div class="line">    TupleDesc   tupdesc;</div><div class="line">    HeapTuple   rettuple;</div><div class="line">    <span class="keyword">char</span>       *when;</div><div class="line">    <span class="keyword">bool</span>        checknull = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">bool</span>        isnull;</div><div class="line">    <span class="keyword">int</span>         ret, i;</div><div class="line"></div><div class="line">    <span class="comment">/* 确信自己是作为触发器触发的 */</span></div><div class="line">    <span class="keyword">if</span> (!CALLED_AS_TRIGGER(fcinfo))</div><div class="line">        elog(ERROR, <span class="string">"trigf: not fired by trigger manager"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 返回给执行者的行 */</span></div><div class="line">    <span class="keyword">if</span> (TRIGGER_FIRED_BY_UPDATE(trigdata-&gt;tg_event))</div><div class="line">        rettuple = trigdata-&gt;tg_newtuple;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        rettuple = trigdata-&gt;tg_trigtuple;</div><div class="line"></div><div class="line">    <span class="comment">/* 检查空值 */</span></div><div class="line">    <span class="keyword">if</span> (!TRIGGER_FIRED_BY_DELETE(trigdata-&gt;tg_event)</div><div class="line">        && TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event))</div><div class="line">        checknull = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event))</div><div class="line">        when = <span class="string">"before"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        when = <span class="string">"after "</span>;</div><div class="line"></div><div class="line">    tupdesc = trigdata-&gt;tg_relation-&gt;rd_att;</div><div class="line"></div><div class="line">    <span class="comment">/* 与 SPI 管理器连接 */</span></div><div class="line">    <span class="keyword">if</span> ((ret = SPI_connect()) &lt; <span class="number">0</span>)</div><div class="line">        elog(INFO, <span class="string">"trigf (fired %s): SPI_connect returned %d"</span>, when, ret);</div><div class="line"></div><div class="line">    <span class="comment">/* 获取关系中的行数量 */</span></div><div class="line">    ret = SPI_exec(<span class="string">"SELECT count(*) FROM ttest"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        elog(NOTICE, <span class="string">"trigf (fired %s): SPI_exec returned %d"</span>, when, ret);</div><div class="line"></div><div class="line">    <span class="comment">/* count(*) 返回 int8，所以要小心转换 */</span></div><div class="line">    i = (<span class="keyword">int</span>) DatumGetInt64(SPI_getbinval(SPI_tuptable-&gt;vals[<span class="number">0</span>],</div><div class="line">                                          SPI_tuptable-&gt;tupdesc,</div><div class="line">                                          <span class="number">1</span>,</div><div class="line">                                          &isnull));</div><div class="line"></div><div class="line">    elog (NOTICE, <span class="string">"trigf (fired %s): there are %d tuples in ttest"</span>, when, i);</div><div class="line"></div><div class="line">    SPI_finish();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (checknull)</div><div class="line">    {</div><div class="line">        (<span class="keyword">void</span>) SPI_getbinval(rettuple, tupdesc, <span class="number">1</span>, &isnull);</div><div class="line">        <span class="keyword">if</span> (isnull)</div><div class="line">            rettuple = NULL;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> PointerGetDatum(rettuple);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>保存为<code>trigger_func.c</code>，Makefile可以通过<code>pg_config</code>来产生，运行<code>pg_config --help</code>可以看到帮助文档，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgconfig-help.png"></p>
<p>可以发现，<code>--pgxs</code>参数是用于写扩展的Makefile，运行就可以找到所需的Makefile，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy my_extension]$ pg_config --pgxs</div><div class="line">/home/postgres/postgres2/lib/pgxs/src/makefiles/pgxs.mk</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgconfig-pgxs.png"></p>
<p>打开这个Makefile文件，发现开头有一段文档描述，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgxs-doc.png"></p>
<p>根据文档的提示，可以写如下Makefile用于编译<code>trigger_func.c</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="constant">MODULES</span> = trigger_func</div><div class="line"></div><div class="line"><span class="constant">PG_CONFIG</span> = pg_config</div><div class="line"><span class="constant">PGXS</span> <span class="symbol">:</span>= <span class="variable">$(</span>shell <span class="variable">$(</span><span class="constant">PG_CONFIG</span>) --pgxs)</div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">PGXS</span>)</div></pre></td></tr></table></figure></p>
<p>然后就可以用<code>make</code>编译了，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-extension-make.png"></p>
<p>注意，要使用和PostgreSQL对应的官方文档中的代码才可以编译，否则可能会报错。然后将编译出来的.so文件copy到PostgreSQL的lib目录下，之后，启动PostgreSQL，并连接test数据库，在test数据库中建表ttest，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ttest (</span></div><div class="line">    x <span class="built_in">integer</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-ttest.png"></p>
<p>然后注册触发器函数，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> trigf() <span class="keyword">RETURNS</span> <span class="keyword">trigger</span></span></div><div class="line">    <span class="keyword">AS</span> <span class="string">'$libdir/trigger_func'</span>, <span class="string">'trigf'</span></div><div class="line">    <span class="keyword">LANGUAGE</span> C;</div></pre></td></tr></table></figure></p>
<p>由于扩展程序是放在lib目录下，所以，要以<code>$libdir</code>做开头，其他情况可以参考官方文档。注意，如果只是创建一个普通函数，那么这里的返回就不用是<code>trigger</code>，可以是int，相应的，之前的C代码部分，返回也要修改，可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。之后，就可以创建触发器，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tbefore <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> ttest</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> trigf();</div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tafter <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> ttest</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> trigf();</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-trigger.png"></p>
<p>触发器建立完之后，就可以做一些简单的测试了，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-test1.png"></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-test2.png"></p>
<p>可见，新建的触发器已经发挥了作用。如果是单纯的函数，则更加简单一些，可以在上面的c文件之后，加入如下代码，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PG_FUNCTION_INFO_V1(add_ab);</div><div class="line"></div><div class="line">Datum</div><div class="line">add_ab(PG_FUNCTION_ARGS)</div><div class="line">{</div><div class="line">    int32 arg_a=PG_GETARG_INT32(<span class="number">0</span>);</div><div class="line">    int32 arg_b=PG_GETARG_INT32(<span class="number">1</span>);</div><div class="line"></div><div class="line">    PG_RETURN_INT32(arg_a+arg_b);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>重新编译，并将.so文件copy到PostgreSQL的lib目录下。然后重启PostgreSQL，并新增函数，如下</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">add</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span></div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span></div><div class="line"><span class="keyword">AS</span> <span class="string">'$libdir/trigger_func'</span>, <span class="string">'add_ab'</span></div><div class="line"><span class="keyword">LANGUAGE</span> C;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-function.png"></p>
<p>测试一下，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-function-test1.png"></p>
<p>可见，函数已经生效。</p>
<p>以上是PostgreSQL扩展函数和触发器的建立。本文参考了<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，还有PostgreSQL 9.3官方文档<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，以及8.1中文版文档<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>的对应章节。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/huguangshanse00/article/details/39252073" target="_blank" rel="external">http://blog.csdn.net/huguangshanse00/article/details/39252073</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/huguangshanse00/article/details/39252073" target="_blank" rel="external">http://blog.csdn.net/huguangshanse00/article/details/39252073</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.postgresql.org/docs/9.3/interactive/trigger-example.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/trigger-example.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.postgresql.org/docs/9.3/interactive/xfunc-c.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/xfunc-c.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.php100.com/manual/PostgreSQL8/" target="_blank" rel="external">http://www.php100.com/manual/PostgreSQL8/</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL是一个对扩展和程序开发很友好的数据库，有很多的外部扩展接口，很易于扩展。本文使用PostgreSQL的C扩展编写扩展函数，并提供给触发器调用，本文的例子来源与官方文档。</p>
<p>PostgreSQL的扩展函数可以有“version-0”和“vers]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PL/Python安装和使用]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-plpython-install/"/>
    <id>http://valleylord.github.io/post/201410-postgres-plpython-install/</id>
    <published>2014-10-25T12:39:00.000Z</published>
    <updated>2014-12-03T01:16:47.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL可以支持多种存储过程语言，官方支持的除了PL/pgSQL，还有TCL，Perl，Python。</p>
<p>本文使用源码安装PL/Python过程语言支持，并简介PL/Python的一些简单的入门。如果是使用安装包安装的话，可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<p>参考PostgreSQL的官方文档，使用源码安装的时候，需要在之前编译的时候就启用<code>--with-python</code>选项。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Note: Users <span class="operator">of</span> source packages must specially enable <span class="operator">the</span> build <span class="operator">of</span> PL/Python during <span class="operator">the</span> installation <span class="built_in">process</span>. (Refer <span class="built_in">to</span> <span class="operator">the</span> installation instructions <span class="keyword">for</span> more information.) Users <span class="operator">of</span> binary packages might find PL/Python <span class="operator">in</span> <span class="operator">a</span> separate subpackage.</div><div class="line"></div><div class="line">注意: 使用源码包的用户必须在安装过程中声明打开 PL/Python 的制作。 （请参考安装指导获取更多信息。）二进制包的用户可能会在独立的子包中找到 PL/Python。</div></pre></td></tr></table></figure></p>
<p>PostgreSQL的编译安装可以参考我之前的博客，<a href="http://valleylord.sinaapp.com/post/201408-postgresql-install" target="_blank" rel="external">这里</a>和<a href="http://valleylord.sinaapp.com/post/201408-postgresql-dev-env" target="_blank" rel="external">这里</a>。先做PostgreSQL的configure，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ ./configure --prefix=<span class="variable">$HOME</span>/postgres --enable-depend --enable-cassert --enable-debug --with-python</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-configure-error.png"></p>
<p>运行结果提示有错，找不到Python.h，需要安装python-devel。</p>
<p><img src="/images/201410-postgres-plpython-install/python-devel-install.png"></p>
<p>之后再<code>configure</code>就正常了，之后的步骤就是一般的用源码安装PostgreSQL的步骤，不再赘述。</p>
<p>安装之后启动PostgreSQL，然后需要注册plpythonu这个语言扩展，根据官方文档，可以用以下两种等价的方法。一种是在命令行下运行<code>createlang</code></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ createlang plpythonu test</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-createlang.png"></p>
<p>上面的<code>test</code>参数表示数据库名，即在<code>test</code>数据库上启用plpythonu。还有一种是用psql登陆数据库之后运行<code>create extension</code>，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">create</span> extension plpythonu;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-extension.png"></p>
<p>由于Python有Python2和Python3两个版本，以上是使用默认的Python，也就是Python2。如果需要指明是哪个Python版本，可以将上述命令中的<code>plpythonu</code>替换成<code>plpython2u</code>或<code>plpython3u</code>。</p>
<p>然后可以在psql中创建PL/Python的存储过程，如下</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> pyfib(n <span class="built_in">bigint</span>)</span></div><div class="line"> <span class="keyword">RETURNS</span> SETOF <span class="built_in">bigint</span></div><div class="line"> <span class="keyword">AS</span> $$</div><div class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">  fibnum = []</div><div class="line">  while b &lt; n:</div><div class="line">   fibnum.append(b)</div><div class="line">   a, b = b, a+b</div><div class="line">  <span class="keyword">return</span> fibnum</div><div class="line"> $$ <span class="keyword">LANGUAGE</span> plpythonu;</div></pre></td></tr></table></figure></p>
<p>如果之前的操作都正确，可以看到提示成功，</p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-function.png"></p>
<p>如果有问题的话，可以看到提示错误，<code>plpythonu</code>语言找不到，需要重新检查之前的操作，</p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-function-error.png"></p>
<p>创建的函数是用于计算fibonacci序列，可以试着运行一下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">select</span> pyfib(<span class="number">3</span>) <span class="keyword">as</span> i;</span></div><div class="line"> i</div><div class="line"><span class="comment">---</span></div><div class="line"> 1</div><div class="line"> 1</div><div class="line"> 2</div><div class="line">(3 rows)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-function-test.png"></p>
<p>如果不需要PL/Python了，可以将这个扩展drop掉，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">drop</span> extension plpythonu;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-drop-extension-error.png"></p>
<p>可以看到提示，已经有function依赖了这个扩展，需要先将function先drop掉，或者使用<code>DROP...CASCADE</code>选项。如果drop function的话，需要注意，要把function的参数也加上，否则会报错，因为PostgreSQL是可以重载函数的，不同的参数但是拥有相同的函数名是合法的，被认为是不同的函数。drop所有的PL/Python的过程之后，就可以成功drop extension了。</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">drop</span> <span class="keyword">function</span> pyfib(<span class="built_in">bigint</span>);</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-drop-function.png"></p>
<p>以上是PL/Python的安装和使用基础。本文参考了<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，还有PostgreSQL 9.3官方文档<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，以及8.1中文版文档<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>的对应章节。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/" target="_blank" rel="external">http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/" target="_blank" rel="external">http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.postgresql.org/docs/9.3/interactive/trigger-example.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/trigger-example.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.postgresql.org/docs/9.3/interactive/install-procedure.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/install-procedure.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.php100.com/manual/PostgreSQL8/" target="_blank" rel="external">http://www.php100.com/manual/PostgreSQL8/</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL可以支持多种存储过程语言，官方支持的除了PL/pgSQL，还有TCL，Perl，Python。</p>
<p>本文使用源码安装PL/Python过程语言支持，并简介PL/Python的一些简单的入门。如果是使用安装包安装的话，可以参考<a href="#]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PL/pgSQL使用入门]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-plpgsql-intro/"/>
    <id>http://valleylord.github.io/post/201410-postgres-plpgsql-intro/</id>
    <published>2014-10-25T11:51:00.000Z</published>
    <updated>2014-12-03T01:16:49.000Z</updated>
    <content type="html"><![CDATA[<p>默认情况下，PostgreSQL唯一默认会安装的存储过程语言就是PL/pgSQL。</p>
<p>创建PL/pgSQL的方法是在psql或者pgAdmin中输入创建语句，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">FUNCTION</span> somefunc() <span class="keyword">RETURNS</span> <span class="built_in">integer</span> <span class="keyword">AS</span> $$</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">   quantity <span class="built_in">integer</span> := <span class="number">30</span>;</div><div class="line"><span class="operator"><span class="keyword">BEGIN</span></span></div><div class="line">   RAISE NOTICE <span class="string">'Quantity here is %'</span>, quantity;  <span class="comment">-- 在这里的数量是 30</span></div><div class="line">   quantity := 50;</div><div class="line">   <span class="comment">--</span></div><div class="line">   <span class="comment">-- 创建一个子块</span></div><div class="line">   <span class="comment">--</span></div><div class="line">   <span class="operator"><span class="keyword">DECLARE</span></span></div><div class="line">      quantity <span class="built_in">integer</span> := <span class="number">80</span>;</div><div class="line">   <span class="operator"><span class="keyword">BEGIN</span></span></div><div class="line">      RAISE NOTICE <span class="string">'Quantity here is %'</span>, quantity;  <span class="comment">-- 在这里的数量是 80</span></div><div class="line">   <span class="operator"><span class="keyword">END</span>;</span></div><div class="line"></div><div class="line">   RAISE NOTICE 'Quantity here is %', quantity;  <span class="comment">-- 在这里的数量是 50</span></div><div class="line"></div><div class="line">   RETURN quantity;</div><div class="line"><span class="operator"><span class="keyword">END</span>;</span></div><div class="line">$$ LANGUAGE plpgsql;</div></pre></td></tr></table></figure></p>
<p>以上语句来自PostgreSQL的官方文档，运行后即可创建。运行的话，可以在pgAdmin的query窗口中输入如下语句，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> somefunc() <span class="keyword">as</span> i;</span></div></pre></td></tr></table></figure></p>
<p>得到的输出，如下图，</p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-output.png"></p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-message.png"></p>
<p>可以看到，实际的结果输出在output栏下；程序运行的中间输出，即<code>RAISE NOTICE</code>，输出在message栏下。如果是在psql中输入以上语句，会先输出中间结果，然后输出实际的运行结果，如下图，</p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-psql.png"></p>
<p>其余的用法，基本和Oracle的PL/SQL很相似。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>默认情况下，PostgreSQL唯一默认会安装的存储过程语言就是PL/pgSQL。</p>
<p>创建PL/pgSQL的方法是在psql或者pgAdmin中输入创建语句，如下，</p>
<p><figure class="highlight sql"><table><tr>]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ASM框架生成Java class文件]]></title>
    <link href="http://valleylord.github.io/post/201410-java-asm-lib/"/>
    <id>http://valleylord.github.io/post/201410-java-asm-lib/</id>
    <published>2014-10-25T02:12:00.000Z</published>
    <updated>2014-12-03T01:16:28.000Z</updated>
    <content type="html"><![CDATA[<p>ASM字节码操作框架，是Java中用于字节码操作的很好用的一个库，是cglib等很多著名框架的基础，我们常用的Spring，Hibernate等都用到了cglib。ASM存在的基础是，JVM虚拟机未对Java的字节码（.class）文件做“只能是文件”的限制，只要是合法的字节码文件格式，可以存在与网络上，内存中，都可以予以加载并运行。</p>
<p>本文使用ASM框架手动生成一段已有的Java代码，并予以加载和运行。ASM框架的代码可以去<a href="http://download.forge.ow2.org/asm/asm-4.2-bin.zip" target="_blank" rel="external">这里</a>下载，用户手册可以去<a href="http://download.forge.ow2.org/asm/asm4-guide.pdf" target="_blank" rel="external">这里</a>下载，官网是<a href="http://asm.ow2.org/" target="_blank" rel="external">这里</a>，官网上有一些文章和教程，可以用作入门。</p>
<p>生成字节码的源代码是这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    <span class="keyword">int</span> j = <span class="number">6</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">7</span>;</div><div class="line">    <span class="keyword">int</span> i = (j + k) * <span class="number">3</span>;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用ASM框架，生成上述代码的字节码的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.MethodVisitor;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 通过asm生成类的字节码</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @author</span> Administrator</div><div class="line"> *</div><div class="line"> * Decompiled Code:</div><div class="line">package my;</div><div class="line"></div><div class="line">import java.io.PrintStream;</div><div class="line"></div><div class="line">public class Example</div><div class="line">{</div><div class="line">  public static void main(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    int j = 6;</div><div class="line">    int k = 7;</div><div class="line">    int i = (j + k) * 3;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem1</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException,</div><div class="line">			ClassNotFoundException, IllegalArgumentException,</div><div class="line">			SecurityException, IllegalAccessException,</div><div class="line">			InvocationTargetException, NoSuchMethodException {</div><div class="line">		ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_MAXS</div><div class="line">				| ClassWriter.COMPUTE_FRAMES);</div><div class="line">		cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">"my/Example"</span>, <span class="keyword">null</span>,</div><div class="line">				<span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add constructor</span></div><div class="line">		MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>); <span class="comment">// this 入栈</span></div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>,</div><div class="line">				<span class="string">"()V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add main method</span></div><div class="line">		mw = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>,</div><div class="line">				<span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add 2 local int, a and b</span></div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">6</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">3</span>);</div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">7</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">4</span>);</div><div class="line"></div><div class="line">		<span class="comment">// do calculation</span></div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">3</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">4</span>);</div><div class="line">		mw.visitInsn(Opcodes.IADD);</div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">3</span>);</div><div class="line">		mw.visitInsn(Opcodes.IMUL);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">2</span>);</div><div class="line"></div><div class="line">		<span class="comment">// call println</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>,</div><div class="line">				<span class="string">"Ljava/io/PrintStream;"</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">2</span>);</div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>,</div><div class="line">				<span class="string">"println"</span>, <span class="string">"(I)V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// store and run code</span></div><div class="line">		<span class="keyword">final</span> <span class="keyword">byte</span>[] code = cw.toByteArray();</div><div class="line">		Class exampleClass = <span class="keyword">new</span> ClassLoader() {</div><div class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">			<span class="keyword">protected</span> Class <span class="title">findClass</span>(String name)</div><div class="line">					<span class="keyword">throws</span> ClassNotFoundException {</div><div class="line">				<span class="keyword">return</span> defineClass(name, code, <span class="number">0</span>, code.length);</div><div class="line">			}</div><div class="line">		}.loadClass(<span class="string">"my.Example"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        OutputStream out = new FileOutputStream("d:/Example.class");</span></div><div class="line"><span class="comment">//        out.write(code);</span></div><div class="line"><span class="comment">//        out.close();</span></div><div class="line"></div><div class="line">		Method method = exampleClass.getMethod(<span class="string">"main"</span>,</div><div class="line">				<span class="keyword">new</span> Class[] { String[].class });</div><div class="line">		method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] { <span class="keyword">null</span> });</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
以上代码做如下解释，
<ol>
<li>首先使用<code>ClassWriter</code>创建一个写入class字节码的对象，用<code>cw.visit</code>创建一个类<code>my.Example</code>。</li>
<li>然后用<code>cw.visitMethod</code>获取到类方法的<code>MethodVisitor</code>对象，使用该对象新增类中的方法。</li>
<li>先新增一个无参的构造方法，对应上述代码“add constructor”一段，方法的描述符是<code>()V</code>，表示无参数，返回是<code>void</code>，这个与Java字节码文件规范保持一致。</li>
<li>然后类似的构造<code>main</code>方法，在<code>main</code>方法中，先使用<code>mw.visitVarInsn</code>创建两个临时变量，并用<code>mw.visitIntInsn</code>赋初始值6和7。</li>
<li>接下来，用<code>mw.visitInsn</code>完成加法和乘法，并将值赋给一个新的临时变量。</li>
<li>在<code>main</code>方法的结尾，调用<code>mw.visitFieldInsn</code>获取静态的<code>PrintStream</code>对象，调用<code>mw.visitMethodInsn</code>来完成<code>println</code>方法的调用，并结束方法<code>mw.visitEnd</code>。</li>
<li>以上步骤已经完成了字节码的生成，调用<code>cw.toByteArray</code>将其保存到内存中的一个<code>byte[]</code>对象里，然后调用<code>ClassLoader</code>对象的<code>loadClass</code>方法，加载这个类，注意，这里要重写<code>findClass</code>，在其中指明使用<code>byte[]</code>对象里的内容作为字节码来加载。</li>
<li>如果需要将字节码输出可以使用<code>FileOutputStream</code>的<code>write</code>方法，这里已经注释掉，这段代码对调试很有用，可以用class文件反编译工具来查看是否是想要的代码。</li>
<li>最后，使用Java的反射机制，分别调用<code>getMethod</code>和<code>invoke</code>来调用之前加载的class的<code>main</code>方法，输出<code>39</code>。</li>
</ol>
<p>注意，局部变量并不可以指定名称，只可以指定在操作数栈中的位置，因此变量名<code>i,j,k</code>并未出现在以上代码中。可以看到，基本上，ASM是对Java字节码指令的一个比较好用的封装，与写汇编代码有以一些相似之处。如果需要生成的代码有<code>static</code>域，例如这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">6</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">7</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    <span class="keyword">int</span> i = (a + b) * <span class="number">3</span>;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>同样可以使用ASM生成这段字节码，只是局部代码需要做一些改动，修改后的代码如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.MethodVisitor;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 通过asm生成类的字节码</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @author</span> Administrator</div><div class="line"> *</div><div class="line"> * Decompiled Code:</div><div class="line">package my;</div><div class="line"></div><div class="line">import java.io.PrintStream;</div><div class="line"></div><div class="line">public class Example</div><div class="line">{</div><div class="line">  public static int a = 6;</div><div class="line">  public static int b = 7;</div><div class="line"></div><div class="line">  public static void main(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    int i = (a + b) * 3;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorClass</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException,</div><div class="line">			ClassNotFoundException, IllegalArgumentException,</div><div class="line">			SecurityException, IllegalAccessException,</div><div class="line">			InvocationTargetException, NoSuchMethodException {</div><div class="line">		ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_MAXS</div><div class="line">				| ClassWriter.COMPUTE_FRAMES);</div><div class="line">		cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">"my/Example"</span>, <span class="keyword">null</span>,</div><div class="line">				<span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add constructor</span></div><div class="line">		MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>); <span class="comment">// this 入栈</span></div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>,</div><div class="line">				<span class="string">"()V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add 2 static int, a and b</span></div><div class="line">		cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"a"</span>, <span class="string">"I"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">6</span>)).visitEnd();</div><div class="line">		cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"b"</span>, <span class="string">"I"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">7</span>)).visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add main method</span></div><div class="line">		mw = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>,</div><div class="line">				<span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// read static variables</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"my/Example"</span>, <span class="string">"a"</span>, <span class="string">"I"</span>);</div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"my/Example"</span>, <span class="string">"b"</span>, <span class="string">"I"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// do calculation</span></div><div class="line">		mw.visitInsn(Opcodes.IADD);</div><div class="line">		mw.visitInsn(Opcodes.ICONST_3);</div><div class="line">		mw.visitInsn(Opcodes.IMUL);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">2</span>);</div><div class="line"></div><div class="line">		<span class="comment">// call println</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>,</div><div class="line">				<span class="string">"Ljava/io/PrintStream;"</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">2</span>);</div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>,</div><div class="line">				<span class="string">"println"</span>, <span class="string">"(I)V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// store and run code</span></div><div class="line">		<span class="keyword">final</span> <span class="keyword">byte</span>[] code = cw.toByteArray();</div><div class="line">		Class exampleClass = <span class="keyword">new</span> ClassLoader() {</div><div class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">			<span class="keyword">protected</span> Class <span class="title">findClass</span>(String name)</div><div class="line">					<span class="keyword">throws</span> ClassNotFoundException {</div><div class="line">				<span class="keyword">return</span> defineClass(name, code, <span class="number">0</span>, code.length);</div><div class="line">			}</div><div class="line">		}.loadClass(<span class="string">"my.Example"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        OutputStream out = new FileOutputStream("d:/Example.class");</span></div><div class="line"><span class="comment">//        out.write(code);</span></div><div class="line"><span class="comment">//        out.close();</span></div><div class="line"></div><div class="line">		Method method = exampleClass.getMethod(<span class="string">"main"</span>,</div><div class="line">				<span class="keyword">new</span> Class[] { String[].class });</div><div class="line">		method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] { <span class="keyword">null</span> });</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
多数的代码和之前的有重复，不同之处如下，
<ol>
<li>使用<code>cw.visitField</code>，新增静态对象a和b。</li>
<li>使用<code>mw.visitFieldInsn</code>将静态对象压入操作数栈。</li>
</ol>
<p>以上是使用ASM框架来操作Java字节码的例子，本文参考了以下文章，<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://asm.ow2.org/doc/tutorial.html" target="_blank" rel="external">http://asm.ow2.org/doc/tutorial.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://asm.ow2.org/doc/tutorial-asm-2.0.html" target="_blank" rel="external">http://asm.ow2.org/doc/tutorial-asm-2.0.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://victorzhzh.iteye.com/category/140253" target="_blank" rel="external">http://victorzhzh.iteye.com/category/140253</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.cnblogs.com/yezhenhan/archive/2011/05/01/2033739.html" target="_blank" rel="external">http://www.cnblogs.com/yezhenhan/archive/2011/05/01/2033739.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.cnblogs.com/liuling/archive/2013/05/25/asm.html" target="_blank" rel="external">http://www.cnblogs.com/liuling/archive/2013/05/25/asm.html</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>ASM字节码操作框架，是Java中用于字节码操作的很好用的一个库，是cglib等很多著名框架的基础，我们常用的Spring，Hibernate等都用到了cglib。ASM存在的基础是，JVM虚拟机未对Java的字节码（.class）文件做“只能是文件”的限制，只要是合法的字]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java class文件解析代码分析]]></title>
    <link href="http://valleylord.github.io/post/201410-java-class-file/"/>
    <id>http://valleylord.github.io/post/201410-java-class-file/</id>
    <published>2014-10-18T04:38:00.000Z</published>
    <updated>2014-12-03T01:16:25.000Z</updated>
    <content type="html"><![CDATA[<p>每一个Java类在经过编译后，都会生成.class文件，作为JVM执行的输入。.class文件的结构分析和示例可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。本文用Java代码分析.class文件的结构，获取类的定义，以及类中每一个域和方法的声明。</p>
<p>首先，.class文件是Java的字节码文件，需要逐个逐个字节的读入，因此需要一个读入文件的类，我对<code>DataInputStream</code>做一些简单封装，得到读入.class文件的类，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/* Class file reader wrapper</span></div><div class="line"> * Simple wrapper for DataInputStream</div><div class="line"> *</div><div class="line"> * u4 and u8 has problem when reading float and double</div><div class="line"> * but we do not use the value info of them</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassReader</span> </span>{</div><div class="line">	DataInputStream input;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ClassReader</span>(DataInputStream input) {</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.input = input;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 1 byte</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">u1</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readByte();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 2 byte as short</span></div><div class="line">	<span class="keyword">public</span> Short <span class="title">u2</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readShort();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 4 byte as int, cannot read float</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">u4</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readInt();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 8 byte as long, cannot read double</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">long</span> <span class="title">u8</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readLong();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.readByte</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">readByte</span>() <span class="keyword">throws</span> IOException{</div><div class="line">		<span class="keyword">return</span> input.readByte();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.readFully</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFully</span>(<span class="keyword">byte</span>[] b) <span class="keyword">throws</span> IOException {</div><div class="line">		input.readFully(b);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.close</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() <span class="keyword">throws</span> IOException{</div><div class="line">		input.close();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>有了这个类，就可以使用<code>int magic = input.u4();</code>类似这样的代码来读入.class文件中4个byte的内容，并转换为<code>int</code>。还需要表示常量池内元素的类和常量池类，由于常量池内的元素种类比较多，所以对不同的种类要有不同的类来表示。所以，设计常量种类的枚举类型<code>EnumConstType</code>，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="comment">/* constant elem type</span></div><div class="line"> * tested under jdk 1.6.0_45</div><div class="line"> *</div><div class="line">CONSTANT_Utf8	1	UTF-8编码的Unicode字符串</div><div class="line">CONSTANT_Integer	3	int类型的字面值</div><div class="line">CONSTANT_Float	4	float类型的字面值</div><div class="line">CONSTANT_Long	5	long类型的字面值</div><div class="line">CONSTANT_Double	6	double类型的字面值</div><div class="line">CONSTANT_Class	7	对一个类或接口的符号引用</div><div class="line">CONSTANT_String	8	String类型字面值的引用</div><div class="line">CONSTANT_Fieldref	9	对一个字段的符号引用</div><div class="line">CONSTANT_Methodref	10	对一个类中方法的符号引用</div><div class="line">CONSTANT_InterfaceMethodref	11	对一个接口中方法的符号引用</div><div class="line">CONSTANT_NameAndType	12	对一个字段或方法的部分符号引用</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumConstType {</div><div class="line">	<span class="comment">// Enumerate each constant type for jdk 1.6</span></div><div class="line">	C_UTF8,    <span class="comment">//(1),</span></div><div class="line">	C_INTEGER, <span class="comment">//(3),</span></div><div class="line">	C_FLOAT,   <span class="comment">//(4),</span></div><div class="line">	C_LONG,    <span class="comment">//(5),</span></div><div class="line">	C_DOUBLE,  <span class="comment">//(6),</span></div><div class="line">	C_CLASS,   <span class="comment">//(7),</span></div><div class="line">	C_STRING,  <span class="comment">//(8),</span></div><div class="line">	C_FIELDREF,<span class="comment">//(9),</span></div><div class="line">	C_METHODREF,<span class="comment">//(10),</span></div><div class="line">	C_INTERFACEMETHODREF,<span class="comment">//(11),</span></div><div class="line">	C_NAMEANDTYPE;<span class="comment">//(12);</span></div><div class="line"></div><div class="line">	<span class="comment">/* generate EnumConstType from int read from class file</span></div><div class="line">	 */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumConstType <span class="title">generateByValue</span>(<span class="keyword">int</span> value){</div><div class="line">    	<span class="keyword">switch</span> (value){</div><div class="line">    	<span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_UTF8"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_INTEGER"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_FLOAT"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_LONG"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_DOUBLE"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_CLASS"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_STRING"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_FIELDREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_METHODREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">11</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_INTERFACEMETHODREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_NAMEANDTYPE"</span>);</div><div class="line">    	<span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	}</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>此外，常量池内元素通用的元素都包括表示常量种类的<code>tag</code>，和常量在常量池中的索引编号<code>index</code>，因此，提取这两个域设计常量元素的超类<code>ConstElem</code>，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* super class for constant elem</span></div><div class="line"> * all constant elem class should extends this class</div><div class="line"> */</div><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	EnumConstType tag;  <span class="comment">// constant type</span></div><div class="line">	<span class="keyword">int</span> index;          <span class="comment">// index in constant pool</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ConstElem</span>(EnumConstType tag, <span class="keyword">int</span> index) {</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.tag = tag;</div><div class="line">		<span class="keyword">this</span>.index = index;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> EnumConstType <span class="title">getTag</span>() {</div><div class="line">		<span class="keyword">return</span> tag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTag</span>(EnumConstType tag) {</div><div class="line">		<span class="keyword">this</span>.tag = tag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span>() {</div><div class="line">		<span class="keyword">return</span> index;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span>(<span class="keyword">int</span> index) {</div><div class="line">		<span class="keyword">this</span>.index = index;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>对于jdk1.6的情况，可以将常量池元素的类别，<code>EnumConstType</code>中的不同类别结构，分成5类。类别1：CONSTANT_Utf8，包含1个字符串；类别2：CONSTANT_Integer, CONSTANT_Float，包含1个4 byte的数据；类别3：CONSTANT_Long, CONSTANT_Double，包含1个8 byte的数据；类别4：CONSTANT_Class, CONSTANT_String，包含1个2 byte的数据；类别5：CONSTANT_Fieldref, CONSTANT_Methodref, CONSTANT_NameAndType, CONSTANT_InterfaceMethodref，包含2个2 byte的数据。如果是jdk之后的版本，如jdk1.7，还包括MethodHandle, MethodType, InvokeDynamic, 分别取值为15, 16, 18的常量类别，不过在此不做考虑。根据以上5个类别设计的类，分别如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for UTF8</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemU</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* the text content for utf8 constant</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String utf8;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemU</span>(EnumConstType tag, <span class="keyword">int</span> index, String utf8) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.utf8 = utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String <span class="title">getUtf8</span>() {</div><div class="line">		<span class="keyword">return</span> utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtf8</span>(String utf8) {</div><div class="line">		<span class="keyword">this</span>.utf8 = utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for int and float</span></div><div class="line"> * (not used)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemIF</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> vint;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemIF</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">int</span> vint) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">        <span class="keyword">this</span>.vint = vint;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVint</span>() {</div><div class="line">		<span class="keyword">return</span> vint;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVint</span>(<span class="keyword">int</span> vint) {</div><div class="line">		<span class="keyword">this</span>.vint = vint;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for long and double</span></div><div class="line"> * (not used)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemLD</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> vlong;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemLD</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">long</span> vlong) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">        <span class="keyword">this</span>.vlong = vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getVlong</span>() {</div><div class="line">		<span class="keyword">return</span> vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVlong</span>(<span class="keyword">long</span> vlong) {</div><div class="line">		<span class="keyword">this</span>.vlong = vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for class and string</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemCS</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* for Class, point to class name</span></div><div class="line">	 * for String, point to string content</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> name;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ConstElemCS</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">short</span> name) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getName</span>() {</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="keyword">short</span> name) {</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for Fieldref, Methodref,</span></div><div class="line"> * InterfaceMethodref, and NameandType</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemFMIN</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* for Fieldref, Methodref, InterfaceMethodref, point to class info</span></div><div class="line">	 * for NameandType, point to name</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> index1;</div><div class="line">	<span class="comment">/* for Fieldref, Methodref, InterfaceMethodref, point to NameandType info</span></div><div class="line">	 * for NameandType, point to descriptor</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> index2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemFMIN</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">short</span> index1, <span class="keyword">short</span> index2) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.index1 = index1;</div><div class="line">		<span class="keyword">this</span>.index2 = index2;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getIndex1</span>() {</div><div class="line">		<span class="keyword">return</span> index1;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex1</span>(<span class="keyword">short</span> index1) {</div><div class="line">		<span class="keyword">this</span>.index1 = index1;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getIndex2</span>() {</div><div class="line">		<span class="keyword">return</span> index2;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex2</span>(<span class="keyword">short</span> index2) {</div><div class="line">		<span class="keyword">this</span>.index2 = index2;</div><div class="line">	}</div><div class="line"></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>由于，本例中没有使用到float和double值的操作，所以读取这部分的数据只是简单的存成整型，实际上，值是有错误的，不过并不影响最后的结果。有了以上这些基础类了之后，就可以在这些基础上，完成常量池类的构建，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.constelem.*;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Pools</span></div><div class="line"> * Use a List to store Constant Pool data in class file</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPool</span> </span>{</div><div class="line">	<span class="comment">// a list to keep each constant elem</span></div><div class="line">	<span class="keyword">public</span> List&lt;ConstElem&gt; constPool = <span class="keyword">new</span> ArrayList&lt;ConstElem&gt;(<span class="number">1024</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* append an element in constant pool</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span>(ConstElem a){</div><div class="line">		<span class="keyword">return</span> constPool.add(a);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get element for ConstElem.index = index</span></div><div class="line">	 * paras: index, index in class file, starts from 1</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> ConstElem <span class="title">getElemAt</span>(<span class="keyword">int</span> index){</div><div class="line">		ConstElem e = constPool.get(index-<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span> (e.getIndex() == index){</div><div class="line">			<span class="keyword">return</span> e;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (ConstElem e1:constPool){</div><div class="line">			<span class="keyword">if</span>(e1.getIndex() == index){</div><div class="line">				<span class="keyword">return</span> e1;</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* read an elem from constant pool</span></div><div class="line">	 * paras: input, ClassReader wrapper for class file</div><div class="line">	 *        index, index of elem in constant pool, starts from 1</div><div class="line">	 * return: type of elem</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> EnumConstType <span class="title">analyzeConstant</span>(ClassReader input, <span class="keyword">int</span> index)</div><div class="line">			<span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">short</span> n16, n16_1;</div><div class="line">		<span class="keyword">int</span> n32;</div><div class="line">		<span class="keyword">long</span> n64;</div><div class="line">		<span class="keyword">float</span> f;</div><div class="line">		<span class="keyword">double</span> d;</div><div class="line">		<span class="keyword">byte</span>[] buffer;</div><div class="line">		<span class="keyword">byte</span> tag = input.readByte(); <span class="comment">// read constant tag</span></div><div class="line">		EnumConstType ctag = EnumConstType.generateByValue((<span class="keyword">int</span>)tag);</div><div class="line">		<span class="keyword">switch</span> (ctag) {</div><div class="line">		<span class="keyword">case</span> C_UTF8: <span class="comment">// utf-8 string</span></div><div class="line">			n16 = input.u2();</div><div class="line">			buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[n16];</div><div class="line">			input.readFully(buffer); <span class="comment">// read until buffer is full</span></div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemU(ctag, index, <span class="keyword">new</span> String(buffer)));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_INTEGER: <span class="comment">// integer</span></div><div class="line">			n32 = input.u4();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemIF(ctag, index, n32));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_FLOAT: <span class="comment">// float</span></div><div class="line">			f = input.u4();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemIF(ctag, index, (<span class="keyword">int</span>)f));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_LONG: <span class="comment">// long</span></div><div class="line">			n64 = input.u8();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemLD(ctag, index, n64));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_DOUBLE: <span class="comment">// double</span></div><div class="line">			d = input.u8();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemLD(ctag, index, (<span class="keyword">long</span>)d));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_CLASS: <span class="comment">// class or interface reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemCS(ctag, index, n16));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_STRING: <span class="comment">// string</span></div><div class="line">			n16 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemCS(ctag, index, n16));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_FIELDREF: <span class="comment">// field reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_METHODREF: <span class="comment">// method reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_INTERFACEMETHODREF: <span class="comment">// interface method reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_NAMEANDTYPE: <span class="comment">// name and type reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid constant pool flag: "</span> + tag);</div><div class="line">		} <span class="comment">// end switch</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> ctag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* print the list of constant pool</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printConstPool</span>(){</div><div class="line">		ConstElemU u1;</div><div class="line">		ConstElemIF if1;</div><div class="line">		ConstElemLD ld1;</div><div class="line">		ConstElemCS cs1;</div><div class="line">		ConstElemFMIN fmin1;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"\n[ Constant Pool Info ]:"</span>);</div><div class="line">		<span class="keyword">for</span> (ConstElem e:constPool){</div><div class="line">			System.out.println(<span class="string">"constant index = "</span> + e.getIndex() + <span class="string">", tag = "</span> + e.getTag());</div><div class="line">			<span class="keyword">switch</span>(e.getTag()){</div><div class="line">			<span class="keyword">case</span> C_UTF8:</div><div class="line">				u1 = (ConstElemU)e;</div><div class="line">				System.out.println(<span class="string">"  length = "</span> + u1.getUtf8().length() + <span class="string">" value = "</span> + u1.getUtf8());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_INTEGER:  <span class="comment">// INTENTIALLY left blank, same for following</span></div><div class="line">			<span class="keyword">case</span> C_FLOAT:</div><div class="line">				if1 = (ConstElemIF)e;</div><div class="line">				System.out.println(<span class="string">"  value = "</span> + if1.getVint());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_LONG:</div><div class="line">			<span class="keyword">case</span> C_DOUBLE:</div><div class="line">				ld1 = (ConstElemLD)e;</div><div class="line">				System.out.println(<span class="string">"  value = "</span> + ld1.getVlong());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_CLASS:</div><div class="line">			<span class="keyword">case</span> C_STRING:</div><div class="line">				cs1 = (ConstElemCS)e;</div><div class="line">				System.out.println(<span class="string">"  name at "</span> + cs1.getName());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_FIELDREF:</div><div class="line">			<span class="keyword">case</span> C_METHODREF:</div><div class="line">			<span class="keyword">case</span> C_INTERFACEMETHODREF:</div><div class="line">				fmin1 = (ConstElemFMIN)e;</div><div class="line">				System.out.println(<span class="string">"  classindex = "</span> + fmin1.getIndex1()</div><div class="line">						+ <span class="string">" nameandtype = "</span> + fmin1.getIndex2());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_NAMEANDTYPE:</div><div class="line">				fmin1 = (ConstElemFMIN)e;</div><div class="line">				System.out.println(<span class="string">"  nameindex = "</span> + fmin1.getIndex1()</div><div class="line">						+ <span class="string">" descriptor = "</span> + fmin1.getIndex2());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">			;</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>对每一个读入的常量，调用<code>analyzeConstant</code>来将其添加到常量池中。有了这个类之后，在分析域和方法的时候，就可以根据域和方法中表示NameandType的索引找到它们的名称和类型。为了能方便的获取到这些名称和类型，设计一个工具类，来产生这些名称和类型的字符串表示，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.constelem.ConstElemCS;</div><div class="line"><span class="keyword">import</span> problem1.constelem.ConstElemU;</div><div class="line"></div><div class="line"><span class="comment">/* Analyze utilities</span></div><div class="line"> * to get the string representation of</div><div class="line"> * class, fields, methods, and access flags for them</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalyzeUtil</span> </span>{</div><div class="line">	<span class="comment">/* get name of Class, super class, and interfaces</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClassName</span>(ConstantPool cp, <span class="keyword">int</span> index){</div><div class="line">		<span class="keyword">try</span>{</div><div class="line">			ConstElemCS e = (ConstElemCS)cp.getElemAt(index);</div><div class="line">			ConstElemU  u = (ConstElemU)cp.getElemAt(e.getName());</div><div class="line">			<span class="keyword">return</span> u.getUtf8();</div><div class="line">		}<span class="keyword">catch</span>(Exception e){</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMethodString</span>(ConstantPool cp, <span class="keyword">int</span> idx, <span class="keyword">int</span> idesc){</div><div class="line">		ConstElemU  uName = (ConstElemU)cp.getElemAt(idx);</div><div class="line">		ConstElemU  uDesc = (ConstElemU)cp.getElemAt(idesc);</div><div class="line">		<span class="keyword">return</span> analyzeMethodRet(uDesc.getUtf8()) + <span class="string">" "</span></div><div class="line">			   + uName.getUtf8()</div><div class="line">			   + analyzeMethodParas(uDesc.getUtf8());</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a single type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeType</span>(String t){</div><div class="line">		<span class="keyword">switch</span>(t.charAt(<span class="number">0</span>)){</div><div class="line">		<span class="keyword">case</span> <span class="string">'B'</span>: <span class="keyword">return</span> <span class="string">"byte"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">return</span> <span class="string">"char"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="string">"double"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">return</span> <span class="string">"float"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">return</span> <span class="string">"int"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'J'</span>: <span class="keyword">return</span> <span class="string">"long"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'S'</span>: <span class="keyword">return</span> <span class="string">"short"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'Z'</span>: <span class="keyword">return</span> <span class="string">"boolean"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'V'</span>: <span class="keyword">return</span> <span class="string">"void"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'L'</span>: <span class="keyword">return</span> t.substring(<span class="number">1</span>, t.indexOf(<span class="string">';'</span>, <span class="number">1</span>));</div><div class="line">		<span class="keyword">case</span> <span class="string">'['</span>: <span class="keyword">return</span> analyzeType(t.substring(<span class="number">1</span>)) + <span class="string">"[]"</span>;</div><div class="line">		<span class="keyword">default</span>:  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method's return type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeMethodRet</span>(String t){</div><div class="line">		String ret = t.substring(t.indexOf(<span class="string">')'</span>)+<span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span> analyzeType(ret);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method's parameter type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeMethodParas</span>(String t){</div><div class="line">		String paras = t.substring(t.indexOf(<span class="string">'('</span>)+<span class="number">1</span>, t.indexOf(<span class="string">')'</span>));</div><div class="line">		String s = <span class="string">""</span>;</div><div class="line">		<span class="keyword">while</span> (!paras.isEmpty()){</div><div class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (i&lt;paras.length()){</div><div class="line">				<span class="keyword">if</span> (paras.charAt(i) == <span class="string">'['</span>) {</div><div class="line">					++i;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">if</span> (paras.charAt(i) == <span class="string">'L'</span>) {</div><div class="line">					String para1 = paras.substring(<span class="number">0</span>, paras.indexOf(<span class="string">';'</span>)+<span class="number">1</span>);</div><div class="line">					s = s + analyzeType(para1) + <span class="string">", "</span>;</div><div class="line">					paras = paras.substring(paras.indexOf(<span class="string">';'</span>)+<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				}</div><div class="line">				s = s + analyzeType(paras.substring(<span class="number">0</span>, i+<span class="number">1</span>)) +<span class="string">", "</span>;</div><div class="line">				paras = paras.substring(<span class="number">1</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (s != <span class="string">""</span>){</div><div class="line">			s = s.substring(<span class="number">0</span>, s.length()-<span class="number">2</span>);</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="string">"("</span> + s + <span class="string">")"</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get name and description of field</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldString</span>(ConstantPool cp, <span class="keyword">int</span> in, <span class="keyword">int</span> id){</div><div class="line">		<span class="keyword">try</span>{</div><div class="line">			ConstElemU  uName = (ConstElemU)cp.getElemAt(in);</div><div class="line">			ConstElemU  uDesc = (ConstElemU)cp.getElemAt(id);</div><div class="line">			<span class="keyword">return</span> analyzeType(uDesc.getUtf8())+<span class="string">" "</span>+uName.getUtf8();</div><div class="line">		}<span class="keyword">catch</span>(Exception e){</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of class access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeClassAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0010</span>, <span class="number">0x0020</span>, <span class="number">0x0200</span>,</div><div class="line">						<span class="number">0x0400</span>, <span class="number">0x1000</span>, <span class="number">0x2000</span>, <span class="number">0x4000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"final"</span>, <span class="string">"super"</span>, <span class="string">"interface"</span>,</div><div class="line">								<span class="string">"abstract"</span>, <span class="string">"synthetic"</span>, <span class="string">"annotation"</span>, <span class="string">"enum"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of field access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeFieldAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0002</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>,</div><div class="line">				        <span class="number">0x0010</span>, <span class="number">0x0040</span>, <span class="number">0x0080</span>,</div><div class="line">				        <span class="number">0x1000</span>, <span class="number">0x4000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"private"</span>, <span class="string">"protected"</span>, <span class="string">"static"</span>,</div><div class="line">				                <span class="string">"final"</span>, <span class="string">"volatile"</span>, <span class="string">"transient"</span>,</div><div class="line">				                <span class="string">"synthetic"</span>, <span class="string">"enum"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of method access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeMethodAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0002</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>,</div><div class="line">				        <span class="number">0x0010</span>, <span class="number">0x0020</span>, <span class="number">0x0040</span>, <span class="number">0x0080</span>,</div><div class="line">				        <span class="number">0x0100</span>, <span class="number">0x0400</span>, <span class="number">0x0800</span>,</div><div class="line">				        <span class="number">0x1000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"private"</span>, <span class="string">"protected"</span>, <span class="string">"static"</span>,</div><div class="line">				                <span class="string">"final"</span>, <span class="string">"synchronized"</span>, <span class="string">"bridge"</span>, <span class="string">"varargs"</span>,</div><div class="line">				                <span class="string">"native"</span>, <span class="string">"abstract"</span>, <span class="string">"strctfp"</span>,</div><div class="line">				                <span class="string">"synthetic"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of access flags</span></div><div class="line">	 * general form of access flags for class, fields, and methods</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeAF</span>(<span class="keyword">short</span> access_flags, <span class="keyword">int</span>[] access,</div><div class="line">			String[] access_str){</div><div class="line">		String access_tmp = <span class="string">""</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; access.length; i++) {</div><div class="line">			<span class="keyword">if</span> ((access_flags & access[i]) == access[i]) {</div><div class="line">				<span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">					access_tmp += access_str[i];</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">2</span>)</div><div class="line">					access_tmp += <span class="string">" "</span> + access_str[i];</div><div class="line">			}</div><div class="line">		}</div><div class="line">        <span class="keyword">return</span> access_tmp;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码，多数都是解析字符串并转换为可以理解的Java代码的形式、其中，<code>public</code>的方法，如<code>getXXXX</code>方法，可以获取类名称，以及域和方法的字符串表示；<code>analyzeXXXXAF</code>方法，可以获取类，域，方法的访问权限。<code>private</code>的方法，如<code>analyzeXXXX</code>方法，都是公有方法中调用到的其他方法。有了以上这些代码之后，分析class文件就很简单了，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAnalyzer</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ConstantPool constPool = <span class="keyword">new</span> ConstantPool();</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String dir = <span class="string">"bin/problem1/constelem/"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String myClass = dir + <span class="string">"ConstElemU.class"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		ClassReader input = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// open class file</span></div><div class="line">			input = <span class="keyword">new</span> ClassReader(</div><div class="line">					<span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(</div><div class="line">					<span class="keyword">new</span> FileInputStream(myClass))));</div><div class="line">			<span class="comment">// analyze class file</span></div><div class="line">			analyze(input);</div><div class="line">		} <span class="keyword">catch</span> (Exception e) {</div><div class="line">			System.out.println(<span class="string">"fail to analyze!"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				input.close();</div><div class="line">				<span class="comment">//dataout.close();</span></div><div class="line">			} <span class="keyword">catch</span> (Exception e) {</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLog</span>(String str){</div><div class="line">		System.out.println(str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">analyze</span>(ClassReader input) <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="comment">// read magic number</span></div><div class="line">		<span class="keyword">int</span> magic = input.u4();</div><div class="line">		<span class="keyword">if</span> (magic == <span class="number">0xCAFEBABE</span>){</div><div class="line">			printLog(<span class="string">"[ General Info ]:"</span>);</div><div class="line">			printLog(<span class="string">"magic number = 0xCAFEBABE"</span>);</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"unknown magic number！"</span>);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read major version and minor version</span></div><div class="line">		<span class="keyword">int</span> minor_ver = input.u2();</div><div class="line">		<span class="keyword">int</span> major_ver = input.u2();</div><div class="line">		printLog(<span class="string">"Version = "</span> + major_ver + <span class="string">"."</span> + minor_ver);</div><div class="line"></div><div class="line">		<span class="comment">// read number of constant</span></div><div class="line">		<span class="keyword">short</span> const_pool_count = input.u2();</div><div class="line">		printLog(<span class="string">"constant pool size = "</span> + const_pool_count);</div><div class="line">        <span class="comment">// read each constant in constant pool</span></div><div class="line">		EnumConstType tp = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; const_pool_count; ++i){</div><div class="line">			 tp = constPool.analyzeConstant(input, i); <span class="comment">// analyze each constant</span></div><div class="line"></div><div class="line">			 <span class="comment">// for long and double, they use 2 constant index</span></div><div class="line">			 <span class="keyword">if</span> (tp == EnumConstType.C_LONG || tp == EnumConstType.C_DOUBLE){</div><div class="line">				 ++i;</div><div class="line">			 }</div><div class="line">		}</div><div class="line">		<span class="comment">// print Constant Pool when needed</span></div><div class="line">		constPool.printConstPool();</div><div class="line"></div><div class="line">		<span class="comment">// read access flags for class</span></div><div class="line">		<span class="keyword">short</span> access_flags = input.u2();</div><div class="line">		<span class="comment">// read class, and super class</span></div><div class="line">		<span class="keyword">short</span> this_class_index = input.u2();</div><div class="line">		<span class="keyword">short</span> super_class_index = input.u2();</div><div class="line">		<span class="comment">// print class, super class, and interface</span></div><div class="line">		<span class="comment">// print access flags for this class</span></div><div class="line">		printLog(<span class="string">"\n[ Class Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"This class index = "</span> + this_class_index +<span class="string">", name = "</span></div><div class="line">		        + AnalyzeUtil.getClassName(constPool, this_class_index));</div><div class="line"></div><div class="line">		System.out.print(<span class="string">"  access_flags = "</span> + String.format(<span class="string">"0x%04x"</span>, access_flags));</div><div class="line">		String access_tmp = AnalyzeUtil.analyzeClassAF(access_flags);</div><div class="line">		printLog(<span class="string">" [ "</span> + access_tmp + <span class="string">" ]"</span>);</div><div class="line"></div><div class="line">		printLog(<span class="string">"Super class index = "</span> + super_class_index +<span class="string">", name = "</span></div><div class="line">				+ AnalyzeUtil.getClassName(constPool, super_class_index));</div><div class="line"></div><div class="line">        <span class="comment">// read interfaces count:</span></div><div class="line">		<span class="keyword">short</span> inteCes_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Interface Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of interface = "</span> + inteCes_count);</div><div class="line">        <span class="comment">// read each interface:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= inteCes_count; i++) {</div><div class="line">			<span class="keyword">short</span> inteCe_index = input.u2();</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" interface index = "</span> + inteCe_index + <span class="string">", name = "</span></div><div class="line">					+ AnalyzeUtil.getClassName(constPool, inteCe_index));</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read field count:</span></div><div class="line">		<span class="keyword">short</span> field_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Field Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of field = "</span> + field_count);</div><div class="line">		<span class="comment">// read each field:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= field_count; i++) {</div><div class="line">			<span class="keyword">short</span> field_access_flag = input.u2();</div><div class="line">			<span class="keyword">short</span> field_name_index  = input.u2();</div><div class="line">			<span class="keyword">short</span> field_descriptor_index = input.u2();</div><div class="line">			<span class="keyword">short</span> field_attributes_count = input.u2();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=field_attributes_count; j++){</div><div class="line">				<span class="keyword">short</span> attribute_name_index = input.u2();</div><div class="line">				<span class="keyword">int</span>   attribute_length = input.u4();</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=attribute_length; k++){</div><div class="line">					input.u1(); <span class="comment">// not used attributes</span></div><div class="line">				}</div><div class="line">			}</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" access_flag = "</span></div><div class="line">			        + String.format(<span class="string">"0x%04x"</span>, field_access_flag)+ <span class="string">" name_index = "</span></div><div class="line">					+ field_name_index+ <span class="string">" descriptor_index = "</span></div><div class="line">					+ field_descriptor_index);</div><div class="line">			printLog(<span class="string">"  Original Form: "</span></div><div class="line">					+ AnalyzeUtil.analyzeFieldAF(field_access_flag) + <span class="string">" "</span></div><div class="line">					+ AnalyzeUtil.getFieldString(constPool, field_name_index,</div><div class="line">							field_descriptor_index) + <span class="string">";"</span>);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read method count:</span></div><div class="line">		<span class="keyword">short</span> method_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Method Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of method = "</span> + method_count);</div><div class="line">		<span class="comment">// read each method:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= method_count; i++) {</div><div class="line">			<span class="keyword">short</span> method_access_flag = input.u2();</div><div class="line">			<span class="keyword">short</span> method_name_index  = input.u2();</div><div class="line">			<span class="keyword">short</span> method_descriptor_index = input.u2();</div><div class="line">			<span class="keyword">short</span> method_attributes_count = input.u2();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=method_attributes_count; j++){</div><div class="line">				<span class="keyword">short</span> attribute_name_index = input.u2();</div><div class="line">				<span class="keyword">int</span>   attribute_length = input.u4();</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=attribute_length; k++){</div><div class="line">					input.u1();  <span class="comment">// not used attributes</span></div><div class="line">				}</div><div class="line">			}</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" access_flag = "</span></div><div class="line">			        + String.format(<span class="string">"0x%04x"</span>, method_access_flag)</div><div class="line">			        + <span class="string">" name_index = "</span></div><div class="line">					+ method_name_index+ <span class="string">" descriptor_index = "</span></div><div class="line">					+ method_descriptor_index);</div><div class="line">			printLog(<span class="string">"  Original Form: "</span></div><div class="line">					+ AnalyzeUtil.analyzeMethodAF(method_access_flag) + <span class="string">" "</span></div><div class="line">					+ AnalyzeUtil.getMethodString(constPool, method_name_index,</div><div class="line">							method_descriptor_index) + <span class="string">";"</span>);</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码的<code>main</code>入口读取class文件，并调用<code>analyze</code>来分析。<code>analyze</code>大致分两个步骤，到<code>printConstPool</code>之前，这一段主要是读取常量池的内容，构造常量池对象<code>constPool</code>，有一个小细节是，如果类型是long或者double，那么需要占用2个索引值index，其他情况都是占用1个；之后的部分，是读取类、域、方法的信息，然后从常量池中找到它们的索引值，并输出在屏幕上，输出的时候调用<code>AnalyzeUtil</code>中的方法，以便可以获取易于理解的输出。本例用的是之前的<code>ConstElemU</code>作为测试class，输入如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">[ General Info ]:</div><div class="line">magic <span class="variable">number =</span> <span class="number">0</span>xCAFEBABE</div><div class="line"><span class="variable">Version =</span> <span class="number">50.0</span></div><div class="line">constant pool <span class="variable">size =</span> <span class="number">29</span></div><div class="line"></div><div class="line">[ Constant Pool Info ]:</div><div class="line">constant <span class="variable">index =</span> <span class="number">1</span>, <span class="variable">tag =</span> C_CLASS</div><div class="line"> name at <span class="number">2</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">2</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">29</span> <span class="variable">value =</span> problem1/constelem/ConstElemU</div><div class="line">constant <span class="variable">index =</span> <span class="number">3</span>, <span class="variable">tag =</span> C_CLASS</div><div class="line"> name at <span class="number">4</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">4</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">28</span> <span class="variable">value =</span> problem1/constelem/ConstElem</div><div class="line">constant <span class="variable">index =</span> <span class="number">5</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> utf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">6</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">18</span> <span class="variable">value =</span> Ljava/lang/String;</div><div class="line">constant <span class="variable">index =</span> <span class="number">7</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">6</span> <span class="variable">value =</span> &lt;init&gt;</div><div class="line">constant <span class="variable">index =</span> <span class="number">8</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">46</span> <span class="variable">value =</span> (Lproblem1/EnumConstType;ILjava/lang/String;)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">9</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> Code</div><div class="line">constant <span class="variable">index =</span> <span class="number">10</span>, <span class="variable">tag =</span> C_METHODREF</div><div class="line"> <span class="variable">classindex =</span> <span class="number">3</span> <span class="variable">nameandtype =</span> <span class="number">11</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">11</span>, <span class="variable">tag =</span> C_NAMEANDTYPE</div><div class="line"> <span class="variable">nameindex =</span> <span class="number">7</span> <span class="variable">descriptor =</span> <span class="number">12</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">12</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">28</span> <span class="variable">value =</span> (Lproblem1/EnumConstType;I)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">13</span>, <span class="variable">tag =</span> C_FIELDREF</div><div class="line"> <span class="variable">classindex =</span> <span class="number">1</span> <span class="variable">nameandtype =</span> <span class="number">14</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">14</span>, <span class="variable">tag =</span> C_NAMEANDTYPE</div><div class="line"> <span class="variable">nameindex =</span> <span class="number">5</span> <span class="variable">descriptor =</span> <span class="number">6</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">15</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">15</span> <span class="variable">value =</span> LineNumberTable</div><div class="line">constant <span class="variable">index =</span> <span class="number">16</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">18</span> <span class="variable">value =</span> LocalVariableTable</div><div class="line">constant <span class="variable">index =</span> <span class="number">17</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> this</div><div class="line">constant <span class="variable">index =</span> <span class="number">18</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">31</span> <span class="variable">value =</span> Lproblem1/constelem/ConstElemU;</div><div class="line">constant <span class="variable">index =</span> <span class="number">19</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">3</span> <span class="variable">value =</span> tag</div><div class="line">constant <span class="variable">index =</span> <span class="number">20</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">24</span> <span class="variable">value =</span> Lproblem1/EnumConstType;</div><div class="line">constant <span class="variable">index =</span> <span class="number">21</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">5</span> <span class="variable">value =</span> index</div><div class="line">constant <span class="variable">index =</span> <span class="number">22</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">1</span> <span class="variable">value =</span> I</div><div class="line">constant <span class="variable">index =</span> <span class="number">23</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">7</span> <span class="variable">value =</span> getUtf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">24</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">20</span> <span class="variable">value =</span> ()Ljava/lang/String;</div><div class="line">constant <span class="variable">index =</span> <span class="number">25</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">7</span> <span class="variable">value =</span> setUtf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">26</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">21</span> <span class="variable">value =</span> (Ljava/lang/String;)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">27</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">10</span> <span class="variable">value =</span> SourceFile</div><div class="line">constant <span class="variable">index =</span> <span class="number">28</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">15</span> <span class="variable">value =</span> ConstElemU.java</div><div class="line"></div><div class="line">[ Class Info ]:</div><div class="line">This class <span class="variable">index =</span> <span class="number">1</span>, <span class="variable">name =</span> problem1/constelem/ConstElemU</div><div class="line">  <span class="variable">access_flags =</span> <span class="number">0</span>x0021 [ public ]</div><div class="line">Super class <span class="variable">index =</span> <span class="number">3</span>, <span class="variable">name =</span> problem1/constelem/ConstElem</div><div class="line"></div><div class="line">[ Interface Info ]:</div><div class="line">number of <span class="variable">interface =</span> <span class="number">0</span></div><div class="line"></div><div class="line">[ Field Info ]:</div><div class="line">number of <span class="variable">field =</span> <span class="number">1</span></div><div class="line">No. <span class="number">1</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0002 <span class="variable">name_index =</span> <span class="number">5</span> <span class="variable">descriptor_index =</span> <span class="number">6</span></div><div class="line">  Original Form:  private java/lang/String utf8;</div><div class="line"></div><div class="line">[ Method Info ]:</div><div class="line">number of <span class="variable">method =</span> <span class="number">3</span></div><div class="line">No. <span class="number">1</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">7</span> <span class="variable">descriptor_index =</span> <span class="number">8</span></div><div class="line">  Original Form: public void &lt;init&gt;(problem1/EnumConstType, int, java/lang/String);</div><div class="line">No. <span class="number">2</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">23</span> <span class="variable">descriptor_index =</span> <span class="number">24</span></div><div class="line">  Original Form: public java/lang/String getUtf8();</div><div class="line">No. <span class="number">3</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">25</span> <span class="variable">descriptor_index =</span> <span class="number">26</span></div><div class="line">  Original Form: public void setUtf8(java/lang/String);</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-java-class-file/class-file-test.png"></p>
<p>输出的内容很多，前一段是输出整个常量池的内容，如果不看这部分，剩下的内容从<code>[ Class Info ]:</code>开始，就很少了。<code>[ Class Info ]:</code>部分，可以得知，class文件的类是<code>problem1/constelem/ConstElemU</code>，是<code>public</code>的，其超类是<code>problem1/constelem/ConstElem</code>；<code>[ Interface Info ]:</code>部分没有内容，因为该类没有实现接口；<code>[ Field Info ]:</code>部分，有1个域，可以写成<code>private java/lang/String utf8</code>，也就是<code>private String utf8</code>；<code>[ Method Info ]:</code>有3个方法，第1个是构造方法<code>public void &lt;init&gt;(problem1/EnumConstType, int, java/lang/String)</code>，构造方法的名称统一写成了<code>&lt;init&gt;</code>，需要替换为类名，并加了<code>void</code>返回值，实际不需要，略微改写为<code>public ConstElemU(EnumConstType, int, String)</code>，另外2个方法<code>public java/lang/String getUtf8()</code>和<code>public void setUtf8(java/lang/String)</code>，可以改写为<code>public String getUtf8()</code>和<code>public void setUtf8(String)</code>。对比原本的代码可以发现，以上输出，基本还原了<code>ConstElemU</code>的类定义。</p>
<p>本例的代码还可以进一步修改来支持float和double类型常数，代码参考了<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/oracle_microsoft/article/details/4417075" target="_blank" rel="external">http://blog.csdn.net/oracle_microsoft/article/details/4417075</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://developer.51cto.com/art/201203/321576.htm" target="_blank" rel="external">http://developer.51cto.com/art/201203/321576.htm</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://xmuzyq.iteye.com/blog/1779334" target="_blank" rel="external">http://xmuzyq.iteye.com/blog/1779334</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://wenku.baidu.com/link?url=f2ahIgyDjm4lu5BWuklxfTvErlwMe__AVPGckl4wXUebN6Q-Reco9PnjF-xODvDrGggNnG1dNJDjEonE5ujq2xRlt6ezcCs3wRi2NuchDYW" target="_blank" rel="external">http://wenku.baidu.com/link?url=f2ahIgyDjm4lu5BWuklxfTvErlwMe__AVPGckl4wXUebN6Q-Reco9PnjF-xODvDrGggNnG1dNJDjEonE5ujq2xRlt6ezcCs3wRi2NuchDYW</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>每一个Java类在经过编译后，都会生成.class文件，作为JVM执行的输入。.class文件的结构分析和示例可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2"]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL添加UUID扩展]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-uuid/"/>
    <id>http://valleylord.github.io/post/201410-postgres-uuid/</id>
    <published>2014-10-09T11:53:00.000Z</published>
    <updated>2014-12-03T01:16:42.000Z</updated>
    <content type="html"><![CDATA[<p>UUID是用于提供全局唯一编码的程序，可以将其添加到PostgreSQL中，<a href="http://www.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>是UUID的主页。</p>
<p>下载最新版本uuid-1.6.2.tar.gz的源码，解压，configure，编译安装，与一般的程序安装并无很大差异。也可以使用<code>yum install uuid uuid-devel</code>来安装，不过我的Centos6.5的源上面还是1.6.1版本的UUID。本文使用的是前者，主页上面的下载连接似乎已经坏了，<a href="http://www.mirrorservice.org/sites/ftp.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>提供的链接可以下载。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy Downloads]$ tar xzf uuid-<span class="number">1.6</span>.<span class="number">2</span>.tar.gz</div><div class="line">[postgres@anzhy Downloads]$ <span class="built_in">cd</span> uuid-<span class="number">1.6</span>.<span class="number">2</span></div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ ./configure</div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ make</div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ make install</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/uuid-configure.png"></p>
<p><img src="/images/201410-postgres-uuid/uuid-make.png"></p>
<p><img src="/images/201410-postgres-uuid/uuid-make-install.png"></p>
<p>然后，PostgreSQL需要重新编译安装，PostgreSQL的安装可以参考我之前的博客，<a href="http://valleylord.sinaapp.com/post/201408-postgresql-install" target="_blank" rel="external">这里</a>和<a href="http://valleylord.sinaapp.com/post/201408-postgresql-dev-env" target="_blank" rel="external">这里</a>。先做PostgreSQL的configure，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ ./configure --prefix=<span class="variable">$HOME</span>/postgres --with-ossp-uuid --enable-depend --enable-cassert --enable-debug</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/postgres-configure.png"></p>
<p>注意，在configure的时候要增加<code>--with-ossp-uuid</code>选项，然后就可以用正常的步骤编译安装PostgreSQL，不再重复。安装完PostgreSQL之后，补上UUID扩展的安装，从PostgreSQL源码的根目录切换到uuid插件的目录，然后编译安装。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ <span class="built_in">cd</span> contrib/uuid-ossp/</div><div class="line">[postgres@anzhy uuid-ossp]$ make</div><div class="line">[postgres@anzhy uuid-ossp]$ make install</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/uuid-plugin-install.png"></p>
<p>由于uuid把库安装在了<code>/usr/local/lib</code>，所以我们需要把这个目录加入到<code>LD_LIBRARY_PATH</code>环境变量中</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=<span class="variable">$POSTGRESQLHOME</span>/lib:/usr/local/lib:<span class="variable">$LD_LIBRARY_PATH</span></div></pre></td></tr></table></figure></p>
<p>然后，启动PostgreSQL，进入psql，运行，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">postgres=# <span class="operator"><span class="keyword">create</span> extension <span class="string">"uuid-ossp"</span>;</span></div><div class="line">postgres=# <span class="operator"><span class="keyword">select</span> extname,extowner,extnamespace,extrelocatable,extversion <span class="keyword">from</span> pg_extension;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/create-extension.png"></p>
<p>可以看到，uuid扩展已经安装成功。</p>
<p>本文参考了以下文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.itpub.net/9697/viewspace-1046338/" target="_blank" rel="external">http://blog.itpub.net/9697/viewspace-1046338/</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>UUID是用于提供全局唯一编码的程序，可以将其添加到PostgreSQL中，<a href="http://www.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>是UUID的主页。</p>
<p>下]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
</feed>
