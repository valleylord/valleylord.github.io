<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[褚哥说|]]></title>
  <subtitle><![CDATA[我想写一些东西]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://valleylord.github.io/"/>
  <updated>2016-01-31T13:50:50.820Z</updated>
  <id>http://valleylord.github.io/</id>
  
  <author>
    <name><![CDATA[Valleylord]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MyCAT分片]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-sharding/"/>
    <id>http://valleylord.github.io/post/201601-mycat-sharding/</id>
    <published>2016-01-31T02:56:40.000Z</published>
    <updated>2016-01-31T13:46:24.686Z</updated>
    <content type="html"><![CDATA[<p>MyCAT提供了多种分片规则，本文以实例展示这些常用的分片方法。</p>
<h2>ER分片</h2>
<p>传统的表分片多数是采用连续（如时间分片）或离散（如hash分片）分片，这样分片在有表join的时候，需要访问所有分片上的表，消耗巨大。ER分片解决了这个问题，将有关联的数据放在同一个分片上，这样，在需要表join的时候，只需要访问单个分片上有关联的数据即可，降低了系统资源的消耗。常见的ER分片包括，按主键关联的ER分片，按其他字段的ER分片等。</p>
<h3>按主键关联的ER分片</h3>
<p>假设有customer和orders表，customer按主键id分片，orders表的customer_id列与customer按主键id关联。<code>schema.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"customer1"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">	<span class="variable">rule=</span><span class="string">"mod-long"</span>&gt;</div><div class="line">	&lt;childTable <span class="variable">name=</span><span class="string">"orders1"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">		<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">	&lt;/childTable&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure></p>
<p><code>rule.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"mod-long"</span> <span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMod"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- how many data nodes --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>建表语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer1 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> orders1 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, customer_id <span class="built_in">bigint</span>, order_date <span class="built_in">DATE</span>, money_paid <span class="built_in">decimal</span>);</span></div></pre></td></tr></table></figure></p>
<p>看一下插入是否已经执行分片，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into customer1(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.20 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (20000, 'bbb', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into customer1(id, name, register_date) values (20000, 'bbb', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer1(id, name, register_date) values (30000, 'ccc', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into customer1(id, name, register_date) values (30000, 'ccc', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>看来已经执行了分片，运行如下插入语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer1(id, name, register_date) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">10000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">20000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders1(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">30000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div></pre></td></tr></table></figure></p>
<p>执行中发现，对于order表的insert，没有explain，如果执行explain的话，会直接插入数据。执行查询语句，可以发现，已经使用了ER分片，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000;</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                           |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000 |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select c.id, c.name, o.id from customer1 c, orders1 o where c.id=o.customer_id and c.id=10000;</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| id    | name | id    |</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| 10000 | aaa  | 90000 |</span></div><div class="line">+-------+------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>select语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.823</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss cache ,key:TESTDBselect c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.825</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (RouterUtil.java:<span class="number">951</span>) -try to find cache by primary key</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.825</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -TableID2DataNodeCache.TESTDB_CUSTOMER1  miss cache ,key:<span class="number">10000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">59</span>) -SQLRouteCache add cache ,key:TESTDBselect c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span> value:select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}</div><div class="line">}</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}</div><div class="line">} rrs</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.826</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.827</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1454235153813</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}, <span class="variable">respHandler=</span>SingleNodeHandler [<span class="variable">node=</span>dn2{select c.id, c.name, o.id from customer1 c, orders1 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">id=</span><span class="number">10000</span>}, <span class="variable">packetId=</span><span class="number">6</span>], <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">33.827</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">7</span>, <span class="variable">lastTime=</span><span class="number">1454235153813</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p>可见，只执行了dn2上的sql，其他分片上没有sql执行。</p>
<h3>按其他字段的ER分片</h3>
<p>仍然假设有customer和orders表，customer按列register_date分片，orders表的customer_id列与customer按主键id关联。<code>schema.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"customer2"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">	<span class="variable">rule=</span><span class="string">"sharding-by-namehash"</span>&gt;</div><div class="line">	&lt;childTable <span class="variable">name=</span><span class="string">"orders2"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">		<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">	&lt;/childTable&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure></p>
<p><code>rule.xml</code>中可以如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-by-namehash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">columns</span>&gt;</span>name<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>namehash<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"namehash"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMurmurHash"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"seed"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"virtualBucketTimes"</span>&gt;</span>160<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>建表语句和插入语句与前文类似，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer2 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> orders2 (id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, customer_id <span class="built_in">bigint</span>, order_date <span class="built_in">DATE</span>, money_paid <span class="built_in">decimal</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> customer2(id, name, register_date) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'eee'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">10000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">20000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> orders2(id, customer_id, order_date, money_paid) <span class="keyword">values</span> (<span class="number">90000</span>, <span class="number">30000</span>, <span class="string">'20160131'</span>, <span class="number">100</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into customer2(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (20000, 'bbb', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into customer2(id, name, register_date) values (20000, 'bbb', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into customer2(id, name, register_date) values (30000, 'eee', '20160131');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into customer2(id, name, register_date) values (30000, 'eee', '20160131') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>查看select的explain，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa';</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                             |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa' |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select c.id, c.name, o.id from customer2 c, orders2 o where c.id=o.customer_id and c.name='aaa';</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| id    | name | id    |</span></div><div class="line">+-------+------+-------+</div><div class="line"><span class="header">| 10000 | aaa  | 90000 |</span></div><div class="line">+-------+------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>select语句对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.975</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">70</span>) -SQLRouteCache hit cache ,key:TESTDBselect c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa', <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.976</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostM1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.977</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1454239975957</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">26</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}, <span class="variable">respHandler=</span>SingleNodeHandler [<span class="variable">node=</span>dn2{select c.id, c.name, o.id from customer2 c, orders2 o where c.<span class="variable">id=</span>o.customer_id <span class="constant">and</span> c.<span class="variable">name=</span>'aaa'}, <span class="variable">packetId=</span><span class="number">6</span>], <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">55.977</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">3</span>, <span class="variable">lastTime=</span><span class="number">1454239975957</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">26</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.751</span>  DEBUG [Timer0] (SQLJob.java:<span class="number">85</span>) -con query sql:select user() to con:MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1454239976751</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">18</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.752</span>  DEBUG [Timer0] (SQLJob.java:<span class="number">85</span>) -con query sql:select user() to con:MySQLConnection [<span class="variable">id=</span><span class="number">11</span>, <span class="variable">lastTime=</span><span class="number">1454239976752</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.752</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1454239976741</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">18</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3306</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">56.753</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">11</span>, <span class="variable">lastTime=</span><span class="number">1454239976741</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">6</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">1.6</span>, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p>可见，只在dn2上执行了sql，其他分片没有执行sql。</p>
<h2>连续分片</h2>
<p>MyCAT连续分片有很多方法，如，自定义数字范围分片、按日期（天）分片、按单月小时分片、自然月分片等。其特点是天然的支持范围查询sql，不需要去每个分片上查找，缺点是，多数分片方法有数据范围限制，本文介绍其中两种。</p>
<h3>自定义数字范围分片</h3>
<p>自定义数字范围分片是对指定的数字（一般是主键）指定所在范围进行分片，比较简单直观。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_c1"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-range"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-range"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-range"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.AutoPartitionByLong"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapFile"</span>&gt;</span>auto-sharding-range.txt<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上配置指定了，在mycat的<code>conf</code>目录下的<code>auto-sharding-range.txt</code>文件，作为范围分片文件，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># range start-end ,data node index</div><div class="line"># <span class="keyword">K</span>=<span class="number">1000</span>,M=<span class="number">10000.</span></div><div class="line"><span class="number">0</span>-<span class="number">50</span><span class="keyword">K</span>=<span class="number">0</span></div><div class="line"><span class="number">50</span><span class="keyword">K</span>-<span class="number">100</span><span class="keyword">K</span>=<span class="number">1</span></div><div class="line"><span class="number">100</span><span class="keyword">K</span>-<span class="number">150</span><span class="keyword">K</span>=<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>该配置表示，id在0~50K的时候，存在0分片（即dn1）；id在50~100K的时候，存在1分片（即dn2）；id在100K~150K的时候，存在2分片（即dn3）。</p>
<p>测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_c1(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">70000</span>, <span class="string">'bbb'</span>, <span class="string">'20160131'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c1(id, name, register_date) <span class="keyword">values</span> (<span class="number">130000</span>, <span class="string">'ccc'</span>, <span class="string">'20160131'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (10000, 'aaa', '20160131');</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                            |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_c1(id, name, register_date) values (10000, 'aaa', '20160131') |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (70000, 'bbb', '20160131');</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                            |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_c1(id, name, register_date) values (70000, 'bbb', '20160131') |</span></div><div class="line">+-----------+--------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c1(id, name, register_date) values (130000, 'ccc', '20160131');</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                             |</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_c1(id, name, register_date) values (130000, 'ccc', '20160131') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; explain insert into test<span class="emphasis">_c1(id, name, register_</span>date) values (150001, <span class="emphasis">'aaa'</span>, <span class="emphasis">'20160131'</span>);</div><div class="line">ERROR 1064 (HY000): can't find any valid datanode :TEST<span class="emphasis">_C1 -&gt; ID -&gt; 150001</span></div></pre></td></tr></table></figure></p>
<p>以上可以看出，如果插入数据超出了分片的范围，就会报错。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; select * from test_c1 where id between 100 and 20000;</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| 10000 | aaa  | 2016-01-31    |</span></div><div class="line">+-------+------+---------------+</div><div class="line">1 row in set (0.10 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain select * from test_c1 where id between 100 and 20000;</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                            |</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | SELECT * FROM test_c1 WHERE id BETWEEN 100 AND 20000 LIMIT 100 |</span></div><div class="line">+-----------+----------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可见，只访问的dn1，自动范围分片生效。</p>
<h3>自然月分片</h3>
<p>自然月分片是说每个自然月一个分片。需要注意的是：需要提前将分片规划好，建好，否则有可能日期超出实际配置分片数。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_c2"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-month"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-month"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>register_date<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>auto-sharding-month<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"auto-sharding-month"</span>  <span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByMonth"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dateFormat"</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sBeginDate"</span>&gt;</span>2016-01-01<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试表的建表和插入语句如下，注意日期格式已经定义为<code>yyyy-MM-dd</code>形式，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_c2(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), register_date <span class="built_in">DATE</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'2016-01-01'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">70000</span>, <span class="string">'bbb'</span>, <span class="string">'2016-02-01'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_c2(id, name, register_date) <span class="keyword">values</span> (<span class="number">130000</span>, <span class="string">'ccc'</span>, <span class="string">'2016-03-01'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (10000, 'aaa', '2016-01-01');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_c2(id, name, register_date) values (10000, 'aaa', '2016-01-01') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (70000, 'bbb', '2016-02-01');</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                              |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_c2(id, name, register_date) values (70000, 'bbb', '2016-02-01') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_c2(id, name, register_date) values (130000, 'ccc', '2016-03-01');</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                               |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_c2(id, name, register_date) values (130000, 'ccc', '2016-03-01') |</span></div><div class="line">+-----------+-----------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; explain insert into test<span class="emphasis">_c2(id, name, register_</span>date) values (230000, <span class="emphasis">'ddd'</span>, <span class="emphasis">'2016-04-01'</span>);</div><div class="line">ERROR 1064 (HY000): Index: 3, Size: 3</div></pre></td></tr></table></figure></p>
<p>以上可以看出，如果插入数据超出了分片的时间范围，就会报错。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_c2 where register_date between '2016-01-01' and '2016-01-15';</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                       |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | SELECT * FROM test_c2 WHERE register_date BETWEEN '2016-01-01' AND '2016-01-15' LIMIT 100 |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_c2 where register_date between '2016-01-01' and '2016-01-15';</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| id    | name | register_date |</span></div><div class="line">+-------+------+---------------+</div><div class="line"><span class="header">| 10000 | aaa  | 2016-01-01    |</span></div><div class="line">+-------+------+---------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可见，只访问的dn1，按月自然分片生效。</p>
<h2>离散分片</h2>
<p>MyCAT离散分片也有很多方法，如，枚举分片、程序指定分区的分片、十进制求模分片、字符串hash分片、一致性哈希分片等。离散分片的特点是，分布比较均匀，但是对范围查找可能需要全部分片查找。其实，前文在ER分片的时候已经介绍了两种，分别是求模分片和一致性哈希分片，本文再介绍两种。</p>
<h3>枚举分片</h3>
<p>枚举分片是通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省份或区县来做保存，而全国省份区县固定的。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_d1"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-province"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-province"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>province<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>sharding-province<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"sharding-province"</span></span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByFileMap"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapFile"</span>&gt;</span>sharding-province.txt<span class="tag">&lt;/<span class="title">property</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"type"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">property</span>&gt;</span>  <span class="comment">&lt;!--  type默认值为0（0表示Integer，非零表示String） --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultNode"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">property</span>&gt;</span>   <span class="comment">&lt;!--  默认节点，枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上配置指定了，在mycat的<code>conf</code>目录下的<code>sharding-province.txt</code>文件，作为枚举分片文件，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Shanghai</span>=<span class="number">0</span></div><div class="line"><span class="constant">Beijingg</span>=<span class="number">1</span></div><div class="line"><span class="constant">Guangzhou</span>=<span class="number">2</span></div><div class="line"><span class="constant">Hangzhou</span>=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>该配置表示，province是Shanghai和Hangzhou的时候，存在0分片（即dn1）；province是Beijingg的时候，存在1分片（即dn2）；province是Guangzhou的时候，存在2分片（即dn3）。</p>
<p>测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_d1(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), province <span class="built_in">varchar</span>(<span class="number">100</span>));</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">10000</span>, <span class="string">'aaa'</span>, <span class="string">'Shanghai'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'Beijingg'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'Guangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'Huangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d1(id, name, province) <span class="keyword">values</span> (<span class="number">50000</span>, <span class="string">'eee'</span>, <span class="string">'Shenzhen'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (10000, 'aaa', 'Shanghai');</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                       |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (10000, 'aaa', 'Shanghai') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (20000, 'bbb', 'Beijingg');</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                     |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_d1(id, name, province) values (20000, 'bbb', 'Beijingg') |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (30000, 'ccc', 'Guangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_d1(id, name, province) values (30000, 'ccc', 'Guangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (40000, 'ddd', 'Huangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (40000, 'ddd', 'Huangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d1(id, name, province) values (50000, 'eee', 'Shenzhen');</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                       |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d1(id, name, province) values (50000, 'eee', 'Shenzhen') |</span></div><div class="line">+-----------+---------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>以上可以看出，即使插入的数据超出了枚举分片的范围，但是因为有默认分片，所以，超出范围的数据被分配在了默认的dn1分片。一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_d1 where province = 'Guangzhou';</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                          |</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | SELECT * FROM test_d1 WHERE province = 'Guangzhou' LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_d1 where province = 'Guangzhou';</span></div><div class="line">+-------+------+-----------+</div><div class="line"><span class="header">| id    | name | province  |</span></div><div class="line">+-------+------+-----------+</div><div class="line"><span class="header">| 30000 | ccc  | Guangzhou |</span></div><div class="line">+-------+------+-----------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>可见，分片已经成功。</p>
<h3>固定分片hash算法</h3>
<p>固定分片hash（二进制），本条规则类似于十进制的求模运算，区别在于是二进制的操作,是取id的二进制低10位，即id二进制&amp;1111111111，实际效果与求模范围类似。此算法根据二进制则可能会分到连续的分片。严格来说，该分片方法应该算是综合分片方法，即部分连续分片和部分离散分片的综合，在两者之间取了折中。需要先在<code>schema.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"test_d2"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-fix-hash"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在<code>rule.xml</code>中配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-fix-hash"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>sharding-fix-hash<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">function</span> <span class="attribute">name</span>=<span class="value">"sharding-fix-hash"</span> </span></div><div class="line">	<span class="attribute">class</span>=<span class="value">"org.opencloudb.route.function.PartitionByLong"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"partitionCount"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"partitionLength"</span>&gt;</span>256,512<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="title">function</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上参数中，partitionCount 分片个数列表，partitionLength是分区长度，默认为最大2^n=1024，即最大支持1024分区。注意，count,length两个数组的长度必须是一致的，<code>1024 = sum((count[i]*length[i]))</code>。 count和length两个向量的点积恒等于1024。上述配置，将数据水平分成3份，前两份各占25%，第三份占50%，是一种非均匀分片。测试表的建表和插入语句如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_d2(id <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">primary</span> <span class="keyword">key</span>, name <span class="built_in">varchar</span>(<span class="number">100</span>), province <span class="built_in">varchar</span>(<span class="number">100</span>));</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">20000</span>, <span class="string">'bbb'</span>, <span class="string">'Beijing'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">30000</span>, <span class="string">'ccc'</span>, <span class="string">'Guangzhou'</span>);</span></div><div class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> test_d2(id, name, province) <span class="keyword">values</span> (<span class="number">40000</span>, <span class="string">'ddd'</span>, <span class="string">'Huangzhou'</span>);</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (20000, 'bbb', 'Beijing');</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                     |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | insert into test_d2(id, name, province) values (20000, 'bbb', 'Beijing') |</span></div><div class="line">+-----------+-------------------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (30000, 'ccc', 'Guangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into test_d2(id, name, province) values (30000, 'ccc', 'Guangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into test_d2(id, name, province) values (40000, 'ddd', 'Huangzhou');</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                        |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into test_d2(id, name, province) values (40000, 'ddd', 'Huangzhou') |</span></div><div class="line">+-----------+----------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>一般select语句的explain如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from test_d2 where id between 20000 and 20100;</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                              |</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line"><span class="header">| dn3       | SELECT * FROM test_d2 WHERE id BETWEEN 20000 AND 20100 LIMIT 100 |</span></div><div class="line">+-----------+------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from test_d2 where id between 20000 and 20100;</span></div><div class="line">+-------+------+----------+</div><div class="line"><span class="header">| id    | name | province |</span></div><div class="line">+-------+------+----------+</div><div class="line"><span class="header">| 20000 | bbb  | Beijing  |</span></div><div class="line">+-------+------+----------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from test<span class="emphasis">_d2 where id between 20000 and 30000;</span></div><div class="line">ERROR 1064 (HY000): NullPointerException</div></pre></td></tr></table></figure></p>
<p>可见，分片已经生效，而且，虽然部分采用了hash分片，但仍然有连续分片的一些特点。但是，大范围查找的时候会报错，不确定这是否是一个bug，对应的log如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">01/31 21:40:52.308  DEBUG [$_NIOREACTOR-0-RW] (ServerQueryHandler.java:56) -ServerConnection [id=1, schema=TESTDB, host=192.168.1.6, user=test,txIsolation=3, autocommit=true, schema=TESTDB]<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span></span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">21</span>:<span class="number">40</span>:<span class="number">52.308</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss <span class="keyword">cache</span> ,<span class="keyword">key</span>:TESTDBselect * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span></div><div class="line"><span class="number">01</span>/<span class="number">31</span> <span class="number">21</span>:<span class="number">40</span>:<span class="number">52.309</span>   WARN [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerConnection.java:<span class="number">209</span>) -ServerConnection [id=<span class="number">1</span>, <span class="keyword">schema</span>=TESTDB, host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span>, <span class="keyword">user</span>=test,txIsolation=<span class="number">3</span>, autocommit=<span class="literal">true</span>, <span class="keyword">schema</span>=TESTDB]<span class="keyword">select</span> * <span class="keyword">from</span> test_d2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">20000</span> <span class="keyword">and</span> <span class="number">30000</span> err:java.lang.NullPointerException</div><div class="line">java.lang.NullPointerException</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.findRouteWithcConditionsForTables(RouterUtil.java:<span class="number">1007</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.tryRouteForOneTable(RouterUtil.java:<span class="number">896</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.util.RouterUtil.tryRouteForTables(RouterUtil.java:<span class="number">780</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidSelectParser.tryRoute(DruidSelectParser.java:<span class="number">376</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DruidSelectParser.changeSql(DruidSelectParser.java:<span class="number">264</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.parser.druid.impl.DefaultDruidParser.parser(DefaultDruidParser.java:<span class="number">66</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.DruidMycatRouteStrategy.routeNormalSqlWithAST(DruidMycatRouteStrategy.java:<span class="number">64</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.impl.AbstractRouteStrategy.route(AbstractRouteStrategy.java:<span class="number">76</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.route.RouteService.route(RouteService.java:<span class="number">116</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.routeEndExecuteSQL(ServerConnection.java:<span class="number">201</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerConnection.<span class="keyword">execute</span>(ServerConnection.java:<span class="number">154</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.<span class="keyword">handler</span>.SelectHandler.handle(SelectHandler.java:<span class="number">102</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.<span class="keyword">server</span>.ServerQueryHandler.<span class="keyword">query</span>(ServerQueryHandler.java:<span class="number">77</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.<span class="keyword">query</span>(FrontendConnection.java:<span class="number">308</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.<span class="keyword">handler</span>.FrontendCommandHandler.handle(FrontendCommandHandler.java:<span class="number">71</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.rawHandle(FrontendConnection.java:<span class="number">435</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.FrontendConnection.handle(FrontendConnection.java:<span class="number">417</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.onReadData(AbstractConnection.java:<span class="number">313</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOSocketWR.asynRead(NIOSocketWR.java:<span class="number">186</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.AbstractConnection.asynRead(AbstractConnection.java:<span class="number">274</span>)</div><div class="line">	<span class="keyword">at</span> org.opencloudb.net.NIOReactor$RW.run(NIOReactor.java:<span class="number">96</span>)</div><div class="line">	<span class="keyword">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT提供了多种分片规则，本文以实例展示这些常用的分片方法。</p>
<h2>ER分片</h2>
<p>传统的表分片多数是采用连续（如时间分片）或离散（如hash分片）分片，这样分片在有表join的时候，需要访问所有分片上的表，消耗巨大。ER分片解决了这个问题，将有关联]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kubernetes原理简介]]></title>
    <link href="http://valleylord.github.io/post/201601-kubernetes-concepts/"/>
    <id>http://valleylord.github.io/post/201601-kubernetes-concepts/</id>
    <published>2016-01-30T09:58:27.000Z</published>
    <updated>2016-01-31T13:44:27.698Z</updated>
    <content type="html"><![CDATA[<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。本文旨在梳理Kubernetes的架构、概念及基本工作流<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a><a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<table>
<thead>
<tr class="header">
<th align="left">英文</th>
<th align="left">翻译</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Container</td>
<td align="left">容器</td>
</tr>
<tr class="even">
<td align="left">Pod</td>
<td align="left">容器组</td>
</tr>
<tr class="odd">
<td align="left">Replication Controller</td>
<td align="left">复制控制器</td>
</tr>
<tr class="even">
<td align="left">Service</td>
<td align="left">服务</td>
</tr>
<tr class="odd">
<td align="left">Label</td>
<td align="left">标签</td>
</tr>
<tr class="even">
<td align="left">proxy</td>
<td align="left">代理</td>
</tr>
<tr class="odd">
<td align="left">Node</td>
<td align="left">节点</td>
</tr>
<tr class="even">
<td align="left">Kubernetes Master</td>
<td align="left">主节点</td>
</tr>
</tbody>
</table>
<h2>操作对象</h2>
<p>Kubernetes中，可操作的对象有以下一些：</p>
<ul>
<li><p>Container：容器，即是Docker容器，Kubernetes操作的虚拟机。</p></li>
<li><p>Pod：容器组。是Kubernetes的基本操作单元，把相关的一个或多个容器构成一个Pod，通常Pod里的容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理单元，共享相同的volumes和network namespace/IP和Port空间。</p></li>
<li><p>Service：服务。也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务的容器，对外表现为一个单一访问接口，外部不需要了解后端如何运行，这给扩展或维护后端带来很大的好处。</p></li>
<li><p>Replication Controller：复制控制器。是Pod的复制抽象。确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)在运行， 如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改pod 模板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的pods。对于利用pod 模板创建的pods，Replication Controller根据label selector来关联，通过修改pods的label可以删除对应的pods。</p></li>
<li><p>Label：标签。用于区分Pod、Service、Replication Controller的key/value键值对，Pod、Service、 Replication Controller可以有多个label，但是每个label的key只能对应一个value。Labels是Service和Replication Controller运行的基础，为了将访问Service的请求转发给后端提供服务的多个容器，正是通过标识容器的labels来选择正确的容器。同样，Replication Controller也使用labels来管理通过pod 模板创建的一组容器，这样Replication Controller可以更加容易，方便地管理多个容器，无论有多少容器。</p></li>
<li><p>Proxy：代理。是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息，或者也可以从file获取，然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</p></li>
</ul>
<h2>功能组件</h2>
<p>如下图所示是官方文档里的集群架构图，一个典型的master/slave模型。</p>
<p><img src="/images/201601-kubernetes-concepts/kubernetes-masterslave.png"></p>
<p>master运行三个组件：</p>
<ul>
<li><p>apiserver：作为kubernetes系统的入口，封装了核心对象的增删改查操作，以RESTFul接口方式提供给外部客户和内部组件调用。它维护的REST对象将持久化到etcd（一个分布式强一致性的key/value存储）。</p></li>
<li><p>scheduler：负责集群的资源调度，为新建的Pod分配机器。这部分工作分出来变成一个组件，意味着可以很方便地替换成其他的调度器。</p></li>
<li>controller-manager：负责执行各种控制器，目前有两类：</li>
</ul>
<ol>
<li>endpoint-controller：定期关联service和Pod(关联信息由endpoint对象维护)，保证service到Pod的映射总是最新的。</li>
<li>replication-controller：定期关联replicationController和Pod，保证replicationController定义的复制数量与实际运行Pod的数量总是一致的。</li>
</ol>
<p>slave(称作minion)运行两个组件：</p>
<ul>
<li><p>kubelet：负责管控docker容器，如启动/停止、监控运行状态等。它会定期从etcd获取分配到本机的Pod，并根据Pod信息启动或停止相应的容器。同时，它也会接收apiserver的HTTP请求，汇报Pod的运行状态。</p></li>
<li><p>proxy：负责为Pod提供代理。它会定期从etcd获取所有的service，并根据service信息创建代理。当某个客户Pod要访问其他Pod时，访问请求会经过本机proxy做转发。</p></li>
</ul>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.csdn.net/article/2014-10-31/2822393" target="_blank" rel="external">http://www.csdn.net/article/2014-10-31/2822393</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/zhangjun2915/article/details/40598151" target="_blank" rel="external">http://blog.csdn.net/zhangjun2915/article/details/40598151</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction" target="_blank" rel="external">http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.csdn.net/article/2015-06-11/2824933" target="_blank" rel="external">http://www.csdn.net/article/2015-06-11/2824933</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。本文旨在梳理Kubernetes的架构、概念及基本工作流<a h]]>
    </summary>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/tags/Kubernetes/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Kubernetes" scheme="http://valleylord.github.io/categories/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT 日志分析]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-log-analysis/"/>
    <id>http://valleylord.github.io/post/201601-mycat-log-analysis/</id>
    <published>2016-01-23T06:50:21.000Z</published>
    <updated>2016-01-30T09:58:36.361Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 的日志还是相对比较简明的，看系统细节的话需要打开debug级别的 log，修改<code>log4j.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;root&gt;</div><div class="line">  &lt;level value=<span class="string">"debug"</span> /&gt;</div><div class="line">  &lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;</div><div class="line">   &lt;!--&lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;--&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>然后启动 MyCAT 就可以看到详细的日志了，日志默认路径在<code>logs/mycat.log</code>。启用之前，设置 Mysql 的字符集为 utf8<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，即修改/etc/mysql/my.cnf，在[mysqld]后添加character-set-server=utf8。</p>
<h2>MyCAT select 日志分析</h2>
<p>运行简单的查询 sql，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord;</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                  |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line"><span class="header">| dn3       | SELECT * FROM travelrecord LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">3 rows in set (0.25 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.09 sec)</div></pre></td></tr></table></figure></p>
<p>对应的 debug 日志比较长，以下只列出了执行 select 的日志，explain 的日志没有列出，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.441</span>   INFO [$_NIOREACTOR-<span class="number">0</span>-RW] (FrontendAuthenticator.java:<span class="number">193</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]'test' login success</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.443</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]show databases</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.458</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]show tables</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.465</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (ServerQueryHandler.java:<span class="number">56</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.469</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">76</span>) -SQLRouteCache  miss cache ,key:TESTDBselect * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.589</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (EnchachePool.java:<span class="number">59</span>) -SQLRouteCache add cache ,key:TESTDBselect * from travelrecord value:select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">}</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.589</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">1</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.593</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">97</span>) -has data merge logic </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.595</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413595</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.596</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413597</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">1</span> commands SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413597</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.597</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.598</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.599</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.598</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.600</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">94</span>bf31, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.603</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">5</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">12</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.600</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (DataMergeService.java:<span class="number">94</span>) -field metadata inf:[<span class="variable">DAYS=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">4</span>, <span class="variable">colType=</span><span class="number">3</span>], <span class="variable">USER_ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">1</span>, <span class="variable">colType=</span><span class="number">253</span>], <span class="variable">ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">0</span>, <span class="variable">colType=</span><span class="number">8</span>], <span class="variable">TRAVELDATE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">2</span>, <span class="variable">colType=</span><span class="number">10</span>], <span class="variable">FEE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">3</span>, <span class="variable">colType=</span><span class="number">246</span>]]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">3</span>f164fd2, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.605</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">2</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">17</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.607</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.610</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">17</span>b029c7, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">41</span>a599fc, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.610</span>  DEBUG [$_NIOREACTOR-<span class="number">0</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453534413593</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">15</span>:<span class="number">33</span>:<span class="number">33.611</span>  DEBUG [BusinessExecutor5] (DataMergeService.java:<span class="number">296</span>) -prepare mpp merge result for select * from travelrecord</div></pre></td></tr></table></figure></p>
<p>以上日志中，执行过程如下，</p>
<ol>
<li>MyCAT 先收到 sql，然后去路径 cache 中查找是否已经有解析好的路径，但是没有找到，因此提示<code>SQLRouteCache  miss cache</code>，于是解析该 sql，并将路径保存，提示<code>SQLRouteCache add cache</code>；</li>
<li>接下来，使用<code>NonBlockingSession.java</code>，即非阻塞会话来获取连接，
还有提示，使用<code>MultiNodeQueryHandler</code>，多节点查询，过程中需要数据合并，即<code>has data merge logic</code>；</li>
<li>然后，找到了读的数据源，提示<code>select read source hostS1 for dataHost:localhost1</code>，并提示获取连接成功，执行同步命令，<code>-con need syn ,total syn cmd 1 commands</code>，之后发送查询sql，因为 travelrecord 表在 db1、db2、db3 共有3个分片，因此，以上日志在这3个分片上各出现了一次；</li>
<li>然后，收到返回结果并调用回调函数，<code>on row end reseponse</code>，等数据接收完成还会提示<code>received ok response</code>，同样，也是收到3个分片上各一次；</li>
<li>执行完后，会释放 MyCAT 会话和 Mysql 连接，<code>release connection MySQLConnection</code>，<code>release channel MySQLConnection</code>；</li>
<li>收到的结果还需要显示列名，因此，上述执行过程中会提示，<code>field metadata inf</code>；</li>
<li>等收到3个分片的所有数据后，进行数据合并，<code>prepare mpp merge result</code>；</li>
</ol>
<p>以上就是 MyCAT 上执行 sql 的基本步骤。</p>
<h2>动态加载<code>schema.xml</code></h2>
<p>MyCAT 的<code>schema.xml</code>是可以动态加载（reload）的。假定新增一个分片表 T_VOTE (ID,PROVINCE)，PROVINCE 列用hash分片。首先需要修改<code>rule.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">tableRule</span> <span class="attribute">name</span>=<span class="value">"sharding-by-stringhash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">columns</span>&gt;</span>province<span class="tag">&lt;/<span class="title">columns</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="title">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">rule</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">tableRule</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，<code>murmur</code>是一致性 hash 方法。在<code>schema.xml</code>中增加，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table <span class="variable">name=</span><span class="string">"t_vote"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"sharding-by-stringhash"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>修改完文件后，使用管理端，端口9066，登陆MyCAT，用以下命令可以重新加载配置文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">mysql&gt;</span> reload <span class="variable">@@config</span>;</span></div><div class="line"><span class="constant">Query</span> <span class="constant">OK</span>, <span class="number">1</span> row affected (<span class="number">0</span>.<span class="number">13</span> sec)</div><div class="line"><span class="constant">Reload</span> config success</div></pre></td></tr></table></figure></p>
<p>加载完成之后，可以发现用户端，即端口8066，上已经可以看到新增的 T_VOTE 表，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; show tables;</span></div><div class="line">+------------------+</div><div class="line"><span class="header">| Tables in TESTDB |</span></div><div class="line">+------------------+</div><div class="line">| company          |</div><div class="line">| customer         |</div><div class="line">| customer<span class="emphasis">_addr    |</span></div><div class="line">| employee         |</div><div class="line">| goods            |</div><div class="line">| hotnews          |</div><div class="line">| orders           |</div><div class="line">| order_items      |</div><div class="line">| travelrecord     |</div><div class="line"><span class="header">| t_vote           |</span></div><div class="line">+------------------+</div><div class="line">10 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>查看这段时间内的日志，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.003</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (ManagerQueryHandler.java:<span class="number">65</span>) -[<span class="variable">thread=</span>$_NIOREACTOR-<span class="number">3</span>-RW,<span class="variable">class=</span>ManagerConnection,<span class="variable">id=</span><span class="number">7</span>,<span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>,<span class="variable">port=</span><span class="number">9066</span>,<span class="variable">schema=</span>TESTDB]reload @@config</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.048</span>   INFO [BusinessExecutor7] (CacheService.java:<span class="number">187</span>) -clear all cache pool </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.048</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache ER_SQL2PARENTID</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.124</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache SQLRouteCache</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.125</span>   INFO [BusinessExecutor7] (DefaultLayedCachePool.java:<span class="number">100</span>) -clear cache </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.126</span>   INFO [BusinessExecutor7] (EnchachePool.java:<span class="number">85</span>) -clear cache TableID2DataNodeCache.TESTDB_ORDERS</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">14.128</span>   WARN [BusinessExecutor6] (ReloadConfig.java:<span class="number">166</span>) -send ok package to client [<span class="variable">thread=</span>BusinessExecutor6,<span class="variable">class=</span>ManagerConnection,<span class="variable">id=</span><span class="number">7</span>,<span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>,<span class="variable">port=</span><span class="number">9066</span>,<span class="variable">schema=</span>TESTDB]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">17.674</span>  DEBUG [Timer0] (ConnectionHeartBeatHandler.java:<span class="number">52</span>) -do heartbeat for con MySQLConnection [<span class="variable">id=</span><span class="number">6</span>, <span class="variable">lastTime=</span><span class="number">1453538597657</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">15</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">17.675</span>  DEBUG [Timer0] (ConnectionHeartBeatHandler.java:<span class="number">52</span>) -do heartbeat for con MySQLConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">lastTime=</span><span class="number">1453538597657</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">16</span>, <span class="variable">charset=</span>utf8, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-log-analysis/mycat-log-reload-config.png"></p>
<p>可以发现，重新加载的过程中，清理了一些 cache，并重新建立了心跳。</p>
<h2>MyCAT 字符集</h2>
<p>以上的实验中，MyCAT 的字符集和 Mysql 客户端的字符集都是采用 utf8，修改 Mysql 客户端的字符集为 latin1，即修改客户端所在机器的/etc/mysql/my.cnf，在[client]后添加default-character-set=latin1。再次执行相同的查询<code>select * from travelrecord;</code>，日志如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (EnchachePool.java:<span class="number">70</span>) -SQLRouteCache hit cache ,key:TESTDBselect * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">113</span>) -ServerConnection [<span class="variable">id=</span><span class="number">4</span>, <span class="variable">schema=</span>TESTDB, <span class="variable">host=</span><span class="number">192.168</span>.<span class="number">2.201</span>, <span class="variable">user=</span>test,<span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">schema=</span>TESTDB]select * from travelrecord, <span class="variable">route=</span>{</div><div class="line">   <span class="number">1</span> -&gt; dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">2</span> -&gt; dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">   <span class="number">3</span> -&gt; dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}</div><div class="line">} rrs </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">82</span>) -execute mutinode query select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">97</span>) -has data merge logic </div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.877</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">2</span> commands SET names latin1;SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417878</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.878</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDBPool.java:<span class="number">452</span>) -select read source hostS1 for dataHost:localhost1</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MySQLConnection.java:<span class="number">445</span>) -con need syn ,total syn cmd <span class="number">2</span> commands SET names latin1;SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;schema change:<span class="constant">false</span> con:MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417878</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.879</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">0</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.880</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.880</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">171</span>) -received ok response ,executeResponse:<span class="constant">false</span> from MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.886</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (DataMergeService.java:<span class="number">94</span>) -field metadata inf:[<span class="variable">DAYS=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">4</span>, <span class="variable">colType=</span><span class="number">3</span>], <span class="variable">USER_ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">1</span>, <span class="variable">colType=</span><span class="number">253</span>], <span class="variable">ID=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">0</span>, <span class="variable">colType=</span><span class="number">8</span>], <span class="variable">TRAVELDATE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">2</span>, <span class="variable">colType=</span><span class="number">10</span>], <span class="variable">FEE=</span>ColMeta [<span class="variable">colIndex=</span><span class="number">3</span>, <span class="variable">colType=</span><span class="number">246</span>]]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.887</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.887</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn3{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">12</span>bc7f96, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">1</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">99</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db3, old <span class="variable">shema=</span>db3, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">2</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.888</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (MultiNodeQueryHandler.java:<span class="number">241</span>) -on row end reseponse MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn2{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span>org.opencloudb.mysql.nio.MySQLConnection$StatusSync@<span class="number">327030</span>f, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">2</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">100</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db2, old <span class="variable">shema=</span>db2, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">5</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.889</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (NonBlockingSession.java:<span class="number">229</span>) -release connection MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span>dn1{SELECT *</div><div class="line">FROM travelrecord</div><div class="line">LIMIT <span class="number">100</span>}, <span class="variable">respHandler=</span>org.opencloudb.mysql.nio.handler.MultiNodeQueryHandler@<span class="number">41</span>d3a141, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.890</span>  DEBUG [$_NIOREACTOR-<span class="number">3</span>-RW] (PhysicalDatasource.java:<span class="number">403</span>) -release channel MySQLConnection [<span class="variable">id=</span><span class="number">101</span>, <span class="variable">lastTime=</span><span class="number">1453541417860</span>, <span class="variable">user=</span>root, <span class="variable">schema=</span>db1, old <span class="variable">shema=</span>db1, <span class="variable">borrowed=</span><span class="constant">true</span>, <span class="variable">fromSlaveDB=</span><span class="constant">false</span>, <span class="variable">threadId=</span><span class="number">3</span>, <span class="variable">charset=</span>latin1, <span class="variable">txIsolation=</span><span class="number">3</span>, <span class="variable">autocommit=</span><span class="constant">true</span>, <span class="variable">attachment=</span><span class="constant">null</span>, <span class="variable">respHandler=</span><span class="constant">null</span>, <span class="variable">host=</span>workstation, <span class="variable">port=</span><span class="number">3316</span>, <span class="variable">statusSync=</span><span class="constant">null</span>, <span class="variable">writeQueue=</span><span class="number">0</span>, <span class="variable">modifiedSQLExecuted=</span><span class="constant">false</span>]</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.891</span>  DEBUG [BusinessExecutor3] (DataMergeService.java:<span class="number">296</span>) -prepare mpp merge result for select * from travelrecord</div><div class="line"><span class="number">01</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">17.892</span>  DEBUG [BusinessExecutor3] (MultiNodeQueryHandler.java:<span class="number">324</span>) -last packet id:<span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>可以发现，日志差异并不大，只是所有原先是<code>charset=utf8</code>的地方换成了<code>charset=latin1</code>，还有一处重要的变化是执行同步命令<code>con need syn ,total syn cmd 2 commands</code>，多了一个命令<code>SET names latin1</code>用于设置字符集。不过这样做是有问题的，客户端与服务器端的字符集不同，会导致乱码。例如，有中文的情况，如下图，</p>
<p><img src="/images/201601-mycat-log-analysis/mycat-log-charset.png"></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/sin90lzc/article/details/7648439" target="_blank" rel="external">http://blog.csdn.net/sin90lzc/article/details/7648439</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 的日志还是相对比较简明的，看系统细节的话需要打开debug级别的 log，修改<code>log4j.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre>]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shipyard管理Docker容器]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-shipyard/"/>
    <id>http://valleylord.github.io/post/201601-docker-shipyard/</id>
    <published>2016-01-23T02:47:00.000Z</published>
    <updated>2016-01-23T14:00:47.000Z</updated>
    <content type="html"><![CDATA[<p>Shipyard 是一个基于 Web 的 Docker 管理工具,支持多 host,可以把多个 Docker host 上的 containers 统一管理;可以查看 images,甚至 build images;并提供 RESTful API 等等。</p>
<p>Shipyard 的部署方法也处于不断改进中，原先之前采用<code>shipyard/deploy</code><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>方法来部署Shipyard的方法已经不再被官方推荐了。现在部署 Shipyard 的方法是使用 shipyard-project 的脚本<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<h2>Shipyard 部署</h2>
<p>部署前，需要修改 Docker 的配置，在<code>/etc/default/docker</code>中增加如下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="constant">H</span>=<span class="symbol">unix:</span>/<span class="regexp">//var</span><span class="regexp">/run/docker</span>.sock -<span class="constant">H</span>=<span class="symbol">tcp:</span>/<span class="regexp">/0.0.0.0:2375</span></span></div></pre></td></tr></table></figure></p>
<p>然后开始正式部署 Shipyard，获取最新的 Shipyard 的部署脚本，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sSL http<span class="variable">s:</span>//shipyard-project.<span class="keyword">com</span>/deploy &gt; shipyard-deploy.<span class="keyword">sh</span></div><div class="line">chmod +<span class="keyword">x</span> shipyard-deploy.<span class="keyword">sh</span></div></pre></td></tr></table></figure></p>
<p>如果只使用默认的参数，可以如下启动 Shipyard，本机地址是 192.168.2.201，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cat shipyard-deploy.sh|  bash -s             </div><div class="line">Deploying Shipyard</div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Database</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Discovery</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Cert</span> <span class="constant">Volume</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Proxy</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Swarm</span> <span class="constant">Manager</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Swarm</span> <span class="constant">Agent</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Starting</span> <span class="constant">Controller</span></span></div><div class="line">Waiting for Shipyard on 192.168.2.201:8080</div><div class="line">.........</div><div class="line">Shipyard available at http://192.168.2.201:8080</div><div class="line">Username: admin Password: shipyard</div></pre></td></tr></table></figure></p>
<p>由于 iptables 的规则，Shipyard 会被防火墙阻挡，启动之后还需要清理 iptables 的规则，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -<span class="literal">F</span></div><div class="line">iptables -<span class="literal">F</span></div></pre></td></tr></table></figure></p>
<p>否则会访问出错。如果需要关闭 Shipyard，仍然是使用 Shipyard 的脚本，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ cat shipyard-deploy.sh| ACTION=remove bash -s</div><div class="line">Removing Shipyard</div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Database</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Discovery</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Cert</span> <span class="constant">Volume</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Proxy</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Swarm</span> <span class="constant">Agent</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Swarm</span> <span class="constant">Manager</span></span></div><div class="line"> -<span class="ruby">&gt; <span class="constant">Removing</span> <span class="constant">Controller</span></span></div><div class="line">Done</div></pre></td></tr></table></figure></p>
<p>启动后即可用浏览器访问本地8080端口登陆，默认的用户名密码是“admin/shipyard”。</p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-up.png" alt=""></p>
<h2>增加 Shipyard 节点</h2>
<p>Shipyard 可以管理多个宿主机，这在 Shipyard 中被称为节点。增加节点的方法也是使用相同的部署脚本，</p>
<p>在另一台宿主机（IP 192.168.2.202）中运行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ./shipyard-deploy.sh | <span class="variable">ACTION=</span>node <span class="variable">DISCOVERY=</span>etcd://<span class="number">192.168</span>.<span class="number">2.201</span>:<span class="number">4001</span> <span class="variable">PROXY_PORT=</span><span class="number">2376</span> bash -s</div></pre></td></tr></table></figure></p>
<p>运行之后也需要清理 iptables 规则。然后在 Shipyard 的管理网页上的“Nodes”栏中，即可看以下画面，</p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-nodes.png" alt=""></p>
<p>有2个节点目前受 Shipyard 管理。</p>
<h2>管理容器</h2>
<p>Shipyard 的主要功能还是管理容器，例如，新增容器，</p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-container-new.png" alt=""></p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-container.png" alt=""></p>
<p>使用中发现，Shipyard 似乎不支持网页上部署其他节点的容器，只能部署本节点的。容器管理的功能所有节点都一样，如下，部署了2个 Mysql 容器，</p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-mysql.png" alt=""></p>
<p>可能这个版本的 Shipyard 有 bug，当前 Shipyard 已经包含两个节点，且两个节点上都有<code>mysql:latest</code>的镜像，但是在 images 栏中，Nodes 列并未显示，如下，</p>
<p><img src="/images/201601-docker-shipyard/docker-shipyard-bug.png" alt=""></p>
<p>图中，ID 为<code>ea0aca21950d</code>的 Mysql 镜像是在 192.168.2.202 上，ID 为<code>a07681abeb6c</code>的镜像是在 192.168.2.201 上。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/shipyard/shipyard-deploy" class="uri" target="_blank" rel="external">https://github.com/shipyard/shipyard-deploy</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://github.com/shipyard/shipyard" class="uri" target="_blank" rel="external">https://github.com/shipyard/shipyard</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Shipyard 是一个基于 Web 的 Docker 管理工具,支持多 host,可以把多个 Docker host 上的 containers 统一管理;可以查看 images,甚至 build images;并提供 RESTful API 等等。</p>
<p>Sh]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="shipyard" scheme="http://valleylord.github.io/tags/shipyard/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu上完全编译安装QuantLib]]></title>
    <link href="http://valleylord.github.io/post/201601-quantlib-install/"/>
    <id>http://valleylord.github.io/post/201601-quantlib-install/</id>
    <published>2016-01-20T11:18:00.000Z</published>
    <updated>2016-01-21T14:06:18.000Z</updated>
    <content type="html"><![CDATA[<p>QuantLib 是一个基于 boost 的 Quant 程序库。QuantLib 的安装比较简单<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，本文在 Ubuntu上安装 Quantlib1.7.1。</p>
<p>解包 QuantLib-1.7.tar.gz 后，使用<code>./configure</code> 来配置编译环境，也可以用<code>./configure --help</code>来查看参数选项。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./configure --with-boost-<span class="keyword">include</span>=<span class="regexp">/usr/program</span><span class="regexp">/program/boost</span>-<span class="number">1.60</span>/<span class="keyword">include</span>/boost-<span class="number">1_60</span> \</div><div class="line">--with-boost-lib=<span class="regexp">/usr/program</span><span class="regexp">/program/boost</span>-<span class="number">1.60</span>/lib \</div><div class="line">--prefix=<span class="regexp">/usr/program</span><span class="regexp">/program/quantlib</span>-<span class="number">1.7</span>.<span class="number">1</span> \</div><div class="line"><span class="constant">CC</span>=clang <span class="constant">CXX</span>=clang++</div></pre></td></tr></table></figure></p>
<p>本文使用 clang3.6 来编译，boost 库的版本是比较新的1.60，实际 configure 的时候显示 boost 的版本只要大于1.39即可。其中<code>--with-boost-include</code>和<code>--with-boost-lib</code>是 boost 库的头文件和库文件的路径，<code>--prefix</code>是安装时的安装目录，<code>CC=clang CXX=clang++</code>是指定使用 clang 来编译。</p>
<p>接下来，就是<code>make</code>和<code>make install</code>，即可完成安装。我在编译的时候，有错误发生，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zabr.o: In function <span class="smartquote">`ZabrTest::suite()'</span>:</div><div class="line">/home/arnes/download/quantlib/QuantLib-1.7/test-suite/zabr.cpp:92: undefined reference to <span class="smartquote">`boost::unit_test::test_suite::test_suite(boost::unit_test::basic_cstring&lt;char const&gt;, boost::unit_test::basic_cstring&lt;char const&gt;, unsigned long)'</span></div><div class="line">collect2: error: ld returned 1 exit status</div><div class="line">make[1]: *** [quantlib-test-suite] 错误 1</div></pre></td></tr></table></figure></p>
<p>不过，这似乎并不影响QuantLib的安装。如果需要让编译器默认找到的话，还需要配置环境变量，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export <span class="constant">C_INCLUDE_PATH</span>=<span class="regexp">/usr/program</span><span class="regexp">/program/quantlib</span>-<span class="number">1.7</span>.<span class="number">1</span>/<span class="symbol">include:</span><span class="variable">$C_INCLUDE_PATH</span></div><div class="line">export <span class="constant">CPLUS_INCLUDE_PATH</span>=<span class="regexp">/usr/program</span><span class="regexp">/program/quantlib</span>-<span class="number">1.7</span>.<span class="number">1</span>/<span class="symbol">include:</span><span class="variable">$CPLUS_INCLUDE_PATH</span></div><div class="line"></div><div class="line">export <span class="constant">LD_LIBRARY_PATH</span>=<span class="regexp">/usr/program</span><span class="regexp">/program/quantlib</span>-<span class="number">1.7</span>.<span class="number">1</span>/<span class="symbol">lib:</span><span class="variable">$LD_LIBRARY_PATH</span></div><div class="line">export <span class="constant">LIBRARY_PATH</span>=<span class="regexp">/usr/program</span><span class="regexp">/program/quantlib</span>-<span class="number">1.7</span>.<span class="number">1</span>/<span class="symbol">lib:</span><span class="variable">$LIBRARY_PATH</span></div></pre></td></tr></table></figure></p>
<p>完成之后，就可以使用QuantLib，尝试编译QuantLib目录下的示例程序，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Examples/BermudanSwaption</div><div class="line">clang++ BermudanSwaption.cpp -o BermudanSwaption <span class="operator">-l</span>QuantLib</div><div class="line">./BermudanSwaption</div></pre></td></tr></table></figure></p>
<p>如果安装正常，编译和运行都不会报错。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://quantlib.org/install/linux.shtml" class="uri" target="_blank" rel="external">http://quantlib.org/install/linux.shtml</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>QuantLib 是一个基于 boost 的 Quant 程序库。QuantLib 的安装比较简单<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，本文在 Ubuntu上安装 Quantlib1.]]>
    </summary>
    
      <category term="C++" scheme="http://valleylord.github.io/tags/C/"/>
    
      <category term="quantlib" scheme="http://valleylord.github.io/tags/quantlib/"/>
    
      <category term="C++" scheme="http://valleylord.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu上完全编译安装boost]]></title>
    <link href="http://valleylord.github.io/post/201601-boost-install/"/>
    <id>http://valleylord.github.io/post/201601-boost-install/</id>
    <published>2016-01-19T12:48:00.000Z</published>
    <updated>2016-01-20T11:34:40.000Z</updated>
    <content type="html"><![CDATA[<p>boost是C++世界中相当优秀的第三方库，被选入STL的也有不少，其中用到的C++奇技淫巧更是数不胜数。</p>
<h2>安装依赖</h2>
<p>boost 在类 Unix 系统上的安装，可以参考官方文档的 <a href="http://www.boost.org/doc/libs/1_60_0/more/getting_started/unix-variants.html" target="_blank" rel="external">Get Started</a>，除此之外，网上的博客<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a><a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>也有很多。本文在 Ubuntu14.04 上安装 boost1.60。</p>
<p>如果要全量安装 boost，需要先安装第三方依赖，编译器和构建工具（如 make）不再此列，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install mpi-default-dev libicu-dev <span class="keyword">python</span>-dev <span class="keyword">python3</span>-dev libbz2-dev zlib1g-dev</div></pre></td></tr></table></figure></p>
<p>其中，最有可能没被安装的是<code>libbz2-dev</code>，不太常用。</p>
<h2>编译安装 boost</h2>
<p>先运行<code>booststrap.sh</code>来编译<code>b2</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">./bootstrap.sh --with-toolset</span>=<span class="string">clang</span></div></pre></td></tr></table></figure></p>
<p>以上命令指定了编译工具是 clang（本文使用的是 clang3.6），也可以不指定，会使用默认的 gcc。编译后得到<code>b2</code>可执行程序，再全量编译 boost，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./b2 install <span class="variable">--build-type=</span>complete <span class="variable">--layout=</span>versioned <span class="variable">threading=</span>multi <span class="variable">--prefix=</span><span class="string">"/usr/lib/boost-1.60"</span></div></pre></td></tr></table></figure></p>
<p>以上命令中，解释如下，</p>
<p>（1）stage/install：</p>
<p>stage表示只生成库（dll和lib），install还会生成包含头文件的include目录。本人推荐使用stage，因为install生成的这个include目录实际就是boost安装包解压缩后的boost目录（E:\SDK\boost\boost，只比include目录多几个非hpp文件，都很小），所以可以直接使用，而且不同的IDE都可以使用同一套头文件，这样既节省编译时间，也节省硬盘空间。</p>
<p>（2）toolset：</p>
<p>指定编译器，可选的如borland、gcc、msvc（VC6）、msvc-9.0（VS2008）等。</p>
<p>（3）without/with：</p>
<p>选择不编译/编译哪些库。因为python、mpi等库我都用不着，所以排除之。还有wave、graph、math、regex、test、program_options、serialization、signals这几个库编出的静态lib都非常大，所以不需要的也可以without掉。这可以根据各人需要进行选择，默认是全部编译。但是需要注意，如果选择编译python的话，是需要python语言支持的，应该到python官方主页http://www.python.org/下载安装。</p>
<p>查看boost包含库的命令是bjam --show-libraries。</p>
<p>（4）stagedir/prefix：</p>
<p>stage时使用stagedir，install时使用prefix，表示编译生成文件的路径。推荐给不同的IDE指定不同的目录，如VS2008对应的是E:\SDK\boost\bin\vc9，VC6对应的是E:\SDK\boost\bin\vc6，否则都生成到一个目录下面，难以管理。如果使用了install参数，那么还将生成头文件目录，vc9对应的就是E:\SDK\boost\bin\vc9\include\boost-1_46\boost,vc6类似（光这路径都这样累赘，还是使用stage好）。</p>
<p>（5）build-dir：</p>
<p>编译生成的中间文件的路径。这个本人这里没用到，默认就在根目录（E:\SDK\boost）下，目录名为bin.v2，等编译完成后可将这个目录全部删除（没用了），所以不需要去设置。</p>
<p>（6）link：</p>
<p>生成动态链接库/静态链接库。生成动态链接库需使用shared方式，生成静态链接库需使用static方式。一般boost库可能都是以static方式编译，因为最终发布程序带着boost的dll感觉会比较累赘。</p>
<p>（7）runtime-link：</p>
<p>动态/静态链接C/C++运行时库。同样有shared和static两种方式，这样runtime-link和link一共可以产生4种组合方式，各人可以根据自己的需要选择编译。</p>
<p>（8）threading：</p>
<p>单/多线程编译。一般都写多线程程序，当然要指定multi方式了；如果需要编写单线程程序，那么还需要编译单线程库，可以使用single方式。</p>
<p>（9）debug/release：</p>
<p>编译debug/release版本。一般都是程序的debug版本对应库的debug版本，所以两个都编译。</p>
<p>由于采用全量编译，时间会比较长，耐心等待即可。注意，如果<code>--prefix</code>参数是 root 权限，那么需要使用 sudo 以管理员身份编译安装。</p>
<h2>环境变量配置</h2>
<p>因为我是将 boost 安装在自定义的目录下，为了让编译器找到 boost，还需要配置环境变量，要配置以下变量<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> C_INCLUDE_PATH=/usr/lib/boost-<span class="number">1.60</span>/include/boost-<span class="number">1</span>_60:<span class="variable">$C_INCLUDE_PATH</span></div><div class="line"><span class="keyword">export</span> CPLUS_INCLUDE_PATH=/usr/lib/boost-<span class="number">1.60</span>/include/boost-<span class="number">1</span>_60:<span class="variable">$CPLUS_INCLUDE_PATH</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=/usr/lib/boost-<span class="number">1.60</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line"><span class="keyword">export</span> LIBRARY_PATH=/usr/lib/boost-<span class="number">1.60</span>/lib:<span class="variable">$LIBRARY_PATH</span></div></pre></td></tr></table></figure></p>
<p>其中，<code>C_INCLUDE_PATH</code>不是必须的，因为这仅仅对C编译器生效。</p>
<p>如果 boost 安装正常，以下测试程序最后两行可以打印出 boost 的版本，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;boost/version.hpp&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;boost/timer.hpp&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    boost::timer t;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"max timespan: "</span> &lt;&lt; t.elapsed_max() / <span class="number">3600</span> &lt;&lt; <span class="string">"h"</span> &lt;&lt; endl;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"min timespan: "</span> &lt;&lt; t.elapsed_min() &lt;&lt; <span class="string">"s"</span> &lt;&lt; endl;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"now time elapsed: "</span> &lt;&lt; t.elapsed() &lt;&lt; <span class="string">"s"</span> &lt;&lt; endl;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"boost version"</span> &lt;&lt; BOOST_VERSION &lt;&lt;endl;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"boost lib version"</span> &lt;&lt; BOOST_LIB_VERSION &lt;&lt;endl;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.cnblogs.com/lanxuezaipiao/p/3703988.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/lanxuezaipiao/p/3703988.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.linuxidc.com/Linux/2013-07/87573.htm" class="uri" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-07/87573.htm</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://blog.csdn.net/hongqiang200/article/details/7021976" class="uri" target="_blank" rel="external">http://blog.csdn.net/hongqiang200/article/details/7021976</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.cnblogs.com/zhcncn/p/3950477.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/zhcncn/p/3950477.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://blog.csdn.net/allenlinrui/article/details/21483617" class="uri" target="_blank" rel="external">http://blog.csdn.net/allenlinrui/article/details/21483617</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>boost是C++世界中相当优秀的第三方库，被选入STL的也有不少，其中用到的C++奇技淫巧更是数不胜数。</p>
<h2>安装依赖</h2>
<p>boost 在类 Unix 系统上的安装，可以参考官方文档的 <a href="http://www.boost.org]]>
    </summary>
    
      <category term="C++" scheme="http://valleylord.github.io/tags/C/"/>
    
      <category term="boost" scheme="http://valleylord.github.io/tags/boost/"/>
    
      <category term="C++" scheme="http://valleylord.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT读写分离]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-readwrite/"/>
    <id>http://valleylord.github.io/post/201601-mycat-readwrite/</id>
    <published>2016-01-16T07:14:00.000Z</published>
    <updated>2016-01-18T12:23:59.693Z</updated>
    <content type="html"><![CDATA[<p>MyCAT的一个典型应用是用于数据库的读写分离，本文以Mysql为例，展示读写分离的MyCAT应用场景。本次操作使用的是Ubuntu14.04。</p>
<h2>安装Mysql主从复制</h2>
<p>本文仅仅展示最简单的Mysql主从复制配置，实际使用中应该会更加复杂。</p>
<p>先配置主Mysql，先要修改<code>/etc/mysql/my.cnf</code>文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">[mysqld]</span></div><div class="line"><span class="setting">log-bin=<span class="value">mysql-bin</span></span></div><div class="line"><span class="setting">server-id=<span class="value"><span class="number">1</span></span></span></div></pre></td></tr></table></figure></p>
<p>然后重启主Mysql，并登陆，运行以下命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; GRANT REPLICATION SLAVE ON <span class="strong">*.*</span> to <span class="emphasis">'root'</span>@<span class="emphasis">'%'</span> identified by <span class="emphasis">'111111'</span>;</div><div class="line">Query OK, 0 rows affected, 1 warning (0.05 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; show master status;</span></div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div><div class="line"><span class="header">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span></div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div><div class="line"><span class="header">| mysql-bin.000007 |      429 |              |                  |                   |</span></div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>以上命令表示我们是用root用户镜像主从复制，实际使用中应该会使用其他用户。</p>
<p>主Mysql的配置比较简单，从Mysql的配置稍微麻烦一点。先修改<code>/etc/mysql/my.cnf</code>文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">[mysqld]</span></div><div class="line"><span class="setting">server-id=<span class="value"><span class="number">10</span></span></span></div></pre></td></tr></table></figure></p>
<p>注意，server-id一定不能与主Mysql相同，这是表示服务器的唯一id。然后重启从Mysql，登陆，运行如下命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt; change master to master_host='master-1',master_port=3306,master_user='root',master_password='111111',master_log_file='mysql-bin.000007',master_log_pos=429;</div><div class="line">Query OK, 0 rows affected, 2 warnings (0.44 sec)</div><div class="line"></div><div class="line">mysql&gt; start slave;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; show slave status\G</div><div class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 1. row <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></div><div class="line">               Slave_IO_State: Waiting for master to send event</div><div class="line">                  Master_Host: master-1</div><div class="line">                  Master_User: root</div><div class="line">                  Master_Port: 3306</div><div class="line">                Connect_Retry: 60</div><div class="line">              Master_Log_File: mysql-bin.000007</div><div class="line">          Read_Master_Log_Pos: 429</div><div class="line">               Relay_Log_File: 1d508b1aa846-relay-bin.000002</div><div class="line">                Relay_Log_Pos: 595</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>注意，以上命令中的<code>master_log_file='mysql-bin.000007',master_log_pos=429</code>要与主Mysql中的<code>show master status</code>结果一致。另外，如果配置<code>change master</code>的时候配置错了，需要先运行<code>stop slave</code>停止slave，再运行<code>reset slave</code>清空slave的配置，然后再从头开始配置。</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-master-status.png"></p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-slave-status.png"></p>
<p>配置完成之后，在主Mysql上进行create database可以同步到从Mysql。按MyCAT测试库的案例，创建db1、db2、db3三个数据库。</p>
<h2>MyCAT配置主从复制</h2>
<p>MyCAT主从复制的配置主要修改<code>schema.xml</code>文件，修改如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	<span class="tag">&lt;<span class="title">dataHost</span> <span class="attribute">name</span>=<span class="value">"localhost1"</span> <span class="attribute">maxCon</span>=<span class="value">"1000"</span> <span class="attribute">minCon</span>=<span class="value">"10"</span> <span class="attribute">balance</span>=<span class="value">"1"</span></span></div><div class="line">		<span class="attribute">writeType</span>=<span class="value">"0"</span> <span class="attribute">dbType</span>=<span class="value">"mysql"</span> <span class="attribute">dbDriver</span>=<span class="value">"native"</span> <span class="attribute">switchType</span>=<span class="value">"2"</span>  <span class="attribute">slaveThreshold</span>=<span class="value">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">heartbeat</span>&gt;</span>show slave status<span class="tag">&lt;/<span class="title">heartbeat</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- can have multi write hosts --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostM1"</span> <span class="attribute">url</span>=<span class="value">"workstation:3306"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">			<span class="attribute">password</span>=<span class="value">"111111"</span>&gt;</div><div class="line">			<span class="comment">&lt;!-- can have multi read hosts --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">readHost</span> <span class="attribute">host</span>=<span class="value">"hostS"</span> <span class="attribute">url</span>=<span class="value">"workstation:3316"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">				<span class="attribute">password</span>=<span class="value">"111111"</span> /&gt;</div><div class="line">		<span class="tag">&lt;/<span class="title">writeHost</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">dataHost</span>&gt;</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>对比原文件如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dataHost</span> <span class="attribute">name</span>=<span class="value">"localhost1"</span> <span class="attribute">maxCon</span>=<span class="value">"1000"</span> <span class="attribute">minCon</span>=<span class="value">"10"</span> <span class="attribute">balance</span>=<span class="value">"0"</span></span></div><div class="line">	<span class="attribute">writeType</span>=<span class="value">"0"</span> <span class="attribute">dbType</span>=<span class="value">"mysql"</span> <span class="attribute">dbDriver</span>=<span class="value">"native"</span> <span class="attribute">switchType</span>=<span class="value">"1"</span>  <span class="attribute">slaveThreshold</span>=<span class="value">"100"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="title">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="title">heartbeat</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- can have multi write hosts --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostM1"</span> <span class="attribute">url</span>=<span class="value">"localhost:3306"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">		<span class="attribute">password</span>=<span class="value">"123456"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- can have multi read hosts --&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="title">writeHost</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostS1"</span> <span class="attribute">url</span>=<span class="value">"localhost:3316"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">		<span class="attribute">password</span>=<span class="value">"123456"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">dataHost</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改了以下几个地方，</p>
<ol>
<li>删除了writehost hostS1；</li>
<li>增加了writehost hostM1下的一个readHost hostS；</li>
<li>修改了dataHost的几个参数， <code>balance=&quot;1&quot; writeType=&quot;0&quot; switchType=&quot;2&quot;  slaveThreshold=&quot;100&quot;</code>；</li>
<li>修改了检测心跳的方法为<code>show slave status</code>;</li>
</ol>
<blockquote>
<p>(1) 设置 balance=&quot;1&quot;与writeType=&quot;0&quot;</p>
<p>Balance参数设置：</p>
<ol>
<li>balance=“0”, 所有读操作都发送到当前可用的writeHost上。</li>
<li>balance=“1”，所有读操作都随机的发送到readHost。</li>
<li>balance=“2”，所有读操作都随机的在writeHost、readhost上分发</li>
</ol>
<p>WriteType参数设置：</p>
<ol>
<li>writeType=“0”, 所有写操作都发送到可用的writeHost上。</li>
<li>writeType=“1”，所有写操作都随机的发送到readHost。</li>
<li>writeType=“2”，所有写操作都随机的在writeHost、readhost分上发。</li>
</ol>
<p>“readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据，因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”，这是因为此时，它的数据已经“不可靠”了。基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据，则需要在Mycat里配置为两个writeHost并设置banlance=1。”</p>
<p>(2) 设置 switchType=&quot;2&quot; 与slaveThreshold=&quot;100&quot;</p>
<p>“Mycat心跳检查语句配置为 show slave status ，dataHost 上定义两个新属性： switchType=&quot;2&quot; 与slaveThreshold=&quot;100&quot;，此时意味着开启MySQL主从复制状态绑定的读写分离与切换机制。Mycat心跳机制通过检测 show slave status 中的 &quot;Seconds_Behind_Master&quot;, &quot;Slave_IO_Running&quot;, &quot;Slave_SQL_Running&quot; 三个字段来确定当前主从同步的状态以及Seconds_Behind_Master主从复制时延。“</p>
</blockquote>
<p>配置好之后，即可运行<code>mycat start</code>启动MyCAT。</p>
<h2>测试MyCAT主从复制</h2>
<p>在MyCAT上运行建表和插入语句，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain create table company(id int not null primary key,name varchar(100));</span></div><div class="line">+-----------+---------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                 |</span></div><div class="line">+-----------+---------------------------------------------------------------------+</div><div class="line">| dn1       | create table company(id int not null primary key,name varchar(100)) |</div><div class="line">| dn2       | create table company(id int not null primary key,name varchar(100)) |</div><div class="line"><span class="header">| dn3       | create table company(id int not null primary key,name varchar(100)) |</span></div><div class="line">+-----------+---------------------------------------------------------------------+</div><div class="line">3 rows in set (0.06 sec)</div><div class="line"></div><div class="line">mysql&gt; create table company(id int not null primary key,name varchar(100));</div><div class="line">Query OK, 0 rows affected (1.82 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; explain insert into company(id, name) values (100, 'abc');</span></div><div class="line">+-----------+---------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                               |</span></div><div class="line">+-----------+---------------------------------------------------+</div><div class="line">| dn1       | insert into company(id, name) values (100, <span class="emphasis">'abc'</span>) |</div><div class="line">| dn2       | insert into company(id, name) values (100, <span class="emphasis">'abc'</span>) |</div><div class="line"><span class="header">| dn3       | insert into company(id, name) values (100, 'abc') |</span></div><div class="line">+-----------+---------------------------------------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into company(id, name) values (100, <span class="emphasis">'abc'</span>);</div><div class="line">Query OK, 1 row affected (0.24 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-mycat-test-1.png"></p>
<p>分别在主从数据库上查看，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-mycat-test-2.png"></p>
<p>可以看到，数据已经在主从Mysql上都存在。</p>
<p>如果想看更多的MyCAT处理细节，需要打开debug级别的log，修改<code>log4j.xml</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;root&gt;</div><div class="line">  &lt;level value=<span class="string">"debug"</span> /&gt;</div><div class="line">  &lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;</div><div class="line">   &lt;!--&lt;appender-<span class="keyword">ref</span> <span class="keyword">ref</span>=<span class="string">"FILE"</span> /&gt;--&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>修改后，重启mycat，然后运行sql，<code>select * from company where id = 100;</code>，在<code>mycat/logs/mycat.log</code>中可以看到以下结果，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-mycat-log-1.png"></p>
<p>可以发现mycat实际上是从hostS上读取数据，查看从Mysql的状态，如下，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-mycat-log-2.png"></p>
<p>上图最后一行显示，Seconds_Behind_Master是0，按MyCAT文档中的说法，此时的确是要去读hostS。</p>
<h2>MyCAT自动切换</h2>
<p>在主Mysql突然断线的时候，MyCAT会自动将连接转到从Mysql上，在从Mysql上读取数据。根据MyCAT文档中的说法，这种情况下不能设置一写一读两个主机，而要设置两个写主机。略微修改<code>schema.xml</code>如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">	<span class="tag">&lt;<span class="title">dataHost</span> <span class="attribute">name</span>=<span class="value">"localhost1"</span> <span class="attribute">maxCon</span>=<span class="value">"1000"</span> <span class="attribute">minCon</span>=<span class="value">"10"</span> <span class="attribute">balance</span>=<span class="value">"1"</span></span></div><div class="line">		<span class="attribute">writeType</span>=<span class="value">"0"</span> <span class="attribute">dbType</span>=<span class="value">"mysql"</span> <span class="attribute">dbDriver</span>=<span class="value">"native"</span> <span class="attribute">switchType</span>=<span class="value">"2"</span>  <span class="attribute">slaveThreshold</span>=<span class="value">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">heartbeat</span>&gt;</span>show slave status<span class="tag">&lt;/<span class="title">heartbeat</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- can have multi write hosts --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostM1"</span> <span class="attribute">url</span>=<span class="value">"workstation:3306"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">			<span class="attribute">password</span>=<span class="value">"111111"</span>&gt;</div><div class="line">			<span class="comment">&lt;!-- can have multi read hosts --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">writeHost</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostS"</span> <span class="attribute">url</span>=<span class="value">"workstation:3316"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">			<span class="attribute">password</span>=<span class="value">"111111"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">dataHost</span>&gt;</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>几乎与之前的配置相同，只是将readHost改为writeHost，与原先的hostM1并列。</p>
<p>重启MyCAT，再次运行<code>select * from company where id = 100;</code>，发现log中，仍然是从hostS上查询，与之前相同；运行<code>insert into company(id, name) values (200, 'xyz');</code>，发现log中，也仍然是从hostM1上插入，与之前相同。插入时的log如下，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-fail-1.png"></p>
<p>因此，可以判断，在该配置下，在Mysql没有宕机的时候，与之前一写一读的配置情况一样。此时，模拟Mysql宕机，再次运行查询<code>select * from company where id = 100;</code>，发现log如下，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-fail-2.png"></p>
<p>与之前的查询完全相同，运行<code>insert into company(id, name) values (300, 'def');</code>，log如下，</p>
<p><img src="/images/201601-mycat-readwrite/mycat-readwrite-fail-3.png"></p>
<p>此时的插入语句已经自动转到hostS上，说明此时的从Mysql已经取代主Mysql。此时，恢复主Mysql，发现所有的查询和插入也仍然是从hostS上走，相当于主Mysql没有在集群中。这种配置虽然简单，但系统的可靠性很差，建议使用多个主Mysql的集群，如Galera。</p>
<h2>关于分库和分表</h2>
<p>MyCAT主要完成了Mysql集群的水平分库问题。其中水平分库是说，把一个大表按行进行拆分，放在多个数据库中，比如，id为1~100万的在A库，100w~200w的在B库，以此类推。将大表进行水平拆分还有一种方法是水平分表，指的是，仍然按行进行拆分，但是放在一个数据库的多个表中，比如，id为1~100万的在A表，100w~200w的在B表，以此类推。表的水平拆分大致是这两种方法。</p>
<p>水平分表拆分的优点是，仍然是一个数据库，管理成本较低，集群方案等都与单库无差异，而且事务特性支持好，没有跨库的分布式事务问题；缺点是，由于本质上仍然是单个数据库，无法突破单个数据库实例上的CPU、内存、IO等硬件资源限制，性能提升并不会很明显。虽然，Oracle可以通过设置多个表空间来达到突破IO瓶颈的问题，Mysql也逐渐开始支持表空间特性，但是，CPU、内存仍然局限在一台服务器上，无法获得扩展。</p>
<p>水平分库拆分的优点是，引入了多个数据库，这些数据库可以放在多台服务器上，硬件资源扩展性理论上是无限的，性能提升会比较显著。缺点是，由于引入了多个数据库，管理成本提高，需要引入自动化工具，而且，事务特性会比较受限，因为多个数据库之间必然会存在分布式事务问题，这个问题一般都很难解决，也很难做到与单库上完全一致的事务特性，或者限制开发中分布式事务的使用，这对业务实现也不利。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT的一个典型应用是用于数据库的读写分离，本文以Mysql为例，展示读写分离的MyCAT应用场景。本次操作使用的是Ubuntu14.04。</p>
<h2>安装Mysql主从复制</h2>
<p>本文仅仅展示最简单的Mysql主从复制配置，实际使用中应该会更加复杂。<]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker容器间网络互联（使用OVS）]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-network-ovs/"/>
    <id>http://valleylord.github.io/post/201601-docker-network-ovs/</id>
    <published>2016-01-16T01:39:00.000Z</published>
    <updated>2016-01-16T06:37:15.000Z</updated>
    <content type="html"><![CDATA[<p>OVS（Open vSwitch）是一款优秀的虚拟交换机工具，广泛运用在虚拟机、容器等虚拟化领域。本文使用OVS来连接不同宿主机上的docker容器，原理上是使用OVS的gre隧道来完成连接，搭建环境与之前一篇文章《Docker容器间网络互联》相同。</p>
<h2>安装OVS</h2>
<p>先安装OVS，在Ubuntu上安装的命令是<code>apt-get install openvswitch-switch openvswitch-controller</code>，在Centos上安装比较麻烦，需要自行编译。先去<a href="http://openvswitch.org/releases" target="_blank" rel="external">这里</a>找到需要OVS的release版下载，我用的是2.3.2版本。然后根据<a href="https://github.com/openvswitch/ovs/blob/master/INSTALL.RHEL.md" target="_blank" rel="external">这里</a>的安装指南进行安装。步骤如下，</p>
<p>先建立<code>$HOME/rpmbuild/SOURCES</code>目录，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> -p <span class="variable">$HOME</span>/rpmbuild/SOURCES</div><div class="line">cp openvswitch-<span class="number">2.3</span>.<span class="number">2</span>.tar.gz <span class="variable">$HOME</span>/rpmbuild/SOURCES</div></pre></td></tr></table></figure></p>
<p>然后解包，再build rpm，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar xzf openvswitch-<span class="number">2.3</span>.<span class="number">2</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> openvswitch-<span class="number">2.3</span>.<span class="number">2</span></div><div class="line">sed <span class="string">'s/openvswitch-kmod, //g'</span> rhel/openvswitch.spec &gt; rhel/openvswitch-<span class="keyword">no</span>-kmod.spec</div><div class="line">rpmbuild -bb rhel/openvswitch.spec</div></pre></td></tr></table></figure></p>
<p>注意，本文编译时使用了<code>sed 's/openvswitch-kmod, //g' rhel/openvswitch.spec &gt; rhel/openvswitch-no-kmod.spec</code>取消了对openvswitch-kmod的依赖，否则在安装的时候会提示找不到这个包，这可能是redhat与centos的不同造成的。默认情况下，build过程中会进行check，因此整个过程较慢，如果想跳过check，可以使用<code>--without check</code>选项。编译完成之后会生成2个rpm安装包，在<code>$HOME/rpmbuild/RPMS/x86_64</code>目录下，其中，openvswitch-2.3.2-1.x86_64.rpm是我们所需的，用yum安装<code>yum install openvswitch-2.3.2-1.x86_64.rpm</code>即可。</p>
<p>安装完成之后，需要启动OVS服务<code>service openvswitch start</code>，启动的过程中可能会卡住，出现如下错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 download]# service openvswitch status</div><div class="line">ovsdb-server is not running</div><div class="line">ovs-vswitchd is running with pid 10945</div><div class="line">[root@Centos-L410 download]# systemctl -l status openvswitch.service</div><div class="line">● openvswitch.service - LSB: Open vSwitch switch</div><div class="line">   Loaded: loaded (/etc/rc.d/init.d/openvswitch)</div><div class="line">   Active: activating (<span class="operator"><span class="keyword">start</span>) since 六 <span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">38</span> CST;</span> 2min 0s ago</div><div class="line">     Docs: man:systemd-sysv-generator(8)</div><div class="line">  Process: 10755 ExecStop=/etc/rc.d/init.d/openvswitch <span class="operator"><span class="keyword">stop</span> (code=exited, <span class="keyword">status</span>=<span class="number">0</span>/SUCCESS)</span></div><div class="line">  Control: <span class="number">10908</span> (openvswitch)</div><div class="line">   Memory: <span class="number">2.4</span>M</div><div class="line">   CGroup: /system.slice/openvswitch.service</div><div class="line">           ├─<span class="number">10908</span> /<span class="keyword">bin</span>/sh /etc/rc.d/init.d/openvswitch <span class="keyword">start</span></div><div class="line">           ├─<span class="number">10912</span> /<span class="keyword">bin</span>/sh /usr/<span class="keyword">share</span>/openvswitch/scripts/ovs-ctl <span class="keyword">start</span> <span class="comment">--system-id=random</span></div><div class="line">           ├─<span class="number">10914</span> tee -a /<span class="keyword">var</span>/<span class="keyword">log</span>/openvswitch/ovs-ctl.<span class="keyword">log</span></div><div class="line">           ├─<span class="number">10943</span> ovs-vswitchd unix:/<span class="keyword">var</span>/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info <span class="comment">--mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</span></div><div class="line">           ├─<span class="number">10944</span> ovs-vswitchd unix:/<span class="keyword">var</span>/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info <span class="comment">--mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</span></div><div class="line">           └─<span class="number">10945</span> ovs-vswitchd unix:/<span class="keyword">var</span>/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info <span class="comment">--mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</span></div><div class="line"></div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">38</span> Centos-L410 systemd[<span class="number">1</span>]: <span class="keyword">Starting</span> LSB: <span class="keyword">Open</span> vSwitch switch...</div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">39</span> Centos-L410 openvswitch[<span class="number">10908</span>]: /etc/openvswitch/conf.db does <span class="keyword">not</span> exist ... (warning).</div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">39</span> Centos-L410 openvswitch[<span class="number">10908</span>]: <span class="keyword">install</span>: cannot <span class="keyword">change</span> owner <span class="keyword">and</span> permissions <span class="keyword">of</span> <span class="string">'/etc/openvswitch'</span>: <span class="keyword">No</span> such file <span class="keyword">or</span> directory</div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">39</span> Centos-L410 ovsdb-tool[<span class="number">10938</span>]: ovs|<span class="number">00001</span>|lockfile|WARN|/etc/openvswitch/.conf.db.~<span class="keyword">lock</span>~: failed <span class="keyword">to</span> <span class="keyword">open</span> <span class="keyword">lock</span> file: <span class="keyword">No</span> such file <span class="keyword">or</span> directory</div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">39</span> Centos-L410 openvswitch[<span class="number">10908</span>]: Creating empty <span class="keyword">database</span> /etc/openvswitch/conf.db ovsdb-tool: I/O error: /etc/openvswitch/conf.db: failed <span class="keyword">to</span> <span class="keyword">lock</span> lockfile (<span class="keyword">No</span> such file <span class="keyword">or</span> directory)</div><div class="line"><span class="number">1</span>月 <span class="number">16</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">39</span> Centos-L410 openvswitch[<span class="number">10908</span>]: [FAILED]</div></pre></td></tr></table></figure></p>
<p>解决办法是<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install policycoreutils-<span class="keyword">python</span></div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /etc/openvswitch</div><div class="line">semanage fcontext -<span class="keyword">a</span> -<span class="keyword">t</span> openvswitch_rw_t <span class="string">"/etc/openvswitch(/.*)?"</span></div><div class="line">restorecon -Rv /etc/openvswitch</div></pre></td></tr></table></figure></p>
<p>然后就可以正常启动了，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@Centos-L410 x86_64]# service openvswitch <span class="operator"><span class="keyword">start</span> </span></div><div class="line"><span class="keyword">Starting</span> openvswitch (via systemctl):                      [  OK  ]</div><div class="line">[root@Centos-L410 x86_64]# service openvswitch <span class="keyword">status</span></div><div class="line">ovsdb-<span class="keyword">server</span> <span class="keyword">is</span> running <span class="keyword">with</span> pid <span class="number">11703</span></div><div class="line">ovs-vswitchd <span class="keyword">is</span> running <span class="keyword">with</span> pid <span class="number">11716</span></div></pre></td></tr></table></figure></p>
<p>总之，还是Ubuntu方便......</p>
<h2>配置OVS</h2>
<p>默认情况，如果不做任何设置，两个宿主机上的容器是无法ping到对方的。下面使用OVS的gre隧道打通两个容器间的连接，先进行Ubuntu（<code>192.168.2.201</code>）上的配置，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># root@Ubuntu-Asus [192.168.2.201] in /var/lib/docker [11:36:18]</span></div><div class="line">$ ip link <span class="keyword">set</span> docker0 down</div><div class="line"></div><div class="line"><span class="preprocessor">## 删除docker0网桥</span></div><div class="line"><span class="preprocessor">## 删除OVS的br0网桥</span></div><div class="line"><span class="preprocessor">## 增加docker0网桥</span></div><div class="line"><span class="preprocessor">## 给新增的docker0网桥分配ip地址</span></div><div class="line"><span class="preprocessor">## 将docker0网桥启用</span></div><div class="line"><span class="preprocessor">## 新增OVS的br0网桥</span></div><div class="line"><span class="preprocessor">## 配置br0网桥的gre隧道，远端地址是192.168.2.202</span></div><div class="line"><span class="preprocessor">## 将OVS网桥br0连接到网桥docker0上</span></div><div class="line"><span class="preprocessor">## 重启docker后台进程</span></div><div class="line"><span class="preprocessor">## 启用br0网桥</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-docker-network-ovs/docker-network-ovs-ubuntu-setup.png" alt=""></p>
<p>然后配置Centos（<code>192.168.2.202</code>），如下</p>
<p><img src="/images/201601-docker-network-ovs/docker-network-ovs-centos-setup.png" alt=""></p>
<p>两边的配置差不多，以Centos为例说明一下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Centos7  192.168.2.202</span></div><div class="line"><span class="comment">## 关闭docker0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ip link set docker0 down</span></div><div class="line"><span class="comment">## 删除docker0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># brctl delbr docker0</span></div><div class="line"><span class="comment">## 删除OVS的br0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ovs-vsctl del-br br0</span></div><div class="line"><span class="comment">## 增加docker0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># brctl addbr docker0</span></div><div class="line"><span class="comment">## 给新增的docker0网桥分配ip地址</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ip a add 172.17.1.1/24 dev docker0</span></div><div class="line"><span class="comment">## 将docker0网桥启用</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ip link set docker0 up</span></div><div class="line"><span class="comment">## 新增OVS的br0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ovs-vsctl add-br br0</span></div><div class="line"><span class="comment">## 配置br0网桥的gre隧道，远端地址是192.168.2.201</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ovs-vsctl add-port br0 gre0 -- set interface gre0 type=gre options:remote_ip=192.168.2.201</span></div><div class="line"><span class="comment">## 将OVS网桥br0连接到网桥docker0上</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># brctl addif docker0 br0</span></div><div class="line"><span class="comment">## 启用br0网桥</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ip link set br0 up</span></div><div class="line"><span class="comment">## 重启docker后台进程</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># service docker restart</span></div><div class="line">Redirecting to /bin/systemctl restart  docker.service</div><div class="line"><span class="comment">## 清除所有iptables规则</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># iptables -t nat -F;iptables -F</span></div><div class="line"><span class="comment">## 增加docker0的路由地址172.17.0.0/16</span></div><div class="line">[root<span class="variable">@Centos</span>-L41<span class="number">0</span> download]<span class="comment"># ip route add 172.17.0.0/16 dev docker0</span></div></pre></td></tr></table></figure></p>
<p>以上的配置，最重要的几个是，</p>
<ol>
<li>设置gre隧道</li>
<li>连接br0到docker0</li>
<li>增加docker0的路由地址172.17.0.0/16</li>
</ol>
<p>这几个配置表明了，OVS用一个更大的逻辑网络<code>172.x.x.x/24</code>将两个容器连接在一起，而实际网络是通过<code>172.17.x.x/16</code>来连接的，打通逻辑网络和实际网络的方法就是用gre。</p>
<h2>测试OVS连接</h2>
<p>配置完成之后，就可以互相ping通了，如下，</p>
<p><img src="/images/201601-docker-network-ovs/docker-network-ovs-ubuntu-ping.png" alt=""></p>
<p><img src="/images/201601-docker-network-ovs/docker-network-ovs-centos-ping.png" alt=""></p>
<p>还可以用wireshark查看包，如下，</p>
<p><img src="/images/201601-docker-network-ovs/docker-network-ovs-ubuntu-tshark.png" alt=""></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.linuxidc.com/Linux/2014-12/110272.htm" class="uri" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-12/110272.htm</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>OVS（Open vSwitch）是一款优秀的虚拟交换机工具，广泛运用在虚拟机、容器等虚拟化领域。本文使用OVS来连接不同宿主机上的docker容器，原理上是使用OVS的gre隧道来完成连接，搭建环境与之前一篇文章《Docker容器间网络互联》相同。</p>
<h2>安装]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker容器间网络互联]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-network/"/>
    <id>http://valleylord.github.io/post/201601-docker-network/</id>
    <published>2016-01-09T07:48:00.000Z</published>
    <updated>2016-01-12T12:02:21.566Z</updated>
    <content type="html"><![CDATA[<p>Docker容器默认情况下通过docker虚拟的docker0网卡与其他网络节点通信，如果是与宿主机本地的其他容器或进程通信，相对比较简单，只需要通过docker0网卡转发即可；如果是要与其他宿主机上的容器通信，就需要经过本地宿主机的eth0网卡转发。本文通过实例演示不同宿主机之间的网络通信，使用的2台实验机器是Ubuntu 14.04和Centos 7。</p>
<h2>指定网桥IP<code>--bip</code></h2>
<p>默认情况下，docker后台启动的时候，会给docker0网卡自动分配一个网段，类似<code>172.17.0.1/16</code>，这样，docker容器启动后就会自动在该网段获得一个IP，例如<code>172.17.0.2</code>。但是，如果是不同宿主机上的容器，就不能采用自动的方式来分配网段，会引发IP冲突。因此，需要先配置docker0的网卡IP，使用如下参数配置docker0的网段，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">bip</span> <span class="comment">172</span><span class="string">.</span><span class="comment">17</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1/16</span></div></pre></td></tr></table></figure></p>
<p>该参数可以配在<code>/etc/default/docker</code>(Ubuntu)，<code>/etc/sysconfig/docker</code>(Centos)或者直接启动docker后台时加上，如<code>docker daemon --bip 172.17.0.1/16</code>。</p>
<p>指定后重启docker后台进程，可以看到docker0的地址已经变化。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">// Ubuntu 192.168.2.201</span></span></div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [13:57:25]</div><div class="line">$ ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="constant">UNKNOWN</span> group default </div><div class="line">    link/loopback <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> brd <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span></div><div class="line">    inet <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">8</span> scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>/<span class="number">128</span> scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc mq state <span class="constant">UP</span> group default qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">6</span><span class="symbol">c:</span><span class="number">71</span><span class="symbol">:d9</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">d:</span><span class="symbol">ad:</span><span class="number">1</span>d brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">192.168</span>.<span class="number">2.201</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">2.255</span> scope global wlan<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">e71:</span><span class="symbol">d9ff:</span><span class="symbol">fe7d:</span>ad1d/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue state <span class="constant">DOWN</span> group default </span></div><div class="line">    link/ether <span class="number">02</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span>08<span class="symbol">:</span><span class="number">03</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">a:</span>e6 brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">16</span> scope global docker<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">ff:</span><span class="symbol">fe03:</span><span class="number">7</span>ae6/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">98: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast state <span class="constant">DOWN</span> group default qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">74</span><span class="symbol">:d0</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">b:</span><span class="number">71</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">a:</span><span class="number">73</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line"><span class="input"><span class="prompt"></span></span></div><div class="line">// Centos 192.168.2.202</div><div class="line">[root@Centos-L410 system]# ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="constant">UNKNOWN</span> </div><div class="line">    link/loopback <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> brd <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span></div><div class="line">    inet <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">8</span> scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>/<span class="number">128</span> scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">2: enp8s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast state <span class="constant">DOWN</span> qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="symbol">c8:</span>0<span class="symbol">a:</span><span class="symbol">a9:</span><span class="symbol">c0:</span><span class="number">34</span><span class="symbol">:dc</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line"><span class="input"><span class="prompt">3: wlp5s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc mq state <span class="constant">UP</span> qlen <span class="number">1000</span></span></div><div class="line">    link/ether <span class="number">00</span><span class="symbol">:</span><span class="number">24</span><span class="symbol">:d6</span><span class="symbol">:</span><span class="number">57</span><span class="symbol">:d7</span><span class="symbol">:a0</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">192.168</span>.<span class="number">2.202</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">2.255</span> scope global wlp5s<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">224</span><span class="symbol">:d6ff</span><span class="symbol">:fe57</span><span class="symbol">:d7a0/</span><span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="input"><span class="prompt">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="number">1500</span> qdisc noqueue state <span class="constant">DOWN</span> </span></div><div class="line">    link/ether <span class="number">02</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:f7</span><span class="symbol">:</span><span class="number">88</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</div><div class="line">    inet <span class="number">172.18</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">16</span> scope global docker<span class="number">0</span></div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">ff:</span><span class="symbol">fe14:</span>f788/<span class="number">64</span> scope link </div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure></p>
<p>但此时，不同宿主机之间的容器仍然不通，需要增加路由规则。</p>
<h2>增加路由规则</h2>
<p>不同宿主机之间的容器不通的原因是因为不知道如何去寻找路由，因此，需要增加路由规则。在<code>192.168.2.201</code>(Ubuntu，以下简称<code>201</code>)和<code>192.168.2.202</code>(Centos，以下简称<code>202</code>)上分别增加路由规则如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ubuntu 192.168.2.201</span></div><div class="line"># root<span class="keyword">@Ubuntu</span>-Asus [<span class="number">192.168</span>.2.201] <span class="keyword">in</span> ~ [<span class="number">13</span>:<span class="number">57</span>:<span class="number">25</span>]</div><div class="line">$ route add -net <span class="number">172.18</span>.0.0/<span class="number">16</span> gw <span class="number">192.168</span>.2.202 </div><div class="line"></div><div class="line"><span class="comment">// Centos 192.168.2.202</span></div><div class="line">[root<span class="keyword">@Centos</span>-L410 arnes]# route add -net <span class="number">172.17</span>.0.0/<span class="number">16</span> gw <span class="number">192.168</span>.2.201</div></pre></td></tr></table></figure></p>
<p>增加路由规则后，<code>202</code>上的容器到<code>201</code>上的容器可以ping通，但是反过来仍然不能ping通。原因是防火墙规则导致的阻挡，<code>202</code>上需要清空防火墙规则，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// Centos <span class="number">192.168</span>.<span class="number">2.202</span></div><div class="line">[root@Centos-L410 arnes]# iptables -L</div><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere             state RELATED,ESTABLISHED</div><div class="line">ACCEPT     icmp --  anywhere             anywhere            </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">ACCEPT     tcp  --  anywhere             anywhere             state NEW tcp <span class="keyword">dp</span><span class="variable">t:ssh</span></div><div class="line">REJECT     <span class="keyword">all</span>  --  anywhere             anywhere             reject-with icmp-host-prohibited</div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">DOCKER     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</div><div class="line">ACCEPT     <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line">REJECT     <span class="keyword">all</span>  --  anywhere             anywhere             reject-with icmp-host-prohibited</div><div class="line">DROP       <span class="keyword">all</span>  --  anywhere             anywhere            </div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain DOCKER (<span class="number">1</span> references)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line">[root@Centos-L410 arnes]# iptables -F</div><div class="line">[root@Centos-L410 arnes]# iptables -<span class="keyword">t</span> nat -F</div><div class="line">[root@Centos-L410 arnes]# iptables -L</div><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination         </div><div class="line"></div><div class="line">Chain DOCKER (<span class="number">0</span> references)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div></pre></td></tr></table></figure></p>
<p>完成之后，双方容器之间双向都可以ping通。</p>
<h2>抓包查看结果</h2>
<p>抓包的工具是tshark和tcpdump，tcpdump一般默认都有安装，tshark需要手动安装。Ubuntu上<code>apt-get install tshark</code>，Centos上<code>yum install wireshark</code>。从<code>201</code>上的容器，ip<code>172.17.0.2</code>，ping<code>202</code>上的容器<code>172.18.0.2</code>，为了防止干扰，只ping一个包，结果如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// Container on Ubuntu, 172.17.0.2</div><div class="line">root@8cd7c7950943:/# ping 172.18.0.2 -c 1</div><div class="line">PING 172.18.0.2 (172.18.0.2): 56 data bytes</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=0 ttl=62 time=8.500 ms</div><div class="line"><span class="comment">--- 172.18.0.2 ping statistics ---</span></div><div class="line">1 packets transmitted, 1 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max/stddev = 8.500/8.500/8.500/0.000 ms</div><div class="line"></div><div class="line">// Ubuntu 192.168.2.201</div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [14:43:23]</div><div class="line">$ tshark -i docker0</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string "/usr/share/wireshark/init.lua"]:46: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for <span class="operator"><span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</span></div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.005157</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>   <span class="number">3</span>   <span class="number">5.014861</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span>   <span class="number">5.014857</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span>   <span class="number">5.014891</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">6</span>   <span class="number">5.014897</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">6</span> </div><div class="line"></div><div class="line"># root@Ubuntu-Asus [<span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>] <span class="keyword">in</span> ~ [<span class="number">14</span>:<span class="number">41</span>:<span class="number">57</span>]</div><div class="line">$ tshark -i wlan0 -f icmp</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [<span class="keyword">string</span> <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due <span class="keyword">to</span> running Wireshark <span class="keyword">as</span> superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlan0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.005101</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span> </div><div class="line"></div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span></div><div class="line">[root@Centos-L410 arnes]# tshark -i docker0</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000082760</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line">  <span class="number">3</span> <span class="number">5.011219748</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span> <span class="number">5.011242376</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span> <span class="number">5.011382404</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span></div><div class="line">  <span class="number">6</span> <span class="number">5.011285676</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"></div><div class="line">[root@Centos-L410 arnes]# tshark -i wlp5s0 -f icmp</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlp5s0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000186751</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span> ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000f</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>可见，ping的过程中，已经找到正确的路由，尤其在<code>201</code>的wlan0和<code>202</code>的wlp5s0上，可以很清楚的看到这条路由<code>192.168.2.201 -&gt; 172.18.0.2</code>。反向的ping结果略有不同，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// Container on Centos, 172.18.0.2</div><div class="line">root@52e810043448:/# ping 172.17.0.2 -c 1</div><div class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</div><div class="line">64 bytes from 172.17.0.2: icmp_seq=0 ttl=62 time=7.790 ms</div><div class="line"><span class="comment">--- 172.17.0.2 ping statistics ---</span></div><div class="line">1 packets transmitted, 1 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max/stddev = 7.790/7.790/7.790/0.000 ms</div><div class="line"></div><div class="line">// Ubuntu 192.168.2.201</div><div class="line"># root@Ubuntu-Asus [192.168.2.201] in ~ [14:51:07]</div><div class="line">$ tshark -i docker0</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string "/usr/share/wireshark/init.lua"]:46: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for <span class="operator"><span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</span></div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000102</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>   <span class="number">3</span>   <span class="number">5.014688</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span>   <span class="number">5.014700</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> Who has <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span>   <span class="number">5.014725</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">6</span>   <span class="number">5.014716</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">6</span> </div><div class="line"></div><div class="line"># root@Ubuntu-Asus [<span class="number">192.168</span><span class="number">.2</span><span class="number">.201</span>] <span class="keyword">in</span> ~ [<span class="number">14</span>:<span class="number">51</span>:<span class="number">11</span>]</div><div class="line">$ tshark -i wlan0 -f icmp</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [<span class="keyword">string</span> <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due <span class="keyword">to</span> running Wireshark <span class="keyword">as</span> superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">in</span> running Wireshark <span class="keyword">as</span> an unprivileged <span class="keyword">user</span>.</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlan0'</span></div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000159</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line"><span class="number">2</span>  </div><div class="line"></div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span><span class="number">.2</span><span class="number">.202</span></div><div class="line">[root@Centos-L410 arnes]# tshark -i docker0</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'docker0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">64</span></div><div class="line">  <span class="number">2</span> <span class="number">0.007591503</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">62</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div><div class="line">  <span class="number">3</span> <span class="number">5.012667429</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">  <span class="number">4</span> <span class="number">5.012658629</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span>?  Tell <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></div><div class="line">  <span class="number">5</span> <span class="number">5.012732729</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span></div><div class="line">  <span class="number">6</span> <span class="number">5.012751586</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"></div><div class="line">[root@Centos-L410 arnes]# tshark -i wlp5s0 -f icmp</div><div class="line">Running <span class="keyword">as</span> <span class="keyword">user</span> <span class="string">"root"</span> <span class="keyword">and</span> <span class="keyword">group</span> <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing <span class="keyword">on</span> <span class="string">'wlp5s0'</span></div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span>   <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) request  id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span></div><div class="line">  <span class="number">2</span> <span class="number">0.007501200</span>   <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -&gt; <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>   ICMP <span class="number">98</span> Echo (ping) reply    id=<span class="number">0x000d</span>, seq=<span class="number">0</span>/<span class="number">0</span>, ttl=<span class="number">63</span> (request <span class="keyword">in</span> <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>与之前的区别在于，没有给出<code>192.168.2.202 -&gt; 172.17.0.2</code>这样的路由，而是直接给出了<code>172.18.0.2 -&gt; 172.17.0.2</code>，需要再深入研究。如果使用的是tcpdump的话，也能得到与上述相同的结果。</p>
<p>综上，ping的过程中，数据包的流向如下：Ubuntu上容器 -&gt; <code>201</code>docker0 -&gt; <code>201</code>wlan0 -&gt; <code>202</code>wlp5s0 -&gt; <code>202</code>docker0 -&gt; Centos上容器。</p>
<h2>连接mysql测试</h2>
<p>下面用实际的mysql连接来测试真实的网络连接，先在<code>202</code>上启动mysql容器，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>arnes]<span class="comment"># docker run  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=111111 -d mysql mysqld</span></div><div class="line">a6b839dfd602ba0880b495bae78e8c49d3f57a4a1708021209431441bf6bbd4<span class="number">0</span></div><div class="line">[root<span class="variable">@Centos</span>-<span class="constant">L410 </span>arnes]<span class="comment"># docker ps</span></div><div class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>                 <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>                   <span class="constant">NAMES</span></div><div class="line">a6b839dfd602        mysql               <span class="string">"/entrypoint.sh mysql"</span>   <span class="number">7</span> seconds ago       <span class="constant">Up </span><span class="number">4</span> seconds        <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp   romantic_brahmagupta</div></pre></td></tr></table></figure></p>
<p>启动后，运行tshark抓取网卡上的数据包。然后，在<code>201</code>上启动mysql容器，运行bash，使用mysql客户端连接<code>202</code>上的容器，由于mysql连接上后有定时的心跳，为了防止这部分的干扰，连接后立刻运行<code>exit</code>退出客户端，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># root@Ubuntu-Asus [192.168.2.201] in /var/lib/docker [15:20:52]</span></div><div class="line">$ docker run -<span class="keyword">it</span> <span class="comment">--rm  mysql /bin/bash</span></div><div class="line">root@<span class="number">7</span>b598cc5e8c7:/<span class="comment"># mysql -h172.18.0.2 -P3306 -uroot -p111111</span></div><div class="line">mysql: [Warning] Using <span class="operator">a</span> password <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">command</span> <span class="title">line</span> <span class="title">interface</span> <span class="title">can</span> <span class="title">be</span> <span class="title">insecure</span>.</span></div><div class="line">Welcome <span class="built_in">to</span> <span class="operator">the</span> MySQL monitor.  Commands <span class="function"><span class="keyword">end</span> <span class="title">with</span> ; <span class="title">or</span> \<span class="title">g</span>.</span></div><div class="line">Your MySQL connection id is <span class="number">7</span></div><div class="line">Server <span class="built_in">version</span>: <span class="number">5.7</span><span class="number">.10</span> MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2015</span>, Oracle <span class="operator">and</span>/<span class="operator">or</span> its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is <span class="operator">a</span> registered trademark <span class="operator">of</span> Oracle Corporation <span class="operator">and</span>/<span class="operator">or</span> its</div><div class="line">affiliates. Other names may be trademarks <span class="operator">of</span> their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> <span class="operator">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> <span class="built_in">to</span> <span class="built_in">clear</span> <span class="operator">the</span> current input statement.</div><div class="line"></div><div class="line">mysql&gt; exit</div><div class="line">Bye</div><div class="line">root@<span class="number">7</span>b598cc5e8c7:/<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>在<code>201</code>和<code>202</code>上的抓包结果如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">// Ubuntu <span class="number">192.168</span>.<span class="number">2.201</span></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.201</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">27</span> ~</div><div class="line"><span class="comment"># tshark -i docker0</span></div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help <span class="keyword">in</span> running Wireshark as an unprivileged user.</div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'docker0'</div><div class="line">  <span class="number">1</span>   <span class="number">0.000000</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; Broadcast    ARP <span class="number">42</span> Who has <span class="number">172.17</span>.<span class="number">0.1</span>?  Tell <span class="number">172.17</span>.<span class="number">0.2</span></div><div class="line">  <span class="number">2</span>   <span class="number">0.000033</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> <span class="number">172.17</span>.<span class="number">0.1</span> is at <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6</div><div class="line">  <span class="number">3</span>   <span class="number">0.000046</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">4</span>   <span class="number">0.032752</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">5</span>   <span class="number">0.032982</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line">  <span class="number">6</span>   <span class="number">0.057003</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">144</span> Server Greeting <span class="variable">proto=</span><span class="number">10</span> <span class="variable">version=</span><span class="number">5.7</span>.<span class="number">10</span></div><div class="line">  <span class="number">7</span>   <span class="number">0.057052</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line">  <span class="number">8</span>   <span class="number">0.057149</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">249</span> Login Request <span class="variable">user=</span>root</div><div class="line">  <span class="number">9</span>   <span class="number">0.091636</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"> <span class="number">10</span>   <span class="number">0.097889</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">77</span> Response OK</div><div class="line"> <span class="number">11</span>   <span class="number">0.098129</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">103</span> Request Query</div><div class="line"> <span class="number">12</span>   <span class="number">0.125942</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   MySQL <span class="number">158</span> Response</div><div class="line"> <span class="number">13</span>   <span class="number">0.162720</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">13</span>  <span class="number">14</span>   <span class="number">4.602119</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">71</span> Request Quit</div><div class="line"> <span class="number">15</span>   <span class="number">4.602301</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322574</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">16</span>   <span class="number">4.670611</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">17</span>   <span class="number">4.675746</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Previous segment not captured] mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">18</span>   <span class="number">4.843638</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">172.17</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">19</span>   <span class="number">4.843713</span>   <span class="number">172.17</span>.<span class="number">0.2</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">19</span>  <span class="number">20</span>   <span class="number">5.038625</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.17</span>.<span class="number">0.2</span>?  Tell <span class="number">172.17</span>.<span class="number">0.1</span></div><div class="line"> <span class="number">21</span>   <span class="number">5.038670</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">08</span>:<span class="number">03</span>:<span class="number">7</span>a:e6 ARP <span class="number">42</span> <span class="number">172.17</span>.<span class="number">0.2</span> is at <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line"><span class="number">21</span> ^C</div><div class="line"></div><div class="line"><span class="comment"># root@Ubuntu-Asus [192.168.2.201] in ~ [15:21:59]</span></div><div class="line">$ tshark -i wlan0 | grep mysql</div><div class="line">tshark: Lua: Error during loading:</div><div class="line"> [string <span class="string">"/usr/share/wireshark/init.lua"</span>]:<span class="number">46</span>: dofile has been disabled due to running Wireshark as superuser. See http://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help <span class="keyword">in</span> running Wireshark as an unprivileged user.</div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'wlan0'</div><div class="line"><span class="number">405</span> <span class="number">396</span>  <span class="number">64.586967</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">397</span>  <span class="number">64.619458</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">418</span> <span class="number">398</span>  <span class="number">64.619905</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line"><span class="number">400</span>  <span class="number">64.643935</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line"><span class="number">402</span>  <span class="number">64.678468</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"><span class="number">406</span>  <span class="number">64.749772</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">466</span> <span class="number">444</span>  <span class="number">69.189204</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322574</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">446</span>  <span class="number">69.257519</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> [TCP Retransmission] <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">471</span> <span class="number">447</span>  <span class="number">69.262593</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Previous segment not captured] mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">448</span>  <span class="number">69.430439</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">449</span>  <span class="number">69.430616</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">613</span> ^C</div><div class="line"></div><div class="line">// Centos <span class="number">192.168</span>.<span class="number">2.202</span></div><div class="line">[root@Centos-L410 docker]<span class="comment"># tshark -i docker0</span></div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'docker0'</div><div class="line">  <span class="number">1</span> <span class="number">0.000000000</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">2</span> <span class="number">0.000094913</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line">  <span class="number">3</span> <span class="number">0.030116575</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line">  <span class="number">4</span> <span class="number">0.030976025</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">144</span> Server Greeting <span class="variable">proto=</span><span class="number">10</span> <span class="variable">version=</span><span class="number">5.7</span>.<span class="number">10</span></div><div class="line">  <span class="number">5</span> <span class="number">0.056176778</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line">  <span class="number">6</span> <span class="number">0.066130572</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">249</span> Login Request <span class="variable">user=</span>root</div><div class="line">  <span class="number">7</span> <span class="number">0.066173733</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line">  <span class="number">8</span> <span class="number">0.066262220</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">77</span> Response OK</div><div class="line">  <span class="number">9</span> <span class="number">0.093104979</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">103</span> Request Query</div><div class="line"> <span class="number">10</span> <span class="number">0.093395793</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> MySQL <span class="number">158</span> Response</div><div class="line"> <span class="number">11</span> <span class="number">0.159316774</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">12</span> <span class="number">4.599128670</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   MySQL <span class="number">71</span> Request Quit</div><div class="line"> <span class="number">13</span> <span class="number">4.599292166</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">226</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283104</span> <span class="variable">TSecr=</span><span class="number">39322574</span></div><div class="line"> <span class="number">14</span> <span class="number">4.665013615</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"> <span class="number">15</span> <span class="number">4.665053144</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">16</span> <span class="number">4.832475608</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"> <span class="number">17</span> <span class="number">4.849718662</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"> <span class="number">18</span> <span class="number">5.014473661</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> ARP <span class="number">42</span> Who has <span class="number">172.18</span>.<span class="number">0.2</span>?  Tell <span class="number">172.18</span>.<span class="number">0.1</span></div><div class="line"> <span class="number">19</span> <span class="number">5.014525272</span> <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span> -&gt; <span class="number">02</span>:<span class="number">42</span>:<span class="number">38</span>:<span class="number">14</span>:f7:<span class="number">88</span> ARP <span class="number">42</span> <span class="number">172.18</span>.<span class="number">0.2</span> is at <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span></div><div class="line">^C19 packets captured</div><div class="line"></div><div class="line">[root@Centos-L410 arnes]<span class="comment"># tshark -i wlp5s0 | grep mysql</span></div><div class="line">Running as user <span class="string">"root"</span> <span class="constant">and</span> group <span class="string">"root"</span>. This could be dangerous.</div><div class="line">Capturing on 'wlp5s0'</div><div class="line"><span class="number">354</span> <span class="number">318</span> <span class="number">39.616348312</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">74</span> <span class="number">59523</span> &gt; mysql [SYN] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Win=</span><span class="number">29200</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">39321424</span> <span class="variable">TSecr=</span><span class="number">0</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">319</span> <span class="number">39.616526473</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">74</span> mysql &gt; <span class="number">59523</span> [SYN, ACK] <span class="variable">Seq=</span><span class="number">0</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">28960</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">MSS=</span><span class="number">1460</span> <span class="variable">SACK_PERM=</span><span class="number">1</span> <span class="variable">TSval=</span><span class="number">182278505</span> <span class="variable">TSecr=</span><span class="number">39321424</span> <span class="variable">WS=</span><span class="number">128</span></div><div class="line"><span class="number">321</span> <span class="number">39.646494918</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">1</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321432</span> <span class="variable">TSecr=</span><span class="number">182278505</span></div><div class="line"><span class="number">324</span> <span class="number">39.672552747</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">1</span> <span class="variable">Ack=</span><span class="number">79</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321438</span> <span class="variable">TSecr=</span><span class="number">182278536</span></div><div class="line"><span class="number">326</span> <span class="number">39.682593002</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">79</span> <span class="variable">Ack=</span><span class="number">184</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182278571</span> <span class="variable">TSecr=</span><span class="number">39321438</span></div><div class="line"><span class="number">333</span> <span class="number">39.775693441</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">221</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39321465</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">379</span> <span class="number">384</span> <span class="number">44.215727358</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">226</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283104</span> <span class="variable">TSecr=</span><span class="number">39322574</span></div><div class="line"><span class="number">386</span> <span class="number">44.281387627</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [FIN, ACK] <span class="variable">Seq=</span><span class="number">226</span> <span class="variable">Ack=</span><span class="number">182</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322592</span> <span class="variable">TSecr=</span><span class="number">182278599</span></div><div class="line"><span class="number">387</span> <span class="number">44.281474299</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> mysql &gt; <span class="number">59523</span> [ACK] <span class="variable">Seq=</span><span class="number">183</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283170</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">421</span> <span class="number">389</span> <span class="number">44.448924489</span>   <span class="number">172.18</span>.<span class="number">0.2</span> -&gt; <span class="number">192.168</span>.<span class="number">2.201</span> TCP <span class="number">66</span> [TCP Retransmission] mysql &gt; <span class="number">59523</span> [FIN, ACK] <span class="variable">Seq=</span><span class="number">182</span> <span class="variable">Ack=</span><span class="number">227</span> <span class="variable">Win=</span><span class="number">30080</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">182283338</span> <span class="variable">TSecr=</span><span class="number">39322592</span></div><div class="line"><span class="number">391</span> <span class="number">44.466095818</span> <span class="number">192.168</span>.<span class="number">2.201</span> -&gt; <span class="number">172.18</span>.<span class="number">0.2</span>   TCP <span class="number">66</span> <span class="number">59523</span> &gt; mysql [ACK] <span class="variable">Seq=</span><span class="number">227</span> <span class="variable">Ack=</span><span class="number">183</span> <span class="variable">Win=</span><span class="number">29312</span> <span class="variable">Len=</span><span class="number">0</span> <span class="variable">TSval=</span><span class="number">39322635</span> <span class="variable">TSecr=</span><span class="number">182283338</span></div><div class="line"><span class="number">596</span> ^C</div><div class="line"><span class="number">1</span> packet dropped</div></pre></td></tr></table></figure></p>
<p>由于<code>wlan0</code>和<code>wlp5s0</code>上的tcp包比较多，因此使用<code>grep mysql</code>，只留下了所有与mysql有关的包。从抓包的结果来看，登陆的流程是，先建立tcp连接，然后验证用户名密码（<code>Login Request user=root</code>），验证成功后就建立连接，然后开始发送心跳。退出的过程，需要发送一个关闭的请求（<code>Request Quit</code>），然后关闭连接。关闭的过程中可能发生tcp包的重传（<code>TCP Retransmission</code>），因为这时候连接是不稳定的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker容器默认情况下通过docker虚拟的docker0网卡与其他网络节点通信，如果是与宿主机本地的其他容器或进程通信，相对比较简单，只需要通过docker0网卡转发即可；如果是要与其他宿主机上的容器通信，就需要经过本地宿主机的eth0网卡转发。本文通过实例演示不同宿]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyCAT安装与部署]]></title>
    <link href="http://valleylord.github.io/post/201601-mycat-install/"/>
    <id>http://valleylord.github.io/post/201601-mycat-install/</id>
    <published>2016-01-02T05:43:00.000Z</published>
    <updated>2016-01-02T10:00:58.000Z</updated>
    <content type="html"><![CDATA[<p>MyCAT 是一款开源的Mysql企业级集群应用，它是基于阿里的开源产品Cobar发展出来的。MyCAT提供了类似Mysql的接口，可以平滑的将单机Mysql迁移到Mysql集群上，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。</p>
<p>MyCAT目前最新版本的下载地址在<a href="https://github.com/MyCATApache/Mycat-download/tree/master/1.5-ALPHA" target="_blank" rel="external">这里</a>。我使用的操作系统是Ubuntu 14.04，因此下载的是linux版Mycat-server-1.5-alpha-20151221110028-linux.tar.gz。</p>
<p>解压后可以发现，MyCAT的目录下主要包括以下文件，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ ls | xargs ls</div><div class="line">version.txt</div><div class="line"></div><div class="line">bin:</div><div class="line">init_zk_data.sh  mycat	rehash.sh  startup_nowrap.sh  wrapper-linux-ppc-64  wrapper-linux-x86-32  wrapper-linux-x86-64</div><div class="line"></div><div class="line">catlet:</div><div class="line"></div><div class="line">conf:</div><div class="line">autopartition-long.txt	     myid.properties	      schema.xml		     wrapper.conf</div><div class="line">cacheservice.properties      partition-hash-int.txt   sequence_conf.properties	     zk-<span class="operator"><span class="keyword">create</span>.yaml</span></div><div class="line">ehcache.<span class="keyword">xml</span>		     <span class="keyword">partition</span>-range-<span class="keyword">mod</span>.txt  sequence_db_conf.properties</div><div class="line">index_to_charset.properties  router.<span class="keyword">xml</span>		      sequence_time_conf.properties</div><div class="line">log4j.<span class="keyword">xml</span>		     rule.<span class="keyword">xml</span>		      <span class="keyword">server</span>.<span class="keyword">xml</span></div><div class="line"></div><div class="line">lib:</div><div class="line">curator-client-<span class="number">2.9</span><span class="number">.0</span>.jar     leveldb-<span class="number">0.7</span>.jar		   netty-<span class="number">3.7</span><span class="number">.0</span>.Final.jar</div><div class="line">curator-framework-<span class="number">2.9</span><span class="number">.0</span>.jar  leveldb-api-<span class="number">0.7</span>.jar	   sequoiadb-java-driver-<span class="number">1.0</span>-<span class="number">20150615.070208</span>-<span class="number">1.</span>jar</div><div class="line">dom4j-<span class="number">1.6</span><span class="number">.1</span>.jar		     libwrapper-linux-ppc-<span class="number">64.</span>so    slf4j-api-<span class="number">1.7</span><span class="number">.12</span>.jar</div><div class="line">druid-<span class="number">1.0</span><span class="number">.14</span>.jar	     libwrapper-linux-x86-<span class="number">32.</span>so    slf4j-log4j12-<span class="number">1.7</span><span class="number">.12</span>.jar</div><div class="line">ehcache-core-<span class="number">2.6</span><span class="number">.11</span>.jar      libwrapper-linux-x86-<span class="number">64.</span>so    snakeyaml-<span class="number">1.16</span>.jar</div><div class="line">fastjson-<span class="number">1.2</span><span class="number">.7</span>.jar	     log4j-<span class="number">1.2</span><span class="number">.17</span>.jar		   univocity-parsers-<span class="number">1.5</span><span class="number">.4</span>.jar</div><div class="line">guava-<span class="number">18.0</span>.jar		     mapdb-<span class="number">1.0</span><span class="number">.7</span>.jar		   wrapper.jar</div><div class="line">jline-<span class="number">0.9</span><span class="number">.94</span>.jar	     mongo-java-driver-<span class="number">2.11</span><span class="number">.4</span>.jar  <span class="keyword">xml</span>-apis-<span class="number">1.0</span>.b2.jar</div><div class="line">json-<span class="number">20151123.</span>jar	     Mycat-<span class="keyword">server</span>-<span class="number">1.5</span>-alpha.jar    zookeeper-<span class="number">3.4</span><span class="number">.6</span>.jar</div><div class="line"></div><div class="line"><span class="keyword">logs</span>:</div></pre></td></tr></table></figure></p>
<p>其中，<code>lib</code>目录下是MyCAT的主要的依赖库文件，<code>bin</code>目录下是MyCAT的运行脚本文件，<code>conf</code>目录下是MyCAT是主要配置文件。本次安装过程中需要改到的相关MyCAT配置主要在<code>schema.xml</code>和<code>server.xml</code>。</p>
<p><code>server.xml</code>是MyCAT对外的“虚拟数据库”配置文件。所谓的“虚拟数据库”是说，MyCAT将多个Mysql集群整合起来对外提供服务，提供服务的接口仍然采用Mysql的形式，因此，通过仿造Mysql接口，让调用程序以为自己是在访问Mysql数据库，就是所谓的“虚拟数据库”。<code>server.xml</code>的主要内容如下（已删除原有的注释），</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="doctype">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">mycat:server</span> <span class="attribute">xmlns:mycat</span>=<span class="value">"http://org.opencloudb/"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">system</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultSqlParser"</span>&gt;</span>druidparser<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">system</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">user</span> <span class="attribute">name</span>=<span class="value">"test"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>test<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"schemas"</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">user</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">user</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>user<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"schemas"</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readOnly"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">user</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">mycat:server</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该配置文件很容易读懂，表明该虚拟数据库有一个schema，<code>TESTDB</code>；有2个用户<code>test</code>和<code>user</code>，密码分别是<code>test</code>和<code>user</code>，<code>user</code>用户是只读的，<code>test</code>用户未设置只读；默认的SQL解析器是<code>druidparser</code>。</p>
<p><code>schema.xml</code>的主要内容如下（已删除部分注释），</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE mycat:schema SYSTEM <span class="string">"schema.dtd"</span>&gt;</div><div class="line">&lt;mycat:schema xmlns:<span class="variable">mycat=</span><span class="string">"http://org.opencloudb/"</span>&gt;</div><div class="line"></div><div class="line">	&lt;schema <span class="variable">name=</span><span class="string">"TESTDB"</span> <span class="variable">checkSQLschema=</span><span class="string">"false"</span> <span class="variable">sqlMaxLimit=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"travelrecord"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> <span class="variable">rule=</span><span class="string">"auto-sharding-long"</span> /&gt;</div><div class="line"></div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"company"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span> /&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"goods"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">type=</span><span class="string">"global"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span> /&gt;</div><div class="line">		&lt;!-- random sharding using mod sharind rule --&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"hotnews"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2,dn3"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"mod-long"</span> /&gt;</div><div class="line">		&lt;!-- &lt;table <span class="variable">name=</span><span class="string">"dual"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dnx,dnoracle2"</span> <span class="variable">type=</span><span class="string">"global"</span> </div><div class="line">			<span class="variable">needAddLimit=</span><span class="string">"false"</span>/&gt; &lt;table <span class="variable">name=</span><span class="string">"worker"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"jdbc_dn1,jdbc_dn2,jdbc_dn3"</span> </div><div class="line">			<span class="variable">rule=</span><span class="string">"mod-long"</span> /&gt; --&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"employee"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"sharding-by-intfile"</span> /&gt;</div><div class="line">		&lt;table <span class="variable">name=</span><span class="string">"customer"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1,dn2"</span></div><div class="line">			<span class="variable">rule=</span><span class="string">"sharding-by-intfile"</span>&gt;</div><div class="line">			&lt;childTable <span class="variable">name=</span><span class="string">"orders"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">				<span class="variable">parentKey=</span><span class="string">"id"</span>&gt;</div><div class="line">				&lt;childTable <span class="variable">name=</span><span class="string">"order_items"</span> <span class="variable">joinKey=</span><span class="string">"order_id"</span></div><div class="line">					<span class="variable">parentKey=</span><span class="string">"id"</span> /&gt;</div><div class="line">			&lt;/childTable&gt;</div><div class="line">			&lt;childTable <span class="variable">name=</span><span class="string">"customer_addr"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">joinKey=</span><span class="string">"customer_id"</span></div><div class="line">				<span class="variable">parentKey=</span><span class="string">"id"</span> /&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">		&lt;!-- &lt;table <span class="variable">name=</span><span class="string">"oc_call"</span> <span class="variable">primaryKey=</span><span class="string">"ID"</span> <span class="variable">dataNode=</span><span class="string">"dn1$0-743"</span> <span class="variable">rule=</span><span class="string">"latest-month-calldate"</span> </div><div class="line">			/&gt; --&gt;</div><div class="line">	&lt;/schema&gt;</div><div class="line">	&lt;!-- &lt;dataNode <span class="variable">name=</span><span class="string">"dn1$0-743"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db$0-743"</span> </div><div class="line">		/&gt; --&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn1"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db1"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn2"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db2"</span> /&gt;</div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"dn3"</span> <span class="variable">dataHost=</span><span class="string">"localhost1"</span> <span class="variable">database=</span><span class="string">"db3"</span> /&gt;</div><div class="line">	&lt;!--&lt;dataNode <span class="variable">name=</span><span class="string">"dn4"</span> <span class="variable">dataHost=</span><span class="string">"sequoiadb1"</span> <span class="variable">database=</span><span class="string">"SAMPLE"</span> /&gt;</div><div class="line">	 &lt;dataNode <span class="variable">name=</span><span class="string">"jdbc_dn1"</span> <span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db1"</span> /&gt; </div><div class="line">	&lt;dataNode	<span class="variable">name=</span><span class="string">"jdbc_dn2"</span> <span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db2"</span> /&gt; </div><div class="line">	&lt;dataNode <span class="variable">name=</span><span class="string">"jdbc_dn3"</span> 	<span class="variable">dataHost=</span><span class="string">"jdbchost"</span> <span class="variable">database=</span><span class="string">"db3"</span> /&gt; --&gt;</div><div class="line">	&lt;dataHost <span class="variable">name=</span><span class="string">"localhost1"</span> <span class="variable">maxCon=</span><span class="string">"1000"</span> <span class="variable">minCon=</span><span class="string">"10"</span> <span class="variable">balance=</span><span class="string">"0"</span></div><div class="line">		<span class="variable">writeType=</span><span class="string">"0"</span> <span class="variable">dbType=</span><span class="string">"mysql"</span> <span class="variable">dbDriver=</span><span class="string">"native"</span> <span class="variable">switchType=</span><span class="string">"1"</span>  <span class="variable">slaveThreshold=</span><span class="string">"100"</span>&gt;</div><div class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</div><div class="line">		&lt;!-- can have multi write hosts --&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"localhost:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"123456"</span>&gt;</div><div class="line">			&lt;!-- can have multi read hosts --&gt;</div><div class="line"></div><div class="line">		&lt;/writeHost&gt;</div><div class="line">		&lt;writeHost <span class="variable">host=</span><span class="string">"hostS1"</span> <span class="variable">url=</span><span class="string">"localhost:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">			<span class="variable">password=</span><span class="string">"123456"</span> /&gt;</div><div class="line">		&lt;!-- &lt;writeHost <span class="variable">host=</span><span class="string">"hostM2"</span> <span class="variable">url=</span><span class="string">"localhost:3316"</span> <span class="variable">user=</span><span class="string">"root"</span> <span class="variable">password=</span><span class="string">"123456"</span>/&gt; --&gt;</div><div class="line">	&lt;/dataHost&gt;</div><div class="line">&lt;/mycat:schema&gt;</div></pre></td></tr></table></figure></p>
<p>这个配置文件稍微复杂一些，主要分3块。第1块是<code>schema</code>块，主要描述了虚拟数据库的schema<code>TESTDB</code>中有哪些表，每个表分布在哪些数据节点上，分布的方法采用哪种算法。例如<code>&lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt;</code>，表示<code>travelrecord</code>表分布在<code>dn1,dn2,dn3</code>这3个节点上，分布的方法采用<code>auto-sharding-long</code>算法。第2块是<code>dataNode</code>，表示该数据库有哪些数据节点，以及这些数据节点实际对应的数据服务器和数据库名，这里配置了3个节点<code>dn1,dn2,dn3</code>，都是在<code>localhost1</code>服务器上，数据库名分别是<code>db1,db2,db3</code>，其实，这也正是前面<code>schema</code>块中用到的。第3块是<code>dataHost</code>，这部分是实际的数据库服务器配置，这里配置了2个Mysql数据库，<code>hostM1</code>和<code>hostS1</code>，地址分别在“localhost:3306”，用户名都是<code>root</code>，密码是<code>123456</code>，并且指定了心跳是<code>select user()</code>。</p>
<p>有了这些信息之后，我们就可以根据自己的需要来进行设置。例如，我的数据库地址不在<code>localhost</code>密码也不是<code>123456</code>，安装在这里，</p>
<p><img src="/images/201601-mycat-install/mycat-install-mysql-1.png" alt=""></p>
<p>于是重设MyCAT中这部分配置如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;writeHost <span class="variable">host=</span><span class="string">"hostM1"</span> <span class="variable">url=</span><span class="string">"workstation:3306"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">	<span class="variable">password=</span><span class="string">"111111"</span>&gt;</div><div class="line">&lt;writeHost <span class="variable">host=</span><span class="string">"hostS1"</span> <span class="variable">url=</span><span class="string">"workstation:3316"</span> <span class="variable">user=</span><span class="string">"root"</span></div><div class="line">	<span class="variable">password=</span><span class="string">"111111"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>启动MyCAT之前，需要先检查一些配置：</p>
<ol>
<li>java的版本需要是1.7或以上；</li>
<li>Mysql的配置文件需要加一行<code>lower_case_table_names = 1</code>在<code>[mysqld]</code>栏目中，这个设置为Mysql大小写不敏感，否则可能会发生表找不到的问题；</li>
<li>在示例的2个数据<code>hostM1</code>和<code>hostS1</code>上，新建3个数据库<code>db1,db2,db3</code>，如不新建，可能提示找不到数据库<code>ERROR 3009 (HY000): java.lang.IllegalArgumentException: Invalid DataSource:0</code>（这个提示不够友好，是在运行很长一段时间后才提示）；</li>
<li>添加<code>MYCAT_HOME</code>环境变量指向解压的mycat目录，主要是为了一些<code>bin</code>目录下的脚本的使用。</li>
</ol>
<p>一些文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>中说，还需要创建mycat用户和用户组，实际中我发现这不是必须的。之后就可以启动MyCAT了，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./bin/mycat <span class="operator"><span class="keyword">start</span></span></div><div class="line"><span class="keyword">Starting</span> Mycat-<span class="keyword">server</span>...</div></pre></td></tr></table></figure></p>
<p>之后就可以登陆MyCAT了，可以使用mysql的客户端像登陆mysql那样登陆，如下，</p>
<p><img src="/images/201601-mycat-install/mycat-install-login.png" alt=""></p>
<p>如果登陆成功，可以建表了，建表语句<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>与普通sql一样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql<span class="subst">&gt;</span> create table travelrecord (id bigint <span class="literal">not</span> <span class="built_in">null</span> primary key,user_id varchar(<span class="number">100</span>),traveldate <span class="built_in">DATE</span>, fee <span class="built_in">decimal</span>,days int);</div><div class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.77</span> sec)</div><div class="line"></div><div class="line">mysql<span class="subst">&gt;</span> desc travelrecord;</div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="subst">|</span> Field      <span class="subst">|</span> <span class="keyword">Type</span>          <span class="subst">|</span> <span class="built_in">Null</span> <span class="subst">|</span> Key <span class="subst">|</span> Default <span class="subst">|</span> Extra <span class="subst">|</span></div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="subst">|</span> id         <span class="subst">|</span> bigint(<span class="number">20</span>)    <span class="subst">|</span> NO   <span class="subst">|</span> PRI <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> user_id    <span class="subst">|</span> varchar(<span class="number">100</span>)  <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> traveldate <span class="subst">|</span> <span class="built_in">date</span>          <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> fee        <span class="subst">|</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">|</span> days       <span class="subst">|</span> int(<span class="number">11</span>)       <span class="subst">|</span> YES  <span class="subst">|</span>     <span class="subst">|</span> <span class="built_in">NULL</span>    <span class="subst">|</span>       <span class="subst">|</span></div><div class="line"><span class="subst">+------------+---------------+------+-----+---------+-------+</span></div><div class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql<span class="subst">&gt;</span> create table abc (id bigint <span class="literal">not</span> <span class="built_in">null</span> primary key, name varchar(<span class="number">100</span>));</div><div class="line">ERROR <span class="number">1064</span> (HY000): op table <span class="literal">not</span> <span class="keyword">in</span> schema<span class="subst">----</span>ABC</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-create-table.png" alt=""></p>
<blockquote>
<p>注意：如果建立的表之前没有在<code>schema.xml</code>中定义，那么不可以建立此表。</p>
</blockquote>
<p>建表成功后，就可以插入数据了，而且还可以使用<code>explain</code>查看插入了哪个数据库，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt;  explain insert into travelrecord (id,user_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                                   |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn1       | insert into travelrecord (id,user_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3) |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt;  explain insert into travelrecord (id,user_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                                                                                   |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line"><span class="header">| dn2       | insert into travelrecord (id,user_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3) |</span></div><div class="line">+-----------+-------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(1000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(7000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.06 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-insert.png" alt=""></p>
<p>然后还可以select，可以发现，select 不过是对每个数据库上进行，同时默认加上了<code>limit 100</code>的限制。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="header">mysql&gt; explain select * from travelrecord;</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line"><span class="header">| DATA_NODE | SQL                                  |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">| dn1       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line">| dn2       | SELECT * FROM travelrecord LIMIT 100 |</div><div class="line"><span class="header">| dn3       | SELECT * FROM travelrecord LIMIT 100 |</span></div><div class="line">+-----------+--------------------------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-select.png" alt=""></p>
<p>如果mysql是innodb存储引擎，还可以设置<code>autocommit</code>，之前的操作采用默认<code>autocommit=1</code>，如果设置<code>autocommit=0</code>，还可以使用事务，挺好用的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set autocommit=0;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into travelrecord (id,user<span class="emphasis">_id,traveldate,fee,days) values(8000000,'abc','2016-01-02',100.01,3);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; rollback;</div><div class="line">Query OK, 0 rows affected (0.09 sec)</div><div class="line"></div><div class="line"><span class="header">mysql&gt; select * from travelrecord limit 1000;</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line"><span class="header">| id      | user_id | traveldate | fee  | days |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">| 1000000 | abc     | 2016-01-02 |  100 |    3 |</div><div class="line"><span class="header">| 7000000 | abc     | 2016-01-02 |  100 |    3 |</span></div><div class="line">+---------+---------+------------+------+------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-mycat-install/mycat-install-autocommit.png" alt=""></p>
<p>在实验中还发现，如果使用<code>autocommit=0</code>还可以产生锁，与使用单Mysql数据库很相似，很有意思。</p>
<p>此时，返回来看看实际数据库Mysql中的数据，如下，</p>
<p><img src="/images/201601-mycat-install/mycat-install-mysql-2.png" alt=""></p>
<p>发现一个很奇怪的事情，端口3306的数据库，也就是配置文件中的<code>hostM1</code>似乎没有创建<code>travelrecord</code>表，也就是说，配置文件中的<code>hostS1</code>似乎覆盖了<code>hostM1</code>，这与注释中的“can have multi write hosts”似乎有不符之处，不知为何。</p>
<p>另外，在实验的过程中，<code>travelrecord</code>表中插入数据过程中，似乎总是无法将数据分片到<code>dn3</code>上，感觉是其分片算法<code>auto-sharding-long</code>有问题，不确定这是一个bug还是算法特性。</p>
<p>最后，吐槽下MyCAT的示例，其默认的几张表的建表语句我实在是找了半天，才在MyCAT的doc中找到，而且呈现形式还是.docx形式的一篇安装指南，实在太不规范。比较好一点的呈现，可能是一个sql脚本，包含了所有建表语句和示例数据的insert语句；或者分为建表语句sql脚本和insert示例数据sql脚本2个文件，也是个不错的主意。</p>
<p>综上，可以认为，MyCAT模拟了一个虚拟Mysql数据库，并通过简单的配置文件配置，将虚拟数据库中的表映射到实际数据库中。只有那些在配置文件中配置了的表，才可以被MyCAT管理，实现分片。MyCAT还提供了很多分片算法，本文没有详述。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/dreamcode/article/details/44307377" class="uri" target="_blank" rel="external">http://blog.csdn.net/dreamcode/article/details/44307377</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html" class="uri" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/MyCATApache/Mycat-doc/blob/master/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/MyCat_%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%28linux%29.doc" target="_blank" rel="external">https://github.com/MyCATApache/Mycat-doc/blob/master/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/MyCat_%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%28linux%29.doc</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyCAT 是一款开源的Mysql企业级集群应用，它是基于阿里的开源产品Cobar发展出来的。MyCAT提供了类似Mysql的接口，可以平滑的将单机Mysql迁移到Mysql集群上，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。</p>
<p>MyCAT目前最新版本]]>
    </summary>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/tags/MyCAT/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="MyCAT" scheme="http://valleylord.github.io/categories/MyCAT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker存储(Volumn)]]></title>
    <link href="http://valleylord.github.io/post/201601-docker-volumn/"/>
    <id>http://valleylord.github.io/post/201601-docker-volumn/</id>
    <published>2016-01-01T06:25:00.000Z</published>
    <updated>2016-01-03T08:48:08.000Z</updated>
    <content type="html"><![CDATA[<h2>指定存储（Volumn）</h2>
<p>Volumn是Docker容器中，用于将数据存储在容器之外的路径的工具。</p>
<p>主要有两个地方会用到，一个是在使用<code>docker run</code>命令的时候，可以用<code>-v</code>参数指定存储，如<code>-v [host dir]:[container dir]</code>，将宿主机的目录<code>[host dir]</code>挂载到容器内的<code>[container dir]</code>，也可以只指定容器目录，如<code>-v [container dir]</code>，表示在容器内创建一个目录<code>container dir</code>，该目录的修改不会记录在容器的修改中，而会存在<code>/var/lib/docker</code>目录下的<code>./volumnes</code>目录中。<code>./volumnes</code>目录下的数据文件不会被docker删除，即使容器被删除也不会，如果要清理这个目录下的文件，只能手动进行。例如，可以使用<code>docker inspect</code>查看存储的路径，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">inspect</span> <span class="number">9</span>f47cb4bb97f</div><div class="line">...... <span class="comment">// 省略部分内容</span></div><div class="line">    <span class="string">"Mounts"</span>: [</div><div class="line">        {</div><div class="line">            <span class="string">"Name"</span>: <span class="string">"05d30758ebf0ca16e86026b2328b2c6b48cfaa62e9f7a262c0a6dfddde003a11"</span>,</div><div class="line">            <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/05d30758ebf0ca16e86026b2328b2c6b48cfaa62e9f7a262c0a6dfddde003a11/_data"</span>,</div><div class="line">            <span class="string">"Destination"</span>: <span class="string">"/var/lib/mysql"</span>,</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"local"</span>,</div><div class="line">            <span class="string">"Mode"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"RW"</span>: <span class="keyword">true</span></div><div class="line">        }</div><div class="line">    ],</div><div class="line">...... <span class="comment">// 省略部分内容</span></div></pre></td></tr></table></figure></p>
<p>Volumn的另一种用法是在dockerfile中，其含义与<code>docker run</code>的后一种用法相同。可以参考mysql的dockerfile的例子，无论是标准的mysql镜像，或者是mariadb镜像，又或者是Oracle的mysql镜像，其dockerfile<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>中指定volumn的都只有如下一行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VOLUME /<span class="keyword">var</span>/lib/mysql</div></pre></td></tr></table></figure></p>
<p>即创建容器的存储路径<code>/var/lib/mysql</code>。这是因为，mysql的数据存储目录就是<code>/var/lib/mysql</code>，在mysql的容器被删除之后，我们希望数据目录仍然存在，不要跟着容器被一并删除；同样，如果容器做了修改，提交时应该也不能包含该目录，因为我们不能将业务相关的数据跟着容器中的程序一并提交。这正式Volumn存在的意义。</p>
<h2>docker容器网络访问控制</h2>
<p>docker容器网络放开控制默认是通过iptables来完成。以tomcat的容器为例，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ docker run -p <span class="number">8080</span>:<span class="number">8080</span> -d tomcat </div><div class="line"><span class="number">9</span>a1b9aca0fddeb68489c974df5d09e6093d8e774ff7db9132d8d25606643dc1f</div><div class="line"></div><div class="line">$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line"><span class="number">9</span>a1b9aca0fdd        tomcat              <span class="string">"catalina.sh run"</span>   <span class="number">4</span> <span class="built_in">seconds</span> ago       Up <span class="number">2</span> <span class="built_in">seconds</span>        <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   silly_jennings</div><div class="line"></div><div class="line">$ iptables-save | grep <span class="number">8080</span></div><div class="line">-A POSTROUTING -s <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> -p tcp -m tcp <span class="comment">--dport 8080 -j MASQUERADE</span></div><div class="line">-A DOCKER -p tcp -m tcp <span class="comment">--dport 8080 -j DNAT --to-destination 172.17.0.2:8080</span></div><div class="line">-A DOCKER -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">32</span> ! -i docker0 -o docker0 -p tcp -m tcp <span class="comment">--dport 8080 -j ACCEPT</span></div></pre></td></tr></table></figure></p>
<p>可以发现，对容器8080端口配置了3条iptables规则。解释这几条规则，需要先理解docker的网络，默认情况下，所有的docker容器全都运行在docker0作为虚拟路由器的子网内，一般是一个172开头的网段，与外界的连接通过NAT方式桥接。</p>
<p>第一条规则是，容器（172.17.0.2）访问外网时做的源地址伪装；第二条规则是，任意网络节点访问8080端口，转发到172.17.0.2:8080，这是一个由外网节点向NAT内网机节点做转发的常见配置；第3条规则是，所有通过docker0访问172.17.0.2的8080端口的数据输入，除了输入是从docker0来的，都是被允许的，这是容器所在的NAT内网访问本节点的配置，也就是容器访问容器。以上所有转发规则都使用tcp协议。</p>
<p>如果在<code>docker run</code>的时候使用了<code>--net=host</code>或<code>--net=container:&lt;name|id&gt;</code>选项，那么容器将使用宿主机的网络，或使用另一个容器的网络。这种情况下不会产生新的iptables规则。如果使用了<code>--net=container:&lt;name|id&gt;</code>选项，在另一个容器被关闭的时候，本容器也会无法访问，即使另一个容器又重启，本容器也需要重启后才可以访问。</p>
<p>与iptables有关的选项在docker后台启动进程（daemon）上，<code>--icc=true</code>和<code>--iptables=true</code>，<code>--icc=true</code>表示不同容器之间是允许网络互通的，这是默认值，如果设置为false，那么只有使用<code>--link</code>才能实现两个容器之间的互联。如果设置了这个选项，即使设置<code>--iptables=false</code>也可以容器间互通，但这样是不安全的，建议设置<code>--icc=false</code>。<code>--iptables=true</code>，表示通过设置iptables实现特殊的网络连接，如果设置了这个选项，在容器启动的时候就会新增iptables规则。这些选项建议放在<code>/etc/default/docker</code>中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DOCKER_OPTS</span>=<span class="string">"--icc=false --iptables=true"</span></div></pre></td></tr></table></figure></p>
<p>也可以手动启动docker后台启动进程时加上，<code>docker daemon --icc=false --iptables=true</code>。上述的iptables的例子就已经设置了这些选项，如果没有加这些选项的话，默认<code>--icc=true</code>，以上的iptables规则会不一样，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ iptables-save| grep 8080</div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">POSTROUTING</span> -s <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> -d <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">MASQUERADE</span></span></div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">DOCKER</span> ! -i docker<span class="number">0</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">DNAT</span> --to-destination <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span><span class="symbol">:</span><span class="number">8080</span></span></div><div class="line">-<span class="ruby"><span class="constant">A</span> <span class="constant">DOCKER</span> -d <span class="number">172.17</span>.<span class="number">0</span>.<span class="number">2</span>/<span class="number">32</span> ! -i docker<span class="number">0</span> -o docker<span class="number">0</span> -p tcp -m tcp --dport <span class="number">8080</span> -j <span class="constant">ACCEPT</span></span></div></pre></td></tr></table></figure></p>
<p>注意，只有第二条规则不一样，增加了一个条件，所有输入来源不是docker0的网络访问，转发到172.17.0.2:8080。系统会添加一个iptables的全局ACCEPT规则，这个规则不受<code>--iptables</code>参数影响。</p>
<h2>docker端口映射</h2>
<p>容器可以在启动的时候使用<code>-p</code>选项来增加容器内和宿主机之间的端口映射。但是默认情况下，每增加一个端口映射都会产生一个docker-proxy进程，而这样一个进程需要消耗大约10M内存。如果映射的端口过多，就会导致内存耗尽，这样的情况，无论是宿主机上有一个映射端口很多的容器，还是容器虽然映射端口很少，但宿主机上有很多个这种容器，都会发生。为了解决这个问题，docker改进了设计，将docker-proxy进程设计为非必要。可以在docker后台启动进程中加入<code>--userland-proxy=false</code>选项来禁止docker-proxy进程的产生<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。同样这个参数可以加在后台启动进程上，也可以加在<code>/etc/default/docker</code>中，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">DOCKER_OPTS="</span><span class="literal">-</span><span class="literal">-</span><span class="comment">icc=false</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">iptables=true</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">userland</span><span class="literal">-</span><span class="comment">proxy=false"</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201601-docker-volumn/docker-volumn-userland-proxy-1.png" alt=""></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://github.com/docker-library/mysql/blob/a1a948c19137b7843ff0c7de0c95d22b74ecfefd/5.6/Dockerfile" class="uri" target="_blank" rel="external">https://github.com/docker-library/mysql/blob/a1a948c19137b7843ff0c7de0c95d22b74ecfefd/5.6/Dockerfile</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://github.com/docker-library/mariadb/blob/d960d3cd750accc47d620886cff901d87a600d37/10.1/Dockerfile" class="uri" target="_blank" rel="external">https://github.com/docker-library/mariadb/blob/d960d3cd750accc47d620886cff901d87a600d37/10.1/Dockerfile</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/mysql/mysql-docker/blob/mysql-server/5.6/Dockerfile" class="uri" target="_blank" rel="external">https://github.com/mysql/mysql-docker/blob/mysql-server/5.6/Dockerfile</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://github.com/docker/docker/issues/14856" class="uri" target="_blank" rel="external">https://github.com/docker/docker/issues/14856</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<h2>指定存储（Volumn）</h2>
<p>Volumn是Docker容器中，用于将数据存储在容器之外的路径的工具。</p>
<p>主要有两个地方会用到，一个是在使用<code>docker run</code>命令的时候，可以用<code>-v</code>参数指定存]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[两年的dataguru学习总结]]></title>
    <link href="http://valleylord.github.io/post/201512-two-years-study/"/>
    <id>http://valleylord.github.io/post/201512-two-years-study/</id>
    <published>2015-12-31T12:48:00.000Z</published>
    <updated>2016-01-10T08:54:19.000Z</updated>
    <content type="html"><![CDATA[<p>我最早接触dataguru是在大约2年多前，那时我学校毕业已经好几年了，一直从事传统金融行业系统的开发工作，外面互联网企业的行情一浪高过一浪，难得我还能耐得住寂寞。</p>
<p>时间长了，总觉得工作的内容有些与市场脱节的厉害，虽然公司也有组织一些培训，但多数仍然是传统软件工业的范畴，虽然工作中用得上，但没什么太大意思。市场上有的一些培训，面授的课程比较贵，而且还有被忽悠的可能；网络课程的话，质量良莠不齐，即使有一些比较优质的课程，也都是基础课部分，略微高级的内容都是收费的，虽然收费比面授是便宜了很多，但也还是挺贵的。于是在这个时候见到了炼数成金（dataguru），那应该是在2013年秋冬左右的时候。</p>
<p>那时的dataguru还没有现在的课程数量多，也没有第一节试听，也没有现在很多的优惠折扣，免费听课卡之类的也很少，课程的分类大概是有R、SAS、Oracle、Hadoop、NoSQL这些。促使我报第一门课的动力是它有itpub的背景，而且收费也确实不贵。</p>
<p>说到收费，必须浓墨重彩的说一下dataguru的逆向收费制度，这个制度一直坚持到现在仍然没有变。每门课的学费分固定和浮动两部分，固定学费100元必须要交，浮动的部分一般是300元，如果学习成绩好，那么浮动的部分可以全部返还。也就是说，最便宜可以100元就学一门课，即使学习成绩没及格，也最多就收400元，相对市面上收费的网络授课，也算是便宜的了。</p>
<p>这个收费制度实在是太有意思了，如果把课程作为一个产品来看的话，这个制度应该是个杀手级的特性。它的确激励了一些学员努力学习，在完成作业的过程中巩固所学的知识。反过来看，完成作业好的学员，老师基本从他身上是赚不到钱的，而补偿老师工作最多的恰恰是完成作业差的学员，有点马太效应的感觉。我不确定这个制度是否是首创，但是这确实是dataguru的一大招牌。如果给dataguru想一句广告词的话，我会写“让想学的学员以最低的成本学习”。</p>
<p>实际上，以我学过的dataguru课程做例子，全部金额返还通过率在15~30%，部分金额返还的比例相当少，大约不到5%，其他的都是0返还的学员。如果把课程看成生意的话，以下保守估计，假定一门400元的课有30个学员，全额返还通过率在25%，其余是0返还，那么，一门课上完，老师的收入是30×400-30×25%×300=9750，大约是1万元，如果这门课程一年开3期，那么老师的收入会有3万元，如果该老师还有其他课程的话，以上数字可能继续翻倍。以上假定dataguru平台不从中抽取中介费，我这么算不仅是要预测老师的收入，而是要去推测这是否是一个可以持续的商业模式，相信大家应该有自己的判断。</p>
<p>当然，最初选课的时候也不是一点担心也没有，万一老师为了收到学费把作业出的很难怎么办？相信不只是我有这么想过。以我后来学的课程内容来看，大部分的每周作业，应该是半天到一天就能做完，偶尔可能有例外。我是写作业比较认真，几乎每次的作业我都发到了博客上，所以耗时长了点，如果不纠结这些格式的话，有的作业2小时内就搞定了。当然，这是我的情况，基本我学的课程都是听过但没用过的主题，不同人的专业基础、知识构成有不同，仅供参考。做作业的过程有些像在学校里面的时候，赶每学期期末的大作业，只是作业量并没那么多，不确定这是不是dataguru团队刻意想营造的，不过这确实让我想起了在学校的时光。</p>
<p>再之后，陆续在dataguru学了3门课，全满分过拿了优异，还参加了一些公开课，还有一门没坚持下来。然后dataguru有了V等级，我是V2，进了精英群，也在群里面认识了一些志同道合的朋友。中间有过大约半年多的时间，身边事情太多，停学了，直到现在。现在，我又重新开始了，对一个有2年dataguru学龄的学员来说，只有V2是不是应该好好努力了？</p>
<p>说了很多dataguru的特色制度，也说说这里的课程和老师。以我学过的课程来看，多数情况下，课程的内容确实是有一些干货的，认真跟老师的脚步，确实是能学到一些实用的东西，课程质量平均都比较高。黄校长的课应该依旧是这里的招牌，讲的认真，作业量也控制的不错，中等偏上。课程的内容上，有一些高端的课程，也的确是言之有物，不过没有看过其他网络平台的课程 ，不便比较。这里老师的普遍水平应该也是挺不错的，不过现在老师越来越多了，学员的看法也越来越多，有说个别老师比较水的，也有说某些老师过于严格的，也有说老师发视频总是延迟的。万一真的碰到这样的情况，认真和教务沟通，dataguru的教务还是很好沟通的。dataguru也在不断进步中，比如很久之前我在精英群里面提过助教制度和学员互批作业制度，其实这也不是我的原创，但是后来dataguru真的就引入了这些，很令我惊喜。</p>
<p>总之，dataguru还是性价比很高的网络培训，如果有一些课程的确是你感兴趣的主题，那么学一学绝对不会后悔。现在的dataguru相比最初的时候，已经好了很多，如果有一些地方能更一步改进，想必会更好。比如，我觉得有以下一些，</p>
<ol>
<li>老师经常有延迟发布视频的情况，经常发生在课程的第一期，这是很让人纠结的，一般来说，参加第一期的课程相对会和老师有比较好的互动，因为此时老师对自己的课程也需要一些反馈，和学员的沟通会比较积极；另一方面，老师也是正常人，也有个人生活，一周做一个视频可能实在时间太紧了，所以经常会有延迟发布视频的情况，3个月的课程有个别情况会拖到6个月。很多人提过这个问题，也提了很长时间，我也提过“老师准备好半数的视频之后再开课”之类，目前看来，dataguru目前似乎没有什么好的办法 ，而我还是希望他能够解决。</li>
<li>课程结构上，缺乏系列课程，比如，从入门，到熟练，到精通，把一个主题讲透，更多的是某门课对某个专题讲，讲的深浅就看老师个人的规划了。dataguru明显已经感觉到了这块的不足，现在推出“专业”这个概念，把专业内的课程分为初级、中级、高级，也有一些很少的课程推出了上下两部，建议学后者的学员先学前一门课。但是，“专业”内课程仍然感觉比较割裂，希望这一块可以进一步加强，推出学习路线图这类的功能。</li>
<li>课程结构设置上，dataguru仍然采用限定死一周一课的方式。但这个默认设置实际上是值得推敲的，比如，某个学员（比如我）是有短期项目的，不能确定下个月，或者下下个月是否有短期加急项目，而dataguru的课程（除去公开课和部分短课）一般都在3个月以上，很可能导致这样的学员无法正常完成课程。如果dataguru的课程可以在学员学完一节课提交作业之后，自动进入下一节课，那么对学员来说，在时间上就显得可控的多，当然，总的时间上仍然可以限制。当然这会导致不是所有的学员的作业都步调一致，老师改作业会有一些麻烦。我不确定这种情况是否可以克服，但我觉得这样的改进对学员，以及dataguru的长远发展来说，都是有益的，值得尝试。</li>
</ol>
<p>最后，我真的觉得dataguru是一个值得参与的网络课程平台，过去是，现在是，将来也将会是。她在成长，她即使现在有些微的不足，但是我们看着她变得越来越好，我们还可以期待她变得更好，一直好到你挑不出刺来。我很喜欢这里。</p>
<p>此文写给炼数成金4周年，感谢你教会我的，感谢这个优秀的平台，感谢这里遇到的每一个人，生日快乐 to dataguru！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我最早接触dataguru是在大约2年多前，那时我学校毕业已经好几年了，一直从事传统金融行业系统的开发工作，外面互联网企业的行情一浪高过一浪，难得我还能耐得住寂寞。</p>
<p>时间长了，总觉得工作的内容有些与市场脱节的厉害，虽然公司也有组织一些培训，但多数仍然是传统软]]>
    </summary>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="other" scheme="http://valleylord.github.io/categories/other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu14.04无法无线上网]]></title>
    <link href="http://valleylord.github.io/post/201601-ubuntu-wifi/"/>
    <id>http://valleylord.github.io/post/201601-ubuntu-wifi/</id>
    <published>2015-12-31T10:09:00.000Z</published>
    <updated>2016-01-02T10:21:37.000Z</updated>
    <content type="html"><![CDATA[<p>安装了Ubuntu14.04之后，一直使用无线上网，直到今天。系统中什么事情也没做，只是在无线路由器上，给本机分配了一个固定ip。</p>
<p>找了一些文章，有说是无线驱动的问题的，需要重新编译内核；有说是需要更新驱动的，需要在更新中升级；等等很多，不一而足。</p>
<p>我的判断是，驱动应该是没啥问题，因为之前也能上网，而且更新里面显示为空，表示我的驱动已经是最新了。猜测可能是网络环境变了，导致之前的某个选项不能适配新环境。</p>
<p>在网上找到<a href="http://www.emmolution.org/?p=253" target="_blank" rel="external">这篇文章</a>，设置硬件加密为不启用即可。我照做了，然后就能正常用wifi了。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vi</span> /etc/modprobe.<span class="keyword">d</span>/ath9k.<span class="keyword">conf</span></div></pre></td></tr></table></figure></p>
<p>增加以下内容，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">options ath9k nohwcrypt</span>=<span class="string">1</span></div></pre></td></tr></table></figure></p>
<p>然后重启即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>安装了Ubuntu14.04之后，一直使用无线上网，直到今天。系统中什么事情也没做，只是在无线路由器上，给本机分配了一个固定ip。</p>
<p>找了一些文章，有说是无线驱动的问题的，需要重新编译内核；有说是需要更新驱动的，需要在更新中升级；等等很多，不一而足。</p>]]>
    </summary>
    
      <category term="Linux" scheme="http://valleylord.github.io/tags/Linux/"/>
    
      <category term="Linux" scheme="http://valleylord.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker创建镜像]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-build-image/"/>
    <id>http://valleylord.github.io/post/201512-docker-build-image/</id>
    <published>2015-12-27T01:43:00.000Z</published>
    <updated>2015-12-27T09:56:54.000Z</updated>
    <content type="html"><![CDATA[<p>通常情况下，我们使用dockerfile来创建镜像，主要是因为dockerfile可以实现脚本化，反复使用。</p>
<p>dockerfile通常是由一系列指令组成，一个常见的dockerfile的例子主要有以下一些指令<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<h2>dockerfile指令</h2>
<h3>FROM</h3>
<p>格式为 <code>FROM &lt;image&gt;</code>或<code>FROM &lt;image&gt;:&lt;tag&gt;</code>。</p>
<p>第一条指令必须为 <code>FROM</code> 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 <code>FROM</code> 指令（每个镜像一次）。</p>
<h3>MAINTAINER</h3>
<p>格式为 <code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p>
<h3>RUN</h3>
<p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</p>
<p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p>
<p>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 <code>\</code> 来换行。</p>
<h3>CMD</h3>
<p>支持三种格式 * <code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式； * <code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用； * <code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</p>
<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p>
<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p>
<h3>EXPOSE</h3>
<p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p>
<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>
<h3>ENV</h3>
<p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p>
<p>例如</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">ENV</span> <span class="constant">PG_MAJOR</span> <span class="number">9.3</span></div><div class="line"><span class="constant">ENV</span> <span class="constant">PG_VERSION</span> <span class="number">9.3</span>.<span class="number">4</span></div><div class="line"><span class="constant">RUN</span> curl -<span class="constant">SL</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/postgres</span>-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress && …</div><div class="line"><span class="constant">ENV</span> <span class="constant">PATH</span> /usr/local/postgres-<span class="variable">$PG_MAJOR</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<h3>ADD</h3>
<p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p>
<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>
<h3>COPY</h3>
<p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p>
<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>
<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>
<h3>ENTRYPOINT</h3>
<p>两种格式： * <code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> * <code>ENTRYPOINT command param1 param2</code>（shell中执行）。</p>
<p>配置容器启动后执行的命令，并且不可被 <code>docker run</code> 提供的参数覆盖。</p>
<p>每个 Dockerfile 中只能有一个 <code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。</p>
<h3>VOLUME</h3>
<p>格式为 <code>VOLUME [&quot;/data&quot;]</code>。</p>
<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
<h3>USER</h3>
<p>格式为 <code>USER daemon</code>。</p>
<p>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户。</p>
<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：<code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code>。要临时获取管理员权限可以使用 <code>gosu</code>，而不推荐 <code>sudo</code>。</p>
<h3>WORKDIR</h3>
<p>格式为 <code>WORKDIR /path/to/workdir</code>。</p>
<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p>
<p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WORKDIR /a</div><div class="line">WORKDIR b</div><div class="line">WORKDIR c</div><div class="line">RUN <span class="built_in">pwd</span></div></pre></td></tr></table></figure></p>
<p>则最终路径为 <code>/a/b/c</code>。</p>
<h3>ONBUILD</h3>
<p>格式为 <code>ONBUILD [INSTRUCTION]</code>。</p>
<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>
<p>例如，Dockerfile 使用如下的内容创建了镜像 <code>image-A</code>。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">...</span>]</div><div class="line">ONBUILD ADD . /app/src</div><div class="line">ONBUILD RUN /usr/local/bin/python-build --dir /app/src</div><div class="line">[<span class="keyword">...</span>]</div></pre></td></tr></table></figure></p>
<p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 <code>FROM image-A</code>指定基础镜像时，会自动执行 <code>ONBUILD</code> 指令内容，等价于在后面添加了两条指令。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> image-A</div><div class="line"></div><div class="line">#Automatically run the following</div><div class="line">ADD . <span class="regexp">/app/</span>src</div><div class="line">RUN <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>python-build --dir <span class="regexp">/app/</span>src</div></pre></td></tr></table></figure></p>
<p>使用 <code>ONBUILD</code> 指令的镜像，推荐在标签中注明，例如 <code>ruby:1.9-onbuild</code>。</p>
<h2>构建镜像实例</h2>
<p>本文使用centos 7为基础镜像，构建一个包括jdk8、tomcat8、php、mysql、mycat的镜像。</p>
<h3>代码和文件准备</h3>
<p>镜像的dockerfile如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">FROM centos:<span class="number">7</span></div><div class="line">MAINTAINER arnes &lt;arsen_mmx<span class="variable">@163</span>.com&gt;</div><div class="line">ENV REFRESHED_AT <span class="number">2015</span>-<span class="number">12</span>-<span class="number">26</span></div><div class="line"></div><div class="line"><span class="comment"># add fast yum repos</span></div><div class="line">ADD ./CentOS-Base.repo  /etc/yum.repos.d/CentOS-Base.repo</div><div class="line">ADD ./mysql-community.repo /etc/yum.repos.d/mysql-community.repo</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install jdk 1.8</span></div><div class="line">COPY ./jdk1.<span class="number">8.0_66</span> /usr/java/jdk1.<span class="number">8.0_66</span></div><div class="line"></div><div class="line">ENV JAVA_HOME /usr/java/jdk1.<span class="number">8.0_66</span></div><div class="line">ENV JRE_HOME <span class="variable">$JAVA_HOME</span>/jre</div><div class="line">ENV PATH <span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></div><div class="line">ENV CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="regexp">/usr/java</span><span class="regexp">/jdk1.6.0_25/jre</span><span class="regexp">/lib:$CLASSPATH</span></div><div class="line"></div><div class="line"></div><div class="line">#install tomcat</div><div class="line">COPY ./apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span>  /usr/tomcat/apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span></div><div class="line"></div><div class="line">ENV TOMCAT_HOME /usr/tomcat/apache-tomcat-<span class="number">8.0</span>.<span class="number">28</span></div><div class="line">ENV CATALINA_HOME <span class="variable">$TOMCAT_HOME</span></div><div class="line">ENV CATALINA_BASE <span class="variable">$TOMCAT_HOME</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install php</span></div><div class="line">RUN yum update</div><div class="line">RUN yum install -<span class="keyword">y</span> openssh-server php</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install mysql</span></div><div class="line">RUN groupadd -r mysql && useradd -r -g mysql mysql</div><div class="line"></div><div class="line"><span class="comment">#ADD ./mysql-community-release-el7-7.noarch.rpm /usr/mysql-community-release-el7-7.noarch.rpm</span></div><div class="line"><span class="comment">#ADD ./mysql-community-server-minimal-5.6.28-2.el7.x86_64.rpm /usr/mysql-community-server-minimal-5.6.28-2.el7.x86_64.rpm</span></div><div class="line"></div><div class="line"><span class="comment">#RUN rpm -ivh /usr/mysql-community-release-el7-7.noarch.rpm</span></div><div class="line"></div><div class="line">RUN rpmkeys --import http:<span class="regexp">//repo</span>.mysql.com/RPM-GPG-KEY-mysql </div><div class="line">RUN yum install -<span class="keyword">y</span> https:<span class="regexp">//repo</span>.mysql.com/yum/mysql-<span class="number">5.6</span>-community/docker/x86_64/mysql-community-server-minimal-<span class="number">5.6</span>.<span class="number">28</span>-<span class="number">2</span>.el7.x86_64.rpm </div><div class="line"><span class="comment">#RUN yum install -y mysql-community-server</span></div><div class="line">RUN yum install -<span class="keyword">y</span> libpwquality \</div><div class="line">  && rm -rf /var/cache/yum/*</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># config mysql</span></div><div class="line">ADD ./<span class="keyword">my</span>.cnf /etc/<span class="keyword">my</span>.cnf</div><div class="line">RUN sed -Ei <span class="string">'s/^(bind-address|log)/#&/'</span> /etc/<span class="keyword">my</span>.cnf \</div><div class="line">	&& echo -e <span class="string">"skip-host-cache\nskip-name-resolve\nlower_case_table_names=1"</span> | awk <span class="string">'{ print } $1 == "[mysqld]" && c == 0 { c = 1; system("cat") }'</span> /etc/<span class="keyword">my</span>.cnf &gt; <span class="regexp">/tmp/my</span>.cnf \</div><div class="line">	&& mv /tmp/<span class="keyword">my</span>.cnf /etc/<span class="keyword">my</span>.cnf</div><div class="line"></div><div class="line">VOLUME /var/lib/mysql</div><div class="line"></div><div class="line">ENV MYSQL_ROOT_PASSWORD <span class="string">"111111"</span></div><div class="line">ENV MYSQL_USER <span class="string">"mysql"</span></div><div class="line">ENV MYSQL_USER_DATABASE <span class="string">"mysql"</span></div><div class="line">ENV MYSQL_USER_PASSWORD <span class="string">"111111"</span></div><div class="line"></div><div class="line">COPY ./mysql-entrypoint.sh /usr/bin/mysql-entrypoint.sh</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># install mycat</span></div><div class="line">RUN groupadd -r mycat && useradd -r -g mycat mycat</div><div class="line"></div><div class="line">COPY ./mycat /opt/mycat</div><div class="line">ADD ./schema.xml /opt/mycat/conf/schema.xml</div><div class="line">COPY ./mycat-run.sh /usr/bin/mycat-run.sh</div><div class="line"></div><div class="line">ENV MYCAT_HOME /opt/mycat</div><div class="line"></div><div class="line">RUN <span class="keyword">chown</span> -R mycat:mycat /opt/mycat</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># export port for tomcat, mysql, mycat</span></div><div class="line">EXPOSE <span class="number">8080</span> <span class="number">8066</span> <span class="number">9066</span> <span class="number">3306</span></div><div class="line"></div><div class="line"></div><div class="line">CMD <span class="variable">$TOMCAT_HOME</span>/bin/startup.sh \</div><div class="line">  && bash -c <span class="string">"/usr/bin/mysql-entrypoint.sh mysqld &"</span> \</div><div class="line">  && echo <span class="string">"Waiting mysql startup."</span> && <span class="keyword">sleep</span> <span class="number">30</span> \</div><div class="line">  && bash -c <span class="string">"/usr/bin/mycat-run.sh"</span> \</div><div class="line">  && <span class="regexp">/usr/sbin</span><span class="regexp">/sshd -D</span></div><div class="line">#CMD /usr<span class="regexp">/bin/mysql</span>-entrypoint.sh && <span class="regexp">/usr/sbin</span><span class="regexp">/sshd -D</span></div></pre></td></tr></table></figure></p>
<p>以上安装过程，主要就是按照jdk8-&gt;tomcat8-&gt;php-&gt;mysql-&gt;mycat的步骤来逐步安装的。需要用到的文件如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-needed-files.png" alt=""></p>
<p>其中，<code>Dockerfile</code>文件上文已经列出，<code>jdk-8u66-linux-x64.tar.gz</code>、<code>apache-tomcat-8.0.28.tar.gz</code>、<code>Mycat-server-1.5-alpha-20151221110028-linux.tar.gz</code>分别是jdk8、tomcat8、mycat1.5的安装包文件，解压后分别是<code>jdk1.8.0_66</code>、<code>apache-tomcat-8.0.28</code>、<code>mycat</code>。<code>CentOS-Base.repo</code>是Centos7的更新源配置文件，用来替代默认的更新源，以加快速度，我用的是上海交大的源，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CentOS-Base.repo</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></div><div class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></div><div class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></div><div class="line"><span class="comment"># unless you are manually picking other mirrors.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span></div><div class="line"><span class="comment"># remarked out baseurl= line instead.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">[base]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Base</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/os</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#released updates </span></div><div class="line">[updates]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Updates</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/updates</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#additional packages that may be useful</span></div><div class="line">[extras]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Extras</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/extras</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div><div class="line"></div><div class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></div><div class="line">[centosplus]</div><div class="line">name=<span class="constant">CentOS-</span><span class="variable">$releasever</span> - <span class="constant">Plus</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/ftp.sjtu.edu.cn/centos</span><span class="regexp">/$releasever/centosplus</span><span class="regexp">/$basearch/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM-GPG-KEY-CentOS-</span><span class="number">7</span></div></pre></td></tr></table></figure></p>
<p><code>mysql-community.repo</code>是mysql的centos更新源，因为centos的默认mysql实现已经是mysql的mariadb分支，如果要用Oracle的mysql，现在在centos中改名为<code>mysql-community</code>，需要手动配置更新源，文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[mysql-connectors-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="constant">Connectors</span> <span class="constant">Community</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-connectors-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line">[mysql-tools-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="constant">Tools</span> <span class="constant">Community</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-tools-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line"><span class="comment"># Enable to use MySQL 5.5</span></div><div class="line">[mysql55-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.5</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.5-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line"><span class="comment"># Enable to use MySQL 5.6</span></div><div class="line">[mysql56-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.6</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.6-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div><div class="line"></div><div class="line">[mysql57-community]</div><div class="line">name=<span class="constant">MySQL</span> <span class="number">5.7</span> <span class="constant">Community</span> <span class="constant">Server</span></div><div class="line">baseurl=<span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/yum</span><span class="regexp">/mysql-5.7-community/el</span><span class="regexp">/7/</span><span class="variable">$basearch</span>/</div><div class="line">enabled=<span class="number">0</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">gpgkey=<span class="symbol">file:</span>/<span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="constant">RPM</span>-<span class="constant">GPG</span>-<span class="constant">KEY</span>-mysql</div></pre></td></tr></table></figure></p>
<p><code>mysql-community.repo</code>的获取主要参考Oracle官方的Yum源配置方法，运行如下命令，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-<span class="number">7</span>.noarch.rpm</div><div class="line">rpm -Uvh mysql57-community-release-el7-<span class="number">7</span>.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>运行完后，发现在<code>/etc/yum.repos.d/</code>目录下多了<code>msql-community</code>的更新源配置<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，我只取其中的<code>mysql-community.repo</code>以精简Yum更新源。</p>
<p><code>my.cnf</code>是mysql的配置文件，这个文件主要配置了mysql的字符集UTF8，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">socket=/var/run/mysqld/mysql.sock</div><div class="line">default-character-<span class="operator"><span class="keyword">set</span>=utf8</span></div><div class="line"></div><div class="line">[mysqld]</div><div class="line">datadir=/<span class="keyword">var</span>/lib/mysql</div><div class="line">socket=/<span class="keyword">var</span>/run/mysqld/mysql.sock</div><div class="line"><span class="keyword">user</span>=mysql</div><div class="line"># Disabling symbolic-links <span class="keyword">is</span> recommended <span class="keyword">to</span> prevent assorted security risks</div><div class="line">symbolic-links=<span class="number">0</span></div><div class="line"></div><div class="line">skip-<span class="built_in">character</span>-<span class="keyword">set</span>-client-handshake=<span class="number">1</span></div><div class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</div><div class="line"><span class="keyword">collation</span>-<span class="keyword">server</span>=utf8_unicode_ci</div><div class="line"></div><div class="line">#<span class="keyword">log</span>-queries-<span class="keyword">not</span>-<span class="keyword">using</span>-indexes=<span class="number">1</span></div><div class="line">#slow-<span class="keyword">query</span>-<span class="keyword">log</span>=<span class="number">1</span></div><div class="line">#slow-<span class="keyword">query</span>-<span class="keyword">log</span>-file=/<span class="keyword">var</span>/lib/mysql/mysql-slow.<span class="keyword">log</span></div><div class="line"></div><div class="line">[mysqld_safe]</div><div class="line"><span class="keyword">log</span>-error=/<span class="keyword">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></div><div class="line">pid-file=/<span class="keyword">var</span>/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure></p>
<p><code>mysql-entrypoint.sh</code>是mysql的docker启动脚本，用法是<code>mysql-entrypoint.sh mysqld</code>，该文件以及dockerfile中的mysql安装步骤都参考了mysql5.6官方Docker镜像<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>中的构建方法，文件内如如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="keyword">set</span> <span class="operator">-e</span></div><div class="line"></div><div class="line"><span class="comment"># if command starts with an option, prepend mysqld</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">${1:0:1}</span>"</span> = <span class="string">'-'</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="keyword">set</span> -- mysqld <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'mysqld'</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="comment"># Get config</span></div><div class="line">	DATADIR=<span class="string">"<span class="variable">$("$@" --verbose --help 2&gt;/dev/null | awk '$1 == "datadir" { print $2; exit }')</span>"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"DATADIR=<span class="variable">$DATADIR</span>"</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ ! <span class="operator">-d</span> <span class="string">"$ /mysql"</span> ]; <span class="keyword">then</span></div><div class="line">		<span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$MYSQL_ROOT_PASSWORD</span>"</span> <span class="operator">-a</span> -z <span class="string">"<span class="variable">$MYSQL_ALLOW_EMPTY_PASSWORD</span>"</span> <span class="operator">-a</span> -z <span class="string">"<span class="variable">$MYSQL_RANDOM_ROOT_PASSWORD</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'error: database is uninitialized and password option is not specified '</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD'</span></div><div class="line">			<span class="keyword">exit</span> <span class="number">1</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		mkdir -p <span class="string">"<span class="variable">$DATADIR</span>"</span></div><div class="line">		chown -R mysql:mysql <span class="string">"<span class="variable">$DATADIR</span>"</span></div><div class="line"></div><div class="line">		<span class="built_in">echo</span> <span class="string">'Initializing database'</span></div><div class="line">		mysql_install_db --user=mysql --datadir=<span class="string">"<span class="variable">$DATADIR</span>"</span> --rpm --keep-my-cnf</div><div class="line">		<span class="built_in">echo</span> <span class="string">'Database initialized'</span></div><div class="line"></div><div class="line">		<span class="string">"<span class="variable">$@</span>"</span> --skip-networking &</div><div class="line">		pid=<span class="string">"$!"</span></div><div class="line"></div><div class="line">		mysql=( mysql --protocol=socket -uroot )</div><div class="line"></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> {<span class="number">30</span>..<span class="number">0</span>}; <span class="keyword">do</span></div><div class="line">			<span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">'SELECT 1'</span> | <span class="string">"<span class="variable">${mysql[@]}</span>"</span> &&gt; /dev/null; <span class="keyword">then</span></div><div class="line">				<span class="keyword">break</span></div><div class="line">			<span class="keyword">fi</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">'MySQL init process in progress...'</span></div><div class="line">			sleep <span class="number">1</span></div><div class="line">		<span class="keyword">done</span></div><div class="line">		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$i</span>"</span> = <span class="number">0</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">'MySQL init process failed.'</span></div><div class="line">			<span class="keyword">exit</span> <span class="number">1</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$MYSQL_INITDB_SKIP_TZINFO</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			<span class="comment"># sed is for https://bugs.mysql.com/bug.php?id=20545</span></div><div class="line">			mysql_tzinfo_to_sql /usr/share/zoneinfo | sed <span class="string">'s/Local time zone must be set--see zic manual page/FCTY/'</span> | <span class="string">"<span class="variable">${mysql[@]}</span>"</span> mysql</div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$MYSQL_RANDOM_ROOT_PASSWORD</span>"</span> ]; <span class="keyword">then</span></div><div class="line">			MYSQL_ROOT_PASSWORD=<span class="string">"<span class="variable">$(pwgen -1 32)</span>"</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">"GENERATED ROOT PASSWORD: <span class="variable">$MYSQL_ROOT_PASSWORD</span>"</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		<span class="string">"<span class="variable">${mysql[@]}</span>"</span> &lt;&lt;-EOSQL</div><div class="line">			-- What<span class="string">'s done in this file shouldn'</span>t be replicated</div><div class="line">			--  or products like mysql-fabric won<span class="string">'t work</span></div><div class="line">			SET @@SESSION.SQL_LOG_BIN=0;</div><div class="line">			DELETE FROM mysql.user ;</div><div class="line">			CREATE USER 'root<span class="string">'@'</span>%<span class="string">' IDENTIFIED BY '</span><span class="variable">${MYSQL_ROOT_PASSWORD}</span><span class="string">' ;</span></div><div class="line">			GRANT ALL ON *.* TO 'root<span class="string">'@'</span>%<span class="string">' WITH GRANT OPTION ;</span></div><div class="line">			DROP DATABASE IF EXISTS test ;</div><div class="line">			FLUSH PRIVILEGES ;</div><div class="line">		EOSQL</div><div class="line"></div><div class="line">		if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then</div><div class="line">			mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )</div><div class="line">		fi</div><div class="line"></div><div class="line">		if [ "$MYSQL_DATABASE" ]; then</div><div class="line">			echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"</div><div class="line">			mysql+=( "$MYSQL_DATABASE" )</div><div class="line">		fi</div><div class="line"></div><div class="line">		if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then</div><div class="line">			echo "CREATE USER '<span class="variable">$MYSQL_USER</span><span class="string">'@'</span>%<span class="string">' IDENTIFIED BY '</span><span class="variable">$MYSQL_PASSWORD</span><span class="string">' ;" | "${mysql[@]}"</span></div><div class="line"></div><div class="line">			if [ "$MYSQL_DATABASE" ]; then</div><div class="line">				echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* TO '<span class="variable">$MYSQL_USER</span><span class="string">'@'</span>%<span class="string">' ;" | "${mysql[@]}"</span></div><div class="line">			fi</div><div class="line"></div><div class="line">			echo 'FLUSH PRIVILEGES ;<span class="string">' | "${mysql[@]}"</span></div><div class="line">		fi</div><div class="line"></div><div class="line">		echo</div><div class="line">		for f in /docker-entrypoint-initdb.d/*; do</div><div class="line">			case "$f" in</div><div class="line">				*.sh)  echo "$0: running $f"; . "$f" ;;</div><div class="line">				*.sql) echo "$0: running $f"; "${mysql[@]}" &lt; "$f" && echo ;;</div><div class="line">				*)     echo "$0: ignoring $f" ;;</div><div class="line">			esac</div><div class="line">			echo</div><div class="line">		done</div><div class="line"></div><div class="line">		if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then</div><div class="line">			"${mysql[@]}" &lt;&lt;-EOSQL</div><div class="line">				ALTER USER 'root<span class="string">'@'</span>%<span class="string">' PASSWORD EXPIRE;</span></div><div class="line">			EOSQL</div><div class="line">		fi</div><div class="line">		if ! kill -s TERM "$pid" || ! wait "$pid"; then</div><div class="line">			echo &gt;&2 'MySQL init process failed.<span class="string">'</span></div><div class="line">			exit 1</div><div class="line">		fi</div><div class="line"></div><div class="line">		echo</div><div class="line">		echo 'MySQL init process done. Ready <span class="keyword">for</span> start up.<span class="string">'</span></div><div class="line">		echo</div><div class="line">	fi</div><div class="line"></div><div class="line">	chown -R mysql:mysql "$DATADIR"</div><div class="line">fi</div><div class="line"></div><div class="line">echo "$@"</div><div class="line">exec "$@"</div></pre></td></tr></table></figure></p>
<p><code>schema.xml</code>是mycat中的配置文件<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>，我注释掉了其中一行，</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...... // 省略部分内容</div><div class="line">	<span class="tag">&lt;<span class="title">dataHost</span> <span class="attribute">name</span>=<span class="value">"localhost1"</span> <span class="attribute">maxCon</span>=<span class="value">"1000"</span> <span class="attribute">minCon</span>=<span class="value">"10"</span> <span class="attribute">balance</span>=<span class="value">"0"</span></span></div><div class="line">		<span class="attribute">writeType</span>=<span class="value">"0"</span> <span class="attribute">dbType</span>=<span class="value">"mysql"</span> <span class="attribute">dbDriver</span>=<span class="value">"native"</span> <span class="attribute">switchType</span>=<span class="value">"1"</span>  <span class="attribute">slaveThreshold</span>=<span class="value">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="title">heartbeat</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- can have multi write hosts --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">writeHost</span> <span class="attribute">host</span>=<span class="value">"hostM1"</span> <span class="attribute">url</span>=<span class="value">"localhost:3306"</span> <span class="attribute">user</span>=<span class="value">"root"</span></span></div><div class="line">			<span class="attribute">password</span>=<span class="value">"111111"</span>&gt;</div><div class="line">			<span class="comment">&lt;!-- can have multi read hosts --&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;/<span class="title">writeHost</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostS1" url="localhost:3316" user="root"</span></div><div class="line">			password="123456" /&gt; --&gt;</div><div class="line">		<span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">dataHost</span>&gt;</span></div><div class="line">...... // 省略部分内容</div></pre></td></tr></table></figure></p>
<p>注释掉的是有关<code>host=“hostS1”</code>的那一段，因为我只有一个mysql实例。<code>mycat-run.sh</code>是mycat的启动文件，主要添加了与mycat测试数据库一致的db1、db2、db3这3个数据库。文件内容如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db1;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db2;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CREATE database db3;"</span> | mysql -uroot -p<span class="variable">$MYSQL_ROOT_PASSWORD</span></div><div class="line"></div><div class="line"><span class="variable">$MYCAT_HOME</span>/bin/mycat start</div></pre></td></tr></table></figure></p>
<h3>构建和测试</h3>
<p>有了以上文件，就可以构建docker镜像了，<code>docker build -t arnes/my-centos7 .</code>，构建过程截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-1.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-2.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-3.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-4.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-5.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-6.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-building-7.png" alt=""></p>
<p>构建完成之后，就可以运行镜像了，运行的命令是<code>docker run -it -p 3306:3306 -p 8066:8066 -p 8080:8080 -p 9066:9066 -d arnes/my-centos7</code>，截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-1.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-2.png" alt=""></p>
<p>其中，大部分是mysql启动的log，这里主要是关注是否已经成功，正常使用的时候，建议使用<code>-d</code>后台启动。</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-running-3.png" alt=""></p>
<p>如上所示，宿主机的ip在<code>192.168.2.101</code>，从另一台机器可以访问该容器的服务，截图如下，</p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-1.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-2.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-3.png" alt=""></p>
<p><img src="/images/201512-docker-build-image/docker-build-image-testing-4.png" alt=""></p>
<p>综上，容器已经可以提供对外服务。</p>
<h3>改进</h3>
<p>可能的改进点有以下一些，</p>
<ol>
<li>mysql已经提供环境变量作为传入参数来设置数据库、密码等，但是mycat并没有，需要支持；</li>
<li>可以使用supervisord来做启动命令，但这需要先安装<code>python-pip</code>，有待进一步研究；</li>
<li>镜像应该还有可以精简的地方，有待发现；</li>
</ol>
<p>以上是本文的全部。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://dockerpool.com/static/books/docker_practice/dockerfile/instructions.html" class="uri" target="_blank" rel="external">http://dockerpool.com/static/books/docker_practice/dockerfile/instructions.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" class="uri" target="_blank" rel="external">http://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/mysql/mysql-docker/tree/mysql-server/5.6" class="uri" target="_blank" rel="external">https://github.com/mysql/mysql-docker/tree/mysql-server/5.6</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html" class="uri" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_638b7ebb0102vv80.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://blog.csdn.net/dreamcode/article/details/44307377" class="uri" target="_blank" rel="external">http://blog.csdn.net/dreamcode/article/details/44307377</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>通常情况下，我们使用dockerfile来创建镜像，主要是因为dockerfile可以实现脚本化，反复使用。</p>
<p>dockerfile通常是由一系列指令组成，一个常见的dockerfile的例子主要有以下一些指令<a href="#fn1" class="foo]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker命令简介]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-commands/"/>
    <id>http://valleylord.github.io/post/201512-docker-commands/</id>
    <published>2015-12-18T13:03:00.000Z</published>
    <updated>2015-12-26T07:51:59.000Z</updated>
    <content type="html"><![CDATA[<h2>Docker命令概要</h2>
<p>常用的Docker命令有以下一些<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。</p>
<h3>1. docker version</h3>
<p>显示 Docker 版本信息。</p>
<h3>2. docker info</h3>
<p>显示 Docker 系统信息，包括镜像和容器数。</p>
<h3>3. docker search</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker search [options <span class="string">"o"</span>&gt;] term</div><div class="line">docker search <span class="operator">-s</span>  django</div></pre></td></tr></table></figure></p>
<p>从 Docker Hub 中搜索符合条件的镜像。</p>
<p>--automated 只列出 automated build类型的镜像；</p>
<p>--no-trunc 可显示完整的镜像描述；</p>
<p>-s 40 列出收藏数不小于40的镜像。</p>
<h3>4. docker pull</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull [<span class="operator">-a</span> <span class="string">"o"</span>&gt;] [user/ <span class="string">"o"</span>&gt;]name[:tag <span class="string">"o"</span>&gt;]</div><div class="line">docker pull laozhu/telescope:latest</div></pre></td></tr></table></figure></p>
<p>从 Docker Hub 中拉取或者更新指定镜像。</p>
<p>-a 拉取所有 tagged 镜像 。</p>
<h3>5. docker login</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@moon:~<span class="comment"># docker login</span></div><div class="line">Username: username</div><div class="line">Password: ****</div><div class="line">Email: user@domain.com</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<p>按步骤输入在 Docker Hub 注册的用户名、密码和邮箱即可完成登录。</p>
<h3>6. docker logout</h3>
<p>运行后从指定服务器登出，默认为官方服务器。</p>
<h3>7. docker images</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images [options <span class="string">"o"</span>&gt;] [name]</div></pre></td></tr></table></figure></p>
<p>列出本地所有镜像。其中 [name] 对镜像名称进行关键词查询。</p>
<p>-a 列出所有镜像（含过程镜像）；</p>
<p>-f 过滤镜像，如： -f ['dangling=true'] 只列出满足dangling=true 条件的镜像；</p>
<p>--no-trunc 可显示完整的镜像ID；</p>
<p>-q 仅列出镜像ID。</p>
<p>--tree 以树状结构列出镜像的所有提交历史。</p>
<h3>8. docker ps</h3>
<p>列出所有运行中容器。</p>
<p>-a 列出所有容器（含沉睡镜像）；</p>
<p>--before=&quot;nginx&quot; 列出在某一容器之前创建的容器，接受容器名称和ID作为参数；</p>
<p>--since=&quot;nginx&quot; 列出在某一容器之后创建的容器，接受容器名称和ID作为参数；</p>
<p>-f [exited=<int>] 列出满足exited=<int> 条件的容器；</int></int></p>
<p>-l 仅列出最新创建的一个容器；</p>
<p>--no-trunc 显示完整的容器ID；</p>
<p>-n=4 列出最近创建的4个容器；</p>
<p>-q 仅列出容器ID；</p>
<p>-s 显示容器大小。</p>
<h3>9. docker rmi</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker rmi [options <span class="string">"o"</span>&gt;] &lt;image&gt;  <span class="string">"o"</span>&gt;[image...]</div><div class="line">docker rmi nginx:latest postgres:latest python:latest</div></pre></td></tr></table></figure></p>
<p>从本地移除一个或多个指定的镜像。</p>
<p>-f 强行移除该镜像，即使其正被使用；</p>
<p>--no-prune 不移除该镜像的过程镜像，默认移除。</p>
<h3>10. docker rm</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker rm [options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div><div class="line">docker rm nginx-<span class="number">01</span> nginx-<span class="number">02</span> db-<span class="number">01</span> db-<span class="number">02</span></div><div class="line"><span class="built_in">sudo</span> docker rm <span class="operator">-l</span> /webapp/redis</div></pre></td></tr></table></figure></p>
<p>-f 强行移除该容器，即使其正在运行；</p>
<p>-l 移除容器间的网络连接，而非容器本身；</p>
<p>-v 移除与容器关联的空间。</p>
<h3>11. docker history</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker history  <span class="string">"o"</span>&gt;[options] &lt;image&gt;</div></pre></td></tr></table></figure></p>
<p>查看指定镜像的创建历史。</p>
<p>--no-trunc 显示完整的提交记录；</p>
<p>-q 仅列出提交记录ID。</p>
<h3>12. docker start|stop|restart</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start|stop <span class="string">"p"</span>&gt;|restart [options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div></pre></td></tr></table></figure></p>
<p>启动、停止和重启一个或多个指定容器。</p>
<p>-a 待完成</p>
<p>-i 启动一个容器并进入交互模式；</p>
<p>-t 10 停止或者重启容器的超时时间（秒），超时后系统将杀死进程。</p>
<h3>13. docker kill</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker kill  <span class="string">"o"</span>&gt;[options <span class="string">"o"</span>&gt;] &lt;container&gt;  <span class="string">"o"</span>&gt;[container...]</div></pre></td></tr></table></figure></p>
<p>杀死一个或多个指定容器进程。</p>
<p>-s &quot;KILL&quot; 自定义发送至容器的信号。</p>
<h3>14. docker events</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker events [options <span class="string">"o"</span>&gt;]</div><div class="line">docker events --since= <span class="string">"s2"</span>&gt;<span class="string">"20141020"</span></div><div class="line">docker events --until= <span class="string">"s2"</span>&gt;<span class="string">"20120310"</span></div></pre></td></tr></table></figure></p>
<p>从服务器拉取个人动态，可选择时间区间。</p>
<h3>15. docker save</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker save -i <span class="string">"debian.tar"</span></div><div class="line">docker save &gt; <span class="string">"debian.tar"</span></div></pre></td></tr></table></figure></p>
<p>将指定镜像保存成 tar 归档文件， docker load 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
<p>-o &quot;debian.tar&quot; 指定保存的镜像归档。</p>
<h3>16. docker load</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker load [options]</div><div class="line">docker load &lt; debian.tar</div><div class="line">docker load -i <span class="string">"debian.tar"</span></div></pre></td></tr></table></figure></p>
<p>从 tar 镜像归档中载入镜像， docker save 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
<p>-i &quot;debian.tar&quot; 指定载入的镜像归档。</p>
<h3>17. docker export</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">export</span> &lt;container&gt;</div><div class="line">docker <span class="keyword">export</span> nginx-<span class="number">01</span> &gt; export.tar</div></pre></td></tr></table></figure></p>
<p>将指定的容器保存成 tar 归档文件， docker import 的逆操作。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
<h3>18. docker import</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker import url|-  <span class="string">"o"</span>&gt;[repository[:tag <span class="string">"o"</span>&gt;]]</div><div class="line">cat export.tar  <span class="string">"p"</span>&gt;| docker import - imported-nginx:latest</div><div class="line">docker import http://example.com/export.tar</div></pre></td></tr></table></figure></p>
<p>从归档文件（支持远程文件）创建一个镜像， export 的逆操作，可为导入镜像打上标签。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
<h3>19. docker top</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker top &lt;running_container&gt;  <span class="string">"o"</span>&gt;[ps options]</div></pre></td></tr></table></figure></p>
<p>查看一个正在运行容器进程，支持 ps 命令参数。</p>
<h3>20. docker inspect</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker instpect nginx:latest</div><div class="line">docker inspect nginx-container</div></pre></td></tr></table></figure></p>
<p>检查镜像或者容器的参数，默认返回 JSON 格式。</p>
<p>-f 指定返回值的模板文件。</p>
<h3>21. docker pause</h3>
<p>暂停某一容器的所有进程。</p>
<h3>22. docker unpause</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker unpause &lt;container&gt;</div></pre></td></tr></table></figure></p>
<p>恢复某一容器的所有进程。</p>
<h3>23. docker tag</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag [options <span class="string">"o"</span>&gt;] &lt;image&gt;[:tag <span class="string">"o"</span>&gt;] [repository/ <span class="string">"o"</span>&gt;][username/]name <span class="string">"o"</span>&gt;[:tag]</div></pre></td></tr></table></figure></p>
<p>标记本地镜像，将其归入某一仓库。</p>
<p>-f 覆盖已有标记。</p>
<h3>24. docker push</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker push name[:tag <span class="string">"o"</span>&gt;]</div><div class="line">docker push laozhu/nginx:latest</div></pre></td></tr></table></figure></p>
<p>将镜像推送至远程仓库，默认为 Docker Hub 。</p>
<h3>25. docker logs</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker logs [options <span class="string">"o"</span>&gt;] &lt;container&gt;</div><div class="line">docker logs <span class="operator">-f</span> -t --tail= <span class="string">"s2"</span>&gt;<span class="string">"10"</span> insane_babbage</div></pre></td></tr></table></figure></p>
<p>获取容器运行时的输出日志。</p>
<p>-f 跟踪容器日志的最近更新；</p>
<p>-t 显示容器日志的时间戳；</p>
<p>--tail=&quot;10&quot; 仅列出最新10条容器日志。</p>
<h3>26. docker run</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [options <span class="string">"o"</span>&gt;] &lt;image&gt; [ <span class="string">"nb"</span>&gt;command]  <span class="string">"o"</span>&gt;[arg...]</div></pre></td></tr></table></figure></p>
<p>启动一个容器，在其中运行指定命令。</p>
<p>-a stdin 指定标准输入输出内容类型，可选 STDIN/STDOUT / STDERR 三项；</p>
<p>-d 后台运行容器，并返回容器ID；</p>
<p>-i 以交互模式运行容器，通常与 -t 同时使用；</p>
<p>-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p>--name=&quot;nginx-lb&quot; 为容器指定一个名称；</p>
<p>--dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致；</p>
<p>--dns-search example.com 指定容器DNS搜索域名，默认和宿主一致；</p>
<p>-h &quot;mars&quot; 指定容器的hostname；</p>
<p>-e username=&quot;ritchie&quot; 设置环境变量；</p>
<p>--env-file=[] 从指定文件读入环境变量；</p>
<p>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot; 绑定容器到指定CPU运行；</p>
<p>-c 待完成</p>
<p>-m 待完成</p>
<p>--net=&quot;bridge&quot; 指定容器的网络连接类型，支持 bridge /host / none/container:<name|id> 四种类型；</name|id></p>
<p>--link=[] 待完成</p>
<p>--expose=[] 待完成</p>
<h2>详解docker run命令</h2>
<p><code>docker run</code>应该是Docker中最常用的命令了，Docker的官方文档也给予了非常详细的介绍<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>。</p>
<p>Docker在执行时会将相关进程封装到相互隔离的容器(container)中。当执行 docker run时，Docker会启动一个进程，同时给这个进程分配其独占的文件系统，独占的网络资源和以此进程为根进程的进程组。在Docker启动container时加载的Image，或许已经定义好了默认的启动进程，需要exposer的网络端口和其他在Dockerfile中定义好的资源。但使用docker run 都可以重新对这个image进行默认定义。这就是为什么run命令参数比docker其他命令参数都多的原因。</p>
<h3>基本形式</h3>
<p>最基本的docker run命令是如下格式：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="tag">sudo</span> <span class="tag">docker</span> <span class="tag">run</span> <span class="attr_selector">[OPTIONS]</span> <span class="tag">IMAGE</span><span class="attr_selector">[:TAG]</span> <span class="attr_selector">[COMMAND]</span> <span class="attr_selector">[ARG...]</span></div></pre></td></tr></table></figure></p>
<p>如果需要查看[OPTIONS]的详细使用说明，请参考Docker关于OPTIONS的说明。这里仅简要介绍Run所使用到的参数。</p>
<p>OPTIONS总起来说分为两类：</p>
<pre><code>1. 设定操作执行方式：
    1. 决定container的运行方式，前台执行还是后台执行
    2. 设定containerID
    3. 设定network参数
    4. 设定container的CPU和Memory参数
    5. 设定权限(Privileges )和LXC参数
2. 设定image的默认资源，也就是image使用者可以用此命令来覆盖image开发者在build阶段所设定的默认值。</code></pre>
<p>docker run [OPTIONS]可以让image使用者完全控制container的生命周期，允许image使用者覆盖所有image开发者在执行docker build时所设定的参数，甚至也可以修改本身由Docker所控制的内核级参数。</p>
<h3>Operator exclusive options</h3>
<p>当执行docker run时可以设定的资源如下：</p>
<pre><code>*Detached vs Foreground
*Container Identification
*IPC Setting
*Network Settings
*Clean Up (--rm)
*Runtime Constraints on CPU and Memory
*Runtime Privilege, Linux Capabilities, and LXC Configuration</code></pre>
<p>我们依次进行介绍。</p>
<h3>Detached vs foreground</h3>
<p>当我们启动一个container时，首先需要确定这个container是运行在前台模式还是运行在后台模式。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-d=<span class="built_in">false</span>: <span class="type">Detached</span> mode: <span class="type">Run</span> container <span class="keyword">in</span> the background, <span class="built_in">print</span> <span class="keyword">new</span> container id</div></pre></td></tr></table></figure></p>
<h4>Detached (-d)</h4>
<p>如果在docker run 后面追加-d=true或者-d，则containter将会运行在后台模式(Detached mode)。此时所有I/O数据只能通过网络资源或者共享卷组来进行交互。因为container不再监听你执行docker run的这个终端命令行窗口。但你可以通过执行docker attach 来重新挂载这个container里面。需要注意的时，<em>如果你选择执行-d使container进入后台模式，那么将无法配合&quot;--rm&quot;参数</em>。</p>
<h4>Foregroud</h4>
<p>如果在docker run后面没有追加-d参数，则container将默认进入前台模式(Foregroud mode)。Docker会启动这个container，同时将当前的命令行窗口挂载到container的标准输入，标准输出和标准错误中。也就是container中所有的输出，你都可以再当前窗口中查看到。甚至docker可以虚拟出一个TTY窗口，来执行信号中断。这一切都是可以配置的：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">a=[]          　　　　 <span class="symbol">:</span> <span class="constant">Attach</span> to `<span class="constant">STDIN</span>`, `<span class="constant">STDOUT</span>` <span class="keyword">and</span>/<span class="keyword">or</span> `<span class="constant">STDERR</span>`</span></div><div class="line">-<span class="ruby">t=<span class="keyword">false</span>        　　  <span class="symbol">:</span> <span class="constant">Allocate</span> a pseudo-tty</span></div><div class="line">-<span class="ruby">-sig-proxy=<span class="keyword">true</span>　<span class="symbol">:</span> <span class="constant">Proxify</span> all received signal to the process (non-<span class="constant">TTY</span> mode only)</span></div><div class="line">-<span class="ruby">i=<span class="keyword">false</span>        　　  <span class="symbol">:</span> <span class="constant">Keep</span> <span class="constant">STDIN</span> open even <span class="keyword">if</span> <span class="keyword">not</span> attached</span></div></pre></td></tr></table></figure></p>
<p>如果在执行run命令时没有指定-a，那么docker默认会挂载所有标准数据流，包括输入输出和错误。你可以特别指定挂载哪个标准流。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -<span class="operator">a</span> <span class="keyword">stdin</span> -<span class="operator">a</span> <span class="keyword">stdout</span> -i -t ubuntu /bin/bash (只挂载标准输入输出)</div></pre></td></tr></table></figure></p>
<p>对于执行容器内的交互式操作，例如shell脚本。我们必须使用 -i -t来申请一个控制台同容器进行数据交互。但是当通过管道同容器进行交互时，就不能使用-t. 例如这个命令<code>echo test | docker run -i busybox cat</code></p>
<h3>Container identification</h3>
<h4>Name (--name)</h4>
<p>给container命名有三种方式：</p>
<p>　　1. 使用UUID长命名(&quot;f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778&quot;) 　　2. 使用UUID短命令(&quot;f78375b1c487&quot;) 　　3. 使用Name(&quot;evil_ptolemy&quot;)</p>
<p>这个UUID标示是由Docker deamon来生成的。如果你在执行docker run时没有指定 --name，那么deamon会自动生成一个随机数字符串当做UUID。但是对于一个container来说有个name会非常方便，因为你可以当你需要link其它容器时或者其他类似需要区分其它容器时，使用容器名称会简化操作。无论container运行在前台或者后台，这个名字都是有效的。</p>
<h4>PID equivalent</h4>
<p>当你在运行docker时有自动化的要求，那么你可以要求Docker将containerID 输出到你指定的文件中(PIDfile).这种行为就类似于有些应用程序将自身ID输出到文件中，方便后续脚本操作。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--cidfile=<span class="string">""</span>: <span class="keyword">Write</span> the container ID to the <span class="keyword">file</span></div></pre></td></tr></table></figure></p>
<h4>Image[:tag]</h4>
<p>当一个image的名称不足以分辨这个image所代表的含义时，你可以在命令中通过添加<code>image[:tag]</code>来指定特定版本的image以运行容器。例如: <code>docker run ubuntu:14.04</code></p>
<h3>IPC Settings</h3>
<p>默认情况下，所有容器都开启了IPC命名空间。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--ipc=<span class="string">""</span>  : Set the IPC mode <span class="keyword">for</span> the container,</div><div class="line">            <span class="string">'container:&lt;name|id&gt;'</span>: reuses another containe<span class="string">r's IPC namespace</span></div><div class="line">            'host<span class="string">': use the host'</span>s IPC namespace inside the container</div></pre></td></tr></table></figure></p>
<p>IPC(POSIX/SysV IPC)命名空间提供了相互隔离的命名共享内存，信号灯变量和消息队列。</p>
<p>共享内存可以提高进程数据交互速度。共享内存一般用在database和高性能应用(C/OpenMPI, C++/using boost libraries)上或者金融服务上。如果需要容器里面部署上述类型的应用，那么就应该在多个容器直接采取共享内存了。</p>
<h3>Network settings</h3>
<p>默认情况下，所有的container都开启了网络接口，同时可以接受任何外部的数据请求。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--dns=[]         : Set custom dns servers <span class="keyword">for</span> the container</div><div class="line">--net=<span class="string">"bridge"</span>   : Set the Network mode <span class="keyword">for</span> the container</div><div class="line">                              <span class="string">'bridge'</span>: creates a new network stack <span class="keyword">for</span> the container on the docker bridge</div><div class="line">                              <span class="string">'none'</span>: no networking <span class="keyword">for</span> this container</div><div class="line">                              <span class="string">'container:&lt;name|id&gt;'</span>: reuses another container network stack</div><div class="line">                              <span class="string">'host'</span>: use the host network stack inside the container</div><div class="line">--add-host=<span class="string">""</span>    : Add a line to /etc/hosts (host:IP)</div><div class="line">--mac-address=<span class="string">""</span> : Sets the containe<span class="string">r's Ethernet device'</span>s MAC address</div></pre></td></tr></table></figure></p>
<p>可以通过docker run --net none 来关闭网络接口，此时将关闭所有网络数据的输入输出。这时，你只能通过STDIN,STDOUT或者files来完成I/O操作了。默认情况下，container使用host的DNS设置。但是你可以通过--dns来覆盖container内的dns设置。同时docker会对containter默认生成一个MAC地址，你可以通过--mac-address 12:34:56:78:9a:bc 来设置你自己的mac地址。</p>
<p>以下是网络设置中常用的参数：</p>
<pre><code>* none 关闭container内的网络连接
* bridge 通过veth接口来连接contianer 默认选项
* host 允许container使用host的网络堆栈信息。 注意：这种方式将允许container访问host中类似D-BUS之类的系统服务，所以被认为是不安全的。
* container 使用另外一个container的网络堆栈信息。</code></pre>
<h4>None：</h4>
<p>将网络模式设置为none时，这个container将不允许访问任何外部router。这个container内部只会有一个loopback接口，而且不存在任何可以访问外部网络的router。</p>
<h4>Bridge：</h4>
<p>Docker默认是将container设置为bridge模式。此时在host上面讲存在一个docker0的网络接口，同时会针对container创建一对veth接口。其中一个veth接口是在host充当网卡桥接作用，另外一个veth接口存在于container的命名空间中，并且指向container的loopback。Docker会自动给这个container分配一个IP，并且将container内的数据通过桥接转发到外部。</p>
<h4>Host：</h4>
<p>当网络模式设置为host时，这个container将完全共享host的网络堆栈。host所有的网络接口将完全对container开放。container的主机名也会存在于host的hostname中。这时，container所有对外暴露的port和对其它container的link，将完全失效。</p>
<h4>Container：</h4>
<p>当网络模式设置为Container时，这个container将完全复用另外一个container的网络堆栈。同时使用时这个container的名称必须要符合下面的格式：--net container:<name|id>.</name|id></p>
<p>比如当前有一个绑定了本地地址localhost的redis container。如果另外一个container需要复用这个网络堆栈，则需要如下操作：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -d <span class="comment">--name redis example/redis --bind 127.0.0.1</span></div><div class="line">$ # <span class="keyword">use</span> the redis container<span class="attribute">'s</span> network stack <span class="keyword">to</span> <span class="keyword">access</span> localhost</div><div class="line">$ sudo docker run <span class="comment">--rm -ti --net container:redis example/redis-cli -h 127.0.0.1</span></div></pre></td></tr></table></figure></p>
<h4>Managing /etc/hosts</h4>
<p>当一个container再启动时，在/etc/hosts文件里面将会存在包括localhost在内的一些hostname信息。我们也可以使用--add-host这个参数来动态添加/etc/hosts里面的数据。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ /docker run -ti --add-host db-<span class="keyword">static</span>:<span class="number">86.75</span>.<span class="number">30.9</span> ubuntu cat /etc/hosts</div><div class="line"><span class="number">172.17</span>.<span class="number">0.22</span>     <span class="number">09</span>d03f76bf2c</div><div class="line">fe00::<span class="number">0</span>         ip6-localnet</div><div class="line">ff00::<span class="number">0</span>         ip6-mcastprefix</div><div class="line">ff02::<span class="number">1</span>         ip6-allnodes</div><div class="line">ff02::<span class="number">2</span>         ip6-allrouters</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>       localhost</div><div class="line">::<span class="number">1</span>             localhost ip6-localhost ip6-loopback</div><div class="line"><span class="number">86.75</span>.<span class="number">30.9</span>      db-<span class="keyword">static</span></div></pre></td></tr></table></figure></p>
<h4>Clean up (--rm)</h4>
<p>默认情况下，每个container在退出时，它的文件系统也会保存下来。这样一方面调试会方便些，因为你可以通过查看日志等方式来确定最终状态。另外一方面，你也可以保存container所产生的数据。但是当你仅仅需要短期的运行一个前台container，这些数据同时不需要保留时。你可能就希望docker能在container结束时自动清理其所产生的数据。</p>
<p>这个时候你就需要--rm这个参数了。 注意：<em>--rm 和 -d不能共用！</em></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--rm=<span class="literal">false</span>: <span class="type">Automatically</span> remove the container <span class="keyword">when</span> it exits (incompatible <span class="keyword">with</span> -d)</div></pre></td></tr></table></figure></p>
<h3>Security configuration</h3>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:user:USER"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label user <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:role:ROLE"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label role <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:type:TYPE"</span>   <span class="symbol">:</span> <span class="constant">Set</span> the label type <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:level:LEVEL"</span> <span class="symbol">:</span> <span class="constant">Set</span> the label level <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-security-opt=<span class="string">"label:disable"</span>     <span class="symbol">:</span> <span class="constant">Turn</span> off label confinement <span class="keyword">for</span> the container</span></div><div class="line">-<span class="ruby">-secutity-opt=<span class="string">"apparmor:PROFILE"</span>  <span class="symbol">:</span> <span class="constant">Set</span> the apparmor profile to be applied  to the container</span></div></pre></td></tr></table></figure></p>
<p>你可以通过--security-opt修改container中默认的schema标签。比如说，对于一个MLS系统来说(MLS可能是指Multiple Listing System，本人不确定.)，你可以指定MCS/MLS级别。</p>
<p>下面的这些级别将允许多个container共享content。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:level</span><span class="pseudo">:s0</span><span class="pseudo">:c100</span>,<span class="tag">c200</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">fedora</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p>如果是MLS系统，则使用下面的命令：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:level</span><span class="pseudo">:TopSecret</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">rhel7</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p>使用下面的命令可以在container内禁用安全策略：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --security-<span class="keyword">opt</span> labe<span class="variable">l:disable</span> -<span class="keyword">i</span> -<span class="keyword">t</span> fedora bash</div></pre></td></tr></table></figure></p>
<p>如果你需要在container内执行更为严格的安全策略，那么你可以为这个container指定一个策略替代。比如你可以使用下面的命令来指定container只允许监听apache port</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">docker</span> <span class="tag">run</span> <span class="tag">--security-opt</span> <span class="tag">label</span><span class="pseudo">:type</span><span class="pseudo">:svirt_apache_t</span> <span class="tag">-i</span> <span class="tag">-t</span> <span class="tag">centos</span> <span class="tag">bash</span></div></pre></td></tr></table></figure></p>
<p><em>注意：此时，在你的host环境中必须存在一个名为svirt_apache_t的安全策略。</em></p>
<h3>Runtime constraints on CPU and memory</h3>
<p>下面的参数可以用来调整container内的性能参数。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">m=<span class="string">""</span><span class="symbol">:</span> <span class="constant">Memory</span> limit (<span class="symbol">format:</span> &lt;number&gt;&lt;optional unit&gt;, where unit = b, k, m <span class="keyword">or</span> g)</span></div><div class="line">-<span class="ruby">c=<span class="number">0</span> <span class="symbol">:</span> <span class="constant">CPU</span> shares (relative weight)</span></div></pre></td></tr></table></figure></p>
<p>通过docker run -m 可以很方便的调整container所使用的内存资源。如果host支持swap内存，那么使用-m可以设定比host物理内存还大的值。</p>
<p>同样，通过-c 可以调整container的cpu优先级。默认情况下，所有的container享有相同的cpu优先级和cpu调度周期。但你可以通过Docker来通知内核给予某个或某几个container更多的cpu计算周期。</p>
<p>默认情况下，使用-c或者--cpu-shares 参数值为0，可以赋予当前活动container 1024个cpu共享周期。这个0值可以针对活动的container进行修改来调整不同的cpu循环周期。</p>
<p>比如，我们使用-c或者--cpu-shares =0启动了C0，C1，C2三个container，使用-c/--cpu-shares=512启动了C3.这时，C0，C1，C2可以100%的使用CPU资源(1024)，但C3只能使用50%的CPU资源(512)。如果这个host的OS是时序调度类型的，每个CPU时间片是100微秒，那么C0，C1，C2将完全使用掉这100微秒，而C3只能使用50微秒。</p>
<h3>Runtime privilege, Linux capabilities, and LXC configuration</h3>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-cap-<span class="symbol">add:</span> <span class="constant">Add</span> <span class="constant">Linux</span> capabilities</span></div><div class="line">-<span class="ruby">-cap-<span class="symbol">drop:</span> <span class="constant">Drop</span> <span class="constant">Linux</span> capabilities</span></div><div class="line">-<span class="ruby">-privileged=<span class="symbol">false:</span> <span class="constant">Give</span> extended privileges to this container</span></div><div class="line">-<span class="ruby">-device=[]<span class="symbol">:</span> <span class="constant">Allows</span> you to run devices inside the container without the --privileged flag.</span></div><div class="line">-<span class="ruby">-lxc-conf=[]<span class="symbol">:</span> (lxc exec-driver only) <span class="constant">Add</span> custom lxc options --lxc-conf=<span class="string">"lxc.cgroup.cpuset.cpus = 0,1"</span></span></div></pre></td></tr></table></figure></p>
<p>默认情况下，Docker的container是没有特权的。例如不能再container里面再启动一个container。这是因为默认情况下container是不能访问任何其他设备的。但是通过&quot;privileged&quot;，container就拥有了访问任何其他设备的权限。</p>
<p>当操作者执行docker run --privileged时，Docker将拥有访问host所有设备的权限，同时Docker也会在apparmor或者selinux做一些设置，使container可以容易的访问那些运行在container外部的设备。你可以访问Docker blog来获取更多关于--privileged的用法。</p>
<p>同时，你也可以限制container只能访问一些指定的设备。下面的命令将允许container只访问一些特定设备：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --device=/dev/snd:/dev/snd <span class="keyword">...</span></div></pre></td></tr></table></figure></p>
<p>默认情况下，container拥有对设备的读，写，创建设备文件的权限。使用:rwm来配合--device，你可以控制这些权限。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"></div><div class="line"><span class="constant">Command</span> (m <span class="keyword">for</span> help)<span class="symbol">:</span> q</div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:r</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"><span class="constant">You</span> will <span class="keyword">not</span> be able to write the partition table.</div><div class="line"></div><div class="line"><span class="constant">Command</span> (m <span class="keyword">for</span> help)<span class="symbol">:</span> q</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:w</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line">    crash....</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo docker run --device=<span class="regexp">/dev/sda</span><span class="symbol">:/dev/xvdc</span><span class="symbol">:m</span> --rm -it ubuntu fdisk  /dev/xvdc</div><div class="line"><span class="symbol">fdisk:</span> unable to open /dev/<span class="symbol">xvdc:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div></pre></td></tr></table></figure></p>
<p>使用--cap-add和--cap-drop，配合--privileged，你可以更细致的控制container。默认使用这两个参数的情况下，container拥有一系列的内核修改权限。这两个参数都支持all值，如果你想让某个container拥有除了MKNOD之外的所有内核权限，那么可以执行下面的命令：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --cap-add=ALL --cap-drop=MKNOD <span class="keyword">...</span></div></pre></td></tr></table></figure></p>
<p>如果需要修改网络接口数据，那么就建议使用--cap-add=NET_ADMIN，而不是使用--privileged。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker run -t -i --rm  ubuntu:<span class="number">14.04</span> <span class="literal">ip</span> link <span class="keyword">add</span> dummy0 type dummy</div><div class="line">RTNETLINK answers: Operation <span class="keyword">not</span> permitted</div><div class="line">$ docker run -t -i --rm --cap-<span class="keyword">add</span>=NET_ADMIN ubuntu:<span class="number">14.04</span> <span class="literal">ip</span> link <span class="keyword">add</span> dummy0 type dummy</div></pre></td></tr></table></figure></p>
<p>如果要挂载一个FUSE文件系统，那么就需要--cap-add和--device了。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker run --rm -it --cap-add <span class="constant">SYS_ADMIN</span> sshfs sshfs sven<span class="variable">@10</span>.<span class="number">10.10</span>.<span class="number">20</span><span class="symbol">:/home/sven</span> /mnt</div><div class="line"><span class="symbol">fuse:</span> failed to open /dev/<span class="symbol">fuse:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div><div class="line"><span class="variable">$ </span>docker run --rm -it --device /dev/fuse sshfs sshfs sven<span class="variable">@10</span>.<span class="number">10.10</span>.<span class="number">20</span><span class="symbol">:/home/sven</span> /mnt</div><div class="line"><span class="symbol">fusermount:</span> mount <span class="symbol">failed:</span> <span class="constant">Operation</span> <span class="keyword">not</span> permitted</div><div class="line"><span class="variable">$ </span>docker run --rm -it --cap-add <span class="constant">SYS_ADMIN</span> --device /dev/fuse sshfs</div><div class="line"><span class="comment"># sshfs sven@10.10.10.20:/home/sven /mnt</span></div><div class="line"><span class="constant">The</span> authenticity of host <span class="string">'10.10.10.20 (10.10.10.20)'</span> can<span class="string">'t be established.</span></div><div class="line">ECDSA key fingerprint is 25:34:85:75:25:b0:17:46:05:19:04:93:b5:dd:5f:c6.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">sven@10.10.10.20's <span class="symbol">password:</span></div><div class="line">root<span class="variable">@30aa0cfaf1b5</span><span class="symbol">:/</span><span class="comment"># ls -la /mnt/src/docker</span></div><div class="line">total <span class="number">1516</span></div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span>08 .</div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">11</span><span class="symbol">:</span><span class="number">46</span> ..</div><div class="line">-rw-rw-r-- <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>     <span class="number">16</span> <span class="constant">Oct</span>  <span class="number">8</span> <span class="number">00</span><span class="symbol">:</span>09 .dockerignore</div><div class="line">-rwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>    <span class="number">464</span> <span class="constant">Oct</span>  <span class="number">8</span> <span class="number">00</span><span class="symbol">:</span>09 .drone.yml</div><div class="line">drwxrwxr-x <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>   <span class="number">4096</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span><span class="number">11</span> .git</div><div class="line">-rw-rw-r-- <span class="number">1</span> <span class="number">1000</span> <span class="number">1000</span>    <span class="number">461</span> <span class="constant">Dec</span>  <span class="number">4</span> <span class="number">06</span><span class="symbol">:</span>08 .gitignore</div></pre></td></tr></table></figure></p>
<p>如果docker启动时选择了lxc-driver，(docker -d --exec-driver=lxc)。那么就可以使用--lxc-conf来设定LXC参数。但需要注意的是，未来host上面的docker deamon有可能不会使用LXC，所以这些参数有可能会包含一些没有实现的配置功能。那么意味着，操作者在操作这些参数时必须要十分熟悉LXC。</p>
<p><em>特别注意：当你使用--lxc-conf修改container参数后，docker deamon将不再管理这些参数，那么必须由操作者自行进行管理。比如说，你使用--lxc-conf修改了container的IP地址，那么在/etc/hosts里面是不会自动体现的，需要你自行维护。</em></p>
<h3>Overriding Dockerfile image defaults</h3>
<p>当开发者使用Dockerfile进行build或者使用commit提交container时，开发人员可以设定一些image默认参数。</p>
<p>这些参数中，有四个是无法被覆盖的：FROM，MAINTAINER，RUN和ADD。其余参数都可以通过docker run进行覆盖。我们将介绍如何对这些参数进行覆盖。</p>
<pre><code>* CMD (Default Command or Options)
* ENTRYPOINT (Default Command to Execute at Runtime)
* EXPOSE (Incoming Ports)
* ENV (Environment Variables)
* VOLUME (Shared Filesystems)
* USER
* WORKDIR</code></pre>
<h4>CMD (default command or options)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="tag">sudo</span> <span class="tag">docker</span> <span class="tag">run</span> <span class="attr_selector">[OPTIONS]</span> <span class="tag">IMAGE</span><span class="attr_selector">[:TAG]</span> <span class="attr_selector">[COMMAND]</span> <span class="attr_selector">[ARG...]</span></div></pre></td></tr></table></figure></p>
<p>这条命令中的COMMAND部分是可选的。因为这个IMAGE在build时，开发人员可能已经设定了默认执行的command。作为操作人员，你可以使用上面命令中新的command来覆盖旧的command。</p>
<p>如果image中设定了ENTRYPOINT，那么命令中的CMD也可以作为参数追加到ENTRYPOINT中。</p>
<h4>ENTRYPOINT (default command to execute at runtime)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--entrypoint=<span class="string">""</span>: Overwrite the <span class="keyword">default</span> entrypoint <span class="keyword">set</span> <span class="keyword">by</span> the image</div></pre></td></tr></table></figure></p>
<p>这个ENTRYPOINT和COMMAND类似，它指定了当container执行时，需要启动哪些进程。相对COMMAND而言，ENTRYPOINT是比较困难进行覆盖的，这个ENTRYPOINT可以让container设定默认启动行为，所以当container启动时，你可以执行任何一个二进制可执行程序。你也可以通过COMMAND给这个ENTRYPOINT传递参数。但当你需要再container中执行其他进程时，你就可以指定其他ENTRYPOINT了。</p>
<p>下面就是一个例子，container可以在启动时自动执行shell，然后启动其它进程。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /bin/bash example/redis</span></div><div class="line">#<span class="keyword">or</span> two examples <span class="keyword">of</span> how <span class="keyword">to</span> pass more parameters <span class="keyword">to</span> that ENTRYPOINT:</div><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /bin/bash example/redis -c ls -l</span></div><div class="line">$ sudo docker run -i -t <span class="comment">--entrypoint /usr/bin/redis-cli example/redis --help</span></div></pre></td></tr></table></figure></p>
<h4>EXPOSE (incoming ports)</h4>
<p>Dockefile在网络方面除了提供一个EXPOSE之外，没有提供其它选项。下面这些参数可以覆盖Dockefile的expose默认值：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--expose=[]: Expose a port or a range of ports from the container</span></div><div class="line">            <span class="keyword">without</span> publishing <span class="keyword">it</span> <span class="built_in">to</span> your host</div><div class="line">-P=<span class="constant">false</span>   : Publish all exposed ports <span class="built_in">to</span> <span class="operator">the</span> host interfaces</div><div class="line">-p=[]      : Publish <span class="operator">a</span> container᾿s port <span class="built_in">to</span> <span class="operator">the</span> host (<span class="built_in">format</span>:</div><div class="line">             ip:hostPort:containerPort | ip::containerPort |</div><div class="line">             hostPort:containerPort | containerPort)</div><div class="line">             (use <span class="string">'docker port'</span> <span class="built_in">to</span> see <span class="operator">the</span> actual mapping)</div><div class="line"><span class="comment">--link=""  : Add link to another container (name:alias)</span></div></pre></td></tr></table></figure></p>
<p>--expose可以让container接受外部传入的数据。container内监听的port不需要和外部host的port相同。比如说在container内部，一个HTTP服务监听在80端口，对应外部host的port就可能是49880.</p>
<p>操作人员可以使用--expose，让新的container访问到这个container。具体有三个方式：</p>
<p>　　1. 使用-p来启动container。 　　2. 使用-P来启动container。 　　3. 使用--link来启动container。</p>
<p>如果使用-p或者-P，那么container会开发部分端口到host，只要对方可以连接到host，就可以连接到container内部。当使用-P时，docker会在host中随机从49153 和65535之间查找一个未被占用的端口绑定到container。你可以使用docker port来查找这个随机绑定端口。</p>
<p>当你使用--link方式时，作为客户端的container可以通过私有网络形式访问到这个container。同时Docker会在客户端的container中设定一些环境变量来记录绑定的IP和PORT。</p>
<h4>ENV (环境变量)</h4>
<table style="width:33%;">
<colgroup>
<col width="13%">
<col width="19%">
</colgroup>
<thead>
<tr class="header">
<th align="left">Variable</th>
<th align="left">Variable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">HOME</td>
<td align="left">Set based on the value of USER</td>
</tr>
<tr class="even">
<td align="left">HOSTNAME</td>
<td align="left">The hostname associated with the container</td>
</tr>
<tr class="odd">
<td align="left">PATH</td>
<td align="left">Includes popular directories, such as : /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</td>
</tr>
<tr class="even">
<td align="left">TERM</td>
<td align="left">xterm if the container is allocated a psuedo-TTY</td>
</tr>
</tbody>
</table>
<p>当container启动时，会自动在container中初始化这些变量。</p>
<p>操作人员可以通过-e来设定任意的环境变量。甚至覆盖已经存在的环境变量，或者是在Dockerfile中通过ENV设定的环境变量。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run <span class="operator">-e</span> <span class="string">"deep=purple"</span> --rm ubuntu /bin/bash -c <span class="keyword">export</span></div><div class="line"><span class="keyword">declare</span> -x HOME=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x HOSTNAME=<span class="string">"85bc26a0e200"</span></div><div class="line"><span class="keyword">declare</span> -x OLDPWD</div><div class="line"><span class="keyword">declare</span> -x PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line"><span class="keyword">declare</span> -x PWD=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x SHLVL=<span class="string">"1"</span></div><div class="line"><span class="keyword">declare</span> -x container=<span class="string">"lxc"</span></div><div class="line"><span class="keyword">declare</span> -x deep=<span class="string">"purple"</span></div></pre></td></tr></table></figure></p>
<p>操作人员可以通过-h来设定hostname。也可以使用&quot;--link name:alias&quot;来设定环境变量，当使用--link后，docker将根据后面提供的IP和PORT信息来连接服务端container。下面就是使用redis的例子：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># <span class="operator"><span class="keyword">Start</span> the service container, named redis-name</span></div><div class="line">$ sudo docker run -d <span class="comment">--name redis-name dockerfiles/redis</span></div><div class="line"><span class="number">4241164</span>edf6f5aca5b0e9e4c9eccd899b0b8080c64c0cd26efe02166c73208f3</div><div class="line"></div><div class="line"># The redis-name container exposed port <span class="number">6379</span></div><div class="line">$ sudo docker ps</div><div class="line">CONTAINER ID        IMAGE                      COMMAND                CREATED             <span class="keyword">STATUS</span>              PORTS               <span class="keyword">NAMES</span></div><div class="line"><span class="number">4241164</span>edf6f        $ dockerfiles/redis:latest   /redis-stable/src/re   <span class="number">5</span> seconds ago       Up <span class="number">4</span> seconds        <span class="number">6379</span>/tcp            redis-name</div><div class="line"></div><div class="line"># Note that there <span class="keyword">are</span> <span class="keyword">no</span> <span class="keyword">public</span> ports exposed since we didn᾿t <span class="keyword">use</span> -p <span class="keyword">or</span> -P</div><div class="line">$ sudo docker port <span class="number">4241164</span>edf6f <span class="number">6379</span></div><div class="line"><span class="number">2014</span>/<span class="number">01</span>/<span class="number">25</span> <span class="number">00</span>:<span class="number">55</span>:<span class="number">38</span> Error: <span class="keyword">No</span> <span class="keyword">public</span> port <span class="string">'6379'</span> published <span class="keyword">for</span> <span class="number">4241164</span>edf6f</div></pre></td></tr></table></figure></p>
<p>你使用--link后，就可以获取到关于Redis Container的相关信息。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run <span class="comment">--rm --link redis-name:redis_alias --entrypoint /bin/bash dockerfiles/redis -c export</span></div><div class="line"><span class="operator"><span class="keyword">declare</span> -x HOME=<span class="string">"/"</span></span></div><div class="line"><span class="keyword">declare</span> -x HOSTNAME=<span class="string">"acda7f7b1cdc"</span></div><div class="line"><span class="keyword">declare</span> -x OLDPWD</div><div class="line"><span class="keyword">declare</span> -x PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line"><span class="keyword">declare</span> -x PWD=<span class="string">"/"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_NAME=<span class="string">"/distracted_wright/redis"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT=<span class="string">"tcp://172.17.0.32:6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP=<span class="string">"tcp://172.17.0.32:6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_ADDR=<span class="string">"172.17.0.32"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_PORT=<span class="string">"6379"</span></div><div class="line"><span class="keyword">declare</span> -x REDIS_ALIAS_PORT_6379_TCP_PROTO=<span class="string">"tcp"</span></div><div class="line"><span class="keyword">declare</span> -x SHLVL=<span class="string">"1"</span></div><div class="line"><span class="keyword">declare</span> -x container=<span class="string">"lxc"</span></div><div class="line">#<span class="keyword">And</span> we can <span class="keyword">use</span> that information <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">from</span> another container <span class="keyword">as</span> a client:</div><div class="line">$ sudo docker run -i -t <span class="comment">--rm --link redis-name:redis_alias --entrypoint /bin/bash dockerfiles/redis -c '/redis-stable/src/redis-cli -h $REDIS_ALIAS_PORT_6379_TCP_ADDR -p $REDIS_ALIAS_PORT_6379_TCP_PORT'</span></div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.32</span>:<span class="number">6379</span>&gt;</div></pre></td></tr></table></figure></p>
<p>Docker也会将这个alias的IP地址写入到/etc/hosts文件中。然后你就可以通过别名来访问link后的container。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker <span class="command">run</span> -d <span class="comment">--name servicename busybox sleep 30</span></div><div class="line">$ sudo docker <span class="command">run</span> -i -t <span class="comment">--link servicename:servicealias busybox ping -c 1 servicealias</span></div></pre></td></tr></table></figure></p>
<p>如果你重启了源container(servicename)，相关联的container也会同步更新/etc/hosts。</p>
<h4>VOLUME (shared filesystems)</h4>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-v=[]: Create a bind mount <span class="keyword">with</span>: [host-dir]:[container-dir]:[rw|ro].</div><div class="line">       <span class="keyword">If</span> <span class="string">"container-dir"</span> <span class="keyword">is</span> missing, <span class="keyword">then</span> docker creates a <span class="keyword">new</span> volume.</div><div class="line">--volumes-<span class="keyword">from</span>=<span class="string">""</span>: Mount all volumes <span class="keyword">from</span> the given container(s)</div></pre></td></tr></table></figure></p>
<p>关于volume参数，可以再 Managing data in containers 查看详细说明。需要注意的是开发人员可以在Dockerfile中设定多个volume，但是只能由操作人员设置container直接的volume访问。</p>
<h4>USER</h4>
<p>container中默认的用户是root。但是开发人员创建新的用户之后，这些新用户也是可以使用的。开发人员可以通过Dockerfile的USER设定默认的用户，操作人员可以通过&quot;-u &quot;来覆盖这些参数。</p>
<h4>WORKDIR</h4>
<p>container中默认的工作目录是根目录(/)。开发人员可以通过Dockerfile的WORKDIR来设定默认工作目录，操作人员可以通过&quot;-w&quot;来覆盖默认的工作目录。</p>
<h2>docker create与docker run的区别</h2>
<p>docker create表示新增一个容器，但是并不启动；docker run表示新增一个容器，并启动运行，直到运行结束。参照容器的生命周期<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>，如下图，</p>
<p><img src="http://7xpbnt.com1.z0.glb.clouddn.com/docker-architecture-v12-15-638.jpg" alt=""></p>
<p>详细来说，docker create只是新增一个容器，并进入容器生命周期中的created状态；而docker run不但新增一个容器，还立刻start并进入running状态，如运行过程中没有被pause或者kill，会一直运行到程序结束，容器进入stopped状态。因此，docker create命令没有-d参数，而docker run有。在docker run中，-d参数表示后台运行容器，而对于docker create来讲，仅仅只创建了容器，容器并未开始运行，因此也不存在所谓后台运行的概念，因此，docker create没有-d参数。</p>
<h2>镜像与容器存放的路径</h2>
<p>镜像的存放路径可以看我的另一篇文章《Docker入门介绍》中有提到，在<code>/var/lib/docker</code>下。具体细节来说，一些镜像本身信息相关的文件放在<code>./graph</code>下，容器相关的设置，如一些网络（eg，ip、hostname、hosts等）、unix mq、unix共享内存等信息放在<code>./containers</code>下，镜像本身的文件和容器相关的文件都放在该目录下的<code>./aufs/diff</code>目录下。该目录下有很多以镜像id和容器id命名的目录，每个目录下都是镜像与容器本身的文件。</p>
<h2>常用docker命令实践</h2>
<p>由于docker需要使用root权限，以下命令如无特别说明，均使用root用户执行，运行环境是Ubuntu 14.04 LTS。</p>
<h3>搭建docker registry</h3>
<p>docker hub是最大的共有docker镜像仓库，但是对公司内部，往往需要自己的私有仓库，这就是docker registry<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>。搭建registry很简单，只要使用以下命令从docker hub上拉一个镜像下来即可，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">docker</span> <span class="tag">run</span> <span class="tag">-d</span> <span class="tag">-p</span> 5000<span class="pseudo">:5000</span> <span class="tag">--name</span> <span class="tag">registry</span> <span class="tag">registry</span><span class="pseudo">:2</span></div></pre></td></tr></table></figure></p>
<p>这样，就在本地的5000端口开了一个registry的服务，可以通过localhost、或本机ip来访问该服务。为了访问ip统一，可以通过修改hosts来达到访问一致，例如，在hosts中增加一行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&lt;docker registry ip&gt;</span>   reg-server</span></div></pre></td></tr></table></figure></p>
<p>还需要在docker的配置文件<code>/etc/default/docker</code>中添加参数<code>DOCKER_OPTS=&quot;--insecure-registry reg-server:5000&quot;</code>，本文使用的是Ubuntu，如果是Centos的话，需要修改<code>/etc/sysconfig/docker</code>。</p>
<p>这样，以后就可以通过访问<code>reg-server</code>来访问该registry，如果registry地址发生变化，也只需要修改hosts文件中的地址就能及时适配。registry的使用与docker hub类似，将在后文中介绍。</p>
<h3>下载镜像和运行容器</h3>
<p>假设我们要运行busybox这个镜像，这是一个最小linux环境的镜像，可以使用<code>docker pull</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker pull busybox</span></div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/busybox</div><div class="line">c00ef186408b: Pull complete </div><div class="line">ac6a7980c6c2: Pull complete </div><div class="line">Digest: sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> busybox:latest</div></pre></td></tr></table></figure></p>
<p>使用<code>docker pull</code>的时候，一个命令只能下载一个镜像，但是可以运行多个命令同时下载，这对于需要一次下载多个镜像的情况很有用。</p>
<p>简单的运行其中的某个命令，只要使用<code>docker run</code>即可，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=<span class="number">0</span>ac2c8dee5a9</div><div class="line">HOME=/root</div></pre></td></tr></table></figure></p>
<p>如果需要后台运行的话，可以使用<code>-d</code>参数，其他<code>docker run</code>的参数可参考上文。</p>
<h3>镜像和容器维护</h3>
<p>假设当前系统中下载了多个镜像，可以用<code>docker image</code>查看现有镜像，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox             latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>这里只列出了最上层的镜像，如果需要查看所有镜像的话，需要<code>-a</code>参数；如果需要查看完整镜像id，需要<code>--no-trunc=true</code>参数；如果只列出镜像id，其他信息不列出的话，需要使用<code>-q</code>参数。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images -a -q --no-trunc=true |wc -l</span></div><div class="line"><span class="number">66</span></div><div class="line"></div><div class="line"><span class="comment"># docker images -q --no-trunc=true </span></div><div class="line">a07681abeb6<span class="built_in">cd</span>68402477f783d994145137146de3911e42b99f605cecb3e138e</div><div class="line"><span class="number">5328</span>fdfe9b8e0c5a19a0773f3e29f9002d444f86521f8f61f3fcb8216ad5287a</div><div class="line">af28fa31b54b2e45d53e80c5a7cbfd2693f198fdb8ba53d44d8a432832ad1012</div><div class="line">ac6a7980c6c2fb4d29e406efb4f9784b3c67e161eb68a97ffb428d07e3e97693</div><div class="line"><span class="number">0643</span>f0c7d17d348881b2dab88cfdb57ad86dcf32ea22bd0b2<span class="built_in">cd</span>0957b6c7ab8c3</div><div class="line"><span class="number">975</span>b84d108f1024953937167506c2935a081c8c55ae9e9f7b7deee118605367f</div></pre></td></tr></table></figure></p>
<p>如果需要列出容器，可以使用<code>docker ps</code>，默认情况下列出正在运行的容器。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run -d redis redis-server</span></div><div class="line"><span class="number">7</span>d57630f67d10346b2583e7950ce7c55a4225475c5d5a0265682aad83611946d</div><div class="line"></div><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">11</span> seconds ago      Up <span class="number">10</span> seconds       <span class="number">6379</span>/tcp            small_torvalds</div></pre></td></tr></table></figure></p>
<p><code>-a</code>参数可以列出所有容器，包括已退出运行的容器；<code>-s</code>参数可以列出容器的大小，比较有用；<code>--before=</code>和<code>--since=</code>参数可以列出在某个容器之前和之后运行的容器，参数值是容器id。<code>docker ps</code>也有<code>-q</code>和<code>--no-trunc=true</code>参数，含义与<code>docker images</code>的相同。具体细节如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a -s</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES                SIZE</div><div class="line"><span class="number">800</span>f0acc667c        tomcat              <span class="string">"java -version"</span>          <span class="number">35</span> seconds ago      Exited (<span class="number">0</span>) <span class="number">34</span> seconds ago                       tender_mietner       <span class="number">0</span> B (virtual <span class="number">346.2</span> MB)</div><div class="line"><span class="number">39</span>ea34d89ea3        hello-world         <span class="string">"/hello"</span>                 <span class="number">2</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">2</span> minutes ago                        agitated_blackwell   <span class="number">0</span> B (virtual <span class="number">972</span> B)</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">28</span> minutes ago      Up <span class="number">28</span> minutes               <span class="number">6379</span>/tcp            small_torvalds       <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div><div class="line"><span class="number">0</span>ac2c8dee5a9        busybox             <span class="string">"env"</span>                    <span class="number">52</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">52</span> minutes ago                       cocky_ritchie        <span class="number">0</span> B (virtual <span class="number">1.113</span> MB)</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a -s --before=800f0acc667c --since=0ac2c8dee5a9</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES                SIZE</div><div class="line"><span class="number">39</span>ea34d89ea3        hello-world         <span class="string">"/hello"</span>                 <span class="number">3</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">3</span> minutes ago                       agitated_blackwell   <span class="number">0</span> B (virtual <span class="number">972</span> B)</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">28</span> minutes ago      Up <span class="number">28</span> minutes              <span class="number">6379</span>/tcp            small_torvalds       <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div></pre></td></tr></table></figure></p>
<p>如果想删除容器，可以使用<code>docker rm</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker rm 800f0acc667c 39ea34d89ea3</span></div><div class="line"><span class="number">800</span>f0acc667c</div><div class="line"><span class="number">39</span>ea34d89ea3</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a -s</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES               SIZE</div><div class="line"><span class="number">7</span>d57630f67d1        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">29</span> minutes ago      Up <span class="number">29</span> minutes               <span class="number">6379</span>/tcp            small_torvalds      <span class="number">0</span> B (virtual <span class="number">107.5</span> MB)</div><div class="line"><span class="number">0</span>ac2c8dee5a9        busybox             <span class="string">"env"</span>                    <span class="number">54</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">54</span> minutes ago                       cocky_ritchie       <span class="number">0</span> B (virtual <span class="number">1.113</span> MB)</div></pre></td></tr></table></figure></p>
<p><code>-f</code>参数可以强行删除容器，即使容器在运行。<code>docker rm</code>可以一次输入多个容器id，删除多个容器。</p>
<p>如果需要删除容器，可以使用<code>docker rmi</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker rmi busybox</span></div><div class="line">Error response from daemon: conflict: unable to remove repository reference <span class="string">"busybox"</span> (must force) - container <span class="number">0</span>ac2c8dee5a9 is using its referenced image ac6a7980c6c2</div><div class="line">Error: failed to remove images: [busybox]</div><div class="line"></div><div class="line"><span class="comment"># docker rm 0ac2c8dee5a9</span></div><div class="line"><span class="number">0</span>ac2c8dee5a9</div><div class="line"></div><div class="line"><span class="comment"># docker rmi busybox</span></div><div class="line">Untagged: busybox:latest</div><div class="line">Deleted: ac6a7980c6c2fb4d29e406efb4f9784b3c67e161eb68a97ffb428d07e3e97693</div><div class="line">Deleted: c00ef186408b85d9657e8241f53ccd1e7071f03b3d4b38863b2cdae88845b587</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：删除容器前，需要先删除所有的镜像，即使该镜像状态是已退出。强制删除，需要使用<code>-f</code>参数，不推荐。</p>
</blockquote>
<h3>容器操作</h3>
<p>多数情况下，我们使用<code>docker run</code>就可以运行一个容器。但是如果希望对容器生命周期加以更细节的控制，可以使用更多的命令。</p>
<table>
<thead>
<tr class="header">
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>docker create</code></td>
<td align="left">创建容器</td>
</tr>
<tr class="even">
<td align="left"><code>docker start</code></td>
<td align="left">启动容器</td>
</tr>
<tr class="odd">
<td align="left"><code>docker stop</code></td>
<td align="left">停止容器</td>
</tr>
<tr class="even">
<td align="left"><code>docker restart</code></td>
<td align="left">重启容器</td>
</tr>
<tr class="odd">
<td align="left"><code>docker kill</code></td>
<td align="left">杀死容器进程</td>
</tr>
<tr class="even">
<td align="left"><code>docker pause</code></td>
<td align="left">暂停容器进程</td>
</tr>
<tr class="odd">
<td align="left"><code>docker unpause</code></td>
<td align="left">回复重启进程</td>
</tr>
</tbody>
</table>
<p>命令如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker create nginx</span></div><div class="line"><span class="number">427</span>bb755b40aa50c8506862867b41f444e2fd317aac70a3336740d7f8f423e77</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">3</span> seconds ago       Created                                 modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker start 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">18</span> seconds ago      Up <span class="number">6</span> seconds        <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker pause 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">29</span> seconds ago      Up <span class="number">16</span> seconds (Paused)   <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker unpause 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">42</span> seconds ago      Up <span class="number">30</span> seconds       <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker stop 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                     PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   About a minute ago   Exited (<span class="number">0</span>) <span class="number">3</span> seconds ago                       modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker restart 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   About a minute ago   Up <span class="number">1</span> seconds        <span class="number">80</span>/tcp, <span class="number">443</span>/tcp     modest_allen</div><div class="line"></div><div class="line"><span class="comment"># docker kill 427bb755b40a</span></div><div class="line"><span class="number">427</span>bb755b40a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS               NAMES</div><div class="line"><span class="number">427</span>bb755b40a        nginx               <span class="string">"nginx -g 'daemon off"</span>   <span class="number">2</span> minutes ago       Exited (<span class="number">137</span>) <span class="number">2</span> seconds ago                       modest_allen</div></pre></td></tr></table></figure></p>
<p>以上操作的顺序是：create-&gt;start-&gt;pause-&gt;unpause-&gt;stop-&gt;restart-&gt;kill。注意每个操作完成之后，容器的status，主要有以下几个：</p>
<table>
<thead>
<tr class="header">
<th align="left">状态</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Created</td>
<td align="left">容器已创建，尚未运行</td>
</tr>
<tr class="even">
<td align="left">Running（显示为 Up X seconds）</td>
<td align="left">容器运行中</td>
</tr>
<tr class="odd">
<td align="left">Paused</td>
<td align="left">容器已暂停</td>
</tr>
<tr class="even">
<td align="left">Stopped（显示为 Exited X seconds ago ）</td>
<td align="left">容器已退出运行</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意，使用stop和kill两者均能够退出容器，退出容器的区别在于，stop是正常退出，退出的返回码是0；kill是强行退出，退出的返回码是一个异常编号。</p>
</blockquote>
<h3>修改和提交镜像</h3>
<p>由于提交docker hub比较慢，本文都以提交到私有的docker registry为例，即前文的reg-server。</p>
<p>对于需要修改的镜像，建议先标记tag，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql               latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx               latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat              latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox             latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis               latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world         latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker tag tomcat reg-server:5000/my-tomcat</span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>tag是个很有用的命令，可以用于标记一个本地镜像（通常是即将要修改的），也可以将一个镜像归类到另一个仓库。上述命令就将tomcat镜像归类到reg-server中，并重命名为my-tomcat。注意，虽然tag重新标记了一个镜像，但是这个镜像的id并没有改变，因为镜像的id本质上是一个类似与镜像hash值的概念，只要镜像本身没有发生变化，镜像id就不会变。</p>
<p>删除tag与删除镜像一样，使用<code>docker rmi</code>，在此不再赘述。</p>
<p>修改镜像的方法有多种，可以挂载外部的目录到镜像的<code>/mnt</code>上来替换文件，也可以直接修改，本文采用直接修改的方式，比较简单。假设我们希望增加一个脚本<code>bin/datehost.sh</code>，打印当前的时间和hostname。可以如下操作，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run -it  reg-server:5000/my-tomcat /bin/bash</span></div><div class="line">root@<span class="number">3</span>fa12ef20974:/usr/local/tomcat<span class="comment"># echo "echo \"\`date\` @ \`hostname\`\"" &gt; bin/datehost.sh</span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># chmod +x bin/datehost.sh </span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># ls -al bin/datehost.sh </span></div><div class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">27</span> Dec <span class="number">20</span> <span class="number">05</span>:<span class="number">34</span> bin/datehost.sh</div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># more bin/datehost.sh </span></div><div class="line"><span class="built_in">echo</span> <span class="string">"`date` @ `hostname`"</span></div><div class="line">root@eb95d2ffe224:/usr/local/tomcat<span class="comment"># exit</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.104</span> <span class="number">13</span>:<span class="number">35</span>:<span class="number">51</span> /var/lib/docker</div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS                     PORTS               NAMES</div><div class="line">eb95d2ffe224        reg-server:<span class="number">5000</span>/my-tomcat   <span class="string">"/bin/bash"</span>         <span class="number">2</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">6</span> seconds ago                       insane_bhabha</div><div class="line"></div><div class="line"><span class="comment"># docker commit -m "add datehost.sh" eb95d2ffe224 reg-server:5000/my-tomcat</span></div><div class="line"><span class="number">1</span>a4f794fa3d4e507bc81c77d9daab4746f9d3eb51b06aaf6afbe55823ce4668c</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">11</span> seconds ago      <span class="number">350.1</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>到这里可以发现，my-tomcat镜像已经被修改，其镜像id值已经和原先不再一样。运行一下可以发现改动已经生效，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run reg-server:5000/my-tomcat bash bin/datehost.sh</span></div><div class="line">Sun Dec <span class="number">20</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">57</span> UTC <span class="number">2015</span> @ <span class="number">0</span>e903602b939</div></pre></td></tr></table></figure></p>
<p>修改完成之后，可以将修改后的镜像push到服务器上，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker push reg-server:5000/my-tomcat</span></div><div class="line">The push refers to a repository [reg-server:<span class="number">5000</span>/my-tomcat] (len: <span class="number">1</span>)</div><div class="line"><span class="number">1</span>a4f794fa3d4: Pushed </div><div class="line">af28fa31b54b: Pushed </div><div class="line"><span class="number">7</span>a2b734804b7: Pushed </div><div class="line">e6c09147e1be: Pushed </div><div class="line"><span class="number">1945</span>b5ae9698: Pushed </div><div class="line"><span class="number">5</span>effacac81b9: Pushed </div><div class="line"><span class="number">0</span>a769fec47c8: Pushed </div><div class="line"><span class="number">5</span>e5f21412e19: Pushed </div><div class="line"><span class="number">9</span>ee13ca3b908: Pushed </div><div class="line">latest: digest: sha256:<span class="number">3</span>f4bc8f312bf0113c8867b8c095f7e6a4420f654e95d93559d8215c838491cb9 size: <span class="number">37164</span></div></pre></td></tr></table></figure></p>
<p>之后，可以和正常使用其他容器一样使用my-tomcat。</p>
<h3>查找镜像</h3>
<p>如果是在docker hub上查询，可以直接使用docker search，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker search redis</span></div><div class="line">NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">redis                     Redis is an open <span class="built_in">source</span> key-value store th...   <span class="number">1420</span>      [OK]       </div><div class="line">torusware/speedus-redis   Always updated official Redis docker image...   <span class="number">27</span>                   [OK]</div><div class="line">sameersbn/redis                                                           <span class="number">20</span>                   [OK]</div><div class="line">bitnami/redis             Bitnami Redis Docker Image                      <span class="number">9</span>                    [OK]</div><div class="line">orchardup/redis           https://github.com/orchardup/docker-redis       <span class="number">6</span>                    [OK]</div><div class="line">williamyeh/redis          Redis image <span class="keyword">for</span> Docker                          <span class="number">3</span>                    [OK]</div><div class="line">webhippie/redis           Docker images <span class="keyword">for</span> redis                         <span class="number">2</span>                    [OK]</div><div class="line">anapsix/redis             <span class="number">11</span>MB Redis server image over AlpineLinux        <span class="number">2</span>                    [OK]</div><div class="line">clue/redis-benchmark      A minimal docker image to ease running the...   <span class="number">2</span>                    [OK]</div><div class="line">unblibraries/redis        Leverages phusion/baseimage to deploy a ba...   <span class="number">1</span>                    [OK]</div><div class="line">wasabeef/redis            Install latest redis-server                     <span class="number">1</span>                    [OK]</div><div class="line">clue/php-redis-server     The php-redis-server is a pure PHP impleme...   <span class="number">1</span>                    [OK]</div><div class="line">kampka/redis              A Redis image build from <span class="built_in">source</span> on top of ...   <span class="number">1</span>                    [OK]</div><div class="line">greytip/redis             redis <span class="number">3.0</span>.<span class="number">3</span>                                     <span class="number">1</span>                    [OK]</div><div class="line">nicescale/redis           Redis services <span class="keyword">in</span> NiceScale Platform, you ...   <span class="number">1</span>                    [OK]</div><div class="line">nanobox/redis             Redis service <span class="keyword">for</span> nanobox.io                    <span class="number">0</span>                    [OK]</div><div class="line">yfix/redis                Yfix docker redis                               <span class="number">0</span>                    [OK]</div><div class="line">trelllis/redis            Redis Replication                               <span class="number">0</span>                    [OK]</div><div class="line">frodenas/redis            A Docker Image <span class="keyword">for</span> Redis                        <span class="number">0</span>                    [OK]</div><div class="line">appelgriebsch/redis       Configurable redis container based on Alpi...   <span class="number">0</span>                    [OK]</div><div class="line">rounds/<span class="number">10</span>m-redis          redis <span class="keyword">for</span> hubot brain                           <span class="number">0</span>                    [OK]</div><div class="line">envygeeks/redis           A tiny Redis image on Alpine Linux.             <span class="number">0</span>                    [OK]</div><div class="line">khipu/redis               customized redis                                <span class="number">0</span>                    [OK]</div><div class="line">fulbito/redis             redis                                           <span class="number">0</span>                    [OK]</div><div class="line">steeeveen/redis           Redis server configured <span class="keyword">for</span> migration           <span class="number">0</span>                    [OK]</div></pre></td></tr></table></figure></p>
<p>如果是查找registry上的镜像，可以使用以下命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="array"># curl </span>-XGET http:<span class="comment">//reg-server:5000/v2/_catalog</span></div><div class="line">{<span class="string">"repositories"</span>:[<span class="string">"my-hello-world"</span>,<span class="string">"my-tomcat"</span>]}</div></pre></td></tr></table></figure></p>
<p>可以看到，这里有刚才push到服务器上的my-tomcat。查看单个镜像可以用这个命令，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="array"># curl </span>-XGET http:<span class="comment">//reg-server:5000/v2/my-tomcat/tags/list</span></div><div class="line">{<span class="string">"name"</span>:<span class="string">"my-tomcat"</span>,<span class="string">"tags"</span>:[<span class="string">"latest"</span>]}</div></pre></td></tr></table></figure></p>
<h3>镜像和容器的导入和导出</h3>
<p>镜像导出和导入，可以使用<code>docker save</code>和<code>docker load</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker tag mysql test-mysql</span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">27</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker save -o test-mysql.tar test-mysql</span></div><div class="line"></div><div class="line"><span class="comment"># docker rmi test-mysql</span></div><div class="line">Untagged: test-mysql:latest</div><div class="line"></div><div class="line"><span class="comment"># docker images </span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">29</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># docker load --input test-mysql.tar </span></div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">30</span> minutes ago      <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago          <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago          <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago         <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago         <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago         <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago         <span class="number">960</span> B</div></pre></td></tr></table></figure></p>
<p>以上命令中，<code>docker load --input test-mysql.tar</code>也可以用<code>docker load &lt; test-mysql.tar</code>替换。</p>
<p>容器导出并导入镜像，可以使用<code>docker export</code>和<code>docker import</code>，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.103</span> <span class="number">13</span>:<span class="number">52</span>:<span class="number">34</span> /var/lib/docker/aufs</div><div class="line"><span class="comment"># docker run -d -e MYSQL_ROOT_PASSWORD=111111 mysql</span></div><div class="line">f89fbfefb0ed4d23251766a4b9906175d01c767e41bf6056f6eb0d76f591774f</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                      PORTS               NAMES</div><div class="line">f89fbfefb0ed        mysql                       <span class="string">"/entrypoint.sh mysql"</span>   <span class="number">8</span> seconds ago       Up <span class="number">7</span> seconds                <span class="number">3306</span>/tcp            happy_mcnulty</div><div class="line"></div><div class="line"><span class="comment"># docker export f89fbfefb0ed &gt; mysql-container.tar</span></div><div class="line"></div><div class="line"><span class="comment"># cat mysql-container.tar | docker import - test-mysql-container</span></div><div class="line"><span class="number">59</span>d9e79d5010c22648585a3a41d5d0ee6889c0e3b92e866b0dafc99dd6aaa930</div><div class="line"></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</div><div class="line">test-mysql-container        latest              <span class="number">59</span>d9e79d5010        About a minute ago   <span class="number">358.4</span> MB</div><div class="line">reg-server:<span class="number">5000</span>/my-tomcat   latest              <span class="number">1</span>a4f794fa3d4        <span class="number">56</span> minutes ago       <span class="number">350.1</span> MB</div><div class="line">test-mysql                  latest              a07681abeb6c        <span class="number">3</span> days ago           <span class="number">360.3</span> MB</div><div class="line">mysql                       latest              a07681abeb6c        <span class="number">3</span> days ago           <span class="number">360.3</span> MB</div><div class="line">nginx                       latest              <span class="number">5328</span>fdfe9b8e        <span class="number">3</span> days ago           <span class="number">133.9</span> MB</div><div class="line">tomcat                      latest              af28fa31b54b        <span class="number">11</span> days ago          <span class="number">350.1</span> MB</div><div class="line">busybox                     latest              ac6a7980c6c2        <span class="number">11</span> days ago          <span class="number">1.113</span> MB</div><div class="line">redis                       latest              <span class="number">0643</span>f0c7d17d        <span class="number">2</span> weeks ago          <span class="number">109.2</span> MB</div><div class="line">hello-world                 latest              <span class="number">975</span>b84d108f1        <span class="number">9</span> weeks ago          <span class="number">960</span> B</div><div class="line"></div><div class="line"><span class="comment"># ls -l *mysql* </span></div><div class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">365428736</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">14</span>:<span class="number">15</span> mysql-container.tar</div><div class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">367499776</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">14</span>:<span class="number">06</span> test-mysql.tar</div></pre></td></tr></table></figure></p>
<p>可以发现导入后的test-mysql的镜像id与原先不同，而且两种导出方法导出的文件大小也不一样，容器导出方式产生的文件更小一些。</p>
<h3>其他命令</h3>
<p><code>docker history</code>可以用来查看镜像的创建历史，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker history test-mysql</span></div><div class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</div><div class="line">a07681abeb6c        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) CMD ["mysqld"]                0 B                 </span></div><div class="line"><span class="number">2</span>a044f65c047        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) EXPOSE 3306/tcp               0 B                 </span></div><div class="line"><span class="number">0</span>e44274c48b8        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) ENTRYPOINT &{["/entrypoint.   0 B                 </span></div><div class="line"><span class="number">993</span>a9b023e8d        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) COPY file:64d55f44397821c7f   3.046 kB            </span></div><div class="line">e8dd98df99bf        <span class="number">3</span> days ago          /bin/sh -c <span class="comment">#(nop) VOLUME [/var/lib/mysql]       0 B                 </span></div><div class="line">ccb812e818f0        <span class="number">3</span> days ago          /bin/sh -c sed -Ei <span class="string">'s/^(bind-address|log)/#&/   1.771 kB            </span></div><div class="line">ba90d2543c21        3 days ago          /bin/sh -c {   echo mysql-community-server my   202 MB              </div><div class="line">040e89b06cd2        3 days ago          /bin/sh -c echo "deb http://repo.mysql.com/ap   55 B                </div><div class="line">7aa0121e10fe        3 days ago          /bin/sh -c #(nop) ENV MYSQL_VERSION=5.7.10-1d   0 B                 </div><div class="line">a61429b086f9        2 weeks ago         /bin/sh -c #(nop) ENV MYSQL_MAJOR=5.7           0 B                 </div><div class="line">0d5f060b62c4        2 weeks ago         /bin/sh -c apt-key adv --keyserver ha.pool.sk   20.52 kB            </div><div class="line">1b0e180fd8fa        2 weeks ago         /bin/sh -c apt-get update && apt-get install    32.87 MB            </div><div class="line">e3a6552a83c2        2 weeks ago         /bin/sh -c mkdir /docker-entrypoint-initdb.d    0 B                 </div><div class="line">410c2fae2283        2 weeks ago         /bin/sh -c groupadd -r mysql && useradd -r -g   330.4 kB            </div><div class="line">8b9a99209d5c        2 weeks ago         /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B                 </div><div class="line">6d1ae97ee388        2 weeks ago         /bin/sh -c #(nop) ADD file:863d6edd178364362a   125.1 MB            </div><div class="line"></div><div class="line"># docker history test-mysql-container</div><div class="line">IMAGE               CREATED             CREATED BY          SIZE                COMMENT</div><div class="line">59d9e79d5010        2 minutes ago                           358.4 MB            Imported from -</div></pre></td></tr></table></figure></p>
<p>由此可以看出，采用镜像导出的方式，导出过程中丢失了每一层的信息，而是把所有层合并到一层里面，也因此，导出文件略小。</p>
<p><code>docker top</code>可以查看一个容器正在运行的进程，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d redis redis-server</span></div><div class="line"><span class="number">5</span>adefd06e5cc4434674618948e144c202b6a3560550ab42b3a44516994a99a38</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</div><div class="line"><span class="number">5</span>adefd06e5cc        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">9</span> seconds ago       Up <span class="number">8</span> seconds                <span class="number">6379</span>/tcp            sleepy_poitras</div><div class="line"></div><div class="line"><span class="comment"># docker top 5adefd06e5cc</span></div><div class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</div><div class="line"><span class="number">999</span>                 <span class="number">18602</span>               <span class="number">6097</span>                <span class="number">0</span>                   <span class="number">14</span>:<span class="number">39</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            redis-server *:<span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p><code>docker inspect</code>可以查看镜像或者容器的参数，返回json格式。查看镜像的时候，与镜像本身的json文件信息一致；查看容器的时候，更多是一些运行时的参数。输出比较长，在此不列出。</p>
<p><code>docker logs</code>可以查看容器运行时的输出日志，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">5</span>adefd06e5cc        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">7</span> minutes ago       Up <span class="number">7</span> minutes        <span class="number">6379</span>/tcp            sleepy_poitras</div><div class="line"></div><div class="line">root@Ubuntu-Asus <span class="number">192.168</span>.<span class="number">2.103</span> <span class="number">14</span>:<span class="number">46</span>:<span class="number">12</span> ~</div><div class="line"><span class="comment"># docker logs -f --tail 10 5adefd06e5cc</span></div><div class="line">  `-._    `-._`-.__.-<span class="string">'_.-'</span>    _.-<span class="string">'                                   </span></div><div class="line">      `-._    `-.__.-'    _.-<span class="string">'                                       </span></div><div class="line">          `-._        _.-'                                           </div><div class="line">              `-.__.-<span class="string">'                                               </span></div><div class="line"></div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</div><div class="line">1:M 20 Dec 06:39:11.737 # Server started, Redis version 3.0.5</div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = <span class="number">1</span><span class="string">' to /etc/sysctl.conf and then reboot or run the command '</span>sysctl vm.overcommit_memory=<span class="number">1</span><span class="string">' for this to take effect.</span></div><div class="line">1:M 20 Dec 06:39:11.737 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command '<span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled<span class="string">' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></div><div class="line">1:M 20 Dec 06:39:11.737 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure></p>
<p>其中，<code>-f</code>参数表示以阻塞的方式跟踪输出日志，与linux中tail命令的-f参数含义相似；<code>--tail n</code>表示打印最后n行log。</p>
<h3><code>docker run</code> 命令</h3>
<p><code>docker run</code>应该是使用最多，参数也最多的docker命令了，以下介绍其中部分参数。</p>
<p><code>-d</code>参数，表示后台运行，默认情况下docker是前台运行的，多数情况下，如果启动的是一个服务进程，我们会使用这个参数。上文已经有很多示例，在此不再举例。</p>
<p><code>-i</code>和<code>-t</code>参数，<code>-t</code>选项让Docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上，<code>-i</code>则让容器的标准输入保持打开。也就是说，如果要使用和用户有交互的命令，比如bash，那么需要两个选项都打开；如果只是系统自己运行，不需要与外界有输入，那么两个选项都不需要打开；如果是使用类似管道的方式进行交互，那么可以不需要<code>-t</code>选项，但是需要<code>-i</code>选项。如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo test | docker run busybox cat</span></div><div class="line"></div><div class="line"><span class="comment"># echo test | docker run -i busybox cat</span></div><div class="line">test</div></pre></td></tr></table></figure></p>
<p><code>--name</code>参数，可以为容器命名，如下例，注意<code>docker ps -a</code>的最后一列，已经是我们指定的名字，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d --name my-redis-node redis redis-server </span></div><div class="line"><span class="number">8</span>e0cbe8ea2877c0b68d9792804a6b64d5e13105596fae71090c3095393fcf66a</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">8</span>e0cbe8ea287        redis               <span class="string">"/entrypoint.sh redis"</span>   <span class="number">5</span> seconds ago       Up <span class="number">4</span> seconds        <span class="number">6379</span>/tcp            my-redis-node</div></pre></td></tr></table></figure></p>
<p><code>-p</code>参数，可以将容器内部的端口映射到宿主机器，可以使用多个<code>-p</code>参数完成多个端口映射。之前启动服务的时候，只是用来演示docker，并没有配这一项，其实这项是非常重要的，因为如果不将端口映射到宿主机器的话，容器内的服务对容器之外的进程都是不可见的。如下例，完成端口映射之后，可以使用宿主机上的redis client访问redis容器，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d -p 16379:6379 redis redis-server </span></div><div class="line">c925ce0df258fe4b36c5295eda2a2f798bc6cde48deff73e81c0238e456c0f0c</div><div class="line"></div><div class="line"><span class="comment"># telnet localhost 16379</span></div><div class="line">Trying <span class="number">127.0</span>.<span class="number">0.1</span>...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line">^]</div><div class="line"></div><div class="line">$ ./redis-cli -p <span class="number">16379</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16379</span>&gt; scan <span class="number">0</span> count <span class="number">100</span></div><div class="line"><span class="number">1</span>) <span class="string">"0"</span></div><div class="line"><span class="number">2</span>) (empty list or <span class="keyword">set</span>)</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16379</span>&gt;</div></pre></td></tr></table></figure></p>
<p><code>-e</code>参数，可以增加和修改环境变量，可以使用多个<code>-e</code>参数完成多个环境变量的增加修改。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=f405a1d5be32</div><div class="line">HOME=/root</div><div class="line"></div><div class="line"><span class="comment"># docker run -e "MYENV=test" -e "HOSTNAME=my-host" busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=my-host</div><div class="line">MYENV=test</div><div class="line">HOME=/root</div></pre></td></tr></table></figure></p>
<p><code>-c</code>和<code>-m</code>参数，分别用来表示cpu和内存的使用限制。<code>-c</code>表示容器间使用cpu的优先级，默认使用100%cpu，总的cpu分成1024份，-c参数如果设置为512，那么容器只能使用50%的cpu资源。<code>-m</code>参数表示使用内存的上限，<code>-m=256m</code>表示使用内存上限是256mb。如果想限制使用cpu百分比的上限，可以使用<code>--cpu-quota=0</code>参数。</p>
<p><code>--rm</code>参数，表示运行容器结束后，删除该容器。之前没有使用这个参数，在容器运行之后，<code>docker ps -a</code>还可以看到这个容器；使用之后，容器被删除，<code>docker ps -a</code>将看不到这个容器。相当与程序中的临时变量的概念。如下例，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"></div><div class="line"><span class="comment"># docker run --rm busybox env</span></div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">HOSTNAME=a804e934d55f</div><div class="line">HOME=/root</div><div class="line"></div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div></pre></td></tr></table></figure></p>
<p>以上是<code>docker run</code>的主要参数，还有其他很多参数，在此不一一列举。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.server110.com/docker/201411/11122.html" class="uri" target="_blank" rel="external">http://www.server110.com/docker/201411/11122.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.bubuko.com/infodetail-1027194.html" class="uri" target="_blank" rel="external">http://www.bubuko.com/infodetail-1027194.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.open-open.com/lib/view/open1422492851548.html" class="uri" target="_blank" rel="external">http://www.open-open.com/lib/view/open1422492851548.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://docs.docker.com/engine/reference/run/" class="uri" target="_blank" rel="external">https://docs.docker.com/engine/reference/run/</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.open-open.com/lib/view/open1422492851548.html" class="uri" target="_blank" rel="external">http://www.open-open.com/lib/view/open1422492851548.html</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://segmentfault.com/a/1190000000667514" class="uri" target="_blank" rel="external">http://segmentfault.com/a/1190000000667514</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="https://docs.docker.com/registry/" class="uri" target="_blank" rel="external">https://docs.docker.com/registry/</a><a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<h2>Docker命令概要</h2>
<p>常用的Docker命令有以下一些<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> <a href="#fn2" class="footnoteRef" i]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker入门介绍]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-starter/"/>
    <id>http://valleylord.github.io/post/201512-docker-starter/</id>
    <published>2015-12-13T01:46:00.000Z</published>
    <updated>2015-12-19T10:07:22.000Z</updated>
    <content type="html"><![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machine）的效果。与虚拟机主要的不同在于，虚拟机是对硬件的抽象，也就是说，需要在虚拟机上先运行操作系统，然后在操作系统中运行应用程序；而容器是对资源的抽象，也就是说，容器是建立在操作系统之上，将操作系统提供的资源予以隔离并分别提供给不同的应用。两种虚拟化的方式各有千秋，从隔离度上来说，虚拟机要比容器强，但在性能上，容器的方式更优，因为容器少运行了一层操作系统。</p>
<p>本文使用Ubuntu 14.04 LTS完成实验。</p>
<h2>Linux CGroup</h2>
<p>Linux的CGroup技术为Docker提供了系统资源上的隔离，常用的被隔离资源有cpu、内存、网络流量等等<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。提供这些资源隔离的主要目的是，让单个容器无法占用全部资源，这样会影响系统中其他容器或进程。</p>
<p>CGroup支持隔离的资源有以下一些。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">blkio — 这​​​个​​​子​​​系​​​统​​​为​​​块​​​设​​​备​​​设​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​，比​​​如​​​物​​​理​​​设​​​备​​​（磁​​​盘​​​，固​​​态​​​硬​​​盘​​​，USB 等​​​等​​​）。</div><div class="line"><span class="built_in">cpu</span> — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​ <span class="built_in">CPU</span> 的​​​ cgroup 任​​​务​​​访​​​问​​​。​​​</div><div class="line">cpuacct — 这​​​个​​​子​​​系​​​统​​​自​​​动​​​生​​​成​​​ cgroup 中​​​任​​​务​​​所​​​使​​​用​​​的​​​ <span class="built_in">CPU</span> 报​​​告​​​。​​​</div><div class="line">cpuset — 这​​​个​​​子​​​系​​​统​​​为​​​ cgroup 中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​ <span class="built_in">CPU</span>（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​。​​​</div><div class="line">devices — 这​​​个​​​子​​​系​​​统​​​可​​​允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备​​​。​​​</div><div class="line">freezer — 这​​​个​​​子​​​系​​​统​​​挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务​​​。​​​</div><div class="line">memory — 这​​​个​​​子​​​系​​​统​​​设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告​​​。​​​</div><div class="line">net_cls — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​等​​​级​​​识​​​别​​​符​​​（classid）标​​​记​​​网​​​络​​​数​​​据​​​包​​​，可​​​允​​​许​​​ Linux 流​​​量​​​控​​​制​​​程​​​序​​​（tc）识​​​别​​​从​​​具​​​体​​​ cgroup 中​​​生​​​成​​​的​​​数​​​据​​​包​​​。​​​</div><div class="line">net_prio — 这个子系统用来设计网络流量的优先级</div><div class="line">hugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。</div></pre></td></tr></table></figure></p>
<p>下面举个简单的例子说明一下，假设有一个死循环的程序，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"PID [%5d]\n"</span>, getpid());</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;) i++;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该程序先打印自己的pid，然后进入死循环。编译后运行，然后运行<code>top</code>查看cpu占用率，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./test </div><div class="line">PID [ <span class="number">9271</span>]</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">632</span>    <span class="number">544</span> R <span class="number">100.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">27.75</span> test</div></pre></td></tr></table></figure></p>
<p>不要退出<code>./test</code>，然后在<code>/sys/fs/cgroup/cpu/</code>下建立一个目录<code>test</code>（需要root权限），然后在<code>cpu.cfs_quota_us</code>中写入30000。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir test</span></div><div class="line"></div><div class="line"><span class="comment"># ls test</span></div><div class="line">cgroup.clone_children  cpu.cfs_period_us  cpu.shares  notify_on_release</div><div class="line">cgroup.procs           cpu.cfs_quota_us   cpu.stat    tasks</div><div class="line"></div><div class="line"><span class="comment"># echo 30000 &gt; /sys/fs/cgroup/cpu/test/cpu.cfs_quota_us</span></div></pre></td></tr></table></figure></p>
<p>但是运行下面命令之后，cpu立刻降低到30%（与之前的30000对应），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo 9271 &gt;&gt; /sys/fs/cgroup/cpu/test/tasks</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">796</span>    <span class="number">716</span> R  <span class="number">29.9</span>  <span class="number">0.0</span>   <span class="number">1</span>:<span class="number">55.29</span> test</div></pre></td></tr></table></figure></p>
<p>可以看到，使用CGroup限制cpu占用率已经生效。</p>
<h2>Linux Namespace</h2>
<p>只有资源的隔离显然不足以隔离不同的应用，还需要有对访问权限的隔离，这就是Linux Namespace的主要作用。Linux Namespace是Linux提供的一种内核级别环境隔离的方法<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，主要是在使用<code>clone</code>系统调用的时候，添加不同的隔离效果参数来达到。注意，此处的隔离仅仅是应用层面的隔离，这些clone出来的进程仍然使用相同的Linux内核。</p>
<p>可以达到的不同的隔离效果有：</p>
<table style="width:50%;">
<colgroup>
<col width="13%">
<col width="19%">
<col width="16%">
</colgroup>
<thead>
<tr class="header">
<th align="left">分类</th>
<th align="left">系统调用参数</th>
<th align="left">相关内核版本</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Mount namespaces</td>
<td align="left">CLONE_NEWNS</td>
<td align="left">Linux 2.4.19</td>
</tr>
<tr class="even">
<td align="left">UTS namespaces</td>
<td align="left">CLONE_NEWUTS</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="odd">
<td align="left">IPC namespaces</td>
<td align="left">CLONE_NEWIPC</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="even">
<td align="left">PID namespaces</td>
<td align="left">CLONE_NEWPID</td>
<td align="left">Linux 2.6.24</td>
</tr>
<tr class="odd">
<td align="left">Network namespaces</td>
<td align="left">CLONE_NEWNET</td>
<td align="left">始于Linux 2.6.24 完成于 Linux 2.6.29</td>
</tr>
<tr class="even">
<td align="left">User namespaces</td>
<td align="left">CLONE_NEWUSER</td>
<td align="left">始于 Linux 2.6.23 完成于 Linux 3.8)</td>
</tr>
</tbody>
</table>
<p>下面举例看一下Namespace的隔离效果，假设有如下c代码，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _GNU_SOURCE</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/wait.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sched.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;signal.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义一个给 clone 用的栈，栈大小1M */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> STACK_SIZE (1024 * 1024)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> container_stack[STACK_SIZE];</div><div class="line"></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> container_args[] = {</div><div class="line">    <span class="string">"/bin/bash"</span>,</div><div class="line">    NULL</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> container_main(<span class="keyword">void</span>* arg)</div><div class="line">{</div><div class="line">    <span class="comment">/* 查看子进程的PID，我们可以看到其输出子进程的 pid 为 1 */</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Container [%5d] - inside the container!\n"</span>, getpid());</div><div class="line">    sethostname(<span class="string">"container"</span>,<span class="number">10</span>);</div><div class="line">    system(<span class="string">"mount -t proc proc /proc"</span>);</div><div class="line">    execv(container_args[<span class="number">0</span>], container_args);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Something's wrong!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent [%5d] - start a container!\n"</span>, getpid());</div><div class="line">    <span class="comment">/*启用PID namespace - CLONE_NEWPID*/</span></div><div class="line">    <span class="keyword">int</span> container_pid = clone(container_main, container_stack+STACK_SIZE,</div><div class="line">            CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);</div><div class="line">    waitpid(container_pid, NULL, <span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent - container stopped!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码主要使用了<code>CLONE_NEWPID | CLONE_NEWNS</code>两个参数，在Namespace中隔离出pid=1的父进程，同时使用文件系统隔离，将<code>/proc</code>与外界隔离开来，这样也就看不到容器外的进程。在这样的环境下运行bash，可以看到如下效果（需要root运行），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> ./test </div><div class="line">Parent [<span class="number">10328</span>] - start a container!</div><div class="line">Container [    <span class="number">1</span>] - inside the container!</div><div class="line"></div><div class="line"><span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         <span class="number">1</span>     <span class="number">0</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">12</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</div><div class="line">root       <span class="number">107</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">20</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</div><div class="line"></div><div class="line"><span class="comment"># exit</span></div><div class="line"><span class="keyword">exit</span></div><div class="line">Parent - container stopped!</div></pre></td></tr></table></figure></p>
<p>可见，在Namespace的隔离下，bash已经获得pid=1的特权，并且，运行ps也看不到外界的进程。</p>
<h2>AUFS</h2>
<p>Docker三大基础技术中，唯一还没有进入Linux内核的就是AUFS。AUFS的作用，是把不同物理位置的目录合并mount到同一个目录中<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。具体实现上，AUFS采用的是层状结构，把文件的改动通过不同的层，一层层叠加上去，每一层的改动都依赖于上一层，最终看到的结果实际上是文件叠加后的结果。实现的原理上有些类似于git。</p>
<h2>基于Docker的开发流程</h2>
<p>传统软件开发中，经常会出现的问题就是环境的不一致、部署困难、权限管理不便等等问题。例如，开发提交代码之后，运维人员需要根据开发的架构编写部署脚本；在部署环境确定之后，开发人员需要一套一致的环境来开发应用，但是这样的环境需要通过虚拟机来搭建，比较费时；如果共用开发环境的话，开发人员需要修改某个系统文件，需要申请系统权限，而他要改的很可能仅仅是一个host文件。</p>
<p>种种的不便利，都是因为“环境”的不统一，而统一环境，正是Docker容器所解决的问题。如果在开发流程中使用docker，那么运维的部分工作将转为开发工作，比如部分环境变量中的信息，端口信息，数据库连接信息等等，都可以包含在容器中，而运维人员需要负责的仅仅是容器与容器之间的连接。一个系统中的多个容器可以部署在不同的机器上（比如测试环境、生产环境），也可以 部署在一台机器上（比如开发环境），在引入容器这一层抽象的同时，并没有像虚拟机带来的运行效率降低等问题，这也是Docker能够被广泛接受的原因。</p>
<p>由于环境统一，对环境的依赖降低，持续集成变得更加容易完成；由于环境统一，应用的模块化变得更加容易，SOA、微服务等架构，会更加容易被部署；同样由于环境统一，单个模块的更新、优化、版本控制也会变得更加容易。</p>
<h2>Docker镜像文件浅析</h2>
<p>由于Docker Hub比较慢，本文从国内的DockerPool上来获取镜像，用来展示AUFS的层状结构，以java 8的jdk为例<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。先获取这个镜像，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker pull dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk         </div><div class="line">Pulling repository dl.dockerpool.com:<span class="number">5000</span>/java</div><div class="line"><span class="number">816120</span>cec693: Download complete </div><div class="line"><span class="number">511136</span>ea3c5a: Download complete </div><div class="line">bb250545c9c9: Download complete </div><div class="line">f872462c7730: Download complete </div><div class="line"><span class="number">0</span>b98a314e4e3: Download complete </div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java: this image was pulled from a legacy registry.  Important: This registry version will not be supported <span class="keyword">in</span> future versions of docker.</div></pre></td></tr></table></figure></p>
<p>注意，为了获取该镜像，需要在docker的配置文件<code>/etc/default/docker</code>中添加参数<code>DOCKER_OPTS=&quot;--insecure-registry dl.dockerpool.com:5000&quot;</code>，本文使用的是Ubuntu，如果是Centos的话，需要修改<code>/etc/sysconfig/docker</code>。从获取的log中发现，总共获取了5个镜像，分别是</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec693</div><div class="line"><span class="number">511136</span>ea3c5a</div><div class="line">bb250545c9c9</div><div class="line">f872462c7730</div><div class="line"><span class="number">0</span>b98a314e4e3</div></pre></td></tr></table></figure></p>
<p>这几个镜像最上面的<code>816120cec693</code>是最上层的镜像文件。运行<code>docker images</code>可以证实这一点。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">hello-world                   latest              <span class="number">975</span>b84d108f1        <span class="number">8</span> weeks ago         <span class="number">960</span> B</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jre               <span class="number">5</span>ceb47bbfcb2        <span class="number">13</span> months ago       <span class="number">284.2</span> MB</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jdk               <span class="number">816120</span>cec693        <span class="number">13</span> months ago       <span class="number">634.9</span> MB</div></pre></td></tr></table></figure></p>
<p>docker的镜像存储在<code>/var/lib/docker</code>下，需要用root账户来查看。在该目录下查找镜像文件<code>816120cec693</code>，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span> <span class="comment">find</span> <span class="string">.</span> <span class="literal">-</span><span class="comment">name</span> <span class="comment">"816120cec693*"</span> <span class="comment">|</span> <span class="comment">xargs</span> <span class="comment">ls</span> <span class="literal">-</span><span class="comment">al</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>  <span class="comment">260</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="comment">/aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">40</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">10</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">bin</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">33</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">etc</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">4</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span>  <span class="comment">8月</span> <span class="comment">17</span>  <span class="comment">2014</span> <span class="comment">lib</span></div><div class="line"><span class="comment">drwxrwxrwt</span>  <span class="comment">3</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">tmp</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">8</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">usr</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">5</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">var</span></div><div class="line"><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>    <span class="comment">0</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">aufs</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">orph</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">plnk</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">8</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">716</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">11</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">1330</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">json</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>      <span class="comment">9</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">layersize</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">710180</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">tar</span><span class="literal">-</span><span class="comment">data</span><span class="string">.</span><span class="comment">json</span><span class="string">.</span><span class="comment">gz</span></div></pre></td></tr></table></figure></p>
<p>可见，docker镜像的id实际上是一个更长的id，<code>816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>，通常情况下，docker只显示前12位当做id。docker的本地文件中，<code>./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个文本文件，里面记录了本镜像的所有父镜像id。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more ./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p><code>./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，里面记录了镜像的实际文件，从目录结构可以大致看出来这实际上是一个linux根目录。<code>./aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>默认是一个空目录。<code>./graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，用于记录镜像相关的信息，该目录下的3个文件非常有助于理解AUFS的结构。<code>json</code>是记录镜像概要信息的json格式文件，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">512900817</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    <span class="string">"config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/bash"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"container"</span>: <span class="string">"029cecc8157b465ce92e5559d6231261452b571e93734e08da5081eef4a8af41"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/sh"</span>,</div><div class="line">            <span class="string">"-c"</span>,</div><div class="line">            <span class="string">"apt-get update && apt-get install -y curl openjdk-8-jdk=\"</span><span class="number">8</span>u40\<span class="string">"* unzip wget"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2014-10-23T23:08:01.12431458Z"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"1.3.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该文件中记录了镜像的大小、系统amd64、hostname、系统id、操作系统、环境变量、以及父镜像id等信息。<code>layersize</code>文件记录了文件大小，这个值和<code>json</code>文件中的值是一样的。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more layersize</span></div><div class="line"><span class="number">512900817</span></div></pre></td></tr></table></figure></p>
<p>可以看到，镜像的大小大概是513MB。可以与实际的文件大小做对比。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># du -sh ./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">516</span>M	./aufs/diff/<span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div></pre></td></tr></table></figure></p>
<p>可见，大小基本一致。<code>tar-data.json.gz</code>中记录了该镜像中的每个文件的信息，文件比较大，在此不在赘述。从<code>json</code>文件中，找到了父镜像<code>0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</code>，我们可以继续查看该父镜像的信息，然后查看父镜像的父镜像信息，一直查到根镜像。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more 0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f/json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">121995138</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"x86_64"</span>,</div><div class="line">    <span class="string">"comment"</span>: <span class="string">"Imported from -"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: null,</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: null,</div><div class="line">        <span class="string">"Env"</span>: null,</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"OnBuild"</span>: null,</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: null,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2013-06-13T14:03:50.821769-07:00"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"0.4.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>最后可见，根镜像id是<code>511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</code>，该镜像总共5层，根镜像在最下层，本镜像在最上层，按顺序分别是，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p>以上是Docker镜像文件的AUFS简单介绍。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://coolshell.cn/articles/17049.html" class="uri" target="_blank" rel="external">http://coolshell.cn/articles/17049.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://coolshell.cn/articles/17010.html" class="uri" target="_blank" rel="external">http://coolshell.cn/articles/17010.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://coolshell.cn/articles/17061.html" class="uri" target="_blank" rel="external">http://coolshell.cn/articles/17061.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.csdn.net/article/2014-11-18/2822693" class="uri" target="_blank" rel="external">http://www.csdn.net/article/2014-11-18/2822693</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machi]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用hexo搭建这个博客]]></title>
    <link href="http://valleylord.github.io/post/201412-hexo-blog/"/>
    <id>http://valleylord.github.io/post/201412-hexo-blog/</id>
    <published>2014-12-08T04:49:00.000Z</published>
    <updated>2015-12-13T05:58:00.000Z</updated>
    <content type="html"><![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>、<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>、<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，其中也介绍了一些额外的配置，比如rss、域名绑定、博客迁移等等。我建博客的主要步骤也是跟这几篇博客的描述基本类似，由于原先的博客是放在farbox和SAE的JustWriting(以下简称JustWriting)上，直接就是可用的markdown文本，迁移的步骤算是省了不少功夫，以下说一些碰到的坑。</p>
<h2>1 frontmatter不一致</h2>
<p>frontmatter不是markdown的标准，应该属于博客系统自定义的扩展，一般是用于表示该篇文章的属性信息，写在文章的开头，例如，本文的frontmatter就是，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 用hexo搭建这个博客</div><div class="line">date: 2014-12-08 12:49</div><div class="line">tags: [Hexo, Blog]</div><div class="line">category: Blog</div><div class="line"><span class="header">toc: yes</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>各个博客系统支持的frontmatter各不相同，原先在farbox和JustWriting写的时候，是可以这么写的，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: 用hexo搭建这个博客</div><div class="line">Date: 2014-12-08 12:49</div><div class="line">Tags: [Hexo, Blog]</div><div class="line">Category: Blog</div><div class="line">Toc: yes</div></pre></td></tr></table></figure></p>
<p>主要差别有，frontmatter中的title、date什么的都是可以首字母大写的，例如，Title、Date，但是hexo要求必须是全部小写才可以识别，所以就一篇一篇的都改为小写。JustWriting是大小写都可以支持，farbox由于不打算继续用了就没有测试过。</p>
<p>还有一个是tags里面的写法，hexo要求，如果有多个的话，需要放在方括号([])，并用逗号(,)分隔，如<code>[Hexo, Blog]</code>，而之前farbox和JustWriting是可以不需要方括号，空格分隔，如<code>Hexo Blog</code>。JustWriting经测试是可以支持方括号的写法，farbox没有测试。</p>
<p>最后的差别是，hexo需要在frontmatter结束后，用<code>---</code>隔开，而JustWriting和farbox不需要。</p>
<p>改完这些，hexo中就可以在主页正常的显示博文的标题等信息了。感觉起来，hexo要求的写法更加严谨，值得称道的是JustWriting，不仅支持了原先farbox的写法，也支持现在的hexo写法，更加宽泛。虽然这些改动在farbox上都没有测试过，我猜应该也是可以的，JustWriting和farbox非常相似，JustWriting是用php写的，猜测farbox可能也是用php实现的，两者支持的markdown语法应该是一致的。</p>
<h2>2 使用mathjax支持数学公式</h2>
<p>公式的支持可以安装hexo-math和hexo-renderer-mathjax来实现，好像是只要安装前者就可以实现了，但是我安装了2个。hexo-math的安装方法可以去该项目的github上去看看，在<a href="https://github.com/akfish/hexo-math" target="_blank" rel="external">这里</a>，按照步骤操作就可以了。hexo-renderer-mathjax的github在<a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">这里</a>，步骤和前者一样。</p>
<p>安装完之后应该就能看到公式了，支持行间和行内的公式。测试一下效果，代码如下，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">测试一下数学公式和尾注[^LaTeX]: </div><div class="line"></div><div class="line">$$E=mc^2$$</div><div class="line"></div><div class="line">[<span class="link_label">^LaTeX</span>]: 支持 <span class="strong">**LaTeX**</span> 编辑显示支持，例如：$\sum<span class="emphasis">_{i=1}^n a_</span>i=0$和$[<span class="link_label">((n-k)/i+m)</span>]$， 访问 [<span class="link_label">MathJax</span>][<span class="link_reference">4</span>] 参考更多使用方法。</div></pre></td></tr></table></figure></p>
<p>生成的效果可以看<a href="http://valleylord.github.io/post/README/" target="_blank" rel="external">这里</a>。</p>
<h2>3 php markdown中脚注的支持</h2>
<p>老实说，之前我从来没有关注过markdown的方言，markdown就是markdown，就跟java就是java的感觉一样。后来知道了有个GFW(Github Flavored Markdown)，感觉它支持代码高亮的方式好一些，于是以为自己写的就是GFW。直到这次做博客迁移的时候才发现，原来我一直写的都是php markdown，比GFW还多一些特性。而hexo默认支持的是GFW，对php markdown的一些特性不支持，而我最需要的就是php markdown中的脚注功能。</p>
<p>其实主流的markdown方言有以下几种，分别是(摘自pandoc的readme)：markdown (pandoc’s extended markdown), markdown_strict (original unextended markdown), markdown_phpextra (PHP Markdown Extra extended markdown), markdown_github (github extended markdown)，markdown_mmd (MultiMarkdown)。这也看出，原始的markdown支持的写法是很少的，所以才有了这么多各有特色的方言版本，github markdown支持多种编程语言的高亮，pandoc markdown支持的东西很多，写法比较类似tex，我用的php markdown有简易的脚注功能。以上的特性，都可以在pandoc中有选项可以支持。</p>
<p>说了这么多，那么问题来了，pandoc是什么？在我的理解，pandoc是一个标记语言(也可以说排版语言)转换器。可以将一种标记语言(如markdown、textile、tex、latex、html、epub等)转换到另一种标记语言，感觉很强大有木有？我就是想用pandoc对php markdown的支持来生成博客的html页面。</p>
<p>问题又来了，那么如何在hexo中使用pandoc来解析php markdown呢？要使用hexo-renderer-pandoc插件，项目主页在github上，<a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">这里</a>。其readme中的介绍有些太简略了，对于我这样一个连pandoc都没听过的人，实在不太容易上手。我详细说一下使用时候的步骤，</p>
<blockquote>
<ol>
<li>根据<a href="http://johnmacfarlane.net/pandoc/installing.html" target="_blank" rel="external">pandoc的安装文档</a>，安装pandoc，在windows下要把pandoc配到PATH环境变量下；</li>
<li>安装这个插件，<code>npm install hexo-renderer-pandoc --save</code>；</li>
<li>删除默认的markdown插件，<code>npm uninstall hexo-renderer-marked --save</code>，确保是使用pandoc在解析；</li>
<li>修改该插件的代码，将index.js中的<code>var args = [ '-f', 'markdown', '-t', 'html', '--mathjax', '--smart'];</code>改为<code>var args = [ '-f', 'markdown_phpextra', '-t', 'html', '--mathjax', '--smart'];</code></li>
</ol>
</blockquote>
<p>之后就可以用pandoc解析php markdown了，在<code>hexo generate</code>的时候表现的灰常好。</p>
<p>说一下需要特别注意的坑，如果是在windows下安装pandoc，一定需要把pandoc的可执行文件目录配置到PATH环境变量中，即，<code>C:\Users\Administrator\AppData\Local\Pandoc</code>(pandoc的默认安装目录)需要加到PATH中，这个坑在pandoc的官方installing中完全没提到，而在我的mint linux中只需要简单的apt-get就一次搞定，差距啊。如果没有配对的话，在<code>hexo server</code>的时候会出现这个错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Error: This socket is closed.</div><div class="line">    at Socket._write (net.js:637:19)</div><div class="line">    at doWrite (_stream_writable.js:226:10)</div><div class="line">    at writeOrBuffer (_stream_writable.js:216:5)</div><div class="line">    at Socket.Writable.write (_stream_writable.js:183:11)</div><div class="line">    at Socket.write (net.js:615:40)</div><div class="line">    at pandoc (E:<span class="command">\my</span>_blog<span class="command">\node</span>_modules<span class="command">\hexo</span>-renderer-pandoc<span class="command">\index</span>.js:23:15)</div><div class="line">    at C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\lib</span><span class="command">\core</span><span class="command">\render</span>.js:96:9</div><div class="line">    at fn (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:641:34)</div><div class="line">    at Object._onImmediate (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:557:34)</div><div class="line">    at processImmediate <span class="special">[</span>as _immediateCallback<span class="special">]</span> (timers.js:330:15)</div></pre></td></tr></table></figure></p>
<p>模模糊糊的，也算指向了找不到pandoc的错误。测试pandoc是否在PATH中了，可以用<code>pandoc -v</code>来查看版本，如果已经设置对了，会看到以下这些，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">F:\&gt;pandoc -v</div><div class="line">pandoc <span class="number">1.13</span>.<span class="number">1</span></div><div class="line">Compiled <span class="keyword">with</span> texmath <span class="number">0.8</span>, highlighting-kate <span class="number">0.5</span>.<span class="number">8.5</span>.</div><div class="line">Syntax highlighting <span class="keyword">is</span> supported <span class="keyword">for</span> the following languages:</div><div class="line">    actionscript, ada, apache, asn1, asp, awk, bash, bibtex, boo, c, changelog,</div><div class="line">    clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css, curry, d,</div><div class="line">    diff, djangotemplate, doxygen, doxygenlua, dtd, eiffel, email, erlang,</div><div class="line">    fortran, fsharp, gcc, gnuassembler, go, haskell, haxe, html, ini, isocpp,</div><div class="line">    java, javadoc, javascript, json, jsp, julia, latex, lex, literatecurry,</div><div class="line">    literatehaskell, lua, makefile, mandoc, markdown, matlab, maxima, metafont,</div><div class="line">    mips, modelines, modula2, modula3, monobasic, nasm, noweb, objectivec,</div><div class="line">    objectivecpp, ocaml, octave, <span class="keyword">pascal</span>, perl, php, pike, postscript, prolog,</div><div class="line">    pure, python, r, relaxngcompact, restructuredtext, rhtml, roff, ruby, rust,</div><div class="line">    scala, scheme, sci, sed, sgml, sql, sqlmysql, sqlpostgresql, tcl, texinfo,</div><div class="line">    verilog, vhdl, xml, xorg, xslt, xul, yacc, yaml</div><div class="line"><span class="keyword">Default</span> user data directory: C:\Users\Administrator\AppData\Roaming\pandoc</div><div class="line">Copyright (C) <span class="number">2006</span>-<span class="number">2014</span> John MacFarlane</div><div class="line">Web:  http:<span class="comment">//johnmacfarlane.net/pandoc</span></div><div class="line">This <span class="keyword">is</span> free software; see the source <span class="keyword">for</span> copying conditions.</div><div class="line">There <span class="keyword">is</span> no warranty, <span class="keyword">not</span> even <span class="keyword">for</span> merchantability <span class="keyword">or</span> fitness</div><div class="line"><span class="keyword">for</span> a particular purpose.</div></pre></td></tr></table></figure></p>
<p>另一个坑是，hexo-renderer-pandoc插件的作者使用的是pandoc markdown，所以默认是只支持pandoc markdown，修改代码之后才可以识别php markdown的脚注，像这样<code>[^1]</code>，示例可以参考前面的例子。</p>
<p>顺便说一下，hexo-renderer-pandoc插件代码的逻辑还是很清楚的(也很短)，主要就几个部分，打开文件，处理文件，关闭文件，还有按文件扩展名注册文件的代码放在最后。修改的地方就是pandoc运行时候的参数，参考pandoc的User Guide就可以知道这些参数是干什么的，甚至可以通过修改参数获得更多文件的支持。<code>var pandoc = spawn('pandoc', args);</code>这一行是pandoc运行的命令，可以看到pandoc前面没有任何路径信息，所以要放到PATH环境变量中。</p>
<h2>4 pacman系列主题中的代码内空行bug</h2>
<p>hexo的主题主要有几个系列，从官方主题更改的landscape系列、light系列，还有开发者自己贡献的pacman系列，我自己比较偏好pacman和landscape系列的主题，pacman中比较喜欢<a href="https://github.com/wizicer/iceman" target="_blank" rel="external">iceman</a>和<a href="https://github.com/zhanglun/hexo-theme/tree/master/Tinny" target="_blank" rel="external">tinny</a>，landscape系列中比较喜欢<a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="external">landscape-plus</a>和<a href="https://github.com/myqianlan/hexo-theme-moyi" target="_blank" rel="external">moyi</a>，还有很多漂亮的主题，虽然有demo，但是我使用的时候都报错。最后还是选取了tinny，其实我更加喜欢landscape系列主题，但是其文章是默认在首页中显示全文的，需要手动加入<code>&lt;!-- more --&gt;</code>才能生成首页预览的效果，我比较懒，不想加了，因此选择了pacman系列的。</p>
<p>pacman系列主题有一个共有的问题，代码中的空行会被压缩，而landscape系列主题就没有这个问题。干说不是很好理解，看例子，比如这样一段markdown，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`<span class="javascript"></span>``<span class="javascript">python</span></div><div class="line">import <span class="keyword">this</span></div><div class="line"></div><div class="line">print <span class="string">'something'</span></div><div class="line">``<span class="javascript"></span>`</div></pre></td></tr></table></figure></p>
<p>中间有一个空行，pacman主题默认情况下会压缩掉这个空行，生成类似这样的页面，</p>
<p><img src="/images/201412-hexo-blog/hexo-code-err.png" alt=""></p>
<p>中间的空行不见了，而且代码行数的数字和代码的内容视觉上也没有在同一行上，而实际上，我们想要的是应该是这样的结果</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> this</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'something'</span></div></pre></td></tr></table></figure></p>
<p>几乎所有，至少是我尝试过的所有的，pacman主题都有这个问题，解决方法是，在主题的<code>source/css/_base/code.styl</code>文件中<code>.gist</code>之前，加入下面两行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  .gutter <span class="keyword">pre</span></div><div class="line">    @extend $<span class="built_in">line</span>-numbers</div><div class="line">    text-align <span class="keyword">right</span></div><div class="line">    padding-<span class="keyword">right</span> <span class="number">1.5</span><span class="keyword">em</span></div><div class="line">  </div><div class="line">  // <span class="built_in">add</span> follows</div><div class="line">  .<span class="built_in">line</span></div><div class="line">    heigh<span class="variable">t:</span> <span class="number">24</span>px</div><div class="line">    </div><div class="line">.gist</div><div class="line">  margin <span class="number">0.5</span><span class="keyword">em</span> <span class="number">0</span></div><div class="line">  background <span class="keyword">highlight</span>-background</div></pre></td></tr></table></figure></p>
<p>加入<code>.line</code>设置，强制指定了代码的每一行的行高都是24px，我尝试了其他的变量来替代，都不是很好，如果有更好的改法，可以联系我。这是整个格式优化中我花时间最长的一个改动，尤其对于我这种从来没做过前端，而且css、js又都不太懂的人。</p>
<h2>5 代码高亮的着色方案改为monokai</h2>
<p>代码高亮的着色方案在多数的hexo主题中，都是tomorrow着色，我是monokai着色的忠实粉丝，有木有办法改为monokai呢？</p>
<p>landscape-plus给出了一个monokai着色的方法，原来主题的颜色都是在code.styl中写死的，只要改这段即可。原本的着色方案可能是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#1d1f21</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#282a2e</span></div><div class="line"><span class="variable">highlight-line-numbers =</span> <span class="comment">#666</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#373b41</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#c5c8c6</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#969896</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#cc6666</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#de935f</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#f0c674</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#b5bd68</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#8abeb7</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#81a2be</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#b294bb</span></div></pre></td></tr></table></figure></p>
<p>可以看到，颜色的rgb值都被赋值在了一系列变量中，只要修改这些常数值即可，这个活儿landscape-plus已经做了，把他们的code.styl中的这一段copy过来替换原有的即可，新的着色方案是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#272822</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#3E3D32</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#49483E</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#F8F8F2</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#75715E</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#F92672</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#FD971F</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#E6DB74</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#A6E22E</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#A1EFE4</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#66D9EF</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#AE81FF</span></div></pre></td></tr></table></figure></p>
<p>code.styl的末尾<code>pre</code>那一行到结束，还有一段不同的代码引用那一种着色方案的声明，同样也用landscape-plus中的相应内容替换。替换完之后，就能发现hexo已经开始用monokai着色了。</p>
<p>可以看出来，这种着色方案的修改方法比较死板，如果你需要某种着色方案但并不清楚颜色的rgb值，就无解了。其实，tinny主题本身其实提供了highlightjs着色方案，按主题的readme上所说，只要在主题的_config.yml中更改配置项即可，可惜我没有试成功……可能有其他主题可以做到。</p>
<h2>6 tinny主题的字体修改</h2>
<p>tinny主题的作者把pacman的一些字体给改了，用了更小更紧凑的一些字体。但是我还是喜欢原先的pacman的字体，怎么办呢？通过和iceman对比文件发现，<code>source/css/_partial/</code>目录下的article.styl的内容有差异，用iceman的这个文件替代；还有，tinny在该目录下多了一个addByMe.styl文件，为了和iceman一致，删除之。</p>
<p>改完之后，基本和iceman比较相似了，感觉字体还是比较小，不知道为什么。</p>
<h2>7 主题的顶部横幅(header)宽度调整</h2>
<p>改完这些之后，设置自己的博客名、作者名、想说的话等等，基本已经挺好的了，还有不足的就是博客的顶部横幅，是这样，</p>
<p><img src="/images/201412-hexo-blog/hexo-header-err.png" alt=""></p>
<p>感觉明明可以一行显示的内容，被强迫分在了两行中显示，左上角和右下角的内容如果可以合并在一行里面显示就比较好了。如果需要这样，可以调整做上角的文本的宽度，在<code>source/css/_partial/</code>目录下的header.styl中，大约30多行的位置，有这样一段，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#textlogo</span></div><div class="line">  <span class="attribute">float</span> <span class="attribute">left</span></div><div class="line">  <span class="attribute">margin-left</span> 0<span class="class">.5em</span></div><div class="line">  <span class="attribute">width</span> 65%</div></pre></td></tr></table></figure></p>
<p>可能表示左上角的文本宽度要占用整个横幅的65%，像我的博客，左上角的文本并不长，缩短这个宽度也是可以的，改为55%就变成现在这样的效果。</p>
<h2>8 仍然存在的bug</h2>
<p>我做的主要修改就是以上这些，如果说还有一些值得进一步折腾的话，还可以继续。比如，在顶部的横幅中，目前没有支持categories，但是tags是支持的，如果要设置categories，可以按主题中的说明，在categories目录中建立一个index.md的文件，内容是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: categories</div><div class="line"><span class="header">title: categories</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>但是，我这样操作了，但是网页的内容还是tags的，所以我把categories从顶部横幅中去掉了。还有一个问题是，代码中的区块注释没有显示对颜色，但是单行注释是没有问题的。错误的颜色如下，</p>
<p><img src="/images/201412-hexo-blog/hexo-comment-err.png" alt=""></p>
<p>第一行显示对了颜色，为灰色，但是第二行一直到最后一行都是白色，颜色错误。除此之外，也有整个注释区块都是白色的错误情况，至今没有找到很好的解决办法，试了一些别的主题，多数都有这个问题，只有一些个别的主题，似乎是用动态调用highlightjs的方法解决了这个问题，但是其主题的代码结构和普通的差异很大，不太会改。</p>
<p>以上是我折腾这个博客的过程，到此为止，已经花了两个周末多了，不能再往下花时间了。基本上，如果使用pandoc，hexo可以变的非常灵活，任何的markdown方言都不在话下。</p>
<p>感谢文中所有提到的开源项目的贡献者。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" class="uri" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://code.wileam.com/build-a-hexo-blog-and-optimize/" class="uri" target="_blank" rel="external">http://code.wileam.com/build-a-hexo-blog-and-optimize/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" class="uri" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<]]>
    </summary>
    
      <category term="Hexo" scheme="http://valleylord.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/tags/Blog/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/categories/Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的性能监控工具pgCluu试用]]></title>
    <link href="http://valleylord.github.io/post/201412-postgres-pgcluu/"/>
    <id>http://valleylord.github.io/post/201412-postgres-pgcluu/</id>
    <published>2014-12-03T12:00:00.000Z</published>
    <updated>2014-12-05T01:20:41.000Z</updated>
    <content type="html"><![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托管在github上，其项目主页在<a href="https://github.com/darold/pgcluu" target="_blank" rel="external">这里</a>，也可以使用<code>git clone</code>从仓库克隆该项目。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy Downloads]$ git clone https://github.com/darold/pgcluu.git </div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/postgres/Downloads/pgcluu/.git/</div><div class="line">remote: Counting objects: <span class="number">807</span>, done.</div><div class="line">remote: Total <span class="number">807</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">807</span>/<span class="number">807</span>), <span class="number">958.99</span> KiB | <span class="number">14</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">529</span>/<span class="number">529</span>), done.</div></pre></td></tr></table></figure></p>
<p>如果是用于生产使用，还是建议去下载稳定的release版本，在<a href="https://github.com/darold/pgcluu/releases" target="_blank" rel="external">这里</a>有下载，本文使用的是<a href="https://github.com/darold/pgcluu/archive/v2.1.tar.gz" target="_blank" rel="external">2.1稳定版本</a>。</p>
<p>然后就是和大多数linux软件一样，开始做<code>make &amp; make install</code>，pgCluu比较特别的地方是，没有用<code>configure</code>生成Makefile，而是用一个perl脚本来生成。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ perl Makefile.PL </div><div class="line">Checking <span class="keyword">if</span> your kit is complete...</div><div class="line">Looks good</div><div class="line">Writing Makefile <span class="keyword">for</span> pgCluu</div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ make</div><div class="line">cp pgcluu_collectd blib/script/pgcluu_collectd</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu_collectd</div><div class="line">cp pgcluu blib/script/pgcluu</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu</div><div class="line">Manifying blib/man1/pgcluu.<span class="number">1</span></div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ <span class="built_in">sudo</span> make install</div><div class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> postgres: </div><div class="line">Installing /usr/local/share/man/man1/pgcluu.<span class="number">1</span></div><div class="line">Installing /usr/local/bin/pgcluu_collectd</div><div class="line">Installing /usr/local/bin/pgcluu</div><div class="line">Appending installation info to /usr/lib64/perl5/perllocal.pod</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-install.png" alt=""></p>
<p>默认情况下，<code>pgcluu</code>和<code>pgcluu_collectd</code>这两个程序安装在<code>/usr/local/bin</code>目录下，两个程序都是用perl写的。</p>
<p>要测试PostgreSQL的性能，为了能看到明显一些的结果，要给数据库加一些压力，本文采用之前的文章用pgbench的初始化方式，给数据库加一些DML和DDL操作的压力。命令如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)); </div><div class="line"><span class="keyword">do</span></div><div class="line">    time pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">16</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench; </div><div class="line"><span class="keyword">done</span>;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-pgbench.png" alt=""></p>
<p>以上命令中，测试用的数据库名是pgbench。为了可以持续增加数据库压力，对数据库反复执行了8次初始化，每次初始化的时间大约在15～20s(在我的测试机器上)，因此数据库繁忙的时间总共大约有120～160s。</p>
<p>然后建立收集数据的目录，并开始收集数据库的性能数据，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ mkdir /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -D -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line">LOG: Detach from terminal with pid: <span class="number">13352</span></div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -k</div><div class="line">OK: pgcluu_collectd exited with value <span class="number">0</span></div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect1.png" alt=""></p>
<p>上述参数中，<code>-D</code>表示后台运行；<code>-i 30</code>表示30秒收集一次数据；<code>/tmp/stat_db1/</code>是收集数据保存的目录；其他参数表示数据库的地址，用户名和数据库名。由于程序在后台运行，如果需要结束程序需要使用<code>-k</code>参数，表示kill掉后台的pgcluu_collectd。本文采用的方式是另一种自动退出的方法，即<code>-E 200</code>表示程序运行200秒之后自动退出，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -E <span class="number">200</span> -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">1</span> (pid:<span class="number">8551</span>) started at Thu Dec  <span class="number">4</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">06</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">sh: LC_ALL=C sar -t -p -A <span class="number">1</span> <span class="number">1</span>: No such file or directory</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2-error.png" alt=""></p>
<p>以上脚本确保可以收集到6(200/3)次数据，但是发现了错误，提示找不到sar命令，尝试了使用-s命令指定sar的位置，以及修改源代码，仍然不能解决。决定采用<a href="https://github.com/darold/pgcluu/archive/v2.0.tar.gz" target="_blank" rel="external">2.0版</a>，重复上述操作，2.0版没有这样的问题，但是2.0版本没有提供<code>-E</code>参数，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">0</span> (pid:<span class="number">13908</span>) started at Thu Dec  <span class="number">4</span> <span class="number">22</span>:<span class="number">29</span>:<span class="number">24</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">^CLOG: Received terminating signal.</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2.png" alt=""></p>
<p>此次收集正常，运行一段时间后<code>Ctrl+C</code>退出。接下来就可以用pgcluu做报表了，一般的报表呈现是使用html，就可以简单的使用默认参数即可，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ rm -rf /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ mkdir /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu -o /tmp/report_db1/ /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ ls /tmp/report_db1/</div><div class="line">bootstrap.min.css         pgbench-index-scan.html              postgres-table-size.html                system-device0.html</div><div class="line">bootstrap.min.js          pgbench-index-size.html              regression-index-scan.html              system-device1.html</div><div class="line">cluster.html              pgbench-missing-index.html           regression-index-size.html              system.html</div><div class="line">database-pgbench.html     pgbench-statio-table.html            regression-missing-index.html           test-index-size.html</div><div class="line">database-postgres.html    pgbench-table-indexes.html           regression-redundant-index.html         test-table-indexes.html</div><div class="line">database-regression.html  pgbench-table-kind-tuples.html       regression-table-indexes.html           test-table-kind-tuples.html</div><div class="line">database-test.html        pgbench-table-query-tuples.html      regression-table-kind-tuples.html       test-table-query-tuples.html</div><div class="line">font-awesome.min.css      pgbench-table-size.html              regression-table-query-tuples.html      test-table-size.html</div><div class="line">index.html                pgbench-table-vacuums-analyzes.html  regression-table-size.html              test-table-vacuums-analyzes.html</div><div class="line">jquery.min.js             pgcluu.css                           regression-table-vacuums-analyzes.html</div><div class="line">network-device0.html      pgcluu.js                            regression-unused-index.html</div><div class="line">network-device1.html      postgres-index-size.html             sorttable.js</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-generate-report.png" alt=""></p>
<p>生成的报表直接用浏览器打开即可，主入口是<code>index.html</code>，以下列举几张图，</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report1.png" alt=""></p>
<p>这个是CPU使用情况的图，可以看到系统突然有一个激增，这是开始做初始化的时候。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report2.png" alt=""></p>
<p>这个是各个种类锁争用的情况，也是突然有一个激增。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report3.png" alt=""></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report4.png" alt=""></p>
<p>除去动态信息的图表，pgcluu也收集了静态信息，如上图中，首页上的概要数据汇总，和数据库分页下数据库大小的数据等等。</p>
<p>以上是pgCluu的使用简述。本文的操作主要参考官方代码中的<a href="https://github.com/darold/pgcluu/blob/master/README" target="_blank" rel="external">Readme</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的rpm打包]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-rpm/"/>
    <id>http://valleylord.github.io/post/201411-postgres-rpm/</id>
    <published>2014-11-30T07:58:00.000Z</published>
    <updated>2014-12-03T01:16:58.000Z</updated>
    <content type="html"><![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ tar -zcf mypostgresql.tar.gz mypostgresql/</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ ls</div><div class="line">my_extension  mypostgresql  mypostgresql.tar.gz  postgresql</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-tar.png" alt=""></p>
<p>将打包好的源码包文件放到<code>$HOME/rpmbuild/SOURCES/</code>目录下，然后编辑描述rpm包的spec文件，spec文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Summary:   test mypostgresql </div><div class="line">Name:      mypostgresql </div><div class="line">Version:   <span class="number">1.0</span><span class="number">.0</span></div><div class="line">Release:   <span class="number">1</span></div><div class="line">License:   MIT</div><div class="line">Group:     Applications/Databases </div><div class="line">Source:    mypostgresql.tar.gz</div><div class="line">BuildRoot: <span class="variable">%{_tmppath}</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span>-<span class="variable">%{release}</span>-root</div><div class="line">Url:       http:<span class="comment">//www.test.com</span></div><div class="line">Packager:  test</div><div class="line">Prefix:    <span class="variable">%{_prefix}</span></div><div class="line">Prefix:    <span class="variable">%{_sysconfdir}</span></div><div class="line"><span class="variable">%define</span>    userpath /home/mypostgresql</div><div class="line"></div><div class="line"><span class="variable">%description</span></div><div class="line">test mypostgresql. </div><div class="line"></div><div class="line"><span class="variable">%prep</span></div><div class="line"><span class="variable">%setup</span> -c</div><div class="line"><span class="variable">%install</span></div><div class="line">install -d <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line">cp -a <span class="variable">%{name}</span>* <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line"></div><div class="line"><span class="variable">%clean</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_ROOT</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_DIR</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span></div><div class="line"></div><div class="line"><span class="variable">%files</span></div><div class="line"><span class="variable">%defattr</span>(-,root,root)</div><div class="line"><span class="variable">%{userpath}</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-spec.png" alt=""></p>
<p>由于需要用rpmbuild来打包，所以需要先安装rpmbuild。</p>
<p><img src="/images/201411-postgres-rpm/rpm-install-rpmbuild.png" alt=""></p>
<p>然后运行<code>rpmbuild -ba mypostgresql.spec</code>来打包，打包过程有很长的输出，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Checking for unpackaged file(s): /usr/lib/rpm/check-files /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</div><div class="line">Wrote: /home/postgres/rpmbuild/SRPMS/mypostgresql-1.0.0-1.src.rpm</div><div class="line">Wrote: /home/postgres/rpmbuild/RPMS/x86_64/mypostgresql-1.0.0-1.x86_64.rpm</div><div class="line">Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.MdWKRJ</div><div class="line"><span class="addition">+ umask 022</span></div><div class="line"><span class="addition">+ cd /home/postgres/rpmbuild/BUILD</span></div><div class="line"><span class="addition">+ cd mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILD/mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ exit 0</span></div><div class="line">[postgres@anzhy pg9.3.4]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-pack.png" alt=""></p>
<p>看到以上结果，就可以认为打包成功。进一步的确认可以查看生成的打包文件，目录在<code>$HOME/rpmbuild/RPMS/x86_64/</code>下，是程序包文件；还有一个是源码包文件，在<code>$HOME/rpmbuild/SRPMS/</code>下。</p>
<p><img src="/images/201411-postgres-rpm/rpm-file.png" alt=""></p>
<p>本文参考了<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.chinaunix.net/uid-24347760-id-1989580.html" class="uri" target="_blank" rel="external">http://blog.chinaunix.net/uid-24347760-id-1989580.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.chinaunix.net/uid-7530389-id-2050100.html" class="uri" target="_blank" rel="external">http://blog.chinaunix.net/uid-7530389-id-2050100.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 8新特性(What's New in Java 8 中文翻译版)]]></title>
    <link href="http://valleylord.github.io/post/201411-java-new-features/"/>
    <id>http://valleylord.github.io/post/201411-java-new-features/</id>
    <published>2014-11-29T05:16:00.000Z</published>
    <updated>2014-12-08T04:49:17.000Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多人一样，当得知它被推迟的时候，我感到很失望。不过，推迟总比没有好。</p>
<p>Java 8是Java语言的一大步改进，写这本书的过程强迫我学习了很多。在Lambda项目中，Java有了闭包语法、方法引用和接口的默认方法，项目规划加入了很多函数式语言的特性，并且如Java开发者期待的那样，并没有损失清晰性和简洁性。</p>
<p>除去Lambda项目，Java 8也有很多其他改动，包括新的Date和Time的API(JSR 310)、Nashorn JavaScript引擎、在HotSpot虚拟机中移除了永久代等等。</p>
<p>感谢以下作者提供了很有价值的资源：</p>
<ul>
<li>Brian Goetz – <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="external">Lambda综述</a></li>
<li>Aleksey Shipilev – <a href="https://github.com/shipilev/jdk8-lambda-samples" target="_blank" rel="external">jdk8 lambda示例</a></li>
<li>Richard Warburton – <a href="http://shop.oreilly.com/product/0636920030713.do" target="_blank" rel="external">Java 8 Lambdas</a></li>
<li>Julien Ponge – Oracle Nashorn, 2014年1~2月的Java Magazine 上的一篇文章</li>
<li>Venkat Subramaniam – <a href="http://blog.agiledeveloper.com/" target="_blank" rel="external">agiledeveloper.com</a></li>
<li>Java 8的所有开发人员</li>
<li>Guava、joda-time、Groovy和Scala的开发人员</li>
</ul>
<h2>1 概览</h2>
<p>本书是Java 8的简短介绍，读完后，你会对这些新特性有一个基本的了解，并可以开始使用。</p>
<p>本书假定读者已经很了解Java语言和JVM虚拟机，如果不熟悉包含Java 7在内的语言特性，书中的一些例子可能会比较困难。</p>
<p>Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
<li>其他</li>
</ul>
<p>阅读本书的最好办法是打开一个支持Java 8的IDE来试试这些新特性。</p>
<blockquote>
<p>代码示例在<a href="https://github.com/adamd/hellojava8" target="_blank" rel="external">这里</a></p>
</blockquote>
<h2>2 lambda表达式</h2>
<p>Java 8最大的新特性就是语言级的支持了<em>lambda表达式</em>(Lambda项目)。lambda表达式很像包含一个自动推断类型方法的匿名类的语法糖<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，然而对于简化开发有重大意义。</p>
<h3>2.1 语法</h3>
<p>lambda表达式的主要语法是：参数-&gt;方法体。编译器通常可以根据lambda表达式的上下文，来确定使用的函数接口<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>和参数类型。这个语法中有4个重要规则：</p>
<ul>
<li>声明参数的类型是非强制的；</li>
<li>如果只有一个参数，那么参数外的括号()是非强制的；</li>
<li>使用大括号{}是非强制的(除非需要使用多个语句)；</li>
<li>如果只有一个语句返回一个结果，那么<code>return</code>关键字是非强制的。</li>
</ul>
<p>这里是一些语法的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">() -&gt; System.out.println(<span class="keyword">this</span>)</div><div class="line">(String str) -&gt; System.out.println(str)</div><div class="line">str -&gt; System.out.println(str)</div><div class="line">(String s1, String s2) -&gt; { <span class="keyword">return</span> s2.length() - s1.length(); }</div><div class="line">(s1, s2) -&gt; s2.length() - s1.length()</div></pre></td></tr></table></figure></p>
<p>最后一个表达式可以用来做list的排序，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strArray, </div><div class="line">  (String s1, String s2) -&gt; s2.length() - s1.length());</div></pre></td></tr></table></figure></p>
<p>在此例中，lambda表达式实现了<code>Comparator</code>接口来按长度排序字符串。</p>
<h3>2.2 范围</h3>
<p>这是一个使用lambda及Runnable接口的短例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</div><div class="line">	Runnable r1 = () -&gt; out.println(<span class="keyword">this</span>);</div><div class="line">	Runnable r2 = () -&gt; out.println(toString());</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String <span class="title">toString</span>() { <span class="keyword">return</span> <span class="string">"Hello, world!"</span>; }</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String... args) {</div><div class="line">		<span class="keyword">new</span> Hello().r1.run(); <span class="comment">//Hello, world!</span></div><div class="line">		<span class="keyword">new</span> Hello().r2.run(); <span class="comment">//Hello, world!</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>值得关注的是<code>r1</code>和<code>r2</code>两个lambda调用<code>Hello</code>类的<code>toStrin()</code>方法，这展示了lambda可用的范围。</p>
<p>也可以引用常量或<em>实际上</em>的常量(effectively final variables)，变量如果只被赋值一次，就是实际上的常量。</p>
<p>例如，使用Spring的Hibernate模板：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"delete * from User"</span>;</div><div class="line">getHibernateTemplate().execute(session -&gt; </div><div class="line">    session.createSQLQuery(sql).uniqueResult());</div></pre></td></tr></table></figure></p>
<p>以上代码中，你可以引用变量<code>sql</code>因为它只被赋值了一次，如果它再被赋值一次的话，就会导致编译错误。</p>
<h3>2.3 方法引用</h3>
<p>lambda表达式类似一个非对象的方法，如果我们可以引用已有方法来替代lambda表达式岂非更好？这正是<em>方法引用</em>所能做的。</p>
<p>例如，如果你需要经常根据文件的类型来过滤一系列文件，假定你已有以下一些用于确定文件类型的方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilters</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsPdf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsTxt</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsRtf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>在需要过滤文件的时候，你可以用方法引用，如下例所示(假设已经定义了方法<code>getFiles</code>返回<code>Stream</code>)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;File&gt; pdfs = getFiles().filter(FileFilters::fileIsPdf);</div><div class="line">Stream&lt;File&gt; txts = getFiles().filter(FileFilters::fileIsTxt);</div><div class="line">Stream&lt;File&gt; rtfs = getFiles().filter(FileFilters::fileIsRtf);</div></pre></td></tr></table></figure></p>
<p>方法引用可以指向：</p>
<ul>
<li>静态方法</li>
<li>实例方法</li>
<li><em>特定</em>实例上的方法</li>
<li>构造器(如，<code>TreeSet::new</code>)</li>
</ul>
<p>例如，使用新的<code>java.nio.file.Files.lines</code>方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">         .map(String::trim)</div><div class="line">         .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码读入文件&quot;Nio.java&quot;，对每一行调用<code>trim()</code>，并打印每一行。</p>
<p>注意，<code>System.out::println</code>表示<code>PrintStream</code>实例的<code>println</code>方法。</p>
<h3>2.4 函数接口</h3>
<p>Java 8中定义的<em>函数接口</em>是仅包含一个抽象方法的接口，这对之前版本的Java中添加的接口也有效。</p>
<p>Java 8在<code>java.util.function</code>包中引入了一些新的函数接口。</p>
<ul>
<li>Function<t,r> - 输入T类型的对象返回R类型的对象。</t,r></li>
<li>Supplier<t> - 仅返回T类型对象。</t></li>
<li>Predicate<t> - 根据T类型的输入返回布尔值。</t></li>
<li>Consumer<t> - 根据T类型的输入执行操作。</t></li>
<li>BiFunction - 和Function类似，但有2个参数。</li>
<li>BiConsumer - 和Consumer类似，但有2个参数。</li>
</ul>
<p>它也为基础类型引入了一些派生的接口，例如：</p>
<ul>
<li>IntConsumer</li>
<li>IntFunction<r></r></li>
<li>IntPredicate</li>
<li>IntSupplier</li>
</ul>
<blockquote>
<p>更多信息请参考<a href="http://download.java.net/jdk8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function Javadocs</a></p>
</blockquote>
<p>函数接口最屌的是可以用任何能完成其职责的对象来赋值给它，正如以下代码示例，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function&lt;String, String&gt; atr = (name) -&gt; {<span class="keyword">return</span> <span class="string">"@"</span> + name;};</div><div class="line">Function&lt;String, Integer&gt; leng = (name) -&gt; name.length();</div><div class="line">Function&lt;String, Integer&gt; leng2 = String::length;</div></pre></td></tr></table></figure></p>
<p>这些代码在Java 8中是完全合法的，第一行定义了在String前插入'@'的函数；后两行是相同的，定义了获取String长度的函数。</p>
<p>Java编译器已经足够聪明到可以将String的<code>length()</code>的方法引用转换为<code>Function</code>(函数接口)，其<code>apply</code>方法输入String并返回Integer。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String s : args) out.println(leng2.apply(s));</div></pre></td></tr></table></figure></p>
<p>会打印所有输入字符串的长度。</p>
<p>任意接口都可以是函数接口，而不仅仅是哪些由Java引入的方法。可以使用注解<code>@FunctionalInterface</code>来表示你认为一个接口是函数接口。尽管不必要，如果你的接口不满足要求(如，只有一个抽象方法)，将会导致编译错误。</p>
<blockquote>
<p><strong>Github</strong></p>
</blockquote>
<blockquote>
<p>更多例子请参考jdk8 lambda示例</p>
</blockquote>
<h3>2.5 与Java 7的比较</h3>
<p>为了更好的阐述lambda表达式的优势，这里的一些例子展示了如何在Java 8中简化Java 7的代码。</p>
<p><strong>创建<code>ActionListener</code></strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">ActionListener al = <span class="keyword">new</span> ActionListener() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span>(ActionEvent e) {</div><div class="line">        System.out.println(e.getActionCommand());</div><div class="line">    }</div><div class="line">};</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">ActionListener al8 = e -&gt; System.out.println(e.getActionCommand());</div></pre></td></tr></table></figure></p>
<p><strong>打印一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (String s : list) {</div><div class="line">    System.out.println(s);</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">list.forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>排序一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String s1, String s2) {</div><div class="line">        <span class="keyword">return</span> s1.length() - s2.length();</div><div class="line">    }</div><div class="line">});</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">Collections.sort(list, (s1, s2) -&gt; s1.length() - s2.length());</div><div class="line"><span class="comment">// or</span></div><div class="line">list.sort(Comparator.comparingInt(String::length));</div></pre></td></tr></table></figure></p>
<p><strong>排序</strong></p>
<p>对排序的例子，假定已有如下的<code>Person</code>类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</div><div class="line"></div><div class="line">    String firstName;</div><div class="line">    String lastName;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getFirstName</span>() {</div><div class="line">        <span class="keyword">return</span> firstName;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getLastName</span>() {</div><div class="line">        <span class="keyword">return</span> lastName;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以下展示了你如何在Java 7中按姓和名来排序：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Person p1, Person p2) {</div><div class="line">        <span class="keyword">int</span> n = p1.getLastName().compareTo(p2.getLastName());</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">return</span> p1.getFirstName().compareTo(p2.getFirstName());</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure></p>
<p>在Java 8中，代码可以减短为如下这样：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list.sort(Comparator.comparing(Person::getLastName)</div><div class="line">        .thenComparing(Person::getFirstName));</div></pre></td></tr></table></figure></p>
<blockquote>
<p>本例使用了接口(<code>comparing</code>)的静态方法和下一章讨论的默认方法(<code>thenComparing</code>)。</p>
</blockquote>
<h2>3 默认方法</h2>
<p>为了在核心的Collection API中加入<code>stream</code>方法，Java需要另一个新特性——<em>默认方法</em>(也称作Defender方法，或虚拟扩展方法Virtual Extension methods)。这样，就可以为<code>List</code>接口增加新的方法而不破坏所有已有的实现(向后兼容性)。</p>
<p>默认方法可以加入到任何接口中，如默认方法这个名称表达的意思，任何实现了接口单没有重写方法的类会获得默认实现。</p>
<p>例如，<code>Collection</code>接口中的<code>stream</code>方法就类似如下的定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span> <span class="keyword">public</span> Stream <span class="title">stream</span>() {</div><div class="line">	<span class="keyword">return</span> StreamSupport.stream(spliterator());</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多分隔符(spliterator)的信息可以参考<a href="http://download.java.net/jdk8/docs/api/java/util/Collection.html#spliterator--" target="_blank" rel="external">the Java docs</a></p>
</blockquote>
<p>如果你需要其他行为的话，你可以重载默认方法。</p>
<h3>3.1 默认的和函数的(接口)</h3>
<p>接口可以有一个或多个默认方法，并且仍然是函数接口。</p>
<p>例如，来看看<code>Iterable</code>接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span> </span>{</div><div class="line">	Iterator iterator();</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> forEach(Consumer&lt; ? <span class="keyword">super</span> T&gt; action) {</div><div class="line">		Objects.requireNonNull(action);</div><div class="line">		<span class="keyword">for</span> (T t : <span class="keyword">this</span>) {</div><div class="line">			action.accept(t);</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>它包含了<code>iterator()</code>方法和<code>forEach</code>方法。</p>
<h3>3.2 多个默认方法</h3>
<p>在一些罕见的例子里，你的类实现了2个或多个接口，这些接口中可能定义了相同的默认方法，此时Java会跑出编译错误。你必须重载这些方法或选择其中一个接口的实现。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface Foo {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Foo!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">interface Bar {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Bar!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">class FooBar implements Foo, Bar {</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">void</span> talk() { Foo.<span class="keyword">super</span>.talk(); }			</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码中，<code>talk</code>被重载了，它调用了<code>Foo</code>的<code>talk</code>方法。这与你引用一个Java 8之前的超类的语法相类似。</p>
<h3>3.3 接口中的静态方法</h3>
<p>尽管与默认方法不是强相关，可以给接口加入静态方法对Java语言来说也是一个类似的改动。</p>
<p>例如，<em>Stream</em>接口中有很多静态方法。这让&quot;帮助&quot;方法很容易就能找到，因为他们能很容易在接口中直接定位，而不是在另一个类中，如<em>StreamUtil</em>或<em>Streams</em>。</p>
<p>这是一个新的<em>Stream</em>接口的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span>(T... values) {</div><div class="line"> <span class="keyword">return</span> Arrays.stream(values);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上方法根据给定值创建一个新的流。</p>
<h2>4 Stream(流)</h2>
<p><code>Stream</code>接口在Java 8中是如此基础的一部分，因此值得为其单独花一章来说。</p>
<h3>4.1 什么是Stream？</h3>
<p><code>Stream</code>接口在<code>java.util.stream</code>包中，它表示一列对象，有些类似Iterator接口。然而，与Iterator不同的是，它支持并行执行。</p>
<p>Stream接口支持map/filter/reduce模式，且惰性执行，这构成了Java 8函数式编程的基石(和lambda一起)。</p>
<p>出于性能考虑，也有一些派生自原始流的IntStream、DoubleStream和LongStream。</p>
<h3>4.2 生成Stream</h3>
<p>Java 8中有很多种方法来创建流，很多现有的Java核心库的类都有返回Stream的方法。</p>
<p><strong>Stream化的Collection(集合)</strong></p>
<p>最常见的创建Stream的方法是从<code>Collection</code>。</p>
<p>Colletion接口有两个默认方法来创建Stream：</p>
<ul>
<li><code>stream()</code>：返回源是Collection的一个顺序流；</li>
<li><code>parallelStream()</code>：返回源是Collection的一个可能并行的流。</li>
</ul>
<p>Stream的顺序性依赖于源头的Collection，正如Iterator一样。</p>
<p><strong>Stream化的文件</strong></p>
<p><code>BufferedReader</code>现在有了<code>lines()</code>方法可以返回Stream，例如<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"file"</span>);</div><div class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr)) {</div><div class="line">    br.lines().forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>也可以使用<code>Files.lines(Path filePath)</code>来把文件当做Stream来读取，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream st = Files.lines(Paths.get(<span class="string">"file"</span>))) {</div><div class="line">    st.forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>注意，这会惰性求值，它不会读取整个文件，仅在你调用时读取。</p>
<blockquote>
<p>！！！<code>Files.lines(Path)</code>：任何在处理文件时(在文件打开之后)抛出的<code>IOException</code>会被包装在<code>UncheckedIOException</code>中并抛出。</p>
</blockquote>
<p><strong>Stream化文件树</strong></p>
<p><code>Files</code>类中有几个静态方法可以用Stream来浏览文件树。</p>
<ul>
<li><code>list(Path dir)</code> – 给定目录中的文件Stream。</li>
<li><code>walk(Path dir)</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> – 从给定目录开始以深度有些方式便利文件树的Stream。</li>
<li><code>walk(Path dir, int maxDepth)</code> – 和<code>walk(dir)</code>相同，但是有最大深度限制。</li>
</ul>
<p><strong>Stream化文本模式</strong></p>
<p><a href="http://download.java.net/jdk8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">Pattern</a>类现在有了方法<code>splitAsStream(CharSequence)</code>可以创建Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"><span class="comment">// later on...</span></div><div class="line">Pattern patt = Pattern.compile(<span class="string">","</span>);</div><div class="line">patt.splitAsStream(<span class="string">"a,b,c"</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码使用了一个简易的模式，逗号','，将文本拆分成Stream并打印。这会产生以下输出：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line"><span class="built_in">c</span></div></pre></td></tr></table></figure></p>
<p><strong>无限Stream</strong></p>
<p>使用Stream的<code>generate</code>和<code>iterate</code>静态方法，你可以创建Stream包含无穷的对象。例如，可以调用<code>generate</code>来创建提供无穷对象的Stream，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; <span class="keyword">new</span> Dragon());</div></pre></td></tr></table></figure></p>
<p>例如，你可以使用这样的技术来产生CPU负载或内存使用信息的Stream。但是，你必须小心使用，它和无穷循环很类似。</p>
<p>你也可以使用<code>generate</code>来创建无穷随机数源的Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; Math.random());</div></pre></td></tr></table></figure></p>
<p>然而，<code>java.util.Random</code>类已经在新方法中提供了这些功能：<code>ints()</code>、<code>longs()</code>和<code>doubles()</code>。这些方法的每一个都类似如下定义：</p>
<ul>
<li><code>ints()</code>：随机整数的无穷Stream。</li>
<li><code>ints(int n, int m)</code>：n(含)和m(不含)之间的随机整数的无穷Stream。</li>
<li><code>ints(long size)</code>：给定长度的随机整数Stream。</li>
<li><code>ints(long size, int n, int m)</code>：给定长度，给定范围的随机整数Stream。</li>
</ul>
<p><code>iterate</code>方法和<code>generate</code>方法类似，但是它提供了初始值，和改变值的<code>Function</code>。例如，你可以用以下代码来便利整数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>)</div><div class="line">    .forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<p>这会持续打印出&quot;1234......&quot;直到你停止程序。</p>
<blockquote>
<p>我们之后会讨论一些停止无穷Stream的方法(<code>filter</code>和<code>limit</code>)。</p>
</blockquote>
<p><strong>Range</strong></p>
<p>还有一些方法是用于创建一段有限的整数Stream。</p>
<p>例如，<code>IntStream</code>接口的静态方法<code>range</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码会打印数字1到10。</p>
<p>每个基本Stream(IntStream、DoubleStream和LongStream)都有一个相应的<code>range</code>方法。</p>
<p><strong>Stream化任何对象</strong></p>
<p>使用以下两个方法，就可以从任意个元素或者数组创建Stream：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; s = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">Stream&lt;Object&gt; s2 = Arrays.stream(array);</div></pre></td></tr></table></figure></p>
<p><code>Stream.of</code>可以输入任意类型的任意个参数。</p>
<h3>4.3 For Each</h3>
<p>对Stream可以进行最基础操作就是循环，可以使用<code>forEach</code>方法来完成。</p>
<p>例如，打印当前目录下的所有文件，可以如下操作：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>对大多数情况而言，可以替代&quot;for循环&quot;，而且更加简洁，并且更加面向对象，因为代理了实际循环的实现。</p>
<h3>4.4 Map/Filter/Reduce</h3>
<p>lambda表达式和默认方法让我们在Java 8中可以实现map/filter/reduce，实际上，标准库中已经实现了这些。</p>
<p>例如，设想你从一列运动员姓名中获取他们的当前分数，并找出其中最高的分数。一个简单的<code>PlayerPoints</code>类和<code>getPoints</code>方法可以如下定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerPoints</span> </span>{</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> String name;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> points;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="title">PlayerPoints</span>(String name, <span class="keyword">long</span> points) {</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.points = points;</div><div class="line"> } </div><div class="line"> </div><div class="line"> <span class="keyword">public</span> String <span class="title">toString</span>() {</div><div class="line">   <span class="keyword">return</span> name + <span class="string">":"</span> + points;</div><div class="line"> }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getPoints</span>(<span class="keyword">final</span> String name) {</div><div class="line">	<span class="comment">// gets the Points for the Player</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>找出最高分运动员可以使用Java 8非常简单的实现，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  names.stream().map(name -&gt; <span class="keyword">new</span> PlayerPoints(name, getPoints(name)))</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">			(s1, s2) -&gt; (s1.points &gt; s2.points) ? s1 : s2);</div></pre></td></tr></table></figure></p>
<p>在Java 7中也可以使用<code>dollar</code>库(或其他类似Guava和Functional-Java的库)来实现，但是可能会非常的冗长，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  $(names).map(<span class="keyword">new</span> Function&lt;String, PlayerPoints&gt;() { </div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(String name) { </div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> PlayerPoints(name, getPoints(name));</div><div class="line">		}</div><div class="line">	})</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">	<span class="keyword">new</span> BiFunction&lt;PlayerPoints, PlayerPoints, PlayerPoints&gt;() {</div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(PlayerPoints s1, PlayerPoints s2) { </div><div class="line">			<span class="keyword">return</span> (s1.points &gt; s2.points) ? s1 : s2;</div><div class="line">		}</div><div class="line">	});</div></pre></td></tr></table></figure></p>
<p>用这种方法编程的最大益处(除了代码行数减少)是可以隐藏map/reduce的内在实现的能力。例如，map和reduce可能是并发实现的，允许你容易的发挥多处理器的优势。我们将在下面的章节介绍一种这么做的方法(ParallelArray)。</p>
<h3>4.5 Parallel Array(并行数组)</h3>
<p><code>ParallelArray</code>是JSR-166的一部分，但最终<a href="http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/" target="_blank" rel="external">被排除在标准的Java库</a>。它确实存在，并被发布到公共领域(可以通过JSR网站下载)。</p>
<p>虽然它早就在那，但是实在不易使用，直到闭包出现在Java语言中才改变了这一点。在Java 7中可以如下使用ParallelArray：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// with this class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> graduationYear;</div><div class="line">    <span class="keyword">double</span> gpa;</div><div class="line">}</div><div class="line"><span class="comment">// this predicate</span></div><div class="line"><span class="keyword">final</span> Ops.Predicate&lt;Student&gt; isSenior = </div><div class="line">	<span class="keyword">new</span> Ops.Predicate&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span>(Student s) {</div><div class="line">			<span class="keyword">return</span> s.graduationYear == Student.THIS_YEAR;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// and this conversion operation</span></div><div class="line"><span class="keyword">final</span> Ops.ObjectToDouble&lt;Student&gt; selectGpa = </div><div class="line">	<span class="keyword">new</span> Ops.ObjectToDouble&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> <span class="title">op</span>(Student student) {</div><div class="line">			<span class="keyword">return</span> student.gpa;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool fjPool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(fjPool, data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students.withFilter(isSenior)</div><div class="line">                         .withMapping(selectGpa)</div><div class="line">                         .max();</div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以这么做：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(pool,data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .withFilter((Student s) -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .withMapping((Student s) -&gt; s.gpa)</div><div class="line">    .max();</div></pre></td></tr></table></figure></p>
<p>然而，Java 8提供了<code>stream()</code>和<code>parallelStream()</code>使这项工作更加容易：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .parallelStream()</div><div class="line">    .filter(s -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .mapToDouble(s -&gt; s.gpa)</div><div class="line">    .max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p>这使从顺序执行的实现转为并行实现变得格外简单。</p>
<blockquote>
<p><strong>Groovy GPars</strong></p>
<p>如果使用Groovy和GPars库，现在可以类似的使用，如下所示：</p>
</blockquote>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GParsPool.withPool {</div><div class="line">   <span class="comment">// a map-reduce functional style (students is a Collection)</span></div><div class="line">   def bestGpa = students.parallel</div><div class="line">       .filter{ s -&gt; s.graduationYear == Student.THIS_YEAR }</div><div class="line">       .map{ s -&gt; s.gpa }</div><div class="line">       .max()</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>静态方法<code>GParsPool.withPool</code>输入一个闭包并使用多个方法增强任意Collection(使用Groovy的类别方法)。<code>parallel</code>方法实际上从给定的Collection创建了<code>ParallelArray</code>，并通过一个薄包装来使用它。</p>
</blockquote>
<h3>4.6 Peek(偷看)</h3>
<p>你可以&quot;偷看&quot;Stream来做一些操作但却不中断Stream。</p>
<p>例如，可以打印元素来调试代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName)</div><div class="line">    .peek(System.out::println)</div><div class="line">    .forEach(p -&gt; doSomething(p));</div></pre></td></tr></table></figure></p>
<p>可以使用任何想要的操作，但是<em>不能</em>修改元素，如果想修改的话，可以使用<code>map</code>来替代。</p>
<h3>4.7 Limit(限制)</h3>
<p><code>limit(int n)</code>方法可以用来限制Stream中元素为给定个数，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Random rnd = <span class="keyword">new</span> Random();</div><div class="line">rnd.ints().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码打印10个随机整数。</p>
<h3>4.8 Sort(排序)</h3>
<p>Stream也有<code>sort()</code>方法来给流排序。像所有Stream的<em>中间方法</em>(例如map、filter和peek)，<code>sort()</code>方法是惰性执行的，在中止操作调用(如reduce和forEach)之前，什么也不做。但是，你必须在对无限流调用<code>sort()</code>之前调用限制操作如<code>limit</code>。</p>
<p>例如，以下代码会抛出运行时异常(使用构建版本1.8.0-b132)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().sorted().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>然而，以下代码就工作正常：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().limit(<span class="number">10</span>).sorted()</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>也可以在调用<code>filter()</code>之后调用<code>sorted()</code>。例如，以下代码打印当前目录下的前5个Java文件的文件名：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName) <span class="comment">// still a path</span></div><div class="line">    .map(Path::toString) <span class="comment">// convert to Strings</span></div><div class="line">    .filter(name -&gt; name.endsWith(<span class="string">".java"</span>))</div><div class="line">    .sorted() <span class="comment">// sort them alphabetically</span></div><div class="line">    .limit(<span class="number">5</span>) <span class="comment">// first 5</span></div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码做了这些事情：</p>
<ul>
<li>列出当前目录下的所有文件。</li>
<li>将这些文件映射到文件名(译者注：即获取文件名)。</li>
<li>获取那些以&quot;.java&quot;结尾的文件名。</li>
<li>只取前5个文件名(按字母排序)。</li>
<li>打印这些文件名。</li>
</ul>
<h3>4.9 Collector(收集器)和统计量</h3>
<p>正因Stream是惰性求值，并支持并行执行，因此需要特别的方法来汇总结果，这就是Collector(收集器)。</p>
<p>Collector表示汇总Stream的元素成一个结果的方法，它包含3个部分：</p>
<ul>
<li>初始值。</li>
<li>将值加到初始值上的累加器。</li>
<li>将两个结果合并成一个的归并器。</li>
</ul>
<p>有两个方法来完成：<code>collect(supplier,accumulator,combiner)</code>和<code>collect(Collector)</code>(省略类型)。</p>
<p>可喜的是，Java 8提供的多个内建的Collector。可以通过如下方法Import这些类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.*;</div></pre></td></tr></table></figure></p>
<p><strong>简单的Collector</strong></p>
<p>最简单的collector是像<code>toList()</code>和<code>toCollection()</code>那样的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Accumulate names into a List</span></div><div class="line">List&lt;String&gt; list = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toList());</div><div class="line"></div><div class="line"><span class="comment">// Accumulate names into a TreeSet</span></div><div class="line">Set&lt;String&gt; set = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toCollection(TreeSet::<span class="keyword">new</span>));</div></pre></td></tr></table></figure></p>
<p><strong>Join(合并)</strong></p>
<p>如果你熟悉Apache Common的<code>StringUtil.join</code>，<code>joining</code>collector与其很相似。它可以使用给定的分隔符合并Stream，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String names = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<p>以上代码合并所有的名字为一个字符串，并使用逗号分割。</p>
<p><strong>统计量</strong></p>
<p>更加复杂的collector合并成单一值，例如，可以使用&quot;averaging&quot;Collector来获取平均值，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"\n-----&gt;Average line length:"</span>);</div><div class="line">System.out.println(</div><div class="line">    Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(averagingInt(String::length))</div><div class="line">        );</div></pre></td></tr></table></figure></p>
<p>以上代码计算文件&quot;Nio.java&quot;中的所有非空行长度的平均值。</p>
<p>有些情况下需要获取集合的多个统计量，但是因为Stream会因为调用<code>collect</code>而被消费，所以，必须一次性计算所有的统计量。这正是<strong>SummaryStatistics</strong>的功能，如果要使用的话，需要先import：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.IntSummaryStatistics;</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<code>summarizingInt</code>collector，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(summarizingInt(String::length));</div><div class="line"></div><div class="line">System.out.println(stats.getAverage());</div><div class="line">System.out.println(<span class="string">"count="</span> + stats.getCount());</div><div class="line">System.out.println(<span class="string">"max="</span> + stats.getMax());</div><div class="line">System.out.println(<span class="string">"min="</span> + stats.getMin());</div></pre></td></tr></table></figure></p>
<p>以上代码得到了和之前一样的平均值，并且同时也计算出了最大值、最小值和元素个数。</p>
<blockquote>
<p>也提供了<code>summarizingLong</code>和<code>summarizingDouble</code>。</p>
</blockquote>
<p>另一个等价的方法是，把Stream map到基础类型，然后调用<code>summaryStatistics()</code>，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">    .map(String::trim)</div><div class="line">    .filter(s -&gt; !s.isEmpty())</div><div class="line">    .mapToInt(String::length)</div><div class="line">    .summaryStatistics();</div></pre></td></tr></table></figure></p>
<h3>4.10 分组和分块</h3>
<p><code>groupingBy</code> collector根据提供的方法把元素分组，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by first letter of name</span></div><div class="line">List&lt;Dragon&gt; dragons = getDragons();</div><div class="line">Map&lt;Character,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(groupingBy(dragon -&gt; dragon.getName().charAt(<span class="number">0</span>)));</div></pre></td></tr></table></figure></p>
<p>类似的，<code>partitioningBy</code>方法创建一个布尔类型为键的映射，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by whether or not the dragon is green</span></div><div class="line">Map&lt;Boolean,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(partitioningBy(Dragon::isGreen));</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>并行分组</strong></p>
<p>为了并行的执行分组(如果不关心顺序的话)，可以使用<code>groupingByConcurrent</code>方法。被操作的Stream应该是无序的，这样分组才能并行执行，例如：</p>
<p><code>dragons.parallelStream().unordered().collect(groupingByConcurrent(Dragon::getColor));.</code></p>
</blockquote>
<h3>4.11 与Java 7的比较</h3>
<p>为了更好的展示Java 8的Stream的优势，以下是一些Java 7里的示例代码和新版代码的比较：</p>
<p><strong>求最大值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">double</span> max = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    <span class="keyword">if</span> (d &gt; max) {</div><div class="line">        max = d;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">max = list.stream().reduce(<span class="number">0.0</span>, Math::max);</div><div class="line"><span class="comment">// or</span></div><div class="line">max = list.stream().mapToDouble(Number::doubleValue).max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>计算平均值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">double</span> ave = <span class="number">0</span>;</div><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    total += d;</div><div class="line">}</div><div class="line">ave = total / ((<span class="keyword">double</span>) list.size());</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">ave = list.stream().mapToDouble(Number::doubleValue).average().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>打印数字1到10</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) {</div><div class="line">    System.out.println(i);</div><div class="line">}</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div><div class="line"><span class="comment">//or</span></div><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>).limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>合并多个字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7 using commons-util</span></div><div class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (Dragon dragon : dragons) </div><div class="line">    names.add(dragon.getName());</div><div class="line">String names = StringUtils.join(names, <span class="string">","</span>);</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">String names = dragons.stream()</div><div class="line">    .map(Dragon::getName)</div><div class="line">    .collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<h2>5 Optional类</h2>
<p>Java 8在<code>java.util</code>包中提供了<code>Optional</code>类来防止返回null值(会导致<code>NullPointerException</code>)。它和Google Guava的<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html" target="_blank" rel="external">Optional</a>很相似，也类似Nat Pryce的<a href="http://www.natpryce.com/articles/000776.html" target="_blank" rel="external">Maybe</a>类和Scala的Option类。</p>
<blockquote>
<p><strong>百万美元错误</strong></p>
<p>Tony Hoare，null的发明者，已经因为它的<a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake" target="_blank" rel="external">&quot;百万美元错误&quot;</a>而被记录在案。除了你对nul的看法，已经有人在编译期null检查部分和自动代码检查过程中做出了很大努力，例如，JSR-305中的<code>@Nonnull</code>注解。<code>Optional</code>让API设计者可以更简单的来避免null。</p>
</blockquote>
<p>可以用<code>Optional.of(x)</code>来包装一个非null值，<code>Optional.empty()</code>来表示值缺失，<code>Optional.ofNullable(x)</code>来从可能为空的引用创建<code>Optional</code>。</p>
<p>在创建Optional的实例之后，然后使用<code>isPresent()</code>确认是否有值，并用<code>get()</code>来获取值。Optional提供了一些其他有用的方法来处理值缺失：</p>
<ul>
<li><code>orElse(T)</code> – 如果Optional是空，则返回给定的值。</li>
<li><code>orElseGet(Supplier&lt;T&gt;)</code> – 如果Optional是空，则调用给定的提供者来产生一个值。</li>
<li><code>orElseThrow(Supplier&lt;X extends Throwable&gt;)</code> – 如果Optional是空，则调用给定的提供者来抛出一个异常。</li>
</ul>
<p>也提供了一些函数式(对lambda友好)的方法，如下：</p>
<ul>
<li><code>filter(Predicate&lt;? super T&gt; predicate)</code> – 过滤值并返回新的Optional。</li>
<li><code>flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code> – 进行Map操作并返回Optional。</li>
<li><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code> – 仅当有值(无返回值)的时候，执行给定的消费者</li>
<li><code>map(Function&lt;? super T,? extends U&gt; mapper)</code> – 用给定的Map方法并返回新的Optional。</li>
</ul>
<blockquote>
<p><strong>Stream Optional(流的Optional)</strong></p>
<p>新的<code>Stream</code>接口有一些返回Optional的方法(当Stream中没有值的时候)：</p>
<ul>
<li><code>reduce(BinaryOperator&lt;T&gt; accumulator)</code> – 把Stream reduce成单个值。、</li>
<li><code>max(Comparator&lt;? super T&gt; comparator)</code> – 返回最大值。</li>
<li><code>min(Comparator&lt;? super T&gt; comparator)</code> – 返回最小值。</li>
</ul>
</blockquote>
<h2>6 Nashorn</h2>
<p><em>Nashorn</em>替换了<code>Rhino</code>成为了Oracle JVM中默认的JavaScript引擎。由于使用的JVM的<code>invokedynamic</code>特性，Nashorn更加快，它也包含了命令行工具(<code>jjs</code>)。</p>
<h3>6.1 <code>jjs</code></h3>
<p>JDK 8包含了命令行工具<code>jjs</code>来运行JavaScript。</p>
<p>你可以通过命令行运行JavaScript文件(假定你已经把Java 8的bin目录放在了<code>$PATH</code>里面)：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jjs script.js</div></pre></td></tr></table></figure></p>
<p>这对运行脚本很有用，例如，假如你想很快求出几个数的和，如下：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line"><span class="keyword">var</span> sum = data.reduce(<span class="function"><span class="keyword">function</span><span class="params">(x, y)</span> </span>{<span class="keyword">return</span> x + y}, <span class="number">0</span>)</div><div class="line">print(sum)</div></pre></td></tr></table></figure></p>
<p>运行上述代码会打印<code>27</code>。</p>
<h3>6.2 脚本</h3>
<p>使用<code>-scripting</code>参数运行jjs进入交互的shell，然后就可以键入并执行JavaScript。</p>
<p>可以在字符串中嵌入变量并对它们求值，例如：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jjs&gt; <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">jjs&gt; print(<span class="string">"${date}"</span>)</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出当前的日期和时间。</p>
<h3>6.3 脚本引擎</h3>
<p>也可以在Java中动态的运行JavaScript。</p>
<p>首先，需要import脚本引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</div><div class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</div></pre></td></tr></table></figure></p>
<p>然后，调用<code>ScriptEngineManager</code>来获取Nashorn引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ScriptEngineManager engineManager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">ScriptEngine engine = engineManager.getEngineByName(<span class="string">"nashorn"</span>);</div></pre></td></tr></table></figure></p>
<p>现在就可以任意时候对JavaScript代码求值了：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">engine.eval(<span class="string">"p('Hello Nashorn');"</span>);</div></pre></td></tr></table></figure></p>
<p><code>eval</code>方法也可以用<code>Filereader</code>类型做输入参数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="keyword">new</span> FileReader(<span class="string">'library.js'</span>));</div></pre></td></tr></table></figure></p>
<p>这样就可以引入并运行任何JavaScript代码。然而，需要知道的是，浏览器中提供的典型变量（窗口，文档等）将不可用。</p>
<h3>6.4 引入</h3>
<p>在JavaScript中，可以通过<em>JavaImporter</em>引入并使用Java类和包。</p>
<p>例如，引入<code>java.util</code>、IO和NIO的包：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var imports = <span class="keyword">new</span> JavaImporter(java.util, java.io, java.nio.file);</div><div class="line">with (imports) {</div><div class="line">        var paths = <span class="keyword">new</span> LinkedList();</div><div class="line">        print(paths <span class="keyword">instanceof</span> LinkedList); <span class="comment">//true</span></div><div class="line">        paths.add(Paths.get(<span class="string">"file1"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file2"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file3"</span>));</div><div class="line">        print(paths) <span class="comment">// [file1, file2, file3]</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上展示了<code>paths</code>是<code>LinkedList</code>的实例，并打印list。</p>
<p>之后，就可以添加如下代码来把文本写入文件：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i &lt; paths.size(); i++)</div><div class="line">	Files.newOutputStream(paths.get(i))</div><div class="line">		.write(<span class="string">"test\n"</span>.getBytes());</div></pre></td></tr></table></figure></p>
<p>我们可以使用已有的Java类，也可以创建新的类。</p>
<h3>6.5 扩展</h3>
<p>可以使用<code>Java.type</code>和<code>Java.extend</code>方法来扩展Java类和接口。例如，可以扩展Callable接口并实现<code>call</code>方法：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> concurrent = <span class="keyword">new</span> JavaImporter(java.util, java.util.concurrent);</div><div class="line"><span class="keyword">var</span> Callable = Java.type(<span class="string">"java.util.concurrent.Callable"</span>);</div><div class="line"><span class="keyword">with</span> (concurrent) {</div><div class="line">  <span class="keyword">var</span> executor = Executors.newCachedThreadPool();</div><div class="line">  <span class="keyword">var</span> tasks = <span class="keyword">new</span> LinkedHashSet();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">200</span>; i++) {</div><div class="line">    <span class="keyword">var</span> MyTask = Java.extend(Callable, {call: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{print(<span class="string">"task "</span> + i)}})</div><div class="line">    <span class="keyword">var</span> task = <span class="keyword">new</span> MyTask();</div><div class="line">    tasks.add(task);</div><div class="line">    executor.submit(task);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3>6.6 Invocable</h3>
<p>也可以直接从Java中调用JavaScript方法。</p>
<p>首先，需要将引擎的类型转换为Invocable接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Invocable inv = (Invocable) engine;</div></pre></td></tr></table></figure></p>
<p>然后，调用任何方法只要简单的使用<code>invokeFunction</code>方法，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">inv.invokeFunction(<span class="string">"p"</span>, <span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p>
<p>最后，就可以调用<code>getInterface</code>方法用JavaScript来实现任意接口。</p>
<p>例如，已有如下的<code>JPrinter</code>接口，可以如下调用：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">JPrinter</span> </span>{</div><div class="line">    <span class="keyword">void</span> p(String s);</div><div class="line">}</div><div class="line"><span class="comment">// later on...</span></div><div class="line">JPrinter printer = inv.getInterface(JPrinter.class);</div><div class="line">printer.p(<span class="string">"Hello again!"</span>);</div></pre></td></tr></table></figure></p>
<h2>7 新的Date和Time API</h2>
<p>Java 8引入了新的Date/Time API，这些API线程安全、易用、比之前的API更加全面。Java的Calendar实现没有很多变化，这是因为它是首次引入，且<a href="http://www.joda.org/joda-time/" target="_blank" rel="external">Joda-Time</a>广泛的被认为是一个很好的替代。Java 8的新Date/Time API与Joda-Time非常相似。</p>
<h3>7.1 新的类</h3>
<p>引人注意的最注意差别是有多个不同的类来表示时间、日期、时间段、和特定时区的数据，也有一些不同日期类和时间类之间的转换器。</p>
<p>对不含时区信息的日期和时间，使用如下类：</p>
<ul>
<li><code>LocalDate</code> – 日、月、年。</li>
<li><code>LocalTime</code> – 仅含时间。</li>
<li><code>LocalDateTime</code> – 含日期和时间。</li>
</ul>
<p>对特定时区的时间，可以用<code>ZonedDateTime</code>。</p>
<p>在Java 8之前，为了计算之后8消失的时间，需要像下面这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Calendar cal = Calendar.getInstance();</div><div class="line">cal.add(Calendar.HOUR, <span class="number">8</span>);</div><div class="line">cal.getTime(); <span class="comment">// actually returns a Date</span></div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以更简单的这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime now = LocalTime.now();</div><div class="line">LocalTime later = now.plus(<span class="number">8</span>, HOURS);</div></pre></td></tr></table></figure></p>
<p>也有命名清晰的方法，如<code>plusDays</code>、<code>plusMonths</code>、<code>minusDays</code>、<code>minusMonths</code>。如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate thirtyDaysFromNow = today.plusDays(<span class="number">30</span>);</div><div class="line">LocalDate nextMonth = today.plusMonths(<span class="number">1</span>);</div><div class="line">LocalDate aMonthAgo = today.minusMonths(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>注意，每个方法都返回不同的<code>LocalDate</code>实例，原本的LocalDate对象<code>today</code>并未变化。这是因为新的Date-Time类型是不可变的，是它们变得线程安全和可缓存的。</p>
<h3>7.2 创建</h3>
<p>创建性的日期和时间对象在Java 8中更加容易也更加不易犯错。每个类型都是不可变的，且有静态工厂方法。</p>
<p>例如，创建新的LocalDate在2014-03-15这天，可以如下简单的创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>考虑跟多类型安全的话，可以使用新的枚举类型<code>Month</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>也可以通过结合LocalDate和LocalTime的实例来简单的创建LocalDateTime对象：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.of(<span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>);</div><div class="line">LocalDateTime datetime = date.atTime(time);</div></pre></td></tr></table></figure></p>
<p>也能调用(LocalDate的)以下方法：</p>
<ul>
<li><code>atTime(int hour, int minute)</code></li>
<li><code>atTime(int hour, int minute, int second)</code></li>
<li><code>atTime(int hour, int minute, int second, int nanoOfSecond)</code></li>
</ul>
<p>每个类都有<code>now()</code>方法，相应的返回调用时瞬间的时间(或日期)。</p>
<h3>7.3 枚举类型</h3>
<p>Java 8增加了一些枚举类型，如<code>java.time.temporal.ChronoUnit</code>用来表示类似&quot;天&quot;或&quot;小时&quot;的概念替换掉Calendar API中的整数常量，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</div><div class="line">LocalDate nextMonth = today.plus(<span class="number">1</span>, ChronoUnit.MONTHS);</div><div class="line">LocalDate nextYear = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</div><div class="line">LocalDate nextDecade = today.plus(<span class="number">1</span>, ChronoUnit.DECADES);</div></pre></td></tr></table></figure></p>
<p>也有<code>java.time.DayOfWeek</code>、<code>java.time.Month</code>枚举类型。</p>
<p><code>Month</code>枚举类型可以用来创建LocalDates，也可以由<code>LocalDate::getMonth</code>返回。如，以下是创建LocalDate并打印月份的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import java.time.Month;</span></div><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">27</span>);</div><div class="line">System.out.println(date.getMonth());</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出&quot;MARCH&quot;。</p>
<h3>7.4 Clock(时钟)</h3>
<p><code>Clock</code>类可以用于连接日期和时间以构建测试。在生成环境可以用普通时钟，在测试环境可以用另一个时钟。</p>
<p>获取默认的时钟，可以用以下代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clock.systemDefaultZone();</div></pre></td></tr></table></figure></p>
<p>然后clock就可以传入进工厂方法，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.now(clock);</div></pre></td></tr></table></figure></p>
<h3>7.5 时间区间和时间长度</h3>
<p>模拟人的理解，Java 8有两个类型来表示时间差，时间区间和时间长度(Period and Duration)。</p>
<p>时间长度是基于时间的时间量，例如&quot;34.5秒&quot;；时间区间是基于日期的时间量，例如&quot;2年3个月4天&quot;。</p>
<p>时间区间和时间长度可以通过<code>between</code>方法来确定：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Period p = Period.between(date1, date2);</div><div class="line">Duration d = Duration.between(time1, time2);</div></pre></td></tr></table></figure></p>
<p>也可以通过静态方法来创建，例如，时间长度可以通过任意值的天、小时、分、秒来创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Duration twoHours = Duration.ofHours(<span class="number">2</span>);</div><div class="line">Duration tenMinutes = Duration.ofMinutes(<span class="number">10</span>);</div><div class="line">Duration thirtySecs = Duration.ofSeconds(<span class="number">30</span>);</div></pre></td></tr></table></figure></p>
<p>Java 8的LocalTime类型可以加减时间区间和时间长度，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime t2 = time.plus(twoHours);</div></pre></td></tr></table></figure></p>
<h3>7.6 时间调整(<code>TemporalAdjusters</code>)</h3>
<p><code>TemporalAdjusters</code>可以用来做很麻烦的日期&quot;数学计算&quot;，这在业务功能中很常用。例如，可以用来获取&quot;某月的第一天&quot;和&quot;下个周二&quot;。</p>
<p><code>java.time.temporal.TemporalAdjusters</code>类包含了一批有用的方法来创建TemporalAdjuster，以下是其中一部分：</p>
<ul>
<li><code>firstDayOfMonth()</code></li>
<li><code>firstDayOfNextMonth()</code></li>
<li><code>firstInMonth(DayOfWeek)</code></li>
<li><code>lastDayOfMont()</code></li>
<li><code>next(DayOfWeek)</code></li>
<li><code>nextOrSame(DayOfWeek)</code></li>
<li><code>previous(DayOfWeek)</code></li>
<li><code>previousOrSame(DayOfWeek)</code></li>
</ul>
<p>用<code>TemporalAdjuster</code>的<code>with</code>方法，该方法返回date-time或date对象调整后的副本，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</div><div class="line"><span class="comment">//...</span></div><div class="line">LocalDate nextTuesday = LocalDate.now().with(next(DayOfWeek.TUESDAY));</div></pre></td></tr></table></figure></p>
<h3>7.7 Instant(即时)</h3>
<p><code>Instant</code>类表示精确到纳秒的时间点，它构成了Java 8的date-time API中计算时间的基础。</p>
<p>跟老的Date类很像，<code>Instant</code>也是从&quot;纪元&quot;(1970-01-01)开始计算时间的，且不考虑时区。</p>
<h3>7.8 时区</h3>
<p>时区是用<code>java.time.ZoneId</code>类来表示的。共有两种时区标识，基于固定偏移的和基于地理区域的。这可以用来补偿类似&quot;夏令时&quot;之类复杂情况的时间。</p>
<p>可以通过很多方法来获取时区标识的实例，以下是两个示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ZoneId mountainTime = ZoneId.of(<span class="string">"America/Denver"</span>);</div><div class="line">ZoneId myZone = ZoneId.systemDefault();</div></pre></td></tr></table></figure></p>
<p>如果要打印所有可用的标识，可以调用<code>getAvailableZoneIds()</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(ZoneId.getAvailableZoneIds());</div></pre></td></tr></table></figure></p>
<h3>7.9 向后兼容性</h3>
<p>原始的Date和Calendar对象包含<code>toInstant()</code>方法来转换到新的Date-Time API，可以调用<code>ofInstant(Insant,ZoneId)</code>方法来获取<code>LocalDateTime</code>或<code>ZonedDateTime</code>对象，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Date date = <span class="keyword">new</span> Date();</div><div class="line">Instant now = date.toInstant();</div><div class="line">LocalDateTime dateTime = LocalDateTime.ofInstant(now, myZone);</div><div class="line">ZonedDateTime zdt = ZonedDateTime.ofInstant(now, myZone);</div></pre></td></tr></table></figure></p>
<h2>8 再也没有永久代了</h2>
<blockquote>
<p>发布的实现将把类的元数据放在本地内存，并将内部的字符串和静态类移至Java堆中。<a href="http://openjdk.java.net/jeps/122" class="uri" target="_blank" rel="external">http://openjdk.java.net/jeps/122</a></p>
</blockquote>
<p>大多数情况的类元数据内存分配现在被分配在了本地内存。这意味着不用再设置&quot;XX:PermSize&quot;选项了(实际上也没有了)。</p>
<p>这也意味着，在内存溢出的时候，你会得到&quot;java.lang.OutOfMemoryError: Metadata space&quot;的错误信息，而不是之前的&quot;java.lang.OutOfMemoryError: Permgen space&quot;</p>
<p>这是某种程度上Oracle JRockit和HotSpot两个JVM的一致性。</p>
<h2>9 杂项</h2>
<p>Java 8有大量你可能会忽略的新功能，因为你的注意了都被lambda吸引去了。以下是这些功能的部分：</p>
<ul>
<li><code>java.util.Base64</code></li>
<li>加密算法更新(很多)</li>
<li>JDBC 4.2</li>
<li>可重复的注解</li>
<li>类型的注解</li>
</ul>
<p>如果想获得更完整的列表，请参考<a href="http://openjdk.java.net/projects/jdk8/features/" target="_blank" rel="external">官方列表</a>。</p>
<h3>9.1 Base64</h3>
<p>知道现在，Java开发者必须依赖第三方库来编码和解码Base-64。由于这是个很常用的操作，大型的项目通常会包含多个不同的Base64实现。例如：Apache common-codec、Spring和Guava都有独立的实现。</p>
<p>出于这个原因，Java 8引入了<code>java.util.Base64</code>，其行为类似Base64的编码和解码器，有以下方法：</p>
<ul>
<li><code>getEncoder()</code></li>
<li><code>getDecoder()</code></li>
<li><code>getUrlEncoder()</code></li>
<li><code>getUrlDecoder()</code></li>
</ul>
<p>每个工厂方法返回编码器或者解码器。</p>
<p>URL Base64编码器提供URL和文件地址安全(62是-，63是_)的编码。</p>
<h3>9.2 Java类型的注解</h3>
<p>Java 8之前，注解可以用于任意的申明。在Java 8中，注解可以用于<em>类型的使用</em>，以下是一些示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Class instance creation:</span></div><div class="line"><span class="keyword">new</span> <span class="annotation">@Interned</span> RocketShip();</div><div class="line"></div><div class="line"><span class="comment">// Type cast:</span></div><div class="line">notNullString = (<span class="annotation">@NonNull</span> String) str;</div><div class="line"></div><div class="line"><span class="comment">// implements clause:</span></div><div class="line">class ImmutableSet&lt;T&gt; implements</div><div class="line">        <span class="annotation">@Readonly</span> Set&lt;<span class="annotation">@Readonly</span> T&gt; { ... }</div><div class="line"></div><div class="line"><span class="comment">// Thrown exception declaration:</span></div><div class="line"><span class="keyword">void</span> launchRocket() <span class="keyword">throws</span></div><div class="line">   	<span class="annotation">@Critical</span> FireException { ... }</div></pre></td></tr></table></figure></p>
<p>新功能注意目标在于支持类型检查的框架，如<a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="external">Checker</a>。这些框架在编译期就可以协助找到代码中的错误。</p>
<h3>9.3 可重复的注解</h3>
<p>Java 8允许使用<code>@Repeatable</code>注解的注解重复使用。</p>
<p>例如，假设你在编写一个游戏，并且想使用注解来调度方法何时被调用，你可以使用多个注解申明多个调度策略：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the first of the month and every monday at 7am</span></div><div class="line"><span class="annotation">@Schedule</span>(dayOfMonth=<span class="string">"first"</span>)</div><div class="line"><span class="annotation">@Schedule</span>(dayOfWeek=<span class="string">"Monday"</span>, hour=<span class="number">7</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGoblinInvasion</span>() { ... }</div></pre></td></tr></table></figure></p>
<p>为了将这些变得可能，你需要：</p>
<ul>
<li><code>Schedule</code>注解需要使用元注解<code>@Repeatable</code>。</li>
<li>需要另一个注解通过<code>@Repeatable</code>注解来申明。</li>
</ul>
<p>由于Java注重向后兼容性，重复的注解实际上是和另一个注解(即你的注解)一起保存的。<code>@Repeatable</code>注解的输入是一个包含注解的类，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Schedule.java</span></div><div class="line"><span class="annotation">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedule</span> </span>{...}</div><div class="line"><span class="comment">// Schedules.java</span></div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedules</span> </span>{</div><div class="line">    Schedule[] value;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>现在Schedule就是一个<code>可重复的注解</code>。</p>
<p>可以使用反射在运行期访问可重复的注解。完成这些的新方法是<code>getAnnotationsByType</code>(Class annotationClass)，在<code>Class</code>、<code>Constructor</code>和<code>Method</code>等上都有。他返回所有这样注解的数组(如果没有的话，返回空数组)。</p>
<h2>10 Java 8中的函数式编程</h2>
<p>Java 8计划添加很多函数式语言的特性却不很显著的改动Java语言。</p>
<p>当lambda表达式、方法引用、Stream接口和不可变的数据类型结合在一起，Java就可以进行所谓的&quot;函数式编程&quot;(“functional programming” (FP))了。</p>
<p>处于本书的目的，函数式编程的三大支柱是：</p>
<ul>
<li>函数</li>
<li>不可变性</li>
<li>并发性</li>
</ul>
<h3>10.1 函数</h3>
<p>当然，如其名所示，函数式编程是基于函数是第一类型的特性。Java 8可以说通过Lambda项目和<em>函数接口</em>把函数提升到了第一类型。</p>
<p><code>Function</code>接口(包括相关的接口<code>IntFunction</code>、<code>DoubleFunction</code>、<code>LongFunction</code>、<code>BiFunction</code>等)体现了Java 8在提升函数到对象过程中做出的妥协。该接口允许函数像参数一样传递，像变量一样保存，以及可以由方法返回。</p>
<p><code>Function</code>接口有以下默认方法：</p>
<ul>
<li><code>andThen(Function)</code>: 返回一个合成函数，该函数先在输入上调用本函数，在在结果上调用给定的函数。</li>
<li><code>compose(Function)</code>: 和<code>andThen</code>类似，但是顺序不一样(即，先在输入上调用给定的函数，再调用本函数)。</li>
<li><code>identity()</code>: 返回一个函数，该函数总是返回其输入值。</li>
</ul>
<p>你可以使用这些方法来创建一个创建函数的链，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer,String&gt; f = Function.&lt;Integer&gt;identity()</div><div class="line">        .andThen(i -&gt; <span class="number">2</span>*i).andThen(i -&gt; <span class="string">"str"</span> + i);</div></pre></td></tr></table></figure></p>
<p>返回的函数输入一个整数，乘以2，然后在前面添加&quot;str&quot;。</p>
<p>可以使用<code>andThen</code>任意多次来创建一个函数，记住，函数可以被传递进和返回自方法。以下是一个使用新的Date-Time API的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Function&lt;LocalDate,LocalDateTime&gt; <span class="title">dateTimeFunction</span>(</div><div class="line">    <span class="keyword">final</span> Function&lt;LocalDate,LocalDate&gt; f) {</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> f.andThen(d -&gt; d.atTime(<span class="number">2</span>, <span class="number">2</span>));</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该方法输入是一个操作<code>LocalDate</code>的函数，并转换为输出<code>LocalDateTime</code>(在时间上午<code>02:02</code>)的函数。</p>
<p><strong>Tuple(元组)</strong></p>
<p>如果需要一个有多于两个参数方法的函数接口(如，&quot;TriFunction&quot;)，那么你需要使用库自己生成。另一个处理这个问题的方法是使用一个叫<em>Tuple</em>的数据结构。</p>
<p>Tuple是一个有类型的数据结构，用于保存一列元素。一些语言，如Scala，对Tuple有内建的支持。Tuple在处理多个相关的值，但却不希望有创建新类的开销的时候很有用。</p>
<p>以下一个非常简单的实现两个元素Tuple的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A _1;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B _2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Tuple2</span>(A a, B b) {</div><div class="line">            <span class="keyword">this</span>._1 = a;</div><div class="line">            <span class="keyword">this</span>._2 = b;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> A <span class="title">get_1</span>() {</div><div class="line">            <span class="keyword">return</span> _1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> B <span class="title">get_2</span>() {</div><div class="line">            <span class="keyword">return</span> _2;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>元组也能让你近似返回多个值。</p>
<blockquote>
<p>Java中有多个可用的Tuple的实现，例如<a href="http://www.javatuples.org/" target="_blank" rel="external">javatuples</a>和<a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a>。</p>
</blockquote>
<h3>10.2 不可变性</h3>
<p>在函数式编程中，状态被认为是有害的，需要尽可能去避免，相反，<em>immutable</em>(不可变的)数据结构很受推荐。例如，<code>String</code>就是Java中的一个不可变类型。</p>
<p>正如你所知，Java 8的新Date-Time类是不可变的。而你可能没有意识到的是，<em>几乎所有</em>新加入Java 8的类都是不可变的(如Optional和Stream)。</p>
<p>然而，在使用Java 8的函数式模式的时候，必须小心防止又陷入可变模式的思维定势。例如，以下代码是应当避免的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] myCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">list.forEach(dragon -&gt; {</div><div class="line">    <span class="keyword">if</span> (dragon.isGreen()) myCount[<span class="number">0</span>]++;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>虽然你可能很聪明，但是这样的代码会导致问题，相反，你应该使用类似下面的做法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.stream().filter(Dragon::isGreen).count();</div></pre></td></tr></table></figure></p>
<p>如果发现你自己又要求助于可变性的时候，考虑是否可以使用“filter”、“map”、“reduce”和“collect”的结合做替代。</p>
<h3>10.3 并发性</h3>
<p>由于多核处理器越来越普及，并发编程变得更加重要。函数式编程为并发编程创建了坚实的基础，Java 8也使用多种方式支持并发性。</p>
<p>第一种方式是Collection的<code>parallelStream()</code>方法。它提供了一条并发使用Stream的捷径，然而，和所有优化一样，你需要测试来确认代码实际上变得更快了，并保守是使用它。太多的并发性，实际上会导致程序变慢。</p>
<p>第二种Java 8支持并发的方式是使用新的<code>CompletableFuture</code>类。它包含<code>supplyAsync</code>静态方法，其输入是函数接口<code>Supplier</code>(生产者)；它还包含方法<code>thenAccept</code>，其输入是<code>Consumer</code>(消费者)，用于处理任务的完成。<code>CompletableFuture</code>在另一个线程中调用给定的<code>Supplier</code>，并在完成时执行<code>Consumer</code>。</p>
<p>当和类似<code>CountDownLatch</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>等的类连接起来，就可以实现线程安全，并发的类似函数式的代码，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    AtomicReference&lt;DragonDistance&gt; closest = </div><div class="line">        <span class="keyword">new</span> AtomicReference&lt;&gt;(DragonDistance.worstMatch());</div><div class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(dragons.size());</div><div class="line">    dragons.forEach(dragon -&gt; {</div><div class="line">        CompletableFuture.supplyAsync(() -&gt; dragon.distance(location))</div><div class="line">          .thenAccept(result -&gt; {</div><div class="line">            closest.accumulateAndGet(result, DragonDistance::closest);</div><div class="line">            latch.countDown();</div><div class="line">            });</div><div class="line">        });</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        latch.await();</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Interrupted during calculations"</span>, e);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> closest.get().getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上例找到最近的龙的位置(假设Dragon的<code>distance</code>方法会导致耗时的计算)。</p>
<p>然而，这可以用<code>parallelStream()</code>默认方法来简化(因为过程中只有一种计算)，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    <span class="keyword">return</span> dragons.parallelStream()</div><div class="line">      .map(dragon -&gt; dragon.distance(location))</div><div class="line">      .reduce(DistancePair.worstMatch(), DragonDistance::closest)</div><div class="line">      .getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码进行了和之前的例子实质上相同的任务，但是更加简洁(函数式)。</p>
<h3>10.4 尾调用优化</h3>
<p>函数式编程的一个标志是<em>尾调用递归</em><a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>。它用迭代的方式(函数式编程中没有迭代)处理相同的问题，不幸的是，如果没有编译器适当的优化，它会导致栈溢出。</p>
<p><em>尾调用优化</em>指编译器将递归的函数调用转化为循环来避免栈溢出。例如，Lisp中使用尾调用递归的函数会自动进行这样的优化。</p>
<p>Java 8和很多其他语言一样不支持尾调用优化(目前为止)。然而，使用类似下面这样的接口来预估是可能的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tail</span>&lt;<span class="title">T</span>&gt; </span>{</div><div class="line"></div><div class="line">    Tail&lt;T&gt; apply();</div><div class="line"></div><div class="line">    <span class="keyword">default</span> <span class="keyword">boolean</span> isDone() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T result() {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not done yet."</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T invoke() {</div><div class="line">        <span class="keyword">return</span> Stream.iterate(<span class="keyword">this</span>, Tail::apply)</div><div class="line">                .filter(Tail::isDone)</div><div class="line">                .findFirst()</div><div class="line">                .get()</div><div class="line">                .result();</div><div class="line">    }</div></pre></td></tr></table></figure></p>
<p><code>Tail</code>接口有3个默认方法和1个抽象方法(<code>apply</code>)，<code>invoke()</code>方法包含了&quot;尾调用优化&quot;的主体：</p>
<ul>
<li>它使用了Stream的<code>iterate</code>方法带来的便利来创建无限Stream，这回持续的调用尾的<code>apply</code>方法。</li>
<li>然后，直到<code>isDone()</code>返回真的时候，调用<code>filter</code>和<code>findFirst</code>来停止Stream。</li>
<li>最后，返回结果。</li>
</ul>
<p>为了实现&quot;完成&quot;条件，Tail需要有以下额外的静态方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &lt;T&gt; Tail&lt;T&gt; done(<span class="keyword">final</span> T value) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tail&lt;T&gt;() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> T <span class="title">result</span>() {</div><div class="line">          <span class="keyword">return</span> value;</div><div class="line">        }  </div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span>() {</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> Tail&lt;T&gt; <span class="title">apply</span>() {</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not supported."</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用<code>Tail</code>接口，你就可以在Java 8中轻易的模拟尾调用递归。以下是使用这个接口计算<em>阶乘</em>的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">fastFactorial</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> fastFactorial(<span class="number">1</span>L, n).invoke();</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Tail&lt;Long&gt; <span class="title">fastFactorial</span>(<span class="keyword">long</span> x, <span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> () -&gt; {</div><div class="line">        <span class="keyword">switch</span> (n) {</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> Tail.done(x);</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> fastFactorial(x * n, n - <span class="number">1</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用这个方法，就可以获取极快的程序运行速度而仍然使用函数式风格。</p>
<p>当然，JVM本身已经做了很多优化，因此这可能不总是最佳的方法。但是，这值得记在脑子里。</p>
<h2>11 结论</h2>
<p>感谢你阅读了这个Java 8的简短介绍。希望你已经学到很多，并已经准备好开始自己使用。</p>
<p>综上，Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional</li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
</ul>
<p>如果要更总Java未来可能的加入的特性，可能需要参考<a href="http://openjdk.java.net/jeps/0" target="_blank" rel="external">JEPS</a></p>
<h2>反向移植</h2>
<p>如果处于一些原因无法立即更新到Java 8。也有一些方法反向移植一些Java 8的特性到之前版本。</p>
<p>对每个特性，以下是反向移植或类似的库：</p>
<ul>
<li>Lambdas – <a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a></li>
<li>Lazily Evaluated Sequences – <a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a></li>
<li>Optional – <a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">guava</a></li>
<li>Date/Time – <a href="http://www.threeten.org/" target="_blank" rel="external">ThreeTen</a></li>
<li>Nashorn – <a href="https://bitbucket.org/ramonza/nashorn-backport" target="_blank" rel="external">nashorn-backport</a></li>
</ul>
<p>请谨慎使用反向移植。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p>译者注：本文原地址在<a href="https://leanpub.com/whatsnewinjava8/read" class="uri" target="_blank" rel="external">https://leanpub.com/whatsnewinjava8/read</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>译者注：这里指Optional类<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>lambda表达式<em>不是</em>匿名类，实际上它在字节码中使用了<code>invokedynamic</code>(译者注：动态调用)。<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>下一节中介绍&quot;函数接口&quot;的含义。<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>当然，你这里需要加一个<code>catch</code>语句处理异常。<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>实际的方法签名是<code>walk(Path start, FileVisitOption... options)</code>，但是可能用<code>walk(Path start)</code>就可以。<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>尾调用递归是一个函数的调用作为这个函数的最后动作发生。<a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多]]>
    </summary>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Translation" scheme="http://valleylord.github.io/tags/Translation/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/categories/Java/"/>
    
  </entry>
  
</feed>
