<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[褚哥说|]]></title>
  <subtitle><![CDATA[我想写一些东西]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://valleylord.github.io/"/>
  <updated>2015-12-13T10:21:44.892Z</updated>
  <id>http://valleylord.github.io/</id>
  
  <author>
    <name><![CDATA[Valleylord]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker入门介绍]]></title>
    <link href="http://valleylord.github.io/post/201512-docker-starter/"/>
    <id>http://valleylord.github.io/post/201512-docker-starter/</id>
    <published>2015-12-13T01:46:00.000Z</published>
    <updated>2015-12-13T10:21:27.398Z</updated>
    <content type="html"><![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machine）的效果。与虚拟机主要的不同在于，虚拟机是对硬件的抽象，也就是说，需要在虚拟机上先运行操作系统，然后在操作系统中运行应用程序；而容器是对资源的抽象，也就是说，容器是建立在操作系统之上，将操作系统提供的资源予以隔离并分别提供给不同的应用。两种虚拟化的方式各有千秋，从隔离度上来说，虚拟机要比容器强，但在性能上，容器的方式更优，因为容器少运行了一层操作系统。</p>
<h2>Linux CGroup</h2>
<p>Linux的CGroup技术为Docker提供了系统资源上的隔离，常用的被隔离资源有cpu、内存、网络流量等等<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。提供这些资源隔离的主要目的是，让单个容器无法占用全部资源，这样会影响系统中其他容器或进程。</p>
<p>CGroup支持隔离的资源有以下一些。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">blkio — 这​​​个​​​子​​​系​​​统​​​为​​​块​​​设​​​备​​​设​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​，比​​​如​​​物​​​理​​​设​​​备​​​（磁​​​盘​​​，固​​​态​​​硬​​​盘​​​，USB 等​​​等​​​）。</div><div class="line"><span class="built_in">cpu</span> — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​ <span class="built_in">CPU</span> 的​​​ cgroup 任​​​务​​​访​​​问​​​。​​​</div><div class="line">cpuacct — 这​​​个​​​子​​​系​​​统​​​自​​​动​​​生​​​成​​​ cgroup 中​​​任​​​务​​​所​​​使​​​用​​​的​​​ <span class="built_in">CPU</span> 报​​​告​​​。​​​</div><div class="line">cpuset — 这​​​个​​​子​​​系​​​统​​​为​​​ cgroup 中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​ <span class="built_in">CPU</span>（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​。​​​</div><div class="line">devices — 这​​​个​​​子​​​系​​​统​​​可​​​允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备​​​。​​​</div><div class="line">freezer — 这​​​个​​​子​​​系​​​统​​​挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务​​​。​​​</div><div class="line">memory — 这​​​个​​​子​​​系​​​统​​​设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告​​​。​​​</div><div class="line">net_cls — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​等​​​级​​​识​​​别​​​符​​​（classid）标​​​记​​​网​​​络​​​数​​​据​​​包​​​，可​​​允​​​许​​​ Linux 流​​​量​​​控​​​制​​​程​​​序​​​（tc）识​​​别​​​从​​​具​​​体​​​ cgroup 中​​​生​​​成​​​的​​​数​​​据​​​包​​​。​​​</div><div class="line">net_prio — 这个子系统用来设计网络流量的优先级</div><div class="line">hugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。</div></pre></td></tr></table></figure></p>
<p>下面举个简单的例子说明一下，假设有一个死循环的程序，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"PID [%5d]\n"</span>, getpid());</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;) i++;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该程序先打印自己的pid，然后进入死循环。编译后运行，然后运行<code>top</code>查看cpu占用率，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./test </div><div class="line">PID [ <span class="number">9271</span>]</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">632</span>    <span class="number">544</span> R <span class="number">100.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">27.75</span> test</div></pre></td></tr></table></figure></p>
<p>不要退出<code>./test</code>，然后在<code>/sys/fs/cgroup/cpu/</code>下建立一个目录<code>test</code>（需要root权限），然后在<code>cpu.cfs_quota_us</code>中写入30000。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir test</span></div><div class="line"></div><div class="line"><span class="comment"># ls test</span></div><div class="line">cgroup.clone_children  cpu.cfs_period_us  cpu.shares  notify_on_release</div><div class="line">cgroup.procs           cpu.cfs_quota_us   cpu.stat    tasks</div><div class="line"></div><div class="line"><span class="comment"># echo 30000 &gt; /sys/fs/cgroup/cpu/test/cpu.cfs_quota_us</span></div></pre></td></tr></table></figure></p>
<p>但是运行下面命令之后，cpu立刻降低到30%（与之前的30000对应），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo 9271 &gt;&gt; /sys/fs/cgroup/cpu/test/tasks</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                             </div><div class="line"><span class="number">9271</span> arnes     <span class="number">20</span>   <span class="number">0</span>    <span class="number">4204</span>    <span class="number">796</span>    <span class="number">716</span> R  <span class="number">29.9</span>  <span class="number">0.0</span>   <span class="number">1</span>:<span class="number">55.29</span> test</div></pre></td></tr></table></figure></p>
<p>可以看到，使用CGroup限制cpu占用率已经生效。</p>
<h2>Linux Namespace</h2>
<p>只有资源的隔离显然不足以隔离不同的应用，还需要有对访问权限的隔离，这就是Linux Namespace的主要作用。Linux Namespace是Linux提供的一种内核级别环境隔离的方法<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，主要是在使用<code>clone</code>系统调用的时候，添加不同的隔离效果参数来达到。注意，此处的隔离仅仅是应用层面的隔离，这些clone出来的进程仍然使用相同的Linux内核。</p>
<p>可以达到的不同的隔离效果有：</p>
<table>
<thead>
<tr class="header">
<th align="left">分类</th>
<th align="left">系统调用参数</th>
<th align="left">相关内核版本</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Mount namespaces</td>
<td align="left">CLONE_NEWNS</td>
<td align="left">Linux 2.4.19</td>
</tr>
<tr class="even">
<td align="left">UTS namespaces</td>
<td align="left">CLONE_NEWUTS</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="odd">
<td align="left">IPC namespaces</td>
<td align="left">CLONE_NEWIPC</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr class="even">
<td align="left">PID namespaces</td>
<td align="left">CLONE_NEWPID</td>
<td align="left">Linux 2.6.24</td>
</tr>
<tr class="odd">
<td align="left">Network namespaces</td>
<td align="left">CLONE_NEWNET</td>
<td align="left">始于Linux 2.6.24 完成于 Linux 2.6.29</td>
</tr>
<tr class="even">
<td align="left">User namespaces</td>
<td align="left">CLONE_NEWUSER</td>
<td align="left">始于 Linux 2.6.23 完成于 Linux 3.8)</td>
</tr>
</tbody>
</table>
<p>下面举例看一下Namespace的隔离效果，假设有如下c代码，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _GNU_SOURCE</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/wait.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sched.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;signal.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义一个给 clone 用的栈，栈大小1M */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> STACK_SIZE (1024 * 1024)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> container_stack[STACK_SIZE];</div><div class="line"></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> container_args[] = {</div><div class="line">    <span class="string">"/bin/bash"</span>,</div><div class="line">    NULL</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> container_main(<span class="keyword">void</span>* arg)</div><div class="line">{</div><div class="line">    <span class="comment">/* 查看子进程的PID，我们可以看到其输出子进程的 pid 为 1 */</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Container [%5d] - inside the container!\n"</span>, getpid());</div><div class="line">    sethostname(<span class="string">"container"</span>,<span class="number">10</span>);</div><div class="line">    system(<span class="string">"mount -t proc proc /proc"</span>);</div><div class="line">    execv(container_args[<span class="number">0</span>], container_args);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Something's wrong!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent [%5d] - start a container!\n"</span>, getpid());</div><div class="line">    <span class="comment">/*启用PID namespace - CLONE_NEWPID*/</span></div><div class="line">    <span class="keyword">int</span> container_pid = clone(container_main, container_stack+STACK_SIZE,</div><div class="line">            CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);</div><div class="line">    waitpid(container_pid, NULL, <span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Parent - container stopped!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码主要使用了<code>CLONE_NEWPID | CLONE_NEWNS</code>两个参数，在Namespace中隔离出pid=1的父进程，同时使用文件系统隔离，将<code>/proc</code>与外界隔离开来，这样也就看不到容器外的进程。在这样的环境下运行bash，可以看到如下效果（需要root运行），</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> ./test </div><div class="line">Parent [<span class="number">10328</span>] - start a container!</div><div class="line">Container [    <span class="number">1</span>] - inside the container!</div><div class="line"></div><div class="line"><span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         <span class="number">1</span>     <span class="number">0</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">12</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</div><div class="line">root       <span class="number">107</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">18</span>:<span class="number">20</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</div><div class="line"></div><div class="line"><span class="comment"># exit</span></div><div class="line"><span class="keyword">exit</span></div><div class="line">Parent - container stopped!</div></pre></td></tr></table></figure></p>
<p>可见，在Namespace的隔离下，bash已经获得pid=1的特权，并且，运行ps也看不到外界的进程。</p>
<h2>AUFS</h2>
<p>Docker三大基础技术中，唯一还没有进入Linux内核的就是AUFS。AUFS的作用，是把不同物理位置的目录合并mount到同一个目录中<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。具体实现上，AUFS采用的是层状结构，把文件的改动通过不同的层，一层层叠加上去，每一层的改动都依赖于上一层，最终看到的结果实际上是文件叠加后的结果。实现的原理上有些类似于git。</p>
<h2>基于Docker的开发流程</h2>
<p>传统软件开发中，经常会出现的问题就是环境的不一致、部署困难、权限管理不便等等问题。例如，开发提交代码之后，运维人员需要根据开发的架构编写部署脚本；在部署环境确定之后，开发人员需要一套一致的环境来开发应用，但是这样的环境需要通过虚拟机来搭建，比较费时；如果共用开发环境的话，开发人员需要修改某个系统文件，需要申请系统权限，而他要改的很可能仅仅是一个host文件。</p>
<p>种种的不便利，都是因为“环境”的不统一，而统一环境，正是Docker容器所解决的问题。如果在开发流程中使用docker，那么运维的部分工作将转为开发工作，比如部分环境变量中的信息，端口信息，数据库连接信息等等，都可以包含在容器中，而运维人员需要负责的仅仅是容器与容器之间的连接。一个系统中的多个容器可以部署在不同的机器上（比如测试环境、生产环境），也可以 部署在一台机器上（比如开发环境），在引入容器这一层抽象的同时，并没有像虚拟机带来的运行效率降低等问题，这也是Docker能够被广泛接受的原因。</p>
<p>由于环境统一，对环境的依赖降低，持续集成变得更加容易完成；由于环境统一，应用的模块化变得更加容易，SOA、微服务等架构，会更加容易被部署；同样由于环境统一，单个模块的更新、优化、版本控制也会变得更加容易。</p>
<h2>Docker镜像文件浅析</h2>
<p>由于Docker Hub比较慢，本文从国内的DockerPool上来获取镜像，用来展示AUFS的层状结构，以java 8的jdk为例<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。先获取这个镜像，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker pull dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk         </div><div class="line">Pulling repository dl.dockerpool.com:<span class="number">5000</span>/java</div><div class="line"><span class="number">816120</span>cec693: Download complete </div><div class="line"><span class="number">511136</span>ea3c5a: Download complete </div><div class="line">bb250545c9c9: Download complete </div><div class="line">f872462c7730: Download complete </div><div class="line"><span class="number">0</span>b98a314e4e3: Download complete </div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> dl.dockerpool.com:<span class="number">5000</span>/java:<span class="number">8</span>-jdk</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java: this image was pulled from a legacy registry.  Important: This registry version will not be supported <span class="keyword">in</span> future versions of docker.</div></pre></td></tr></table></figure></p>
<p>从获取的log中发现，总共获取了5个镜像，分别是</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec693</div><div class="line"><span class="number">511136</span>ea3c5a</div><div class="line">bb250545c9c9</div><div class="line">f872462c7730</div><div class="line"><span class="number">0</span>b98a314e4e3</div></pre></td></tr></table></figure></p>
<p>这几个镜像最上面的<code>816120cec693</code>是最上层的镜像文件。运行<code>docker images</code>可以证实这一点。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">hello-world                   latest              <span class="number">975</span>b84d108f1        <span class="number">8</span> weeks ago         <span class="number">960</span> B</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jre               <span class="number">5</span>ceb47bbfcb2        <span class="number">13</span> months ago       <span class="number">284.2</span> MB</div><div class="line">dl.dockerpool.com:<span class="number">5000</span>/java   <span class="number">8</span>-jdk               <span class="number">816120</span>cec693        <span class="number">13</span> months ago       <span class="number">634.9</span> MB</div></pre></td></tr></table></figure></p>
<p>docker的镜像存储在<code>/var/lib/docker</code>下，需要用root账户来查看。在该目录下查找镜像文件<code>816120cec693</code>，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span> <span class="comment">find</span> <span class="string">.</span> <span class="literal">-</span><span class="comment">name</span> <span class="comment">"816120cec693*"</span> <span class="comment">|</span> <span class="comment">xargs</span> <span class="comment">ls</span> <span class="literal">-</span><span class="comment">al</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>  <span class="comment">260</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="comment">/aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">40</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">10</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">bin</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">33</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">etc</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">4</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span>  <span class="comment">8月</span> <span class="comment">17</span>  <span class="comment">2014</span> <span class="comment">lib</span></div><div class="line"><span class="comment">drwxrwxrwt</span>  <span class="comment">3</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="comment">tmp</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">8</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">usr</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">5</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">21</span>  <span class="comment">2014</span> <span class="comment">var</span></div><div class="line"><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>    <span class="comment">0</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">aufs</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">orph</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">10月</span> <span class="comment">24</span>  <span class="comment">2014</span> <span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="string">.</span><span class="comment">wh</span><span class="string">.</span><span class="comment">plnk</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">8</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span></div><div class="line"><span class="comment">drwxr</span><span class="literal">-</span><span class="comment">xr</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">14</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:08</span> <span class="string">.</span><span class="string">.</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5:</span></div><div class="line"><span class="comment">总用量</span> <span class="comment">716</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">2</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span></div><div class="line"><span class="comment">drwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">11</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">4096</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="string">.</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>   <span class="comment">1330</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">json</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span>      <span class="comment">9</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">layersize</span></div><div class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">1</span> <span class="comment">root</span> <span class="comment">root</span> <span class="comment">710180</span> <span class="comment">12月</span> <span class="comment">13</span> <span class="comment">16:18</span> <span class="comment">tar</span><span class="literal">-</span><span class="comment">data</span><span class="string">.</span><span class="comment">json</span><span class="string">.</span><span class="comment">gz</span></div></pre></td></tr></table></figure></p>
<p>可见，docker镜像的id实际上是一个更长的id，<code>816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>，通常情况下，docker只显示前12位当做id。docker的本地文件中，<code>./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个文本文件，里面记录了本镜像的所有父镜像id。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more ./aufs/layers/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p><code>./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，里面记录了镜像的实际文件，从目录结构可以大致看出来这实际上是一个linux根目录。<code>./aufs/mnt/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>默认是一个空目录。<code>./graph/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</code>是一个目录，用于记录镜像相关的信息，该目录下的3个文件非常有助于理解AUFS的结构。<code>json</code>是记录镜像概要信息的json格式文件，如下</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">512900817</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    <span class="string">"config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/bash"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"container"</span>: <span class="string">"029cecc8157b465ce92e5559d6231261452b571e93734e08da5081eef4a8af41"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/sh"</span>,</div><div class="line">            <span class="string">"-c"</span>,</div><div class="line">            <span class="string">"apt-get update && apt-get install -y curl openjdk-8-jdk=\"</span><span class="number">8</span>u40\<span class="string">"* unzip wget"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</div><div class="line">            <span class="string">"JAVA_VERSION=8u40"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"475879de227c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">        <span class="string">"Labels"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="constant">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: <span class="constant">null</span>,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2014-10-23T23:08:01.12431458Z"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"1.3.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该文件中记录了镜像的大小、系统amd64、hostname、系统id、操作系统、环境变量、以及父镜像id等信息。<code>layersize</code>文件记录了文件大小，这个值和<code>json</code>文件中的值是一样的。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more layersize</span></div><div class="line"><span class="number">512900817</span></div></pre></td></tr></table></figure></p>
<p>可以看到，镜像的大小大概是513MB。可以与实际的文件大小做对比。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># du -sh ./aufs/diff/816120cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</span></div><div class="line"><span class="number">516</span>M	./aufs/diff/<span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div></pre></td></tr></table></figure></p>
<p>可见，大小基本一致。<code>tar-data.json.gz</code>中记录了该镜像中的每个文件的信息，文件比较大，在此不在赘述。从<code>json</code>文件中，找到了父镜像<code>0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</code>，我们可以继续查看该父镜像的信息，然后查看父镜像的父镜像信息，一直查到根镜像。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more 0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"0b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f/json | python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"Size"</span>: <span class="number">121995138</span>,</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    ...... // 省略部分无关信息</div><div class="line">    <span class="string">"id"</span>: <span class="string">"bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6"</span>,</div><div class="line">    <span class="string">"os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"parent"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment"># more 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158/json |python -mjson.tool</span></div><div class="line">{</div><div class="line">    <span class="string">"architecture"</span>: <span class="string">"x86_64"</span>,</div><div class="line">    <span class="string">"comment"</span>: <span class="string">"Imported from -"</span>,</div><div class="line">    <span class="string">"container_config"</span>: {</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: null,</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: null,</div><div class="line">        <span class="string">"Env"</span>: null,</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"OnBuild"</span>: null,</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: null,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    },</div><div class="line">    <span class="string">"created"</span>: <span class="string">"2013-06-13T14:03:50.821769-07:00"</span>,</div><div class="line">    <span class="string">"docker_version"</span>: <span class="string">"0.4.0"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>最后可见，根镜像id是<code>511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</code>，该镜像总共5层，根镜像在最下层，本镜像在最上层，按顺序分别是，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">816120</span>cec6934a5bc94e3e62ab3b8934457814221e81c4d19736c990f811f3c5</div><div class="line"><span class="number">0</span>b98a314e4e3c1162b7356824cf175fcb1c60ce81d9ef716d9d3f1b9e56249a1</div><div class="line">f872462c773080ba038ec82f9c51c026dc6829b623994512b861b9e2109b4e2f</div><div class="line">bb250545c9c9c8e0e24a56071683ab3556bf8049fd9e87d7cff90064beb901e6</div><div class="line"><span class="number">511136</span>ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158</div></pre></td></tr></table></figure></p>
<p>以上是Docker镜像文件的AUFS浅析。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://coolshell.cn/articles/17049.html" target="_blank" rel="external">http://coolshell.cn/articles/17049.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://coolshell.cn/articles/17010.html" target="_blank" rel="external">http://coolshell.cn/articles/17010.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://coolshell.cn/articles/17061.html" target="_blank" rel="external">http://coolshell.cn/articles/17061.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.csdn.net/article/2014-11-18/2822693" target="_blank" rel="external">http://www.csdn.net/article/2014-11-18/2822693</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker应该是最近几年最火的云计算技术了，为应用的构建方式带来了一系列的变革。本文试图介绍一些关于Docker的原理和基本操作。</p>
<p>Docker以容器（Container）的方式，对计算机的各种资源作出隔离，以达到一个类似虚拟机（Virtual Machin]]>
    </summary>
    
      <category term="Docker" scheme="http://valleylord.github.io/tags/Docker/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Docker" scheme="http://valleylord.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用hexo搭建这个博客]]></title>
    <link href="http://valleylord.github.io/post/201412-hexo-blog/"/>
    <id>http://valleylord.github.io/post/201412-hexo-blog/</id>
    <published>2014-12-08T04:49:00.000Z</published>
    <updated>2015-12-13T05:58:00.074Z</updated>
    <content type="html"><![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>、<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>、<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，其中也介绍了一些额外的配置，比如rss、域名绑定、博客迁移等等。我建博客的主要步骤也是跟这几篇博客的描述基本类似，由于原先的博客是放在farbox和SAE的JustWriting(以下简称JustWriting)上，直接就是可用的markdown文本，迁移的步骤算是省了不少功夫，以下说一些碰到的坑。</p>
<h2>1 frontmatter不一致</h2>
<p>frontmatter不是markdown的标准，应该属于博客系统自定义的扩展，一般是用于表示该篇文章的属性信息，写在文章的开头，例如，本文的frontmatter就是，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 用hexo搭建这个博客</div><div class="line">date: 2014-12-08 12:49</div><div class="line">tags: [Hexo, Blog]</div><div class="line">category: Blog</div><div class="line"><span class="header">toc: yes</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>各个博客系统支持的frontmatter各不相同，原先在farbox和JustWriting写的时候，是可以这么写的，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: 用hexo搭建这个博客</div><div class="line">Date: 2014-12-08 12:49</div><div class="line">Tags: [Hexo, Blog]</div><div class="line">Category: Blog</div><div class="line">Toc: yes</div></pre></td></tr></table></figure></p>
<p>主要差别有，frontmatter中的title、date什么的都是可以首字母大写的，例如，Title、Date，但是hexo要求必须是全部小写才可以识别，所以就一篇一篇的都改为小写。JustWriting是大小写都可以支持，farbox由于不打算继续用了就没有测试过。</p>
<p>还有一个是tags里面的写法，hexo要求，如果有多个的话，需要放在方括号([])，并用逗号(,)分隔，如<code>[Hexo, Blog]</code>，而之前farbox和JustWriting是可以不需要方括号，空格分隔，如<code>Hexo Blog</code>。JustWriting经测试是可以支持方括号的写法，farbox没有测试。</p>
<p>最后的差别是，hexo需要在frontmatter结束后，用<code>---</code>隔开，而JustWriting和farbox不需要。</p>
<p>改完这些，hexo中就可以在主页正常的显示博文的标题等信息了。感觉起来，hexo要求的写法更加严谨，值得称道的是JustWriting，不仅支持了原先farbox的写法，也支持现在的hexo写法，更加宽泛。虽然这些改动在farbox上都没有测试过，我猜应该也是可以的，JustWriting和farbox非常相似，JustWriting是用php写的，猜测farbox可能也是用php实现的，两者支持的markdown语法应该是一致的。</p>
<h2>2 使用mathjax支持数学公式</h2>
<p>公式的支持可以安装hexo-math和hexo-renderer-mathjax来实现，好像是只要安装前者就可以实现了，但是我安装了2个。hexo-math的安装方法可以去该项目的github上去看看，在<a href="https://github.com/akfish/hexo-math" target="_blank" rel="external">这里</a>，按照步骤操作就可以了。hexo-renderer-mathjax的github在<a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">这里</a>，步骤和前者一样。</p>
<p>安装完之后应该就能看到公式了，支持行间和行内的公式。测试一下效果，代码如下，</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">测试一下数学公式和尾注[^LaTeX]: </div><div class="line"></div><div class="line">$$E=mc^2$$</div><div class="line"></div><div class="line">[<span class="link_label">^LaTeX</span>]: 支持 <span class="strong">**LaTeX**</span> 编辑显示支持，例如：$\sum<span class="emphasis">_{i=1}^n a_</span>i=0$和$[<span class="link_label">((n-k)/i+m)</span>]$， 访问 [<span class="link_label">MathJax</span>][<span class="link_reference">4</span>] 参考更多使用方法。</div></pre></td></tr></table></figure></p>
<p>生成的效果可以看<a href="http://valleylord.github.io/post/README/" target="_blank" rel="external">这里</a>。</p>
<h2>3 php markdown中脚注的支持</h2>
<p>老实说，之前我从来没有关注过markdown的方言，markdown就是markdown，就跟java就是java的感觉一样。后来知道了有个GFW(Github Flavored Markdown)，感觉它支持代码高亮的方式好一些，于是以为自己写的就是GFW。直到这次做博客迁移的时候才发现，原来我一直写的都是php markdown，比GFW还多一些特性。而hexo默认支持的是GFW，对php markdown的一些特性不支持，而我最需要的就是php markdown中的脚注功能。</p>
<p>其实主流的markdown方言有以下几种，分别是(摘自pandoc的readme)：markdown (pandoc’s extended markdown), markdown_strict (original unextended markdown), markdown_phpextra (PHP Markdown Extra extended markdown), markdown_github (github extended markdown)，markdown_mmd (MultiMarkdown)。这也看出，原始的markdown支持的写法是很少的，所以才有了这么多各有特色的方言版本，github markdown支持多种编程语言的高亮，pandoc markdown支持的东西很多，写法比较类似tex，我用的php markdown有简易的脚注功能。以上的特性，都可以在pandoc中有选项可以支持。</p>
<p>说了这么多，那么问题来了，pandoc是什么？在我的理解，pandoc是一个标记语言(也可以说排版语言)转换器。可以将一种标记语言(如markdown、textile、tex、latex、html、epub等)转换到另一种标记语言，感觉很强大有木有？我就是想用pandoc对php markdown的支持来生成博客的html页面。</p>
<p>问题又来了，那么如何在hexo中使用pandoc来解析php markdown呢？要使用hexo-renderer-pandoc插件，项目主页在github上，<a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">这里</a>。其readme中的介绍有些太简略了，对于我这样一个连pandoc都没听过的人，实在不太容易上手。我详细说一下使用时候的步骤，</p>
<blockquote>
<ol>
<li>根据<a href="http://johnmacfarlane.net/pandoc/installing.html" target="_blank" rel="external">pandoc的安装文档</a>，安装pandoc，在windows下要把pandoc配到PATH环境变量下；</li>
<li>安装这个插件，<code>npm install hexo-renderer-pandoc --save</code>；</li>
<li>删除默认的markdown插件，<code>npm uninstall hexo-renderer-marked --save</code>，确保是使用pandoc在解析；</li>
<li>修改该插件的代码，将index.js中的<code>var args = [ '-f', 'markdown', '-t', 'html', '--mathjax', '--smart'];</code>改为<code>var args = [ '-f', 'markdown_phpextra', '-t', 'html', '--mathjax', '--smart'];</code></li>
</ol>
</blockquote>
<p>之后就可以用pandoc解析php markdown了，在<code>hexo generate</code>的时候表现的灰常好。</p>
<p>说一下需要特别注意的坑，如果是在windows下安装pandoc，一定需要把pandoc的可执行文件目录配置到PATH环境变量中，即，<code>C:\Users\Administrator\AppData\Local\Pandoc</code>(pandoc的默认安装目录)需要加到PATH中，这个坑在pandoc的官方installing中完全没提到，而在我的mint linux中只需要简单的apt-get就一次搞定，差距啊。如果没有配对的话，在<code>hexo server</code>的时候会出现这个错误，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Error: This socket is closed.</div><div class="line">    at Socket._write (net.js:637:19)</div><div class="line">    at doWrite (_stream_writable.js:226:10)</div><div class="line">    at writeOrBuffer (_stream_writable.js:216:5)</div><div class="line">    at Socket.Writable.write (_stream_writable.js:183:11)</div><div class="line">    at Socket.write (net.js:615:40)</div><div class="line">    at pandoc (E:<span class="command">\my</span>_blog<span class="command">\node</span>_modules<span class="command">\hexo</span>-renderer-pandoc<span class="command">\index</span>.js:23:15)</div><div class="line">    at C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\lib</span><span class="command">\core</span><span class="command">\render</span>.js:96:9</div><div class="line">    at fn (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:641:34)</div><div class="line">    at Object._onImmediate (C:<span class="command">\Users</span><span class="command">\Administrator</span><span class="command">\AppData</span><span class="command">\Roaming</span><span class="command">\npm</span><span class="command">\node</span>_modules<span class="command">\hexo</span><span class="command">\node</span>_modules<span class="command">\async</span><span class="command">\lib</span><span class="command">\async</span>.js:557:34)</div><div class="line">    at processImmediate <span class="special">[</span>as _immediateCallback<span class="special">]</span> (timers.js:330:15)</div></pre></td></tr></table></figure></p>
<p>模模糊糊的，也算指向了找不到pandoc的错误。测试pandoc是否在PATH中了，可以用<code>pandoc -v</code>来查看版本，如果已经设置对了，会看到以下这些，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">F:\&gt;pandoc -v</div><div class="line">pandoc <span class="number">1.13</span>.<span class="number">1</span></div><div class="line">Compiled <span class="keyword">with</span> texmath <span class="number">0.8</span>, highlighting-kate <span class="number">0.5</span>.<span class="number">8.5</span>.</div><div class="line">Syntax highlighting <span class="keyword">is</span> supported <span class="keyword">for</span> the following languages:</div><div class="line">    actionscript, ada, apache, asn1, asp, awk, bash, bibtex, boo, c, changelog,</div><div class="line">    clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css, curry, d,</div><div class="line">    diff, djangotemplate, doxygen, doxygenlua, dtd, eiffel, email, erlang,</div><div class="line">    fortran, fsharp, gcc, gnuassembler, go, haskell, haxe, html, ini, isocpp,</div><div class="line">    java, javadoc, javascript, json, jsp, julia, latex, lex, literatecurry,</div><div class="line">    literatehaskell, lua, makefile, mandoc, markdown, matlab, maxima, metafont,</div><div class="line">    mips, modelines, modula2, modula3, monobasic, nasm, noweb, objectivec,</div><div class="line">    objectivecpp, ocaml, octave, <span class="keyword">pascal</span>, perl, php, pike, postscript, prolog,</div><div class="line">    pure, python, r, relaxngcompact, restructuredtext, rhtml, roff, ruby, rust,</div><div class="line">    scala, scheme, sci, sed, sgml, sql, sqlmysql, sqlpostgresql, tcl, texinfo,</div><div class="line">    verilog, vhdl, xml, xorg, xslt, xul, yacc, yaml</div><div class="line"><span class="keyword">Default</span> user data directory: C:\Users\Administrator\AppData\Roaming\pandoc</div><div class="line">Copyright (C) <span class="number">2006</span>-<span class="number">2014</span> John MacFarlane</div><div class="line">Web:  http:<span class="comment">//johnmacfarlane.net/pandoc</span></div><div class="line">This <span class="keyword">is</span> free software; see the source <span class="keyword">for</span> copying conditions.</div><div class="line">There <span class="keyword">is</span> no warranty, <span class="keyword">not</span> even <span class="keyword">for</span> merchantability <span class="keyword">or</span> fitness</div><div class="line"><span class="keyword">for</span> a particular purpose.</div></pre></td></tr></table></figure></p>
<p>另一个坑是，hexo-renderer-pandoc插件的作者使用的是pandoc markdown，所以默认是只支持pandoc markdown，修改代码之后才可以识别php markdown的脚注，像这样<code>[^1]</code>，示例可以参考前面的例子。</p>
<p>顺便说一下，hexo-renderer-pandoc插件代码的逻辑还是很清楚的(也很短)，主要就几个部分，打开文件，处理文件，关闭文件，还有按文件扩展名注册文件的代码放在最后。修改的地方就是pandoc运行时候的参数，参考pandoc的User Guide就可以知道这些参数是干什么的，甚至可以通过修改参数获得更多文件的支持。<code>var pandoc = spawn('pandoc', args);</code>这一行是pandoc运行的命令，可以看到pandoc前面没有任何路径信息，所以要放到PATH环境变量中。</p>
<h2>4 pacman系列主题中的代码内空行bug</h2>
<p>hexo的主题主要有几个系列，从官方主题更改的landscape系列、light系列，还有开发者自己贡献的pacman系列，我自己比较偏好pacman和landscape系列的主题，pacman中比较喜欢<a href="https://github.com/wizicer/iceman" target="_blank" rel="external">iceman</a>和<a href="https://github.com/zhanglun/hexo-theme/tree/master/Tinny" target="_blank" rel="external">tinny</a>，landscape系列中比较喜欢<a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="external">landscape-plus</a>和<a href="https://github.com/myqianlan/hexo-theme-moyi" target="_blank" rel="external">moyi</a>，还有很多漂亮的主题，虽然有demo，但是我使用的时候都报错。最后还是选取了tinny，其实我更加喜欢landscape系列主题，但是其文章是默认在首页中显示全文的，需要手动加入<code>&lt;!-- more --&gt;</code>才能生成首页预览的效果，我比较懒，不想加了，因此选择了pacman系列的。</p>
<p>pacman系列主题有一个共有的问题，代码中的空行会被压缩，而landscape系列主题就没有这个问题。干说不是很好理解，看例子，比如这样一段markdown，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`<span class="javascript"></span>``<span class="javascript">python</span></div><div class="line">import <span class="keyword">this</span></div><div class="line"></div><div class="line">print <span class="string">'something'</span></div><div class="line">``<span class="javascript"></span>`</div></pre></td></tr></table></figure></p>
<p>中间有一个空行，pacman主题默认情况下会压缩掉这个空行，生成类似这样的页面，</p>
<p><img src="/images/201412-hexo-blog/hexo-code-err.png"></p>
<p>中间的空行不见了，而且代码行数的数字和代码的内容视觉上也没有在同一行上，而实际上，我们想要的是应该是这样的结果</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> this</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'something'</span></div></pre></td></tr></table></figure></p>
<p>几乎所有，至少是我尝试过的所有的，pacman主题都有这个问题，解决方法是，在主题的<code>source/css/_base/code.styl</code>文件中<code>.gist</code>之前，加入下面两行，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  .gutter <span class="keyword">pre</span></div><div class="line">    @extend $<span class="built_in">line</span>-numbers</div><div class="line">    text-align <span class="keyword">right</span></div><div class="line">    padding-<span class="keyword">right</span> <span class="number">1.5</span><span class="keyword">em</span></div><div class="line">  </div><div class="line">  // <span class="built_in">add</span> follows</div><div class="line">  .<span class="built_in">line</span></div><div class="line">    heigh<span class="variable">t:</span> <span class="number">24</span>px</div><div class="line">    </div><div class="line">.gist</div><div class="line">  margin <span class="number">0.5</span><span class="keyword">em</span> <span class="number">0</span></div><div class="line">  background <span class="keyword">highlight</span>-background</div></pre></td></tr></table></figure></p>
<p>加入<code>.line</code>设置，强制指定了代码的每一行的行高都是24px，我尝试了其他的变量来替代，都不是很好，如果有更好的改法，可以联系我。这是整个格式优化中我花时间最长的一个改动，尤其对于我这种从来没做过前端，而且css、js又都不太懂的人。</p>
<h2>5 代码高亮的着色方案改为monokai</h2>
<p>代码高亮的着色方案在多数的hexo主题中，都是tomorrow着色，我是monokai着色的忠实粉丝，有木有办法改为monokai呢？</p>
<p>landscape-plus给出了一个monokai着色的方法，原来主题的颜色都是在code.styl中写死的，只要改这段即可。原本的着色方案可能是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#1d1f21</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#282a2e</span></div><div class="line"><span class="variable">highlight-line-numbers =</span> <span class="comment">#666</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#373b41</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#c5c8c6</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#969896</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#cc6666</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#de935f</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#f0c674</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#b5bd68</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#8abeb7</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#81a2be</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#b294bb</span></div></pre></td></tr></table></figure></p>
<p>可以看到，颜色的rgb值都被赋值在了一系列变量中，只要修改这些常数值即可，这个活儿landscape-plus已经做了，把他们的code.styl中的这一段copy过来替换原有的即可，新的着色方案是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="variable">highlight-background =</span> <span class="comment">#272822</span></div><div class="line"><span class="variable">highlight-current-line =</span> <span class="comment">#3E3D32</span></div><div class="line"><span class="variable">highlight-selection =</span> <span class="comment">#49483E</span></div><div class="line"><span class="variable">highlight-foreground =</span> <span class="comment">#F8F8F2</span></div><div class="line"><span class="variable">highlight-comment =</span> <span class="comment">#75715E</span></div><div class="line"><span class="variable">highlight-red =</span> <span class="comment">#F92672</span></div><div class="line"><span class="variable">highlight-orange =</span> <span class="comment">#FD971F</span></div><div class="line"><span class="variable">highlight-yellow =</span> <span class="comment">#E6DB74</span></div><div class="line"><span class="variable">highlight-green =</span> <span class="comment">#A6E22E</span></div><div class="line"><span class="variable">highlight-aqua =</span> <span class="comment">#A1EFE4</span></div><div class="line"><span class="variable">highlight-blue =</span> <span class="comment">#66D9EF</span></div><div class="line"><span class="variable">highlight-purple =</span> <span class="comment">#AE81FF</span></div></pre></td></tr></table></figure></p>
<p>code.styl的末尾<code>pre</code>那一行到结束，还有一段不同的代码引用那一种着色方案的声明，同样也用landscape-plus中的相应内容替换。替换完之后，就能发现hexo已经开始用monokai着色了。</p>
<p>可以看出来，这种着色方案的修改方法比较死板，如果你需要某种着色方案但并不清楚颜色的rgb值，就无解了。其实，tinny主题本身其实提供了highlightjs着色方案，按主题的readme上所说，只要在主题的_config.yml中更改配置项即可，可惜我没有试成功……可能有其他主题可以做到。</p>
<h2>6 tinny主题的字体修改</h2>
<p>tinny主题的作者把pacman的一些字体给改了，用了更小更紧凑的一些字体。但是我还是喜欢原先的pacman的字体，怎么办呢？通过和iceman对比文件发现，<code>source/css/_partial/</code>目录下的article.styl的内容有差异，用iceman的这个文件替代；还有，tinny在该目录下多了一个addByMe.styl文件，为了和iceman一致，删除之。</p>
<p>改完之后，基本和iceman比较相似了，感觉字体还是比较小，不知道为什么。</p>
<h2>7 主题的顶部横幅(header)宽度调整</h2>
<p>改完这些之后，设置自己的博客名、作者名、想说的话等等，基本已经挺好的了，还有不足的就是博客的顶部横幅，是这样，</p>
<p><img src="/images/201412-hexo-blog/hexo-header-err.png"></p>
<p>感觉明明可以一行显示的内容，被强迫分在了两行中显示，左上角和右下角的内容如果可以合并在一行里面显示就比较好了。如果需要这样，可以调整做上角的文本的宽度，在<code>source/css/_partial/</code>目录下的header.styl中，大约30多行的位置，有这样一段，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#textlogo</span></div><div class="line">  <span class="attribute">float</span> <span class="attribute">left</span></div><div class="line">  <span class="attribute">margin-left</span> 0<span class="class">.5em</span></div><div class="line">  <span class="attribute">width</span> 65%</div></pre></td></tr></table></figure></p>
<p>可能表示左上角的文本宽度要占用整个横幅的65%，像我的博客，左上角的文本并不长，缩短这个宽度也是可以的，改为55%就变成现在这样的效果。</p>
<h2>8 仍然存在的bug</h2>
<p>我做的主要修改就是以上这些，如果说还有一些值得进一步折腾的话，还可以继续。比如，在顶部的横幅中，目前没有支持categories，但是tags是支持的，如果要设置categories，可以按主题中的说明，在categories目录中建立一个index.md的文件，内容是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: categories</div><div class="line"><span class="header">title: categories</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>但是，我这样操作了，但是网页的内容还是tags的，所以我把categories从顶部横幅中去掉了。还有一个问题是，代码中的区块注释没有显示对颜色，但是单行注释是没有问题的。错误的颜色如下，</p>
<p><img src="/images/201412-hexo-blog/hexo-comment-err.png"></p>
<p>第一行显示对了颜色，为灰色，但是第二行一直到最后一行都是白色，颜色错误。除此之外，也有整个注释区块都是白色的错误情况，至今没有找到很好的解决办法，试了一些别的主题，多数都有这个问题，只有一些个别的主题，似乎是用动态调用highlightjs的方法解决了这个问题，但是其主题的代码结构和普通的差异很大，不太会改。</p>
<p>以上是我折腾这个博客的过程，到此为止，已经花了两个周末多了，不能再往下花时间了。基本上，如果使用pandoc，hexo可以变的非常灵活，任何的markdown方言都不在话下。</p>
<p>感谢文中所有提到的开源项目的贡献者。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://code.wileam.com/build-a-hexo-blog-and-optimize/" target="_blank" rel="external">http://code.wileam.com/build-a-hexo-blog-and-optimize/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个博客是用hexo搭建的，放在github上，这篇文章记录一下搭建这个博客的过程，以及这个过程中踩过的坑。</p>
<p>如果只是想搭建一个普通的博客，不需要额外的，比如数学公式、脚注等支持，也不在意代码的排版和主题的选择，那么网上能找到的多数文章都可以用作参考，比如<a]]>
    </summary>
    
      <category term="Hexo" scheme="http://valleylord.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/tags/Blog/"/>
    
      <category term="Blog" scheme="http://valleylord.github.io/categories/Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的性能监控工具pgCluu试用]]></title>
    <link href="http://valleylord.github.io/post/201412-postgres-pgcluu/"/>
    <id>http://valleylord.github.io/post/201412-postgres-pgcluu/</id>
    <published>2014-12-03T12:00:00.000Z</published>
    <updated>2014-12-05T01:20:41.000Z</updated>
    <content type="html"><![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托管在github上，其项目主页在<a href="https://github.com/darold/pgcluu" target="_blank" rel="external">这里</a>，也可以使用<code>git clone</code>从仓库克隆该项目。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy Downloads]$ git clone https://github.com/darold/pgcluu.git </div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/postgres/Downloads/pgcluu/.git/</div><div class="line">remote: Counting objects: <span class="number">807</span>, done.</div><div class="line">remote: Total <span class="number">807</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">807</span>/<span class="number">807</span>), <span class="number">958.99</span> KiB | <span class="number">14</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">529</span>/<span class="number">529</span>), done.</div></pre></td></tr></table></figure></p>
<p>如果是用于生产使用，还是建议去下载稳定的release版本，在<a href="https://github.com/darold/pgcluu/releases" target="_blank" rel="external">这里</a>有下载，本文使用的是<a href="https://github.com/darold/pgcluu/archive/v2.1.tar.gz" target="_blank" rel="external">2.1稳定版本</a>。</p>
<p>然后就是和大多数linux软件一样，开始做<code>make &amp; make install</code>，pgCluu比较特别的地方是，没有用<code>configure</code>生成Makefile，而是用一个perl脚本来生成。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ perl Makefile.PL </div><div class="line">Checking <span class="keyword">if</span> your kit is complete...</div><div class="line">Looks good</div><div class="line">Writing Makefile <span class="keyword">for</span> pgCluu</div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ make</div><div class="line">cp pgcluu_collectd blib/script/pgcluu_collectd</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu_collectd</div><div class="line">cp pgcluu blib/script/pgcluu</div><div class="line">/usr/bin/perl -MExtUtils::MY <span class="operator">-e</span> <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/pgcluu</div><div class="line">Manifying blib/man1/pgcluu.<span class="number">1</span></div><div class="line">[postgres@anzhy pgcluu-<span class="number">2.1</span>]$ <span class="built_in">sudo</span> make install</div><div class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> postgres: </div><div class="line">Installing /usr/local/share/man/man1/pgcluu.<span class="number">1</span></div><div class="line">Installing /usr/local/bin/pgcluu_collectd</div><div class="line">Installing /usr/local/bin/pgcluu</div><div class="line">Appending installation info to /usr/lib64/perl5/perllocal.pod</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-install.png"></p>
<p>默认情况下，<code>pgcluu</code>和<code>pgcluu_collectd</code>这两个程序安装在<code>/usr/local/bin</code>目录下，两个程序都是用perl写的。</p>
<p>要测试PostgreSQL的性能，为了能看到明显一些的结果，要给数据库加一些压力，本文采用之前的文章用pgbench的初始化方式，给数据库加一些DML和DDL操作的压力。命令如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)); </div><div class="line"><span class="keyword">do</span></div><div class="line">    time pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">16</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench; </div><div class="line"><span class="keyword">done</span>;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-pgbench.png"></p>
<p>以上命令中，测试用的数据库名是pgbench。为了可以持续增加数据库压力，对数据库反复执行了8次初始化，每次初始化的时间大约在15～20s(在我的测试机器上)，因此数据库繁忙的时间总共大约有120～160s。</p>
<p>然后建立收集数据的目录，并开始收集数据库的性能数据，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ mkdir /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -D -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line">LOG: Detach from terminal with pid: <span class="number">13352</span></div><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -k</div><div class="line">OK: pgcluu_collectd exited with value <span class="number">0</span></div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect1.png"></p>
<p>上述参数中，<code>-D</code>表示后台运行；<code>-i 30</code>表示30秒收集一次数据；<code>/tmp/stat_db1/</code>是收集数据保存的目录；其他参数表示数据库的地址，用户名和数据库名。由于程序在后台运行，如果需要结束程序需要使用<code>-k</code>参数，表示kill掉后台的pgcluu_collectd。本文采用的方式是另一种自动退出的方法，即<code>-E 200</code>表示程序运行200秒之后自动退出，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -E <span class="number">200</span> -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">1</span> (pid:<span class="number">8551</span>) started at Thu Dec  <span class="number">4</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">06</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">sh: LC_ALL=C sar -t -p -A <span class="number">1</span> <span class="number">1</span>: No such file or directory</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2-error.png"></p>
<p>以上脚本确保可以收集到6(200/3)次数据，但是发现了错误，提示找不到sar命令，尝试了使用-s命令指定sar的位置，以及修改源代码，仍然不能解决。决定采用<a href="https://github.com/darold/pgcluu/archive/v2.0.tar.gz" target="_blank" rel="external">2.0版</a>，重复上述操作，2.0版没有这样的问题，但是2.0版本没有提供<code>-E</code>参数，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgcluu_collectd -i <span class="number">30</span> /tmp/stat_db1/ -h localhost -U postgres <span class="operator">-d</span> pgbench</div><div class="line"></div><div class="line">*** pgcluu_collectd v2.<span class="number">0</span> (pid:<span class="number">13908</span>) started at Thu Dec  <span class="number">4</span> <span class="number">22</span>:<span class="number">29</span>:<span class="number">24</span> <span class="number">2014</span></div><div class="line">Type Ctrl+c to quit.</div><div class="line"></div><div class="line">^CLOG: Received terminating signal.</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-collect2.png"></p>
<p>此次收集正常，运行一段时间后<code>Ctrl+C</code>退出。接下来就可以用pgcluu做报表了，一般的报表呈现是使用html，就可以简单的使用默认参数即可，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ rm -rf /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ mkdir /tmp/report_db1/</div><div class="line">[postgres@anzhy ~]$ pgcluu -o /tmp/report_db1/ /tmp/stat_db1/</div><div class="line">[postgres@anzhy ~]$ ls /tmp/report_db1/</div><div class="line">bootstrap.min.css         pgbench-index-scan.html              postgres-table-size.html                system-device0.html</div><div class="line">bootstrap.min.js          pgbench-index-size.html              regression-index-scan.html              system-device1.html</div><div class="line">cluster.html              pgbench-missing-index.html           regression-index-size.html              system.html</div><div class="line">database-pgbench.html     pgbench-statio-table.html            regression-missing-index.html           test-index-size.html</div><div class="line">database-postgres.html    pgbench-table-indexes.html           regression-redundant-index.html         test-table-indexes.html</div><div class="line">database-regression.html  pgbench-table-kind-tuples.html       regression-table-indexes.html           test-table-kind-tuples.html</div><div class="line">database-test.html        pgbench-table-query-tuples.html      regression-table-kind-tuples.html       test-table-query-tuples.html</div><div class="line">font-awesome.min.css      pgbench-table-size.html              regression-table-query-tuples.html      test-table-size.html</div><div class="line">index.html                pgbench-table-vacuums-analyzes.html  regression-table-size.html              test-table-vacuums-analyzes.html</div><div class="line">jquery.min.js             pgcluu.css                           regression-table-vacuums-analyzes.html</div><div class="line">network-device0.html      pgcluu.js                            regression-unused-index.html</div><div class="line">network-device1.html      postgres-index-size.html             sorttable.js</div></pre></td></tr></table></figure></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-generate-report.png"></p>
<p>生成的报表直接用浏览器打开即可，主入口是<code>index.html</code>，以下列举几张图，</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report1.png"></p>
<p>这个是CPU使用情况的图，可以看到系统突然有一个激增，这是开始做初始化的时候。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report2.png"></p>
<p>这个是各个种类锁争用的情况，也是突然有一个激增。</p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report3.png"></p>
<p><img src="/images/201412-postgres-pgcluu/pgcluu-report4.png"></p>
<p>除去动态信息的图表，pgcluu也收集了静态信息，如上图中，首页上的概要数据汇总，和数据库分页下数据库大小的数据等等。</p>
<p>以上是pgCluu的使用简述。本文的操作主要参考官方代码中的<a href="https://github.com/darold/pgcluu/blob/master/README" target="_blank" rel="external">Readme</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>pgCluu是一款PostgreSQL的新能监控和审计工具，遵循PostgreSQL Licence，近似与BSD和MIT的一个Licence，对商业使用友好。本文将从源码编译安装pgCluu，并试用该工具做PostgreSQL的性能监控。</p>
<p>pgCluu的托管]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的rpm打包]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-rpm/"/>
    <id>http://valleylord.github.io/post/201411-postgres-rpm/</id>
    <published>2014-11-30T07:58:00.000Z</published>
    <updated>2014-12-03T01:16:58.000Z</updated>
    <content type="html"><![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ tar -zcf mypostgresql.tar.gz mypostgresql/</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$ ls</div><div class="line">my_extension  mypostgresql  mypostgresql.tar.gz  postgresql</div><div class="line">[postgres@anzhy pg9.<span class="number">3.4</span>]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-tar.png"></p>
<p>将打包好的源码包文件放到<code>$HOME/rpmbuild/SOURCES/</code>目录下，然后编辑描述rpm包的spec文件，spec文件内容如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Summary:   test mypostgresql </div><div class="line">Name:      mypostgresql </div><div class="line">Version:   <span class="number">1.0</span><span class="number">.0</span></div><div class="line">Release:   <span class="number">1</span></div><div class="line">License:   MIT</div><div class="line">Group:     Applications/Databases </div><div class="line">Source:    mypostgresql.tar.gz</div><div class="line">BuildRoot: <span class="variable">%{_tmppath}</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span>-<span class="variable">%{release}</span>-root</div><div class="line">Url:       http:<span class="comment">//www.test.com</span></div><div class="line">Packager:  test</div><div class="line">Prefix:    <span class="variable">%{_prefix}</span></div><div class="line">Prefix:    <span class="variable">%{_sysconfdir}</span></div><div class="line"><span class="variable">%define</span>    userpath /home/mypostgresql</div><div class="line"></div><div class="line"><span class="variable">%description</span></div><div class="line">test mypostgresql. </div><div class="line"></div><div class="line"><span class="variable">%prep</span></div><div class="line"><span class="variable">%setup</span> -c</div><div class="line"><span class="variable">%install</span></div><div class="line">install -d <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line">cp -a <span class="variable">%{name}</span>* <span class="variable">$RPM_BUILD_ROOT</span><span class="variable">%{userpath}</span></div><div class="line"></div><div class="line"><span class="variable">%clean</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_ROOT</span></div><div class="line">rm -rf <span class="variable">$RPM_BUILD_DIR</span>/<span class="variable">%{name}</span>-<span class="variable">%{version}</span></div><div class="line"></div><div class="line"><span class="variable">%files</span></div><div class="line"><span class="variable">%defattr</span>(-,root,root)</div><div class="line"><span class="variable">%{userpath}</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-spec.png"></p>
<p>由于需要用rpmbuild来打包，所以需要先安装rpmbuild。</p>
<p><img src="/images/201411-postgres-rpm/rpm-install-rpmbuild.png"></p>
<p>然后运行<code>rpmbuild -ba mypostgresql.spec</code>来打包，打包过程有很长的输出，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Checking for unpackaged file(s): /usr/lib/rpm/check-files /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</div><div class="line">Wrote: /home/postgres/rpmbuild/SRPMS/mypostgresql-1.0.0-1.src.rpm</div><div class="line">Wrote: /home/postgres/rpmbuild/RPMS/x86_64/mypostgresql-1.0.0-1.x86_64.rpm</div><div class="line">Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.MdWKRJ</div><div class="line"><span class="addition">+ umask 022</span></div><div class="line"><span class="addition">+ cd /home/postgres/rpmbuild/BUILD</span></div><div class="line"><span class="addition">+ cd mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILDROOT/mypostgresql-1.0.0-1.x86_64</span></div><div class="line"><span class="addition">+ rm -rf /home/postgres/rpmbuild/BUILD/mypostgresql-1.0.0</span></div><div class="line"><span class="addition">+ exit 0</span></div><div class="line">[postgres@anzhy pg9.3.4]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-rpm/rpm-pack.png"></p>
<p>看到以上结果，就可以认为打包成功。进一步的确认可以查看生成的打包文件，目录在<code>$HOME/rpmbuild/RPMS/x86_64/</code>下，是程序包文件；还有一个是源码包文件，在<code>$HOME/rpmbuild/SRPMS/</code>下。</p>
<p><img src="/images/201411-postgres-rpm/rpm-file.png"></p>
<p>本文参考了<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.chinaunix.net/uid-24347760-id-1989580.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-24347760-id-1989580.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.chinaunix.net/uid-7530389-id-2050100.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-7530389-id-2050100.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果要发布个人修改的PostgreSQL，就需要使用rpm打包工具。</p>
<p>先将修改后的代码打包，假设代码的目录在<code>mypostgresql</code></p>
<p><figure class="highlight bash"><table><tr><]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 8新特性(What's New in Java 8 中文翻译版)]]></title>
    <link href="http://valleylord.github.io/post/201411-java-new-features/"/>
    <id>http://valleylord.github.io/post/201411-java-new-features/</id>
    <published>2014-11-29T05:16:00.000Z</published>
    <updated>2014-12-08T04:49:17.000Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多人一样，当得知它被推迟的时候，我感到很失望。不过，推迟总比没有好。</p>
<p>Java 8是Java语言的一大步改进，写这本书的过程强迫我学习了很多。在Lambda项目中，Java有了闭包语法、方法引用和接口的默认方法，项目规划加入了很多函数式语言的特性，并且如Java开发者期待的那样，并没有损失清晰性和简洁性。</p>
<p>除去Lambda项目，Java 8也有很多其他改动，包括新的Date和Time的API(JSR 310)、Nashorn JavaScript引擎、在HotSpot虚拟机中移除了永久代等等。</p>
<p>感谢以下作者提供了很有价值的资源：</p>
<ul>
<li>Brian Goetz – <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="external">Lambda综述</a></li>
<li>Aleksey Shipilev – <a href="https://github.com/shipilev/jdk8-lambda-samples" target="_blank" rel="external">jdk8 lambda示例</a></li>
<li>Richard Warburton – <a href="http://shop.oreilly.com/product/0636920030713.do" target="_blank" rel="external">Java 8 Lambdas</a></li>
<li>Julien Ponge – Oracle Nashorn, 2014年1~2月的Java Magazine 上的一篇文章</li>
<li>Venkat Subramaniam – <a href="http://blog.agiledeveloper.com/" target="_blank" rel="external">agiledeveloper.com</a></li>
<li>Java 8的所有开发人员</li>
<li>Guava、joda-time、Groovy和Scala的开发人员</li>
</ul>
<h2>1 概览</h2>
<p>本书是Java 8的简短介绍，读完后，你会对这些新特性有一个基本的了解，并可以开始使用。</p>
<p>本书假定读者已经很了解Java语言和JVM虚拟机，如果不熟悉包含Java 7在内的语言特性，书中的一些例子可能会比较困难。</p>
<p>Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
<li>其他</li>
</ul>
<p>阅读本书的最好办法是打开一个支持Java 8的IDE来试试这些新特性。</p>
<blockquote>
<p>代码示例在<a href="https://github.com/adamd/hellojava8" target="_blank" rel="external">这里</a></p>
</blockquote>
<h2>2 lambda表达式</h2>
<p>Java 8最大的新特性就是语言级的支持了<em>lambda表达式</em>(Lambda项目)。lambda表达式很像包含一个自动推断类型方法的匿名类的语法糖<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，然而对于简化开发有重大意义。</p>
<h3>2.1 语法</h3>
<p>lambda表达式的主要语法是：参数-&gt;方法体。编译器通常可以根据lambda表达式的上下文，来确定使用的函数接口<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>和参数类型。这个语法中有4个重要规则：</p>
<ul>
<li>声明参数的类型是非强制的；</li>
<li>如果只有一个参数，那么参数外的括号()是非强制的；</li>
<li>使用大括号{}是非强制的(除非需要使用多个语句)；</li>
<li>如果只有一个语句返回一个结果，那么<code>return</code>关键字是非强制的。</li>
</ul>
<p>这里是一些语法的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">() -&gt; System.out.println(<span class="keyword">this</span>)</div><div class="line">(String str) -&gt; System.out.println(str)</div><div class="line">str -&gt; System.out.println(str)</div><div class="line">(String s1, String s2) -&gt; { <span class="keyword">return</span> s2.length() - s1.length(); }</div><div class="line">(s1, s2) -&gt; s2.length() - s1.length()</div></pre></td></tr></table></figure></p>
<p>最后一个表达式可以用来做list的排序，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strArray, </div><div class="line">  (String s1, String s2) -&gt; s2.length() - s1.length());</div></pre></td></tr></table></figure></p>
<p>在此例中，lambda表达式实现了<code>Comparator</code>接口来按长度排序字符串。</p>
<h3>2.2 范围</h3>
<p>这是一个使用lambda及Runnable接口的短例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</div><div class="line">	Runnable r1 = () -&gt; out.println(<span class="keyword">this</span>);</div><div class="line">	Runnable r2 = () -&gt; out.println(toString());</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String <span class="title">toString</span>() { <span class="keyword">return</span> <span class="string">"Hello, world!"</span>; }</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String... args) {</div><div class="line">		<span class="keyword">new</span> Hello().r1.run(); <span class="comment">//Hello, world!</span></div><div class="line">		<span class="keyword">new</span> Hello().r2.run(); <span class="comment">//Hello, world!</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>值得关注的是<code>r1</code>和<code>r2</code>两个lambda调用<code>Hello</code>类的<code>toStrin()</code>方法，这展示了lambda可用的范围。</p>
<p>也可以引用常量或<em>实际上</em>的常量(effectively final variables)，变量如果只被赋值一次，就是实际上的常量。</p>
<p>例如，使用Spring的Hibernate模板：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"delete * from User"</span>;</div><div class="line">getHibernateTemplate().execute(session -&gt; </div><div class="line">    session.createSQLQuery(sql).uniqueResult());</div></pre></td></tr></table></figure></p>
<p>以上代码中，你可以引用变量<code>sql</code>因为它只被赋值了一次，如果它再被赋值一次的话，就会导致编译错误。</p>
<h3>2.3 方法引用</h3>
<p>lambda表达式类似一个非对象的方法，如果我们可以引用已有方法来替代lambda表达式岂非更好？这正是<em>方法引用</em>所能做的。</p>
<p>例如，如果你需要经常根据文件的类型来过滤一系列文件，假定你已有以下一些用于确定文件类型的方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilters</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsPdf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsTxt</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileIsRtf</span>(File file) {<span class="comment">/*code*/</span>}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>在需要过滤文件的时候，你可以用方法引用，如下例所示(假设已经定义了方法<code>getFiles</code>返回<code>Stream</code>)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;File&gt; pdfs = getFiles().filter(FileFilters::fileIsPdf);</div><div class="line">Stream&lt;File&gt; txts = getFiles().filter(FileFilters::fileIsTxt);</div><div class="line">Stream&lt;File&gt; rtfs = getFiles().filter(FileFilters::fileIsRtf);</div></pre></td></tr></table></figure></p>
<p>方法引用可以指向：</p>
<ul>
<li>静态方法</li>
<li>实例方法</li>
<li><em>特定</em>实例上的方法</li>
<li>构造器(如，<code>TreeSet::new</code>)</li>
</ul>
<p>例如，使用新的<code>java.nio.file.Files.lines</code>方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">         .map(String::trim)</div><div class="line">         .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码读入文件&quot;Nio.java&quot;，对每一行调用<code>trim()</code>，并打印每一行。</p>
<p>注意，<code>System.out::println</code>表示<code>PrintStream</code>实例的<code>println</code>方法。</p>
<h3>2.4 函数接口</h3>
<p>Java 8中定义的<em>函数接口</em>是仅包含一个抽象方法的接口，这对之前版本的Java中添加的接口也有效。</p>
<p>Java 8在<code>java.util.function</code>包中引入了一些新的函数接口。</p>
<ul>
<li>Function<t,r> - 输入T类型的对象返回R类型的对象。</t,r></li>
<li>Supplier<t> - 仅返回T类型对象。</t></li>
<li>Predicate<t> - 根据T类型的输入返回布尔值。</t></li>
<li>Consumer<t> - 根据T类型的输入执行操作。</t></li>
<li>BiFunction - 和Function类似，但有2个参数。</li>
<li>BiConsumer - 和Consumer类似，但有2个参数。</li>
</ul>
<p>它也为基础类型引入了一些派生的接口，例如：</p>
<ul>
<li>IntConsumer</li>
<li>IntFunction<r></r></li>
<li>IntPredicate</li>
<li>IntSupplier</li>
</ul>
<blockquote>
<p>更多信息请参考<a href="http://download.java.net/jdk8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function Javadocs</a></p>
</blockquote>
<p>函数接口最屌的是可以用任何能完成其职责的对象来赋值给它，正如以下代码示例，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function&lt;String, String&gt; atr = (name) -&gt; {<span class="keyword">return</span> <span class="string">"@"</span> + name;};</div><div class="line">Function&lt;String, Integer&gt; leng = (name) -&gt; name.length();</div><div class="line">Function&lt;String, Integer&gt; leng2 = String::length;</div></pre></td></tr></table></figure></p>
<p>这些代码在Java 8中是完全合法的，第一行定义了在String前插入'@'的函数；后两行是相同的，定义了获取String长度的函数。</p>
<p>Java编译器已经足够聪明到可以将String的<code>length()</code>的方法引用转换为<code>Function</code>(函数接口)，其<code>apply</code>方法输入String并返回Integer。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String s : args) out.println(leng2.apply(s));</div></pre></td></tr></table></figure></p>
<p>会打印所有输入字符串的长度。</p>
<p>任意接口都可以是函数接口，而不仅仅是哪些由Java引入的方法。可以使用注解<code>@FunctionalInterface</code>来表示你认为一个接口是函数接口。尽管不必要，如果你的接口不满足要求(如，只有一个抽象方法)，将会导致编译错误。</p>
<blockquote>
<p><strong>Github</strong></p>
</blockquote>
<blockquote>
<p>更多例子请参考jdk8 lambda示例</p>
</blockquote>
<h3>2.5 与Java 7的比较</h3>
<p>为了更好的阐述lambda表达式的优势，这里的一些例子展示了如何在Java 8中简化Java 7的代码。</p>
<p><strong>创建<code>ActionListener</code></strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">ActionListener al = <span class="keyword">new</span> ActionListener() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span>(ActionEvent e) {</div><div class="line">        System.out.println(e.getActionCommand());</div><div class="line">    }</div><div class="line">};</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">ActionListener al8 = e -&gt; System.out.println(e.getActionCommand());</div></pre></td></tr></table></figure></p>
<p><strong>打印一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (String s : list) {</div><div class="line">    System.out.println(s);</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">list.forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>排序一列字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String s1, String s2) {</div><div class="line">        <span class="keyword">return</span> s1.length() - s2.length();</div><div class="line">    }</div><div class="line">});</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">Collections.sort(list, (s1, s2) -&gt; s1.length() - s2.length());</div><div class="line"><span class="comment">// or</span></div><div class="line">list.sort(Comparator.comparingInt(String::length));</div></pre></td></tr></table></figure></p>
<p><strong>排序</strong></p>
<p>对排序的例子，假定已有如下的<code>Person</code>类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</div><div class="line"></div><div class="line">    String firstName;</div><div class="line">    String lastName;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getFirstName</span>() {</div><div class="line">        <span class="keyword">return</span> firstName;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getLastName</span>() {</div><div class="line">        <span class="keyword">return</span> lastName;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以下展示了你如何在Java 7中按姓和名来排序：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Person p1, Person p2) {</div><div class="line">        <span class="keyword">int</span> n = p1.getLastName().compareTo(p2.getLastName());</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">return</span> p1.getFirstName().compareTo(p2.getFirstName());</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure></p>
<p>在Java 8中，代码可以减短为如下这样：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list.sort(Comparator.comparing(Person::getLastName)</div><div class="line">        .thenComparing(Person::getFirstName));</div></pre></td></tr></table></figure></p>
<blockquote>
<p>本例使用了接口(<code>comparing</code>)的静态方法和下一章讨论的默认方法(<code>thenComparing</code>)。</p>
</blockquote>
<h2>3 默认方法</h2>
<p>为了在核心的Collection API中加入<code>stream</code>方法，Java需要另一个新特性——<em>默认方法</em>(也称作Defender方法，或虚拟扩展方法Virtual Extension methods)。这样，就可以为<code>List</code>接口增加新的方法而不破坏所有已有的实现(向后兼容性)。</p>
<p>默认方法可以加入到任何接口中，如默认方法这个名称表达的意思，任何实现了接口单没有重写方法的类会获得默认实现。</p>
<p>例如，<code>Collection</code>接口中的<code>stream</code>方法就类似如下的定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span> <span class="keyword">public</span> Stream <span class="title">stream</span>() {</div><div class="line">	<span class="keyword">return</span> StreamSupport.stream(spliterator());</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多分隔符(spliterator)的信息可以参考<a href="http://download.java.net/jdk8/docs/api/java/util/Collection.html#spliterator--" target="_blank" rel="external">the Java docs</a></p>
</blockquote>
<p>如果你需要其他行为的话，你可以重载默认方法。</p>
<h3>3.1 默认的和函数的(接口)</h3>
<p>接口可以有一个或多个默认方法，并且仍然是函数接口。</p>
<p>例如，来看看<code>Iterable</code>接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span> </span>{</div><div class="line">	Iterator iterator();</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> forEach(Consumer&lt; ? <span class="keyword">super</span> T&gt; action) {</div><div class="line">		Objects.requireNonNull(action);</div><div class="line">		<span class="keyword">for</span> (T t : <span class="keyword">this</span>) {</div><div class="line">			action.accept(t);</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>它包含了<code>iterator()</code>方法和<code>forEach</code>方法。</p>
<h3>3.2 多个默认方法</h3>
<p>在一些罕见的例子里，你的类实现了2个或多个接口，这些接口中可能定义了相同的默认方法，此时Java会跑出编译错误。你必须重载这些方法或选择其中一个接口的实现。例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface Foo {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Foo!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">interface Bar {</div><div class="line">	<span class="keyword">default</span> <span class="keyword">void</span> talk() {</div><div class="line">		out.println(<span class="string">"Bar!"</span>);</div><div class="line">	}</div><div class="line">}</div><div class="line">class FooBar implements Foo, Bar {</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">void</span> talk() { Foo.<span class="keyword">super</span>.talk(); }			</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码中，<code>talk</code>被重载了，它调用了<code>Foo</code>的<code>talk</code>方法。这与你引用一个Java 8之前的超类的语法相类似。</p>
<h3>3.3 接口中的静态方法</h3>
<p>尽管与默认方法不是强相关，可以给接口加入静态方法对Java语言来说也是一个类似的改动。</p>
<p>例如，<em>Stream</em>接口中有很多静态方法。这让&quot;帮助&quot;方法很容易就能找到，因为他们能很容易在接口中直接定位，而不是在另一个类中，如<em>StreamUtil</em>或<em>Streams</em>。</p>
<p>这是一个新的<em>Stream</em>接口的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span>(T... values) {</div><div class="line"> <span class="keyword">return</span> Arrays.stream(values);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上方法根据给定值创建一个新的流。</p>
<h2>4 Stream(流)</h2>
<p><code>Stream</code>接口在Java 8中是如此基础的一部分，因此值得为其单独花一章来说。</p>
<h3>4.1 什么是Stream？</h3>
<p><code>Stream</code>接口在<code>java.util.stream</code>包中，它表示一列对象，有些类似Iterator接口。然而，与Iterator不同的是，它支持并行执行。</p>
<p>Stream接口支持map/filter/reduce模式，且惰性执行，这构成了Java 8函数式编程的基石(和lambda一起)。</p>
<p>出于性能考虑，也有一些派生自原始流的IntStream、DoubleStream和LongStream。</p>
<h3>4.2 生成Stream</h3>
<p>Java 8中有很多种方法来创建流，很多现有的Java核心库的类都有返回Stream的方法。</p>
<p><strong>Stream化的Collection(集合)</strong></p>
<p>最常见的创建Stream的方法是从<code>Collection</code>。</p>
<p>Colletion接口有两个默认方法来创建Stream：</p>
<ul>
<li><code>stream()</code>：返回源是Collection的一个顺序流；</li>
<li><code>parallelStream()</code>：返回源是Collection的一个可能并行的流。</li>
</ul>
<p>Stream的顺序性依赖于源头的Collection，正如Iterator一样。</p>
<p><strong>Stream化的文件</strong></p>
<p><code>BufferedReader</code>现在有了<code>lines()</code>方法可以返回Stream，例如<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"file"</span>);</div><div class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr)) {</div><div class="line">    br.lines().forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>也可以使用<code>Files.lines(Path filePath)</code>来把文件当做Stream来读取，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream st = Files.lines(Paths.get(<span class="string">"file"</span>))) {</div><div class="line">    st.forEach(System.out::println);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>注意，这会惰性求值，它不会读取整个文件，仅在你调用时读取。</p>
<blockquote>
<p>！！！<code>Files.lines(Path)</code>：任何在处理文件时(在文件打开之后)抛出的<code>IOException</code>会被包装在<code>UncheckedIOException</code>中并抛出。</p>
</blockquote>
<p><strong>Stream化文件树</strong></p>
<p><code>Files</code>类中有几个静态方法可以用Stream来浏览文件树。</p>
<ul>
<li><code>list(Path dir)</code> – 给定目录中的文件Stream。</li>
<li><code>walk(Path dir)</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> – 从给定目录开始以深度有些方式便利文件树的Stream。</li>
<li><code>walk(Path dir, int maxDepth)</code> – 和<code>walk(dir)</code>相同，但是有最大深度限制。</li>
</ul>
<p><strong>Stream化文本模式</strong></p>
<p><a href="http://download.java.net/jdk8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">Pattern</a>类现在有了方法<code>splitAsStream(CharSequence)</code>可以创建Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"><span class="comment">// later on...</span></div><div class="line">Pattern patt = Pattern.compile(<span class="string">","</span>);</div><div class="line">patt.splitAsStream(<span class="string">"a,b,c"</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码使用了一个简易的模式，逗号','，将文本拆分成Stream并打印。这会产生以下输出：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line"><span class="built_in">c</span></div></pre></td></tr></table></figure></p>
<p><strong>无限Stream</strong></p>
<p>使用Stream的<code>generate</code>和<code>iterate</code>静态方法，你可以创建Stream包含无穷的对象。例如，可以调用<code>generate</code>来创建提供无穷对象的Stream，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; <span class="keyword">new</span> Dragon());</div></pre></td></tr></table></figure></p>
<p>例如，你可以使用这样的技术来产生CPU负载或内存使用信息的Stream。但是，你必须小心使用，它和无穷循环很类似。</p>
<p>你也可以使用<code>generate</code>来创建无穷随机数源的Stream，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(() -&gt; Math.random());</div></pre></td></tr></table></figure></p>
<p>然而，<code>java.util.Random</code>类已经在新方法中提供了这些功能：<code>ints()</code>、<code>longs()</code>和<code>doubles()</code>。这些方法的每一个都类似如下定义：</p>
<ul>
<li><code>ints()</code>：随机整数的无穷Stream。</li>
<li><code>ints(int n, int m)</code>：n(含)和m(不含)之间的随机整数的无穷Stream。</li>
<li><code>ints(long size)</code>：给定长度的随机整数Stream。</li>
<li><code>ints(long size, int n, int m)</code>：给定长度，给定范围的随机整数Stream。</li>
</ul>
<p><code>iterate</code>方法和<code>generate</code>方法类似，但是它提供了初始值，和改变值的<code>Function</code>。例如，你可以用以下代码来便利整数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>)</div><div class="line">    .forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<p>这会持续打印出&quot;1234......&quot;直到你停止程序。</p>
<blockquote>
<p>我们之后会讨论一些停止无穷Stream的方法(<code>filter</code>和<code>limit</code>)。</p>
</blockquote>
<p><strong>Range</strong></p>
<p>还有一些方法是用于创建一段有限的整数Stream。</p>
<p>例如，<code>IntStream</code>接口的静态方法<code>range</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码会打印数字1到10。</p>
<p>每个基本Stream(IntStream、DoubleStream和LongStream)都有一个相应的<code>range</code>方法。</p>
<p><strong>Stream化任何对象</strong></p>
<p>使用以下两个方法，就可以从任意个元素或者数组创建Stream：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; s = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">Stream&lt;Object&gt; s2 = Arrays.stream(array);</div></pre></td></tr></table></figure></p>
<p><code>Stream.of</code>可以输入任意类型的任意个参数。</p>
<h3>4.3 For Each</h3>
<p>对Stream可以进行最基础操作就是循环，可以使用<code>forEach</code>方法来完成。</p>
<p>例如，打印当前目录下的所有文件，可以如下操作：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>对大多数情况而言，可以替代&quot;for循环&quot;，而且更加简洁，并且更加面向对象，因为代理了实际循环的实现。</p>
<h3>4.4 Map/Filter/Reduce</h3>
<p>lambda表达式和默认方法让我们在Java 8中可以实现map/filter/reduce，实际上，标准库中已经实现了这些。</p>
<p>例如，设想你从一列运动员姓名中获取他们的当前分数，并找出其中最高的分数。一个简单的<code>PlayerPoints</code>类和<code>getPoints</code>方法可以如下定义：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerPoints</span> </span>{</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> String name;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> points;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="title">PlayerPoints</span>(String name, <span class="keyword">long</span> points) {</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.points = points;</div><div class="line"> } </div><div class="line"> </div><div class="line"> <span class="keyword">public</span> String <span class="title">toString</span>() {</div><div class="line">   <span class="keyword">return</span> name + <span class="string">":"</span> + points;</div><div class="line"> }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getPoints</span>(<span class="keyword">final</span> String name) {</div><div class="line">	<span class="comment">// gets the Points for the Player</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>找出最高分运动员可以使用Java 8非常简单的实现，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  names.stream().map(name -&gt; <span class="keyword">new</span> PlayerPoints(name, getPoints(name)))</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">			(s1, s2) -&gt; (s1.points &gt; s2.points) ? s1 : s2);</div></pre></td></tr></table></figure></p>
<p>在Java 7中也可以使用<code>dollar</code>库(或其他类似Guava和Functional-Java的库)来实现，但是可能会非常的冗长，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PlayerPoints highestPlayer = </div><div class="line">  $(names).map(<span class="keyword">new</span> Function&lt;String, PlayerPoints&gt;() { </div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(String name) { </div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> PlayerPoints(name, getPoints(name));</div><div class="line">		}</div><div class="line">	})</div><div class="line">	.reduce(<span class="keyword">new</span> PlayerPoints(<span class="string">""</span>, <span class="number">0.0</span>), </div><div class="line">	<span class="keyword">new</span> BiFunction&lt;PlayerPoints, PlayerPoints, PlayerPoints&gt;() {</div><div class="line">		<span class="keyword">public</span> PlayerPoints <span class="title">call</span>(PlayerPoints s1, PlayerPoints s2) { </div><div class="line">			<span class="keyword">return</span> (s1.points &gt; s2.points) ? s1 : s2;</div><div class="line">		}</div><div class="line">	});</div></pre></td></tr></table></figure></p>
<p>用这种方法编程的最大益处(除了代码行数减少)是可以隐藏map/reduce的内在实现的能力。例如，map和reduce可能是并发实现的，允许你容易的发挥多处理器的优势。我们将在下面的章节介绍一种这么做的方法(ParallelArray)。</p>
<h3>4.5 Parallel Array(并行数组)</h3>
<p><code>ParallelArray</code>是JSR-166的一部分，但最终<a href="http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/" target="_blank" rel="external">被排除在标准的Java库</a>。它确实存在，并被发布到公共领域(可以通过JSR网站下载)。</p>
<p>虽然它早就在那，但是实在不易使用，直到闭包出现在Java语言中才改变了这一点。在Java 7中可以如下使用ParallelArray：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// with this class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> graduationYear;</div><div class="line">    <span class="keyword">double</span> gpa;</div><div class="line">}</div><div class="line"><span class="comment">// this predicate</span></div><div class="line"><span class="keyword">final</span> Ops.Predicate&lt;Student&gt; isSenior = </div><div class="line">	<span class="keyword">new</span> Ops.Predicate&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span>(Student s) {</div><div class="line">			<span class="keyword">return</span> s.graduationYear == Student.THIS_YEAR;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// and this conversion operation</span></div><div class="line"><span class="keyword">final</span> Ops.ObjectToDouble&lt;Student&gt; selectGpa = </div><div class="line">	<span class="keyword">new</span> Ops.ObjectToDouble&lt;&gt;() {</div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> <span class="title">op</span>(Student student) {</div><div class="line">			<span class="keyword">return</span> student.gpa;</div><div class="line">		}</div><div class="line">	};</div><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool fjPool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(fjPool, data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students.withFilter(isSenior)</div><div class="line">                         .withMapping(selectGpa)</div><div class="line">                         .max();</div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以这么做：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create a fork-join-pool</span></div><div class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">ParallelArray&lt;Student&gt; students = <span class="keyword">new</span> ParallelArray&lt;&gt;(pool,data);</div><div class="line"><span class="comment">// find the best GPA:</span></div><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .withFilter((Student s) -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .withMapping((Student s) -&gt; s.gpa)</div><div class="line">    .max();</div></pre></td></tr></table></figure></p>
<p>然而，Java 8提供了<code>stream()</code>和<code>parallelStream()</code>使这项工作更加容易：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> bestGpa = students</div><div class="line">    .parallelStream()</div><div class="line">    .filter(s -&gt; (s.graduationYear == THIS_YEAR))</div><div class="line">    .mapToDouble(s -&gt; s.gpa)</div><div class="line">    .max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p>这使从顺序执行的实现转为并行实现变得格外简单。</p>
<blockquote>
<p><strong>Groovy GPars</strong></p>
<p>如果使用Groovy和GPars库，现在可以类似的使用，如下所示：</p>
</blockquote>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GParsPool.withPool {</div><div class="line">   <span class="comment">// a map-reduce functional style (students is a Collection)</span></div><div class="line">   def bestGpa = students.parallel</div><div class="line">       .filter{ s -&gt; s.graduationYear == Student.THIS_YEAR }</div><div class="line">       .map{ s -&gt; s.gpa }</div><div class="line">       .max()</div><div class="line">}</div></pre></td></tr></table></figure></p>
<blockquote>
<p>静态方法<code>GParsPool.withPool</code>输入一个闭包并使用多个方法增强任意Collection(使用Groovy的类别方法)。<code>parallel</code>方法实际上从给定的Collection创建了<code>ParallelArray</code>，并通过一个薄包装来使用它。</p>
</blockquote>
<h3>4.6 Peek(偷看)</h3>
<p>你可以&quot;偷看&quot;Stream来做一些操作但却不中断Stream。</p>
<p>例如，可以打印元素来调试代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName)</div><div class="line">    .peek(System.out::println)</div><div class="line">    .forEach(p -&gt; doSomething(p));</div></pre></td></tr></table></figure></p>
<p>可以使用任何想要的操作，但是<em>不能</em>修改元素，如果想修改的话，可以使用<code>map</code>来替代。</p>
<h3>4.7 Limit(限制)</h3>
<p><code>limit(int n)</code>方法可以用来限制Stream中元素为给定个数，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Random rnd = <span class="keyword">new</span> Random();</div><div class="line">rnd.ints().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码打印10个随机整数。</p>
<h3>4.8 Sort(排序)</h3>
<p>Stream也有<code>sort()</code>方法来给流排序。像所有Stream的<em>中间方法</em>(例如map、filter和peek)，<code>sort()</code>方法是惰性执行的，在中止操作调用(如reduce和forEach)之前，什么也不做。但是，你必须在对无限流调用<code>sort()</code>之前调用限制操作如<code>limit</code>。</p>
<p>例如，以下代码会抛出运行时异常(使用构建版本1.8.0-b132)：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().sorted().limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>然而，以下代码就工作正常：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rnd.ints().limit(<span class="number">10</span>).sorted()</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>也可以在调用<code>filter()</code>之后调用<code>sorted()</code>。例如，以下代码打印当前目录下的前5个Java文件的文件名：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Files.list(Paths.get(<span class="string">"."</span>))</div><div class="line">    .map(Path::getFileName) <span class="comment">// still a path</span></div><div class="line">    .map(Path::toString) <span class="comment">// convert to Strings</span></div><div class="line">    .filter(name -&gt; name.endsWith(<span class="string">".java"</span>))</div><div class="line">    .sorted() <span class="comment">// sort them alphabetically</span></div><div class="line">    .limit(<span class="number">5</span>) <span class="comment">// first 5</span></div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>以上代码做了这些事情：</p>
<ul>
<li>列出当前目录下的所有文件。</li>
<li>将这些文件映射到文件名(译者注：即获取文件名)。</li>
<li>获取那些以&quot;.java&quot;结尾的文件名。</li>
<li>只取前5个文件名(按字母排序)。</li>
<li>打印这些文件名。</li>
</ul>
<h3>4.9 Collector(收集器)和统计量</h3>
<p>正因Stream是惰性求值，并支持并行执行，因此需要特别的方法来汇总结果，这就是Collector(收集器)。</p>
<p>Collector表示汇总Stream的元素成一个结果的方法，它包含3个部分：</p>
<ul>
<li>初始值。</li>
<li>将值加到初始值上的累加器。</li>
<li>将两个结果合并成一个的归并器。</li>
</ul>
<p>有两个方法来完成：<code>collect(supplier,accumulator,combiner)</code>和<code>collect(Collector)</code>(省略类型)。</p>
<p>可喜的是，Java 8提供的多个内建的Collector。可以通过如下方法Import这些类：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.*;</div></pre></td></tr></table></figure></p>
<p><strong>简单的Collector</strong></p>
<p>最简单的collector是像<code>toList()</code>和<code>toCollection()</code>那样的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Accumulate names into a List</span></div><div class="line">List&lt;String&gt; list = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toList());</div><div class="line"></div><div class="line"><span class="comment">// Accumulate names into a TreeSet</span></div><div class="line">Set&lt;String&gt; set = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(toCollection(TreeSet::<span class="keyword">new</span>));</div></pre></td></tr></table></figure></p>
<p><strong>Join(合并)</strong></p>
<p>如果你熟悉Apache Common的<code>StringUtil.join</code>，<code>joining</code>collector与其很相似。它可以使用给定的分隔符合并Stream，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String names = dragons.stream()</div><div class="line">        .map(Dragon::getName)</div><div class="line">        .collect(joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<p>以上代码合并所有的名字为一个字符串，并使用逗号分割。</p>
<p><strong>统计量</strong></p>
<p>更加复杂的collector合并成单一值，例如，可以使用&quot;averaging&quot;Collector来获取平均值，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"\n-----&gt;Average line length:"</span>);</div><div class="line">System.out.println(</div><div class="line">    Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(averagingInt(String::length))</div><div class="line">        );</div></pre></td></tr></table></figure></p>
<p>以上代码计算文件&quot;Nio.java&quot;中的所有非空行长度的平均值。</p>
<p>有些情况下需要获取集合的多个统计量，但是因为Stream会因为调用<code>collect</code>而被消费，所以，必须一次性计算所有的统计量。这正是<strong>SummaryStatistics</strong>的功能，如果要使用的话，需要先import：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.IntSummaryStatistics;</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<code>summarizingInt</code>collector，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">        .map(String::trim)</div><div class="line">        .filter(s -&gt; !s.isEmpty())</div><div class="line">        .collect(summarizingInt(String::length));</div><div class="line"></div><div class="line">System.out.println(stats.getAverage());</div><div class="line">System.out.println(<span class="string">"count="</span> + stats.getCount());</div><div class="line">System.out.println(<span class="string">"max="</span> + stats.getMax());</div><div class="line">System.out.println(<span class="string">"min="</span> + stats.getMin());</div></pre></td></tr></table></figure></p>
<p>以上代码得到了和之前一样的平均值，并且同时也计算出了最大值、最小值和元素个数。</p>
<blockquote>
<p>也提供了<code>summarizingLong</code>和<code>summarizingDouble</code>。</p>
</blockquote>
<p>另一个等价的方法是，把Stream map到基础类型，然后调用<code>summaryStatistics()</code>，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics stats = Files.lines(Paths.get(<span class="string">"Nio.java"</span>))</div><div class="line">    .map(String::trim)</div><div class="line">    .filter(s -&gt; !s.isEmpty())</div><div class="line">    .mapToInt(String::length)</div><div class="line">    .summaryStatistics();</div></pre></td></tr></table></figure></p>
<h3>4.10 分组和分块</h3>
<p><code>groupingBy</code> collector根据提供的方法把元素分组，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by first letter of name</span></div><div class="line">List&lt;Dragon&gt; dragons = getDragons();</div><div class="line">Map&lt;Character,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(groupingBy(dragon -&gt; dragon.getName().charAt(<span class="number">0</span>)));</div></pre></td></tr></table></figure></p>
<p>类似的，<code>partitioningBy</code>方法创建一个布尔类型为键的映射，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group by whether or not the dragon is green</span></div><div class="line">Map&lt;Boolean,List&lt;Dragon&gt;&gt; map = dragons.stream()</div><div class="line">        .collect(partitioningBy(Dragon::isGreen));</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>并行分组</strong></p>
<p>为了并行的执行分组(如果不关心顺序的话)，可以使用<code>groupingByConcurrent</code>方法。被操作的Stream应该是无序的，这样分组才能并行执行，例如：</p>
<p><code>dragons.parallelStream().unordered().collect(groupingByConcurrent(Dragon::getColor));.</code></p>
</blockquote>
<h3>4.11 与Java 7的比较</h3>
<p>为了更好的展示Java 8的Stream的优势，以下是一些Java 7里的示例代码和新版代码的比较：</p>
<p><strong>求最大值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">double</span> max = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    <span class="keyword">if</span> (d &gt; max) {</div><div class="line">        max = d;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">max = list.stream().reduce(<span class="number">0.0</span>, Math::max);</div><div class="line"><span class="comment">// or</span></div><div class="line">max = list.stream().mapToDouble(Number::doubleValue).max().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>计算平均值</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">double</span> ave = <span class="number">0</span>;</div><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (Double d : list) {</div><div class="line">    total += d;</div><div class="line">}</div><div class="line">ave = total / ((<span class="keyword">double</span>) list.size());</div><div class="line"><span class="comment">//Java 8</span></div><div class="line">ave = list.stream().mapToDouble(Number::doubleValue).average().getAsDouble();</div></pre></td></tr></table></figure></p>
<p><strong>打印数字1到10</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) {</div><div class="line">    System.out.println(i);</div><div class="line">}</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">    .forEach(System.out::println);</div><div class="line"><span class="comment">//or</span></div><div class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i+<span class="number">1</span>).limit(<span class="number">10</span>)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><strong>合并多个字符串</strong></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 7 using commons-util</span></div><div class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (Dragon dragon : dragons) </div><div class="line">    names.add(dragon.getName());</div><div class="line">String names = StringUtils.join(names, <span class="string">","</span>);</div><div class="line"><span class="comment">// Java 8</span></div><div class="line">String names = dragons.stream()</div><div class="line">    .map(Dragon::getName)</div><div class="line">    .collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<h2>5 Optional类</h2>
<p>Java 8在<code>java.util</code>包中提供了<code>Optional</code>类来防止返回null值(会导致<code>NullPointerException</code>)。它和Google Guava的<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html" target="_blank" rel="external">Optional</a>很相似，也类似Nat Pryce的<a href="http://www.natpryce.com/articles/000776.html" target="_blank" rel="external">Maybe</a>类和Scala的Option类。</p>
<blockquote>
<p><strong>百万美元错误</strong></p>
<p>Tony Hoare，null的发明者，已经因为它的<a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake" target="_blank" rel="external">&quot;百万美元错误&quot;</a>而被记录在案。除了你对nul的看法，已经有人在编译期null检查部分和自动代码检查过程中做出了很大努力，例如，JSR-305中的<code>@Nonnull</code>注解。<code>Optional</code>让API设计者可以更简单的来避免null。</p>
</blockquote>
<p>可以用<code>Optional.of(x)</code>来包装一个非null值，<code>Optional.empty()</code>来表示值缺失，<code>Optional.ofNullable(x)</code>来从可能为空的引用创建<code>Optional</code>。</p>
<p>在创建Optional的实例之后，然后使用<code>isPresent()</code>确认是否有值，并用<code>get()</code>来获取值。Optional提供了一些其他有用的方法来处理值缺失：</p>
<ul>
<li><code>orElse(T)</code> – 如果Optional是空，则返回给定的值。</li>
<li><code>orElseGet(Supplier&lt;T&gt;)</code> – 如果Optional是空，则调用给定的提供者来产生一个值。</li>
<li><code>orElseThrow(Supplier&lt;X extends Throwable&gt;)</code> – 如果Optional是空，则调用给定的提供者来抛出一个异常。</li>
</ul>
<p>也提供了一些函数式(对lambda友好)的方法，如下：</p>
<ul>
<li><code>filter(Predicate&lt;? super T&gt; predicate)</code> – 过滤值并返回新的Optional。</li>
<li><code>flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code> – 进行Map操作并返回Optional。</li>
<li><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code> – 仅当有值(无返回值)的时候，执行给定的消费者</li>
<li><code>map(Function&lt;? super T,? extends U&gt; mapper)</code> – 用给定的Map方法并返回新的Optional。</li>
</ul>
<blockquote>
<p><strong>Stream Optional(流的Optional)</strong></p>
<p>新的<code>Stream</code>接口有一些返回Optional的方法(当Stream中没有值的时候)：</p>
<ul>
<li><code>reduce(BinaryOperator&lt;T&gt; accumulator)</code> – 把Stream reduce成单个值。、</li>
<li><code>max(Comparator&lt;? super T&gt; comparator)</code> – 返回最大值。</li>
<li><code>min(Comparator&lt;? super T&gt; comparator)</code> – 返回最小值。</li>
</ul>
</blockquote>
<h2>6 Nashorn</h2>
<p><em>Nashorn</em>替换了<code>Rhino</code>成为了Oracle JVM中默认的JavaScript引擎。由于使用的JVM的<code>invokedynamic</code>特性，Nashorn更加快，它也包含了命令行工具(<code>jjs</code>)。</p>
<h3>6.1 <code>jjs</code></h3>
<p>JDK 8包含了命令行工具<code>jjs</code>来运行JavaScript。</p>
<p>你可以通过命令行运行JavaScript文件(假定你已经把Java 8的bin目录放在了<code>$PATH</code>里面)：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jjs script.js</div></pre></td></tr></table></figure></p>
<p>这对运行脚本很有用，例如，假如你想很快求出几个数的和，如下：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line"><span class="keyword">var</span> sum = data.reduce(<span class="function"><span class="keyword">function</span><span class="params">(x, y)</span> </span>{<span class="keyword">return</span> x + y}, <span class="number">0</span>)</div><div class="line">print(sum)</div></pre></td></tr></table></figure></p>
<p>运行上述代码会打印<code>27</code>。</p>
<h3>6.2 脚本</h3>
<p>使用<code>-scripting</code>参数运行jjs进入交互的shell，然后就可以键入并执行JavaScript。</p>
<p>可以在字符串中嵌入变量并对它们求值，例如：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jjs&gt; <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">jjs&gt; print(<span class="string">"${date}"</span>)</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出当前的日期和时间。</p>
<h3>6.3 脚本引擎</h3>
<p>也可以在Java中动态的运行JavaScript。</p>
<p>首先，需要import脚本引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</div><div class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</div></pre></td></tr></table></figure></p>
<p>然后，调用<code>ScriptEngineManager</code>来获取Nashorn引擎：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ScriptEngineManager engineManager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">ScriptEngine engine = engineManager.getEngineByName(<span class="string">"nashorn"</span>);</div></pre></td></tr></table></figure></p>
<p>现在就可以任意时候对JavaScript代码求值了：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">engine.eval(<span class="string">"p('Hello Nashorn');"</span>);</div></pre></td></tr></table></figure></p>
<p><code>eval</code>方法也可以用<code>Filereader</code>类型做输入参数：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="keyword">new</span> FileReader(<span class="string">'library.js'</span>));</div></pre></td></tr></table></figure></p>
<p>这样就可以引入并运行任何JavaScript代码。然而，需要知道的是，浏览器中提供的典型变量（窗口，文档等）将不可用。</p>
<h3>6.4 引入</h3>
<p>在JavaScript中，可以通过<em>JavaImporter</em>引入并使用Java类和包。</p>
<p>例如，引入<code>java.util</code>、IO和NIO的包：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var imports = <span class="keyword">new</span> JavaImporter(java.util, java.io, java.nio.file);</div><div class="line">with (imports) {</div><div class="line">        var paths = <span class="keyword">new</span> LinkedList();</div><div class="line">        print(paths <span class="keyword">instanceof</span> LinkedList); <span class="comment">//true</span></div><div class="line">        paths.add(Paths.get(<span class="string">"file1"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file2"</span>));</div><div class="line">        paths.add(Paths.get(<span class="string">"file3"</span>));</div><div class="line">        print(paths) <span class="comment">// [file1, file2, file3]</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上展示了<code>paths</code>是<code>LinkedList</code>的实例，并打印list。</p>
<p>之后，就可以添加如下代码来把文本写入文件：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i &lt; paths.size(); i++)</div><div class="line">	Files.newOutputStream(paths.get(i))</div><div class="line">		.write(<span class="string">"test\n"</span>.getBytes());</div></pre></td></tr></table></figure></p>
<p>我们可以使用已有的Java类，也可以创建新的类。</p>
<h3>6.5 扩展</h3>
<p>可以使用<code>Java.type</code>和<code>Java.extend</code>方法来扩展Java类和接口。例如，可以扩展Callable接口并实现<code>call</code>方法：</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> concurrent = <span class="keyword">new</span> JavaImporter(java.util, java.util.concurrent);</div><div class="line"><span class="keyword">var</span> Callable = Java.type(<span class="string">"java.util.concurrent.Callable"</span>);</div><div class="line"><span class="keyword">with</span> (concurrent) {</div><div class="line">  <span class="keyword">var</span> executor = Executors.newCachedThreadPool();</div><div class="line">  <span class="keyword">var</span> tasks = <span class="keyword">new</span> LinkedHashSet();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">200</span>; i++) {</div><div class="line">    <span class="keyword">var</span> MyTask = Java.extend(Callable, {call: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{print(<span class="string">"task "</span> + i)}})</div><div class="line">    <span class="keyword">var</span> task = <span class="keyword">new</span> MyTask();</div><div class="line">    tasks.add(task);</div><div class="line">    executor.submit(task);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3>6.6 Invocable</h3>
<p>也可以直接从Java中调用JavaScript方法。</p>
<p>首先，需要将引擎的类型转换为Invocable接口：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Invocable inv = (Invocable) engine;</div></pre></td></tr></table></figure></p>
<p>然后，调用任何方法只要简单的使用<code>invokeFunction</code>方法，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">engine.eval(<span class="string">"function p(s) { print(s) }"</span>);</div><div class="line">inv.invokeFunction(<span class="string">"p"</span>, <span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p>
<p>最后，就可以调用<code>getInterface</code>方法用JavaScript来实现任意接口。</p>
<p>例如，已有如下的<code>JPrinter</code>接口，可以如下调用：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">JPrinter</span> </span>{</div><div class="line">    <span class="keyword">void</span> p(String s);</div><div class="line">}</div><div class="line"><span class="comment">// later on...</span></div><div class="line">JPrinter printer = inv.getInterface(JPrinter.class);</div><div class="line">printer.p(<span class="string">"Hello again!"</span>);</div></pre></td></tr></table></figure></p>
<h2>7 新的Date和Time API</h2>
<p>Java 8引入了新的Date/Time API，这些API线程安全、易用、比之前的API更加全面。Java的Calendar实现没有很多变化，这是因为它是首次引入，且<a href="http://www.joda.org/joda-time/" target="_blank" rel="external">Joda-Time</a>广泛的被认为是一个很好的替代。Java 8的新Date/Time API与Joda-Time非常相似。</p>
<h3>7.1 新的类</h3>
<p>引人注意的最注意差别是有多个不同的类来表示时间、日期、时间段、和特定时区的数据，也有一些不同日期类和时间类之间的转换器。</p>
<p>对不含时区信息的日期和时间，使用如下类：</p>
<ul>
<li><code>LocalDate</code> – 日、月、年。</li>
<li><code>LocalTime</code> – 仅含时间。</li>
<li><code>LocalDateTime</code> – 含日期和时间。</li>
</ul>
<p>对特定时区的时间，可以用<code>ZonedDateTime</code>。</p>
<p>在Java 8之前，为了计算之后8消失的时间，需要像下面这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Calendar cal = Calendar.getInstance();</div><div class="line">cal.add(Calendar.HOUR, <span class="number">8</span>);</div><div class="line">cal.getTime(); <span class="comment">// actually returns a Date</span></div></pre></td></tr></table></figure></p>
<p>在Java 8中，可以更简单的这样写：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime now = LocalTime.now();</div><div class="line">LocalTime later = now.plus(<span class="number">8</span>, HOURS);</div></pre></td></tr></table></figure></p>
<p>也有命名清晰的方法，如<code>plusDays</code>、<code>plusMonths</code>、<code>minusDays</code>、<code>minusMonths</code>。如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate thirtyDaysFromNow = today.plusDays(<span class="number">30</span>);</div><div class="line">LocalDate nextMonth = today.plusMonths(<span class="number">1</span>);</div><div class="line">LocalDate aMonthAgo = today.minusMonths(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>注意，每个方法都返回不同的<code>LocalDate</code>实例，原本的LocalDate对象<code>today</code>并未变化。这是因为新的Date-Time类型是不可变的，是它们变得线程安全和可缓存的。</p>
<h3>7.2 创建</h3>
<p>创建性的日期和时间对象在Java 8中更加容易也更加不易犯错。每个类型都是不可变的，且有静态工厂方法。</p>
<p>例如，创建新的LocalDate在2014-03-15这天，可以如下简单的创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>考虑跟多类型安全的话，可以使用新的枚举类型<code>Month</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">15</span>);</div></pre></td></tr></table></figure></p>
<p>也可以通过结合LocalDate和LocalTime的实例来简单的创建LocalDateTime对象：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.of(<span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>);</div><div class="line">LocalDateTime datetime = date.atTime(time);</div></pre></td></tr></table></figure></p>
<p>也能调用(LocalDate的)以下方法：</p>
<ul>
<li><code>atTime(int hour, int minute)</code></li>
<li><code>atTime(int hour, int minute, int second)</code></li>
<li><code>atTime(int hour, int minute, int second, int nanoOfSecond)</code></li>
</ul>
<p>每个类都有<code>now()</code>方法，相应的返回调用时瞬间的时间(或日期)。</p>
<h3>7.3 枚举类型</h3>
<p>Java 8增加了一些枚举类型，如<code>java.time.temporal.ChronoUnit</code>用来表示类似&quot;天&quot;或&quot;小时&quot;的概念替换掉Calendar API中的整数常量，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</div><div class="line">LocalDate nextMonth = today.plus(<span class="number">1</span>, ChronoUnit.MONTHS);</div><div class="line">LocalDate nextYear = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</div><div class="line">LocalDate nextDecade = today.plus(<span class="number">1</span>, ChronoUnit.DECADES);</div></pre></td></tr></table></figure></p>
<p>也有<code>java.time.DayOfWeek</code>、<code>java.time.Month</code>枚举类型。</p>
<p><code>Month</code>枚举类型可以用来创建LocalDates，也可以由<code>LocalDate::getMonth</code>返回。如，以下是创建LocalDate并打印月份的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import java.time.Month;</span></div><div class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">27</span>);</div><div class="line">System.out.println(date.getMonth());</div></pre></td></tr></table></figure></p>
<p>以上代码会打印出&quot;MARCH&quot;。</p>
<h3>7.4 Clock(时钟)</h3>
<p><code>Clock</code>类可以用于连接日期和时间以构建测试。在生成环境可以用普通时钟，在测试环境可以用另一个时钟。</p>
<p>获取默认的时钟，可以用以下代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clock.systemDefaultZone();</div></pre></td></tr></table></figure></p>
<p>然后clock就可以传入进工厂方法，如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime time = LocalTime.now(clock);</div></pre></td></tr></table></figure></p>
<h3>7.5 时间区间和时间长度</h3>
<p>模拟人的理解，Java 8有两个类型来表示时间差，时间区间和时间长度(Period and Duration)。</p>
<p>时间长度是基于时间的时间量，例如&quot;34.5秒&quot;；时间区间是基于日期的时间量，例如&quot;2年3个月4天&quot;。</p>
<p>时间区间和时间长度可以通过<code>between</code>方法来确定：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Period p = Period.between(date1, date2);</div><div class="line">Duration d = Duration.between(time1, time2);</div></pre></td></tr></table></figure></p>
<p>也可以通过静态方法来创建，例如，时间长度可以通过任意值的天、小时、分、秒来创建：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Duration twoHours = Duration.ofHours(<span class="number">2</span>);</div><div class="line">Duration tenMinutes = Duration.ofMinutes(<span class="number">10</span>);</div><div class="line">Duration thirtySecs = Duration.ofSeconds(<span class="number">30</span>);</div></pre></td></tr></table></figure></p>
<p>Java 8的LocalTime类型可以加减时间区间和时间长度，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime t2 = time.plus(twoHours);</div></pre></td></tr></table></figure></p>
<h3>7.6 时间调整(<code>TemporalAdjusters</code>)</h3>
<p><code>TemporalAdjusters</code>可以用来做很麻烦的日期&quot;数学计算&quot;，这在业务功能中很常用。例如，可以用来获取&quot;某月的第一天&quot;和&quot;下个周二&quot;。</p>
<p><code>java.time.temporal.TemporalAdjusters</code>类包含了一批有用的方法来创建TemporalAdjuster，以下是其中一部分：</p>
<ul>
<li><code>firstDayOfMonth()</code></li>
<li><code>firstDayOfNextMonth()</code></li>
<li><code>firstInMonth(DayOfWeek)</code></li>
<li><code>lastDayOfMont()</code></li>
<li><code>next(DayOfWeek)</code></li>
<li><code>nextOrSame(DayOfWeek)</code></li>
<li><code>previous(DayOfWeek)</code></li>
<li><code>previousOrSame(DayOfWeek)</code></li>
</ul>
<p>用<code>TemporalAdjuster</code>的<code>with</code>方法，该方法返回date-time或date对象调整后的副本，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</div><div class="line"><span class="comment">//...</span></div><div class="line">LocalDate nextTuesday = LocalDate.now().with(next(DayOfWeek.TUESDAY));</div></pre></td></tr></table></figure></p>
<h3>7.7 Instant(即时)</h3>
<p><code>Instant</code>类表示精确到纳秒的时间点，它构成了Java 8的date-time API中计算时间的基础。</p>
<p>跟老的Date类很像，<code>Instant</code>也是从&quot;纪元&quot;(1970-01-01)开始计算时间的，且不考虑时区。</p>
<h3>7.8 时区</h3>
<p>时区是用<code>java.time.ZoneId</code>类来表示的。共有两种时区标识，基于固定偏移的和基于地理区域的。这可以用来补偿类似&quot;夏令时&quot;之类复杂情况的时间。</p>
<p>可以通过很多方法来获取时区标识的实例，以下是两个示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ZoneId mountainTime = ZoneId.of(<span class="string">"America/Denver"</span>);</div><div class="line">ZoneId myZone = ZoneId.systemDefault();</div></pre></td></tr></table></figure></p>
<p>如果要打印所有可用的标识，可以调用<code>getAvailableZoneIds()</code>：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(ZoneId.getAvailableZoneIds());</div></pre></td></tr></table></figure></p>
<h3>7.9 向后兼容性</h3>
<p>原始的Date和Calendar对象包含<code>toInstant()</code>方法来转换到新的Date-Time API，可以调用<code>ofInstant(Insant,ZoneId)</code>方法来获取<code>LocalDateTime</code>或<code>ZonedDateTime</code>对象，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Date date = <span class="keyword">new</span> Date();</div><div class="line">Instant now = date.toInstant();</div><div class="line">LocalDateTime dateTime = LocalDateTime.ofInstant(now, myZone);</div><div class="line">ZonedDateTime zdt = ZonedDateTime.ofInstant(now, myZone);</div></pre></td></tr></table></figure></p>
<h2>8 再也没有永久代了</h2>
<blockquote>
<p>发布的实现将把类的元数据放在本地内存，并将内部的字符串和静态类移至Java堆中。<a href="http://openjdk.java.net/jeps/122" target="_blank" rel="external">http://openjdk.java.net/jeps/122</a></p>
</blockquote>
<p>大多数情况的类元数据内存分配现在被分配在了本地内存。这意味着不用再设置&quot;XX:PermSize&quot;选项了(实际上也没有了)。</p>
<p>这也意味着，在内存溢出的时候，你会得到&quot;java.lang.OutOfMemoryError: Metadata space&quot;的错误信息，而不是之前的&quot;java.lang.OutOfMemoryError: Permgen space&quot;</p>
<p>这是某种程度上Oracle JRockit和HotSpot两个JVM的一致性。</p>
<h2>9 杂项</h2>
<p>Java 8有大量你可能会忽略的新功能，因为你的注意了都被lambda吸引去了。以下是这些功能的部分：</p>
<ul>
<li><code>java.util.Base64</code></li>
<li>加密算法更新(很多)</li>
<li>JDBC 4.2</li>
<li>可重复的注解</li>
<li>类型的注解</li>
</ul>
<p>如果想获得更完整的列表，请参考<a href="http://openjdk.java.net/projects/jdk8/features/" target="_blank" rel="external">官方列表</a>。</p>
<h3>9.1 Base64</h3>
<p>知道现在，Java开发者必须依赖第三方库来编码和解码Base-64。由于这是个很常用的操作，大型的项目通常会包含多个不同的Base64实现。例如：Apache common-codec、Spring和Guava都有独立的实现。</p>
<p>出于这个原因，Java 8引入了<code>java.util.Base64</code>，其行为类似Base64的编码和解码器，有以下方法：</p>
<ul>
<li><code>getEncoder()</code></li>
<li><code>getDecoder()</code></li>
<li><code>getUrlEncoder()</code></li>
<li><code>getUrlDecoder()</code></li>
</ul>
<p>每个工厂方法返回编码器或者解码器。</p>
<p>URL Base64编码器提供URL和文件地址安全(62是-，63是_)的编码。</p>
<h3>9.2 Java类型的注解</h3>
<p>Java 8之前，注解可以用于任意的申明。在Java 8中，注解可以用于<em>类型的使用</em>，以下是一些示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Class instance creation:</span></div><div class="line"><span class="keyword">new</span> <span class="annotation">@Interned</span> RocketShip();</div><div class="line"></div><div class="line"><span class="comment">// Type cast:</span></div><div class="line">notNullString = (<span class="annotation">@NonNull</span> String) str;</div><div class="line"></div><div class="line"><span class="comment">// implements clause:</span></div><div class="line">class ImmutableSet&lt;T&gt; implements</div><div class="line">        <span class="annotation">@Readonly</span> Set&lt;<span class="annotation">@Readonly</span> T&gt; { ... }</div><div class="line"></div><div class="line"><span class="comment">// Thrown exception declaration:</span></div><div class="line"><span class="keyword">void</span> launchRocket() <span class="keyword">throws</span></div><div class="line">   	<span class="annotation">@Critical</span> FireException { ... }</div></pre></td></tr></table></figure></p>
<p>新功能注意目标在于支持类型检查的框架，如<a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="external">Checker</a>。这些框架在编译期就可以协助找到代码中的错误。</p>
<h3>9.3 可重复的注解</h3>
<p>Java 8允许使用<code>@Repeatable</code>注解的注解重复使用。</p>
<p>例如，假设你在编写一个游戏，并且想使用注解来调度方法何时被调用，你可以使用多个注解申明多个调度策略：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the first of the month and every monday at 7am</span></div><div class="line"><span class="annotation">@Schedule</span>(dayOfMonth=<span class="string">"first"</span>)</div><div class="line"><span class="annotation">@Schedule</span>(dayOfWeek=<span class="string">"Monday"</span>, hour=<span class="number">7</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGoblinInvasion</span>() { ... }</div></pre></td></tr></table></figure></p>
<p>为了将这些变得可能，你需要：</p>
<ul>
<li><code>Schedule</code>注解需要使用元注解<code>@Repeatable</code>。</li>
<li>需要另一个注解通过<code>@Repeatable</code>注解来申明。</li>
</ul>
<p>由于Java注重向后兼容性，重复的注解实际上是和另一个注解(即你的注解)一起保存的。<code>@Repeatable</code>注解的输入是一个包含注解的类，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Schedule.java</span></div><div class="line"><span class="annotation">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedule</span> </span>{...}</div><div class="line"><span class="comment">// Schedules.java</span></div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Schedules</span> </span>{</div><div class="line">    Schedule[] value;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>现在Schedule就是一个<code>可重复的注解</code>。</p>
<p>可以使用反射在运行期访问可重复的注解。完成这些的新方法是<code>getAnnotationsByType</code>(Class annotationClass)，在<code>Class</code>、<code>Constructor</code>和<code>Method</code>等上都有。他返回所有这样注解的数组(如果没有的话，返回空数组)。</p>
<h2>10 Java 8中的函数式编程</h2>
<p>Java 8计划添加很多函数式语言的特性却不很显著的改动Java语言。</p>
<p>当lambda表达式、方法引用、Stream接口和不可变的数据类型结合在一起，Java就可以进行所谓的&quot;函数式编程&quot;(“functional programming” (FP))了。</p>
<p>处于本书的目的，函数式编程的三大支柱是：</p>
<ul>
<li>函数</li>
<li>不可变性</li>
<li>并发性</li>
</ul>
<h3>10.1 函数</h3>
<p>当然，如其名所示，函数式编程是基于函数是第一类型的特性。Java 8可以说通过Lambda项目和<em>函数接口</em>把函数提升到了第一类型。</p>
<p><code>Function</code>接口(包括相关的接口<code>IntFunction</code>、<code>DoubleFunction</code>、<code>LongFunction</code>、<code>BiFunction</code>等)体现了Java 8在提升函数到对象过程中做出的妥协。该接口允许函数像参数一样传递，像变量一样保存，以及可以由方法返回。</p>
<p><code>Function</code>接口有以下默认方法：</p>
<ul>
<li><code>andThen(Function)</code>: 返回一个合成函数，该函数先在输入上调用本函数，在在结果上调用给定的函数。</li>
<li><code>compose(Function)</code>: 和<code>andThen</code>类似，但是顺序不一样(即，先在输入上调用给定的函数，再调用本函数)。</li>
<li><code>identity()</code>: 返回一个函数，该函数总是返回其输入值。</li>
</ul>
<p>你可以使用这些方法来创建一个创建函数的链，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer,String&gt; f = Function.&lt;Integer&gt;identity()</div><div class="line">        .andThen(i -&gt; <span class="number">2</span>*i).andThen(i -&gt; <span class="string">"str"</span> + i);</div></pre></td></tr></table></figure></p>
<p>返回的函数输入一个整数，乘以2，然后在前面添加&quot;str&quot;。</p>
<p>可以使用<code>andThen</code>任意多次来创建一个函数，记住，函数可以被传递进和返回自方法。以下是一个使用新的Date-Time API的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Function&lt;LocalDate,LocalDateTime&gt; <span class="title">dateTimeFunction</span>(</div><div class="line">    <span class="keyword">final</span> Function&lt;LocalDate,LocalDate&gt; f) {</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> f.andThen(d -&gt; d.atTime(<span class="number">2</span>, <span class="number">2</span>));</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>该方法输入是一个操作<code>LocalDate</code>的函数，并转换为输出<code>LocalDateTime</code>(在时间上午<code>02:02</code>)的函数。</p>
<p><strong>Tuple(元组)</strong></p>
<p>如果需要一个有多于两个参数方法的函数接口(如，&quot;TriFunction&quot;)，那么你需要使用库自己生成。另一个处理这个问题的方法是使用一个叫<em>Tuple</em>的数据结构。</p>
<p>Tuple是一个有类型的数据结构，用于保存一列元素。一些语言，如Scala，对Tuple有内建的支持。Tuple在处理多个相关的值，但却不希望有创建新类的开销的时候很有用。</p>
<p>以下一个非常简单的实现两个元素Tuple的例子：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A _1;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B _2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Tuple2</span>(A a, B b) {</div><div class="line">            <span class="keyword">this</span>._1 = a;</div><div class="line">            <span class="keyword">this</span>._2 = b;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> A <span class="title">get_1</span>() {</div><div class="line">            <span class="keyword">return</span> _1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> B <span class="title">get_2</span>() {</div><div class="line">            <span class="keyword">return</span> _2;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>元组也能让你近似返回多个值。</p>
<blockquote>
<p>Java中有多个可用的Tuple的实现，例如<a href="http://www.javatuples.org/" target="_blank" rel="external">javatuples</a>和<a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a>。</p>
</blockquote>
<h3>10.2 不可变性</h3>
<p>在函数式编程中，状态被认为是有害的，需要尽可能去避免，相反，<em>immutable</em>(不可变的)数据结构很受推荐。例如，<code>String</code>就是Java中的一个不可变类型。</p>
<p>正如你所知，Java 8的新Date-Time类是不可变的。而你可能没有意识到的是，<em>几乎所有</em>新加入Java 8的类都是不可变的(如Optional和Stream)。</p>
<p>然而，在使用Java 8的函数式模式的时候，必须小心防止又陷入可变模式的思维定势。例如，以下代码是应当避免的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] myCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">list.forEach(dragon -&gt; {</div><div class="line">    <span class="keyword">if</span> (dragon.isGreen()) myCount[<span class="number">0</span>]++;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>虽然你可能很聪明，但是这样的代码会导致问题，相反，你应该使用类似下面的做法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.stream().filter(Dragon::isGreen).count();</div></pre></td></tr></table></figure></p>
<p>如果发现你自己又要求助于可变性的时候，考虑是否可以使用“filter”、“map”、“reduce”和“collect”的结合做替代。</p>
<h3>10.3 并发性</h3>
<p>由于多核处理器越来越普及，并发编程变得更加重要。函数式编程为并发编程创建了坚实的基础，Java 8也使用多种方式支持并发性。</p>
<p>第一种方式是Collection的<code>parallelStream()</code>方法。它提供了一条并发使用Stream的捷径，然而，和所有优化一样，你需要测试来确认代码实际上变得更快了，并保守是使用它。太多的并发性，实际上会导致程序变慢。</p>
<p>第二种Java 8支持并发的方式是使用新的<code>CompletableFuture</code>类。它包含<code>supplyAsync</code>静态方法，其输入是函数接口<code>Supplier</code>(生产者)；它还包含方法<code>thenAccept</code>，其输入是<code>Consumer</code>(消费者)，用于处理任务的完成。<code>CompletableFuture</code>在另一个线程中调用给定的<code>Supplier</code>，并在完成时执行<code>Consumer</code>。</p>
<p>当和类似<code>CountDownLatch</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>等的类连接起来，就可以实现线程安全，并发的类似函数式的代码，例如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    AtomicReference&lt;DragonDistance&gt; closest = </div><div class="line">        <span class="keyword">new</span> AtomicReference&lt;&gt;(DragonDistance.worstMatch());</div><div class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(dragons.size());</div><div class="line">    dragons.forEach(dragon -&gt; {</div><div class="line">        CompletableFuture.supplyAsync(() -&gt; dragon.distance(location))</div><div class="line">          .thenAccept(result -&gt; {</div><div class="line">            closest.accumulateAndGet(result, DragonDistance::closest);</div><div class="line">            latch.countDown();</div><div class="line">            });</div><div class="line">        });</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        latch.await();</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Interrupted during calculations"</span>, e);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> closest.get().getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上例找到最近的龙的位置(假设Dragon的<code>distance</code>方法会导致耗时的计算)。</p>
<p>然而，这可以用<code>parallelStream()</code>默认方法来简化(因为过程中只有一种计算)，如下所示：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dragon <span class="title">closestDragon</span>(Location location) {</div><div class="line">    <span class="keyword">return</span> dragons.parallelStream()</div><div class="line">      .map(dragon -&gt; dragon.distance(location))</div><div class="line">      .reduce(DistancePair.worstMatch(), DragonDistance::closest)</div><div class="line">      .getDragon();</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码进行了和之前的例子实质上相同的任务，但是更加简洁(函数式)。</p>
<h3>10.4 尾调用优化</h3>
<p>函数式编程的一个标志是<em>尾调用递归</em><a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>。它用迭代的方式(函数式编程中没有迭代)处理相同的问题，不幸的是，如果没有编译器适当的优化，它会导致栈溢出。</p>
<p><em>尾调用优化</em>指编译器将递归的函数调用转化为循环来避免栈溢出。例如，Lisp中使用尾调用递归的函数会自动进行这样的优化。</p>
<p>Java 8和很多其他语言一样不支持尾调用优化(目前为止)。然而，使用类似下面这样的接口来预估是可能的：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tail</span>&lt;<span class="title">T</span>&gt; </span>{</div><div class="line"></div><div class="line">    Tail&lt;T&gt; apply();</div><div class="line"></div><div class="line">    <span class="keyword">default</span> <span class="keyword">boolean</span> isDone() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T result() {</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not done yet."</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T invoke() {</div><div class="line">        <span class="keyword">return</span> Stream.iterate(<span class="keyword">this</span>, Tail::apply)</div><div class="line">                .filter(Tail::isDone)</div><div class="line">                .findFirst()</div><div class="line">                .get()</div><div class="line">                .result();</div><div class="line">    }</div></pre></td></tr></table></figure></p>
<p><code>Tail</code>接口有3个默认方法和1个抽象方法(<code>apply</code>)，<code>invoke()</code>方法包含了&quot;尾调用优化&quot;的主体：</p>
<ul>
<li>它使用了Stream的<code>iterate</code>方法带来的便利来创建无限Stream，这回持续的调用尾的<code>apply</code>方法。</li>
<li>然后，直到<code>isDone()</code>返回真的时候，调用<code>filter</code>和<code>findFirst</code>来停止Stream。</li>
<li>最后，返回结果。</li>
</ul>
<p>为了实现&quot;完成&quot;条件，Tail需要有以下额外的静态方法：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &lt;T&gt; Tail&lt;T&gt; done(<span class="keyword">final</span> T value) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tail&lt;T&gt;() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> T <span class="title">result</span>() {</div><div class="line">          <span class="keyword">return</span> value;</div><div class="line">        }  </div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span>() {</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> Tail&lt;T&gt; <span class="title">apply</span>() {</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not supported."</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用<code>Tail</code>接口，你就可以在Java 8中轻易的模拟尾调用递归。以下是使用这个接口计算<em>阶乘</em>的示例：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">fastFactorial</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> fastFactorial(<span class="number">1</span>L, n).invoke();</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Tail&lt;Long&gt; <span class="title">fastFactorial</span>(<span class="keyword">long</span> x, <span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> () -&gt; {</div><div class="line">        <span class="keyword">switch</span> (n) {</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> Tail.done(x);</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> fastFactorial(x * n, n - <span class="number">1</span>);</div><div class="line">        }</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用这个方法，就可以获取极快的程序运行速度而仍然使用函数式风格。</p>
<p>当然，JVM本身已经做了很多优化，因此这可能不总是最佳的方法。但是，这值得记在脑子里。</p>
<h2>11 结论</h2>
<p>感谢你阅读了这个Java 8的简短介绍。希望你已经学到很多，并已经准备好开始自己使用。</p>
<p>综上，Java 8包含以下特性：</p>
<ul>
<li>lambda表达式</li>
<li>方法引用</li>
<li>默认方法(Defender方法)</li>
<li>新的Stream API</li>
<li>Optional</li>
<li>新的Date/Time API</li>
<li>新的JavaScript引擎Nashorn</li>
<li>移除永久代</li>
</ul>
<p>如果要更总Java未来可能的加入的特性，可能需要参考<a href="http://openjdk.java.net/jeps/0" target="_blank" rel="external">JEPS</a></p>
<h2>反向移植</h2>
<p>如果处于一些原因无法立即更新到Java 8。也有一些方法反向移植一些Java 8的特性到之前版本。</p>
<p>对每个特性，以下是反向移植或类似的库：</p>
<ul>
<li>Lambdas – <a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a></li>
<li>Lazily Evaluated Sequences – <a href="https://code.google.com/p/totallylazy/" target="_blank" rel="external">totallylazy</a></li>
<li>Optional – <a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">guava</a></li>
<li>Date/Time – <a href="http://www.threeten.org/" target="_blank" rel="external">ThreeTen</a></li>
<li>Nashorn – <a href="https://bitbucket.org/ramonza/nashorn-backport" target="_blank" rel="external">nashorn-backport</a></li>
</ul>
<p>请谨慎使用反向移植。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p>译者注：本文原地址在<a href="https://leanpub.com/whatsnewinjava8/read" target="_blank" rel="external">https://leanpub.com/whatsnewinjava8/read</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>译者注：这里指Optional类<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>lambda表达式<em>不是</em>匿名类，实际上它在字节码中使用了<code>invokedynamic</code>(译者注：动态调用)。<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>下一节中介绍&quot;函数接口&quot;的含义。<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>当然，你这里需要加一个<code>catch</code>语句处理异常。<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>实际的方法签名是<code>walk(Path start, FileVisitOption... options)</code>，但是可能用<code>walk(Path start)</code>就可以。<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>尾调用递归是一个函数的调用作为这个函数的最后动作发生。<a href="#fnref7">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<h2>前言</h2>
<p>和很多Java开发者一样，第一次见到lambda表达式的时候，我就对它有了浓厚的兴趣；也和很多人一]]>
    </summary>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Translation" scheme="http://valleylord.github.io/tags/Translation/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL物化视图简介]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-mv/"/>
    <id>http://valleylord.github.io/post/201411-postgres-mv/</id>
    <published>2014-11-23T02:22:00.000Z</published>
    <updated>2014-12-03T01:17:05.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL从9.3版本开始支持物化视图(materialized view)。虽然有些功能上不如Oracle来的强大，多数情况下也足够使用了。</p>
<h2>物化视图功能比较</h2>
<p>postgres的物化视图和Oracle的比较如下表，</p>
<table>
<thead>
<tr class="header">
<th align="left">功能点</th>
<th align="left">PostgreSQL</th>
<th align="left">Oracle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">创建视图</td>
<td align="left">create materialized view ...</td>
<td align="left">create materialized view ...</td>
</tr>
<tr class="even">
<td align="left">删除视图</td>
<td align="left">drop materialized view ...</td>
<td align="left">drop materialized view ...</td>
</tr>
<tr class="odd">
<td align="left">定时刷新</td>
<td align="left">通过插件pgagent</td>
<td align="left">on demand start with ... next 参数</td>
</tr>
<tr class="even">
<td align="left">增量刷新</td>
<td align="left">不支持</td>
<td align="left">refresh fast 参数</td>
</tr>
<tr class="odd">
<td align="left">读时刷新</td>
<td align="left">预期9.4版本支持</td>
<td align="left">支持</td>
</tr>
<tr class="even">
<td align="left">commit刷新</td>
<td align="left">通过trigger实现</td>
<td align="left">on commit 参数</td>
</tr>
<tr class="odd">
<td align="left">手动刷新</td>
<td align="left">refresh materialized view ...</td>
<td align="left">EXEC DBMS_MVIEW.REFRESH( ... )</td>
</tr>
<tr class="even">
<td align="left">自动刷新</td>
<td align="left">不支持</td>
<td align="left">force 参数</td>
</tr>
<tr class="odd">
<td align="left">添加索引</td>
<td align="left">create index ...</td>
<td align="left">create index ...</td>
</tr>
<tr class="even">
<td align="left">视图直接查询</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr class="odd">
<td align="left">计划自动替换</td>
<td align="left">不支持</td>
<td align="left">支持</td>
</tr>
</tbody>
</table>
<h2>postgres物化视图功能演示</h2>
<p>本文使用的测试数据是使用pgbench生成的1600000条数据，详见我的另一篇文章<a href="http://valleylord.sinaapp.com/post/201411-postgres-pgbench#content" target="_blank" rel="external">pgbench压力测试工具简介</a>。在pgbench_accounts表中有1600000条数据，其中bid列有16个取值，每个取值分别有100000条数据。测试用的数据库是PostgreSQL 9.3.4版本</p>
<h3>使用create materialized view创建物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pgbench=# <span class="operator"><span class="keyword">create</span> materialized <span class="keyword">view</span> mv_pgbench_accounts <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid &lt; <span class="number">3</span>;</span></div><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="number">200000</span></span></div></pre></td></tr></table></figure></p>
<p>默认情况下，创建物化视图的时候会全量刷新视图，即启用<code>with data</code>选项。</p>
<h3>查询物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pgbench=# select count(*) from mv_pgbench_accounts;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=# explain select count(*) from mv_pgbench_accounts;</div><div class="line">                                   QUERY PLAN                                    </div><div class="line">---------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=5779.00..5779.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on mv_pgbench_accounts  (cost=0.00..5279.00 rows=200000 width=0)</div><div class="line">(2 rows)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p>从查询计划中可以发现，物化视图已经起作用了。但是，使用等价的直接查询，不能自动转化为物化视图的查询，也就是没有执行计划自动替换功能，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pgbench=# explain select count(*) from pgbench_accounts where bid &lt; 3;</div><div class="line">                                  QUERY PLAN                                   </div><div class="line">-------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=47134.25..47134.26 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on pgbench_accounts  (cost=0.00..46635.38 rows=199548 width=0)</div><div class="line">         Filter: (bid &lt; 3)</div><div class="line">(3 rows)</div><div class="line"></div><div class="line">pgbench=# select count(*) from pgbench_accounts where bid &lt; 3;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-select1.png"></p>
<h3>修改源表数据，刷新物化视图</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pgbench=# <span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> pgbench_accounts <span class="keyword">select</span> aid+<span class="number">1600000</span>,bid,abalance,filler <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid = <span class="number">1</span>;</span></div><div class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">100000</span></span></div><div class="line">pgbench=# <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> pgbench_accounts <span class="keyword">where</span> bid &lt; <span class="number">3</span>;</div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 300000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 200000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p>再次插入<code>bid=1</code>的数据100000条到pgbench_accounts中(会话设置为自动commit)，postgres的视图没有自动刷新，需要手动刷新，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pgbench=# refresh materialized view mv_pgbench_accounts with no data;</div><div class="line">REFRESH MATERIALIZED VIEW</div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line">ERROR:  materialized view "mv_pgbench_accounts" has not been populated</div><div class="line">HINT:  <span class="operator"><span class="keyword">Use</span> the REFRESH MATERIALIZED <span class="keyword">VIEW</span> command.</span></div><div class="line">pgbench=# refresh materialized <span class="keyword">view</span> mv_pgbench_accounts <span class="keyword">with</span> <span class="keyword">data</span>;</div><div class="line">REFRESH MATERIALIZED VIEW</div><div class="line">pgbench=# <span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mv_pgbench_accounts;</span></div><div class="line"> count  </div><div class="line"><span class="comment">--------</span></div><div class="line"> 300000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-refresh.png"></p>
<p>刷新的时候，如果使用了参数<code>with no data</code>，那么会将物化视图的数据重置为未发布的状态；使用<code>with data</code>参数，才会将数据写入。再次查询，就可以得到合理的结果。如果想做到插入数据后自动刷新，可以将刷新动作写在trigger里面。</p>
<h3>物化视图上建立索引</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pgbench=# create index mv_pgbench_accounts_bid_idx on mv_pgbench_accounts(bid);</div><div class="line">CREATE INDEX</div><div class="line">pgbench=# explain select count(*) from mv_pgbench_accounts where bid = 2;</div><div class="line">                                                        QUERY PLAN                                                        </div><div class="line">--------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=7370.77..7370.78 rows=1 width=0)</div><div class="line">   -&gt;  Index Only Scan using mv_pgbench_accounts_bid_idx on mv_pgbench_accounts  (cost=0.42..6995.52 rows=150100 width=0)</div><div class="line">         Index Cond: (bid = 2)</div><div class="line">(3 rows)</div><div class="line"></div><div class="line">pgbench=# select count(*) from mv_pgbench_accounts where bid = 2;</div><div class="line"> count  </div><div class="line">--------</div><div class="line"> 100000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">pgbench=#</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-mv/mv-index.png"></p>
<p>物化视图上建立索引的方法和表上建立索引的方法几乎一样，使用方法也一样。从执行计划中可以看到，在物化视图上建立的索引可以被查询所用。</p>
<p>以上是对PostgreSQL的物化视图功能做的简单功能对比和使用方法演示。</p>
<p>本文参考了以下文章，<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>, <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, <a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>，和PostgreSQL9.3的官方文档<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>, <a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>, <a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.linuxidc.com/Linux/2013-09/90045.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-09/90045.htm</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://www.cnblogs.com/gaojian/archive/2012/11/12/2765749.html" target="_blank" rel="external">http://www.cnblogs.com/gaojian/archive/2012/11/12/2765749.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://blog.csdn.net/tianlesoftware/article/details/4713553" target="_blank" rel="external">http://blog.csdn.net/tianlesoftware/article/details/4713553</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.cnblogs.com/Ronger/archive/2012/03/28/2420962.html" target="_blank" rel="external">http://www.cnblogs.com/Ronger/archive/2012/03/28/2420962.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://soft.chinabyte.com/database/403/12429903.shtml" target="_blank" rel="external">http://soft.chinabyte.com/database/403/12429903.shtml</a><a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><a href="http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html</a><a href="#fnref6">↩</a></p></li>
<li id="fn7"><p><a href="https://wiki.postgresql.org/wiki/Materialized_Views" target="_blank" rel="external">https://wiki.postgresql.org/wiki/Materialized_Views</a><a href="#fnref7">↩</a></p></li>
<li id="fn8"><p><a href="http://www.postgresql.org/docs/9.3/static/sql-creatematerializedview.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/static/sql-creatematerializedview.html</a><a href="#fnref8">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL从9.3版本开始支持物化视图(materialized view)。虽然有些功能上不如Oracle来的强大，多数情况下也足够使用了。</p>
<h2>物化视图功能比较</h2>
<p>postgres的物化视图和Oracle的比较如下表，</p>
<ta]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pgbench压力测试工具简介]]></title>
    <link href="http://valleylord.github.io/post/201411-postgres-pgbench/"/>
    <id>http://valleylord.github.io/post/201411-postgres-pgbench/</id>
    <published>2014-11-19T12:40:00.000Z</published>
    <updated>2014-12-03T01:17:01.000Z</updated>
    <content type="html"><![CDATA[<p>pgbench是基于tpc-b模型的postgresql测试工具。它属于开源软件，主要为对 PostgreSQL 进行压力测试的一款简单程序, SQL命令可以在一个连接中顺序地执行，通常会开多个数据库 Session, 并且在测试最后形成测试报告，得出每秒平均事务数，pgbench可以测试 select,update,insert,delete 命令，用户可以编写自己的脚本进行测试。</p>
<h2>pgbench的参数</h2>
<p>pgbench的参数如下表。</p>
<table>
<thead>
<tr class="header">
<th align="left">类别</th>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">初始化</td>
<td align="left">-i</td>
<td align="left">invokes initialization mode//调用初始化模式</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-F NUM</td>
<td align="left">fill factor（指定建表的fill_factor（heap page的保留空间，对于更新频繁的表，可以产生HOT，有利于降低索引膨胀及索引更新的可能性）</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-n</td>
<td align="left">do not run VACUUM after initialization//数据初始化后不执行vacuum</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-q</td>
<td align="left">quiet logging (one message each 5 seconds)//每隔5秒钟输出一次消息</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-s NUM</td>
<td align="left">scaling的值为倍数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--foreign-keys</td>
<td align="left">create foreign key constraints between tables//表间创建主外键</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">--index-tablespace=TABLESPACE</td>
<td align="left">create tables in the specified tablespace//在特定的表空间创建表</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--unlogged-tables</td>
<td align="left">create tables as unlogged tables//创建无日志表</td>
</tr>
<tr class="odd">
<td align="left">测试执行参数</td>
<td align="left">-c NUM</td>
<td align="left">number of concurrent database clients (default: 1)//测试时模拟的客户端个数，默认为1</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-C</td>
<td align="left">establish new connection for each transaction//是否使用短连接（每个请求一个连接，用于没有连接池环境，tps峰值，使用-C后 -M不能使用prepared，使用extend模式）</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-D VARNAME=VALUE</td>
<td align="left">define variable for use by custom script//设置变量，在自定义脚本中使用varname引用，可使用多个-D设置多个变量</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-f FILENAME</td>
<td align="left">read transaction script from FILENAME//指定自定义的测试文件（由元命令和SQL组成），可使用多个-f指定多个文件，每个文件作为一个事务，每次执行事务时随机选择一个文件执行</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-j NUM</td>
<td align="left">number of threads (default: 1)//pgbench的工作线程，-l和-c之间是倍数，c是l的倍数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-l</td>
<td align="left">write transaction times to log file//开启事务统计，输出文件名格式pgbench_log.$PID.$threadID(当-j&gt;=2时，threadID从1开始)</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-M simple, extended, prepared</td>
<td align="left">protocol for submitting queries to server (default: simple) //libpg接口</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-n</td>
<td align="left">do not run VACUUM before tests//测试之前不执行vacuum</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-N</td>
<td align="left">do not update tables &quot;pgbench_tellers&quot; and &quot;pgbench_branches&quot;//TPC-B非默认测试模式，少两个表的更新</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-r</td>
<td align="left">report average latency per command//报告测试文件中每条（包括元命令和SQL）的平均执行延迟</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-s NUM</td>
<td align="left">report this scale factor in output//使用自定义脚本测试时，指定scale的输出，没有实质意义</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-S</td>
<td align="left">perform SELECT-only transactions//TPC-B非默认测试模式，只查询</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-t NUM</td>
<td align="left">number of transactions each client runs (default: 10)//指定每个连接的执行事务数</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-T NUM</td>
<td align="left">duration of benchmark test in seconds//指定总的压力测试时间，与-t不能同时使用</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-v</td>
<td align="left">vacuum all four standard tables before tests//测试前先vacuum4个和tpc-b相关的表</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">--aggregate-interval=NUM</td>
<td align="left">aggregate data over NUM seconds//输出聚合后的事务统计信息</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">--sampling-rate=NUM</td>
<td align="left">fraction of transactions to log (e.g. 0.01 for 1% sample)//指定采样百分比，得出的TPC将只有正常tps*rate |</td>
</tr>
<tr class="even">
<td align="left">通用参数</td>
<td align="left">-d</td>
<td align="left">print debugging output</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-h HOSTNAME</td>
<td align="left">database server host or socket directory</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-p PORT</td>
<td align="left">database server port number</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-U USERNAME</td>
<td align="left">connect as specified database user</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">-V, --version</td>
<td align="left">output version information, then exit</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">-?, --help</td>
<td align="left">show this help, then exit</td>
</tr>
</tbody>
</table>
<h2>pgbench的异步接口实现</h2>
<p>pgbench支持3种异步接口：简单调用、扩展调用、绑定变量调用，参考Postgres官方文档。</p>
<h3>简单调用PQsendQuery(<code>-M simple</code>)</h3>
<p>向服务器提交一个命令而不等待结果。如果查询成功发送则返回 1，否则返回 0。 （此时，可以用PQerrorMessage获取关于失败的信息）。</p>
<p>在成功调用PQsendQuery后，调用PQgetResult一次或者多次获取结果 。在PQsendQuery返回 NULL 指针，表明命令完成之前， 我们不能再调用PQsendQuery（在同一次连接里）。</p>
<p>注：每次调用会带来比较大的开销，每次执行都需要sql解析，因为没有没有执行计划缓存。</p>
<h3>扩展调用PQsendQueryParams(<code>-M extended</code>)</h3>
<p>给服务器提交一个命令和（命令需要的）分隔的参数，而不等待结果。</p>
<p>这个等效于 PQsendQuery，只是查询参数可以和查询字串分开声明。 函数的参数处理和 PQexecParams 一样。和 PQexecParams 类似， 它不能在 2.0 版本的协议连接上工作，并且它只允许在查询字串里出现一条命令。</p>
<p>注：也有和简单调用一样的问题，没有执行计划缓存</p>
<h3>绑定变量调用PQsendPrepare和PQsendQueryPrepared(<code>-M prepared</code>)</h3>
<p>PQsendPrepare发送一个请求，创建一个给定参数的准备好语句，而不等待结束。</p>
<p>这是 PQprepare 的异步版本：如果它能发送这个请求，则返回 1， 如果不能，则返回 0。在成功调用之后，调用 PQgetResult 判断服务器是否成功创建了准备好语句。 这个函数的参数的处理和 PQprepare 一样。 类似 PQprepare，它不能在 2.0 版本协议的连接上运转。</p>
<p>PQsendQueryPrepared发送一个执行带有给出参数的准备好的语句的请求，不等待结果。</p>
<p>这个函数类似 PQsendQueryParams，但是要执行的命令是通过给一个前面准备好的语句命名来声明的， 而不是给出一个查询字串。函数的参数处理和 PQexecPrepared 一样。类似 PQexecPrepared， 它也不能在 2.0 版本的协议连接上跑。</p>
<p>注：绑定变量可以重用执行计划，相似的SQL但是参数不同，只需解析SQL一次即可。</p>
<p>以下代码段摘选自pgbench.c的代码，显示了pgbench根据不同的SQL接口模式，调用不同的postgres函数接口，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (querymode == QUERY_SIMPLE)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>       *sql;</div><div class="line">    sql = pg_strdup(command-&gt;argv[<span class="number">0</span>]);</div><div class="line">    sql = assignVariables(st, sql);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, sql);</div><div class="line">    r = PQsendQuery(st-&gt;con, sql);</div><div class="line">    <span class="built_in">free</span>(sql);</div><div class="line">}</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (querymode == QUERY_EXTENDED)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sql = command-&gt;argv[<span class="number">0</span>];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *params[MAX_ARGS];</div><div class="line">    getQueryParams(st, command, params);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, sql);</div><div class="line">    r = PQsendQueryParams(st-&gt;con, sql, command-&gt;argc - <span class="number">1</span>,</div><div class="line">                          NULL, params, NULL, NULL, <span class="number">0</span>);</div><div class="line">}</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (querymode == QUERY_PREPARED)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>        name[MAX_PREPARE_NAME];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *params[MAX_ARGS];</div><div class="line">    <span class="keyword">if</span> (!st-&gt;prepared[st-&gt;use_file])</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span>         j;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; commands[j] != NULL; j++)</div><div class="line">        {</div><div class="line">            PGresult   *res;</div><div class="line">            <span class="keyword">char</span>        name[MAX_PREPARE_NAME];</div><div class="line">            <span class="keyword">if</span> (commands[j]-&gt;type != SQL_COMMAND)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            preparedStatementName(name, st-&gt;use_file, j);</div><div class="line">            res = PQprepare(st-&gt;con, name,</div><div class="line">                  commands[j]-&gt;argv[<span class="number">0</span>], commands[j]-&gt;argc - <span class="number">1</span>, NULL);</div><div class="line">            <span class="keyword">if</span> (PQresultStatus(res) != PGRES_COMMAND_OK)</div><div class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">"%s"</span>, PQerrorMessage(st-&gt;con));</div><div class="line">            PQclear(res);</div><div class="line">        }</div><div class="line">        st-&gt;prepared[st-&gt;use_file] = <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    getQueryParams(st, command, params);</div><div class="line">    preparedStatementName(name, st-&gt;use_file, st-&gt;state);</div><div class="line">    <span class="keyword">if</span> (debug)</div><div class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"client %d sending %s\n"</span>, st-&gt;id, name);</div><div class="line">    r = PQsendQueryPrepared(st-&gt;con, name, command-&gt;argc - <span class="number">1</span>,</div><div class="line">                            params, NULL, NULL, <span class="number">0</span>);</div><div class="line">}</div><div class="line"><span class="keyword">else</span>    <span class="comment">/* unknown sql mode */</span></div><div class="line">    r = <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<h2>pgbench的安装和测试准备</h2>
<p>pgbench的源码在postgres源码目录的contrib/pgbench目录下，进入该路径下进行<code>make</code>，<code>make install</code>即可。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy contrib]$ <span class="built_in">cd</span> pgbench/</div><div class="line">[postgres@anzhy pgbench]$ ls</div><div class="line">Makefile  pgbench.c</div><div class="line">[postgres@anzhy pgbench]$ make all</div><div class="line">gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security</div><div class="line"> -fno-strict-aliasing -fwrapv -g -pthread  -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS -I../../src/interfaces/libpq</div><div class="line"> -I. -I. -I../../src/include -D_GNU_SOURCE   -c -o pgbench.o pgbench.c -MMD -MP -MF .deps/pgbench.Po</div><div class="line">gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security</div><div class="line"> -fno-strict-aliasing -fwrapv -g -pthread  -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS pgbench.o -L../../src/port</div><div class="line"> -lpgport -L../../src/common -lpgcommon -L../../src/interfaces/libpq -lpq -lpthread    -L../../src/port -L../../src/common</div><div class="line"> -Wl,--as-needed -Wl,-rpath,<span class="string">'/home/postgres/postgres/lib'</span>,--enable-new-dtags  -lpgport -lpgcommon -lz -lreadline -lcrypt -ldl -lm  -o pgbench</div><div class="line">[postgres@anzhy pgbench]$ make install</div><div class="line">/bin/mkdir -p <span class="string">'/home/postgres/postgres/bin'</span></div><div class="line">/usr/bin/install -c  pgbench <span class="string">'/home/postgres/postgres/bin'</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-compile.png"></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-install.png"></p>
<p>测试之前当然还要建立一个测试数据库，这里就使用<code>pgbench</code>这个数据库名。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ psql -U postgres -p <span class="number">5432</span></div><div class="line">psql (<span class="number">9.3</span>.<span class="number">4</span>)</div><div class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</div><div class="line"></div><div class="line">postgres=<span class="comment"># create database pgbench;</span></div><div class="line">CREATE DATABASE</div><div class="line">postgres=<span class="comment"># \q</span></div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<h2>初始化命令</h2>
<p>初始化数据库中的测试数据，使用<code>pgbench -i</code>进入初始化模式。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">2</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">Connection to database <span class="string">"pgbench"</span> failed:</div><div class="line">FATAL:  database <span class="string">"pgbench"</span> does not exist</div><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">2</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">NOTICE:  table <span class="string">"pgbench_history"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_tellers"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_accounts"</span> does not exist, skipping</div><div class="line">NOTICE:  table <span class="string">"pgbench_branches"</span> does not exist, skipping</div><div class="line">creating tables...</div><div class="line"><span class="number">100000</span> of <span class="number">200000</span> tuples (<span class="number">50</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.24</span> s, remaining <span class="number">0.24</span> s).</div><div class="line"><span class="number">200000</span> of <span class="number">200000</span> tuples (<span class="number">100</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.52</span> s, remaining <span class="number">0.00</span> s).</div><div class="line">vacuum...</div><div class="line"><span class="keyword">set</span> primary keys...</div><div class="line">done.</div><div class="line">[postgres@anzhy ~]$ pgbench  -i  --unlogged-tables <span class="operator">-s</span> <span class="number">16</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench</div><div class="line">creating tables...</div><div class="line"><span class="number">100000</span> of <span class="number">1600000</span> tuples (<span class="number">6</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.16</span> s, remaining <span class="number">2.46</span> s).</div><div class="line"><span class="number">200000</span> of <span class="number">1600000</span> tuples (<span class="number">12</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.35</span> s, remaining <span class="number">2.43</span> s).</div><div class="line"><span class="number">300000</span> of <span class="number">1600000</span> tuples (<span class="number">18</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.51</span> s, remaining <span class="number">2.23</span> s).</div><div class="line"><span class="number">400000</span> of <span class="number">1600000</span> tuples (<span class="number">25</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.70</span> s, remaining <span class="number">2.09</span> s).</div><div class="line"><span class="number">500000</span> of <span class="number">1600000</span> tuples (<span class="number">31</span>%) <span class="keyword">done</span> (elapsed <span class="number">0.91</span> s, remaining <span class="number">2.01</span> s).</div><div class="line"><span class="number">600000</span> of <span class="number">1600000</span> tuples (<span class="number">37</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.16</span> s, remaining <span class="number">1.94</span> s).</div><div class="line"><span class="number">700000</span> of <span class="number">1600000</span> tuples (<span class="number">43</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.36</span> s, remaining <span class="number">1.75</span> s).</div><div class="line"><span class="number">800000</span> of <span class="number">1600000</span> tuples (<span class="number">50</span>%) <span class="keyword">done</span> (elapsed <span class="number">1.60</span> s, remaining <span class="number">1.60</span> s).</div><div class="line"><span class="number">900000</span> of <span class="number">1600000</span> tuples (<span class="number">56</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.13</span> s, remaining <span class="number">1.66</span> s).</div><div class="line"><span class="number">1000000</span> of <span class="number">1600000</span> tuples (<span class="number">62</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.39</span> s, remaining <span class="number">1.44</span> s).</div><div class="line"><span class="number">1100000</span> of <span class="number">1600000</span> tuples (<span class="number">68</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.64</span> s, remaining <span class="number">1.20</span> s).</div><div class="line"><span class="number">1200000</span> of <span class="number">1600000</span> tuples (<span class="number">75</span>%) <span class="keyword">done</span> (elapsed <span class="number">2.87</span> s, remaining <span class="number">0.96</span> s).</div><div class="line"><span class="number">1300000</span> of <span class="number">1600000</span> tuples (<span class="number">81</span>%) <span class="keyword">done</span> (elapsed <span class="number">3.62</span> s, remaining <span class="number">0.84</span> s).</div><div class="line"><span class="number">1400000</span> of <span class="number">1600000</span> tuples (<span class="number">87</span>%) <span class="keyword">done</span> (elapsed <span class="number">3.95</span> s, remaining <span class="number">0.56</span> s).</div><div class="line"><span class="number">1500000</span> of <span class="number">1600000</span> tuples (<span class="number">93</span>%) <span class="keyword">done</span> (elapsed <span class="number">4.20</span> s, remaining <span class="number">0.28</span> s).</div><div class="line"><span class="number">1600000</span> of <span class="number">1600000</span> tuples (<span class="number">100</span>%) <span class="keyword">done</span> (elapsed <span class="number">4.54</span> s, remaining <span class="number">0.00</span> s).</div><div class="line">vacuum...</div><div class="line"><span class="keyword">set</span> primary keys...</div><div class="line">done.</div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-init.png"></p>
<p>以上参数中，<code>-i</code>表示初始化模式，<code>--unlogged-tables</code>表示创建没有log的表，<code>-s 16</code>和<code>-s 2</code>表示默认的数据的几倍，默认是100000条数据，其他是postgres连接的参数。每次测试默认会清除之前的表，创建完之后可以发现，pgbench_accounts表中有了1600000条数据。</p>
<p><img src="/images/201411-postgres-pgbench/pgbench-init2.png"></p>
<h2>pgbench进行postgres的压力测试</h2>
<p>在不使用<code>-i</code>参数的时候，pgbench都是表示在进行压力测试，如下命令表示一个压力测试的案例。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">pgbench -M prepared   -r -c <span class="number">8</span> -j <span class="number">2</span> -T <span class="number">10</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench <span class="operator">-l</span></div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</div><div class="line">scaling factor: <span class="number">16</span></div><div class="line">query mode: prepared</div><div class="line">number of clients: <span class="number">8</span></div><div class="line">number of threads: <span class="number">2</span></div><div class="line">duration: <span class="number">10</span> s</div><div class="line">number of transactions actually processed: <span class="number">4508</span></div><div class="line">tps = <span class="number">449.584997</span> (including connections establishing)</div><div class="line">tps = <span class="number">450.698796</span> (excluding connections establishing)</div><div class="line">statement latencies <span class="keyword">in</span> milliseconds:</div><div class="line">	<span class="number">0.049447</span>	\<span class="keyword">set</span> nbranches <span class="number">1</span> * :scale</div><div class="line">	<span class="number">0.047364</span>	\<span class="keyword">set</span> ntellers <span class="number">10</span> * :scale</div><div class="line">	<span class="number">0.045153</span>	\<span class="keyword">set</span> naccounts <span class="number">100000</span> * :scale</div><div class="line">	<span class="number">0.036945</span>	\setrandom aid <span class="number">1</span> :naccounts</div><div class="line">	<span class="number">0.040092</span>	\setrandom bid <span class="number">1</span> :nbranches</div><div class="line">	<span class="number">0.039480</span>	\setrandom tid <span class="number">1</span> :ntellers</div><div class="line">	<span class="number">0.036813</span>	\setrandom delta -<span class="number">5000</span> <span class="number">5000</span></div><div class="line">	<span class="number">2.554601</span>	BEGIN;</div><div class="line">	<span class="number">2.468227</span>	UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</div><div class="line">	<span class="number">2.355124</span>	SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</div><div class="line">	<span class="number">2.481090</span>	UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</div><div class="line">	<span class="number">2.758949</span>	UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</div><div class="line">	<span class="number">2.271135</span>	INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</div><div class="line">	<span class="number">2.370568</span>	END;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-test.png"></p>
<p>以上参数中，<code>-M prepared</code>表示绑定变量形式的调用SQL，<code>-r</code>表示报告测试文件中每条SQL的平均执行延迟，<code>-c 8</code>表示模拟8个客户端，<code>-j 2</code>表示pgbench的工作线程是2个，<code>-T 10</code>表示压力测试的时间是10秒，<code>-l</code>表示把事务统计写入log，其余的是postgres连接相关的参数。</p>
<p>执行上述命令后，屏幕上开始显示执行过程，最后给出测试总结，可以看出在这个testcase下，tps是450。如果觉得不想看执行的时候输出，可以将这些输出重定向到文件，使用<code>nohup</code>和<code>&gt;</code>。如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ nohup pgbench -M prepared   -r -c <span class="number">8</span> -j <span class="number">2</span> -T <span class="number">10</span> -U postgres -p <span class="number">5432</span> <span class="operator">-d</span> pgbench <span class="operator">-l</span>  &gt; pgbench.log <span class="number">2</span>&gt;&<span class="number">1</span></div><div class="line">[postgres@anzhy ~]$ tail -<span class="number">27</span> pgbench.log</div><div class="line">client <span class="number">5</span> receiving</div><div class="line">client <span class="number">3</span> receiving</div><div class="line">pghost:  pgport: <span class="number">5432</span> nclients: <span class="number">8</span> duration: <span class="number">10</span> dbName: pgbench</div><div class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</div><div class="line">scaling factor: <span class="number">16</span></div><div class="line">query mode: prepared</div><div class="line">number of clients: <span class="number">8</span></div><div class="line">number of threads: <span class="number">2</span></div><div class="line">duration: <span class="number">10</span> s</div><div class="line">number of transactions actually processed: <span class="number">7287</span></div><div class="line">tps = <span class="number">727.437968</span> (including connections establishing)</div><div class="line">tps = <span class="number">729.205960</span> (excluding connections establishing)</div><div class="line">statement latencies <span class="keyword">in</span> milliseconds:</div><div class="line">	<span class="number">0.061104</span>	\<span class="keyword">set</span> nbranches <span class="number">1</span> * :scale</div><div class="line">	<span class="number">0.060691</span>	\<span class="keyword">set</span> ntellers <span class="number">10</span> * :scale</div><div class="line">	<span class="number">0.063393</span>	\<span class="keyword">set</span> naccounts <span class="number">100000</span> * :scale</div><div class="line">	<span class="number">0.058017</span>	\setrandom aid <span class="number">1</span> :naccounts</div><div class="line">	<span class="number">0.065122</span>	\setrandom bid <span class="number">1</span> :nbranches</div><div class="line">	<span class="number">0.064820</span>	\setrandom tid <span class="number">1</span> :ntellers</div><div class="line">	<span class="number">0.063816</span>	\setrandom delta -<span class="number">5000</span> <span class="number">5000</span></div><div class="line">	<span class="number">1.449164</span>	BEGIN;</div><div class="line">	<span class="number">1.518156</span>	UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</div><div class="line">	<span class="number">1.456869</span>	SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</div><div class="line">	<span class="number">1.509500</span>	UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</div><div class="line">	<span class="number">1.620091</span>	UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</div><div class="line">	<span class="number">1.371588</span>	INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</div><div class="line">	<span class="number">1.498616</span>	END;</div><div class="line">[postgres@anzhy ~]$</div></pre></td></tr></table></figure></p>
<p><img src="/images/201411-postgres-pgbench/pgbench-test2.png"></p>
<p>将输出重定向到pgbench.log中，然后用tail查看即可。</p>
<p>以上是使用pgbench做PostgreSQL的压力测试，本文参考了<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.open-open.com/lib/view/open1341845783994.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1341845783994.html</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>pgbench是基于tpc-b模型的postgresql测试工具。它属于开源软件，主要为对 PostgreSQL 进行压力测试的一款简单程序, SQL命令可以在一个连接中顺序地执行，通常会开多个数据库 Session, 并且在测试最后形成测试报告，得出每秒平均事务数，pgb]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL扩展函数和触发器]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-trigger-example/"/>
    <id>http://valleylord.github.io/post/201410-postgres-trigger-example/</id>
    <published>2014-10-26T01:38:00.000Z</published>
    <updated>2014-12-03T01:55:18.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL是一个对扩展和程序开发很友好的数据库，有很多的外部扩展接口，很易于扩展。本文使用PostgreSQL的C扩展编写扩展函数，并提供给触发器调用，本文的例子来源与官方文档。</p>
<p>PostgreSQL的扩展函数可以有“version-0”和“version-1”两种格式，但是触发器只支持“version-1”格式，这也是在“version-0”基础上做过改进的一种格式。一段“version-1”的触发器代码如下，</p>
<p><figure class="highlight C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "postgres.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "executor/spi.h"        /* 你用SPI的时候要用的头文件 */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "commands/trigger.h"    /* 用触发器时要用的头文件 */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "utils/rel.h"          /* ... and relations */</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef PG_MODULE_MAGIC</span></div><div class="line">PG_MODULE_MAGIC;</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> Datum trigf(PG_FUNCTION_ARGS);</div><div class="line"></div><div class="line">PG_FUNCTION_INFO_V1(trigf);</div><div class="line"></div><div class="line">Datum</div><div class="line">trigf(PG_FUNCTION_ARGS)</div><div class="line">{</div><div class="line">    TriggerData *trigdata = (TriggerData *) fcinfo-&gt;context;</div><div class="line">    TupleDesc   tupdesc;</div><div class="line">    HeapTuple   rettuple;</div><div class="line">    <span class="keyword">char</span>       *when;</div><div class="line">    <span class="keyword">bool</span>        checknull = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">bool</span>        isnull;</div><div class="line">    <span class="keyword">int</span>         ret, i;</div><div class="line"></div><div class="line">    <span class="comment">/* 确信自己是作为触发器触发的 */</span></div><div class="line">    <span class="keyword">if</span> (!CALLED_AS_TRIGGER(fcinfo))</div><div class="line">        elog(ERROR, <span class="string">"trigf: not fired by trigger manager"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 返回给执行者的行 */</span></div><div class="line">    <span class="keyword">if</span> (TRIGGER_FIRED_BY_UPDATE(trigdata-&gt;tg_event))</div><div class="line">        rettuple = trigdata-&gt;tg_newtuple;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        rettuple = trigdata-&gt;tg_trigtuple;</div><div class="line"></div><div class="line">    <span class="comment">/* 检查空值 */</span></div><div class="line">    <span class="keyword">if</span> (!TRIGGER_FIRED_BY_DELETE(trigdata-&gt;tg_event)</div><div class="line">        && TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event))</div><div class="line">        checknull = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event))</div><div class="line">        when = <span class="string">"before"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        when = <span class="string">"after "</span>;</div><div class="line"></div><div class="line">    tupdesc = trigdata-&gt;tg_relation-&gt;rd_att;</div><div class="line"></div><div class="line">    <span class="comment">/* 与 SPI 管理器连接 */</span></div><div class="line">    <span class="keyword">if</span> ((ret = SPI_connect()) &lt; <span class="number">0</span>)</div><div class="line">        elog(INFO, <span class="string">"trigf (fired %s): SPI_connect returned %d"</span>, when, ret);</div><div class="line"></div><div class="line">    <span class="comment">/* 获取关系中的行数量 */</span></div><div class="line">    ret = SPI_exec(<span class="string">"SELECT count(*) FROM ttest"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        elog(NOTICE, <span class="string">"trigf (fired %s): SPI_exec returned %d"</span>, when, ret);</div><div class="line"></div><div class="line">    <span class="comment">/* count(*) 返回 int8，所以要小心转换 */</span></div><div class="line">    i = (<span class="keyword">int</span>) DatumGetInt64(SPI_getbinval(SPI_tuptable-&gt;vals[<span class="number">0</span>],</div><div class="line">                                          SPI_tuptable-&gt;tupdesc,</div><div class="line">                                          <span class="number">1</span>,</div><div class="line">                                          &isnull));</div><div class="line"></div><div class="line">    elog (NOTICE, <span class="string">"trigf (fired %s): there are %d tuples in ttest"</span>, when, i);</div><div class="line"></div><div class="line">    SPI_finish();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (checknull)</div><div class="line">    {</div><div class="line">        (<span class="keyword">void</span>) SPI_getbinval(rettuple, tupdesc, <span class="number">1</span>, &isnull);</div><div class="line">        <span class="keyword">if</span> (isnull)</div><div class="line">            rettuple = NULL;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> PointerGetDatum(rettuple);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>保存为<code>trigger_func.c</code>，Makefile可以通过<code>pg_config</code>来产生，运行<code>pg_config --help</code>可以看到帮助文档，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgconfig-help.png"></p>
<p>可以发现，<code>--pgxs</code>参数是用于写扩展的Makefile，运行就可以找到所需的Makefile，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy my_extension]$ pg_config --pgxs</div><div class="line">/home/postgres/postgres2/lib/pgxs/src/makefiles/pgxs.mk</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgconfig-pgxs.png"></p>
<p>打开这个Makefile文件，发现开头有一段文档描述，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-pgxs-doc.png"></p>
<p>根据文档的提示，可以写如下Makefile用于编译<code>trigger_func.c</code>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="constant">MODULES</span> = trigger_func</div><div class="line"></div><div class="line"><span class="constant">PG_CONFIG</span> = pg_config</div><div class="line"><span class="constant">PGXS</span> <span class="symbol">:</span>= <span class="variable">$(</span>shell <span class="variable">$(</span><span class="constant">PG_CONFIG</span>) --pgxs)</div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">PGXS</span>)</div></pre></td></tr></table></figure></p>
<p>然后就可以用<code>make</code>编译了，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-extension-make.png"></p>
<p>注意，要使用和PostgreSQL对应的官方文档中的代码才可以编译，否则可能会报错。然后将编译出来的.so文件copy到PostgreSQL的lib目录下，之后，启动PostgreSQL，并连接test数据库，在test数据库中建表ttest，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ttest (</span></div><div class="line">    x <span class="built_in">integer</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-ttest.png"></p>
<p>然后注册触发器函数，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> trigf() <span class="keyword">RETURNS</span> <span class="keyword">trigger</span></span></div><div class="line">    <span class="keyword">AS</span> <span class="string">'$libdir/trigger_func'</span>, <span class="string">'trigf'</span></div><div class="line">    <span class="keyword">LANGUAGE</span> C;</div></pre></td></tr></table></figure></p>
<p>由于扩展程序是放在lib目录下，所以，要以<code>$libdir</code>做开头，其他情况可以参考官方文档。注意，如果只是创建一个普通函数，那么这里的返回就不用是<code>trigger</code>，可以是int，相应的，之前的C代码部分，返回也要修改，可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。之后，就可以创建触发器，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tbefore <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> ttest</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> trigf();</div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tafter <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> ttest</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> trigf();</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-trigger.png"></p>
<p>触发器建立完之后，就可以做一些简单的测试了，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-test1.png"></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-test2.png"></p>
<p>可见，新建的触发器已经发挥了作用。如果是单纯的函数，则更加简单一些，可以在上面的c文件之后，加入如下代码，</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PG_FUNCTION_INFO_V1(add_ab);</div><div class="line"></div><div class="line">Datum</div><div class="line">add_ab(PG_FUNCTION_ARGS)</div><div class="line">{</div><div class="line">    int32 arg_a=PG_GETARG_INT32(<span class="number">0</span>);</div><div class="line">    int32 arg_b=PG_GETARG_INT32(<span class="number">1</span>);</div><div class="line"></div><div class="line">    PG_RETURN_INT32(arg_a+arg_b);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>重新编译，并将.so文件copy到PostgreSQL的lib目录下。然后重启PostgreSQL，并新增函数，如下</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">add</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span></div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span></div><div class="line"><span class="keyword">AS</span> <span class="string">'$libdir/trigger_func'</span>, <span class="string">'add_ab'</span></div><div class="line"><span class="keyword">LANGUAGE</span> C;</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-trigger-example/trigger-create-function.png"></p>
<p>测试一下，如下，</p>
<p><img src="/images/201410-postgres-trigger-example/trigger-function-test1.png"></p>
<p>可见，函数已经生效。</p>
<p>以上是PostgreSQL扩展函数和触发器的建立。本文参考了<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，还有PostgreSQL 9.3官方文档<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，以及8.1中文版文档<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>的对应章节。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/huguangshanse00/article/details/39252073" target="_blank" rel="external">http://blog.csdn.net/huguangshanse00/article/details/39252073</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/huguangshanse00/article/details/39252073" target="_blank" rel="external">http://blog.csdn.net/huguangshanse00/article/details/39252073</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.postgresql.org/docs/9.3/interactive/trigger-example.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/trigger-example.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.postgresql.org/docs/9.3/interactive/xfunc-c.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/xfunc-c.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.php100.com/manual/PostgreSQL8/" target="_blank" rel="external">http://www.php100.com/manual/PostgreSQL8/</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL是一个对扩展和程序开发很友好的数据库，有很多的外部扩展接口，很易于扩展。本文使用PostgreSQL的C扩展编写扩展函数，并提供给触发器调用，本文的例子来源与官方文档。</p>
<p>PostgreSQL的扩展函数可以有“version-0”和“vers]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PL/Python安装和使用]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-plpython-install/"/>
    <id>http://valleylord.github.io/post/201410-postgres-plpython-install/</id>
    <published>2014-10-25T12:39:00.000Z</published>
    <updated>2014-12-03T01:16:47.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL可以支持多种存储过程语言，官方支持的除了PL/pgSQL，还有TCL，Perl，Python。</p>
<p>本文使用源码安装PL/Python过程语言支持，并简介PL/Python的一些简单的入门。如果是使用安装包安装的话，可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<p>参考PostgreSQL的官方文档，使用源码安装的时候，需要在之前编译的时候就启用<code>--with-python</code>选项。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Note: Users <span class="operator">of</span> source packages must specially enable <span class="operator">the</span> build <span class="operator">of</span> PL/Python during <span class="operator">the</span> installation <span class="built_in">process</span>. (Refer <span class="built_in">to</span> <span class="operator">the</span> installation instructions <span class="keyword">for</span> more information.) Users <span class="operator">of</span> binary packages might find PL/Python <span class="operator">in</span> <span class="operator">a</span> separate subpackage.</div><div class="line"></div><div class="line">注意: 使用源码包的用户必须在安装过程中声明打开 PL/Python 的制作。 （请参考安装指导获取更多信息。）二进制包的用户可能会在独立的子包中找到 PL/Python。</div></pre></td></tr></table></figure></p>
<p>PostgreSQL的编译安装可以参考我之前的博客，<a href="http://valleylord.sinaapp.com/post/201408-postgresql-install" target="_blank" rel="external">这里</a>和<a href="http://valleylord.sinaapp.com/post/201408-postgresql-dev-env" target="_blank" rel="external">这里</a>。先做PostgreSQL的configure，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ ./configure --prefix=<span class="variable">$HOME</span>/postgres --enable-depend --enable-cassert --enable-debug --with-python</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-configure-error.png"></p>
<p>运行结果提示有错，找不到Python.h，需要安装python-devel。</p>
<p><img src="/images/201410-postgres-plpython-install/python-devel-install.png"></p>
<p>之后再<code>configure</code>就正常了，之后的步骤就是一般的用源码安装PostgreSQL的步骤，不再赘述。</p>
<p>安装之后启动PostgreSQL，然后需要注册plpythonu这个语言扩展，根据官方文档，可以用以下两种等价的方法。一种是在命令行下运行<code>createlang</code></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy ~]$ createlang plpythonu test</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-createlang.png"></p>
<p>上面的<code>test</code>参数表示数据库名，即在<code>test</code>数据库上启用plpythonu。还有一种是用psql登陆数据库之后运行<code>create extension</code>，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">create</span> extension plpythonu;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-extension.png"></p>
<p>由于Python有Python2和Python3两个版本，以上是使用默认的Python，也就是Python2。如果需要指明是哪个Python版本，可以将上述命令中的<code>plpythonu</code>替换成<code>plpython2u</code>或<code>plpython3u</code>。</p>
<p>然后可以在psql中创建PL/Python的存储过程，如下</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> pyfib(n <span class="built_in">bigint</span>)</span></div><div class="line"> <span class="keyword">RETURNS</span> SETOF <span class="built_in">bigint</span></div><div class="line"> <span class="keyword">AS</span> $$</div><div class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">  fibnum = []</div><div class="line">  while b &lt; n:</div><div class="line">   fibnum.append(b)</div><div class="line">   a, b = b, a+b</div><div class="line">  <span class="keyword">return</span> fibnum</div><div class="line"> $$ <span class="keyword">LANGUAGE</span> plpythonu;</div></pre></td></tr></table></figure></p>
<p>如果之前的操作都正确，可以看到提示成功，</p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-function.png"></p>
<p>如果有问题的话，可以看到提示错误，<code>plpythonu</code>语言找不到，需要重新检查之前的操作，</p>
<p><img src="/images/201410-postgres-plpython-install/plpython-create-function-error.png"></p>
<p>创建的函数是用于计算fibonacci序列，可以试着运行一下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">select</span> pyfib(<span class="number">3</span>) <span class="keyword">as</span> i;</span></div><div class="line"> i</div><div class="line"><span class="comment">---</span></div><div class="line"> 1</div><div class="line"> 1</div><div class="line"> 2</div><div class="line">(3 rows)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-function-test.png"></p>
<p>如果不需要PL/Python了，可以将这个扩展drop掉，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">drop</span> extension plpythonu;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-drop-extension-error.png"></p>
<p>可以看到提示，已经有function依赖了这个扩展，需要先将function先drop掉，或者使用<code>DROP...CASCADE</code>选项。如果drop function的话，需要注意，要把function的参数也加上，否则会报错，因为PostgreSQL是可以重载函数的，不同的参数但是拥有相同的函数名是合法的，被认为是不同的函数。drop所有的PL/Python的过程之后，就可以成功drop extension了。</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=# <span class="operator"><span class="keyword">drop</span> <span class="keyword">function</span> pyfib(<span class="built_in">bigint</span>);</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-plpython-install/plpython-drop-function.png"></p>
<p>以上是PL/Python的安装和使用基础。本文参考了<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，还有PostgreSQL 9.3官方文档<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，以及8.1中文版文档<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>的对应章节。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/" target="_blank" rel="external">http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/" target="_blank" rel="external">http://zhenghaoju700.blog.163.com/blog/static/1358595182012418104619386/</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.postgresql.org/docs/9.3/interactive/trigger-example.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/trigger-example.html</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.postgresql.org/docs/9.3/interactive/install-procedure.html" target="_blank" rel="external">http://www.postgresql.org/docs/9.3/interactive/install-procedure.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.php100.com/manual/PostgreSQL8/" target="_blank" rel="external">http://www.php100.com/manual/PostgreSQL8/</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL可以支持多种存储过程语言，官方支持的除了PL/pgSQL，还有TCL，Perl，Python。</p>
<p>本文使用源码安装PL/Python过程语言支持，并简介PL/Python的一些简单的入门。如果是使用安装包安装的话，可以参考<a href="#]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PL/pgSQL使用入门]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-plpgsql-intro/"/>
    <id>http://valleylord.github.io/post/201410-postgres-plpgsql-intro/</id>
    <published>2014-10-25T11:51:00.000Z</published>
    <updated>2014-12-03T01:16:49.000Z</updated>
    <content type="html"><![CDATA[<p>默认情况下，PostgreSQL唯一默认会安装的存储过程语言就是PL/pgSQL。</p>
<p>创建PL/pgSQL的方法是在psql或者pgAdmin中输入创建语句，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">FUNCTION</span> somefunc() <span class="keyword">RETURNS</span> <span class="built_in">integer</span> <span class="keyword">AS</span> $$</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">   quantity <span class="built_in">integer</span> := <span class="number">30</span>;</div><div class="line"><span class="operator"><span class="keyword">BEGIN</span></span></div><div class="line">   RAISE NOTICE <span class="string">'Quantity here is %'</span>, quantity;  <span class="comment">-- 在这里的数量是 30</span></div><div class="line">   quantity := 50;</div><div class="line">   <span class="comment">--</span></div><div class="line">   <span class="comment">-- 创建一个子块</span></div><div class="line">   <span class="comment">--</span></div><div class="line">   <span class="operator"><span class="keyword">DECLARE</span></span></div><div class="line">      quantity <span class="built_in">integer</span> := <span class="number">80</span>;</div><div class="line">   <span class="operator"><span class="keyword">BEGIN</span></span></div><div class="line">      RAISE NOTICE <span class="string">'Quantity here is %'</span>, quantity;  <span class="comment">-- 在这里的数量是 80</span></div><div class="line">   <span class="operator"><span class="keyword">END</span>;</span></div><div class="line"></div><div class="line">   RAISE NOTICE 'Quantity here is %', quantity;  <span class="comment">-- 在这里的数量是 50</span></div><div class="line"></div><div class="line">   RETURN quantity;</div><div class="line"><span class="operator"><span class="keyword">END</span>;</span></div><div class="line">$$ LANGUAGE plpgsql;</div></pre></td></tr></table></figure></p>
<p>以上语句来自PostgreSQL的官方文档，运行后即可创建。运行的话，可以在pgAdmin的query窗口中输入如下语句，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> somefunc() <span class="keyword">as</span> i;</span></div></pre></td></tr></table></figure></p>
<p>得到的输出，如下图，</p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-output.png"></p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-message.png"></p>
<p>可以看到，实际的结果输出在output栏下；程序运行的中间输出，即<code>RAISE NOTICE</code>，输出在message栏下。如果是在psql中输入以上语句，会先输出中间结果，然后输出实际的运行结果，如下图，</p>
<p><img src="/images/201410-postgres-plpgsql-intro/run-plpgsql-psql.png"></p>
<p>其余的用法，基本和Oracle的PL/SQL很相似。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>默认情况下，PostgreSQL唯一默认会安装的存储过程语言就是PL/pgSQL。</p>
<p>创建PL/pgSQL的方法是在psql或者pgAdmin中输入创建语句，如下，</p>
<p><figure class="highlight sql"><table><tr>]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ASM框架生成Java class文件]]></title>
    <link href="http://valleylord.github.io/post/201410-java-asm-lib/"/>
    <id>http://valleylord.github.io/post/201410-java-asm-lib/</id>
    <published>2014-10-25T02:12:00.000Z</published>
    <updated>2014-12-03T01:16:28.000Z</updated>
    <content type="html"><![CDATA[<p>ASM字节码操作框架，是Java中用于字节码操作的很好用的一个库，是cglib等很多著名框架的基础，我们常用的Spring，Hibernate等都用到了cglib。ASM存在的基础是，JVM虚拟机未对Java的字节码（.class）文件做“只能是文件”的限制，只要是合法的字节码文件格式，可以存在与网络上，内存中，都可以予以加载并运行。</p>
<p>本文使用ASM框架手动生成一段已有的Java代码，并予以加载和运行。ASM框架的代码可以去<a href="http://download.forge.ow2.org/asm/asm-4.2-bin.zip" target="_blank" rel="external">这里</a>下载，用户手册可以去<a href="http://download.forge.ow2.org/asm/asm4-guide.pdf" target="_blank" rel="external">这里</a>下载，官网是<a href="http://asm.ow2.org/" target="_blank" rel="external">这里</a>，官网上有一些文章和教程，可以用作入门。</p>
<p>生成字节码的源代码是这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    <span class="keyword">int</span> j = <span class="number">6</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">7</span>;</div><div class="line">    <span class="keyword">int</span> i = (j + k) * <span class="number">3</span>;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>使用ASM框架，生成上述代码的字节码的代码如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.MethodVisitor;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 通过asm生成类的字节码</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @author</span> Administrator</div><div class="line"> *</div><div class="line"> * Decompiled Code:</div><div class="line">package my;</div><div class="line"></div><div class="line">import java.io.PrintStream;</div><div class="line"></div><div class="line">public class Example</div><div class="line">{</div><div class="line">  public static void main(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    int j = 6;</div><div class="line">    int k = 7;</div><div class="line">    int i = (j + k) * 3;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem1</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException,</div><div class="line">			ClassNotFoundException, IllegalArgumentException,</div><div class="line">			SecurityException, IllegalAccessException,</div><div class="line">			InvocationTargetException, NoSuchMethodException {</div><div class="line">		ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_MAXS</div><div class="line">				| ClassWriter.COMPUTE_FRAMES);</div><div class="line">		cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">"my/Example"</span>, <span class="keyword">null</span>,</div><div class="line">				<span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add constructor</span></div><div class="line">		MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>); <span class="comment">// this 入栈</span></div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>,</div><div class="line">				<span class="string">"()V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add main method</span></div><div class="line">		mw = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>,</div><div class="line">				<span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add 2 local int, a and b</span></div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">6</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">3</span>);</div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">7</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">4</span>);</div><div class="line"></div><div class="line">		<span class="comment">// do calculation</span></div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">3</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">4</span>);</div><div class="line">		mw.visitInsn(Opcodes.IADD);</div><div class="line">		mw.visitIntInsn(Opcodes.BIPUSH, <span class="number">3</span>);</div><div class="line">		mw.visitInsn(Opcodes.IMUL);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">2</span>);</div><div class="line"></div><div class="line">		<span class="comment">// call println</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>,</div><div class="line">				<span class="string">"Ljava/io/PrintStream;"</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">2</span>);</div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>,</div><div class="line">				<span class="string">"println"</span>, <span class="string">"(I)V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// store and run code</span></div><div class="line">		<span class="keyword">final</span> <span class="keyword">byte</span>[] code = cw.toByteArray();</div><div class="line">		Class exampleClass = <span class="keyword">new</span> ClassLoader() {</div><div class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">			<span class="keyword">protected</span> Class <span class="title">findClass</span>(String name)</div><div class="line">					<span class="keyword">throws</span> ClassNotFoundException {</div><div class="line">				<span class="keyword">return</span> defineClass(name, code, <span class="number">0</span>, code.length);</div><div class="line">			}</div><div class="line">		}.loadClass(<span class="string">"my.Example"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        OutputStream out = new FileOutputStream("d:/Example.class");</span></div><div class="line"><span class="comment">//        out.write(code);</span></div><div class="line"><span class="comment">//        out.close();</span></div><div class="line"></div><div class="line">		Method method = exampleClass.getMethod(<span class="string">"main"</span>,</div><div class="line">				<span class="keyword">new</span> Class[] { String[].class });</div><div class="line">		method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] { <span class="keyword">null</span> });</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
以上代码做如下解释，
<ol>
<li>首先使用<code>ClassWriter</code>创建一个写入class字节码的对象，用<code>cw.visit</code>创建一个类<code>my.Example</code>。</li>
<li>然后用<code>cw.visitMethod</code>获取到类方法的<code>MethodVisitor</code>对象，使用该对象新增类中的方法。</li>
<li>先新增一个无参的构造方法，对应上述代码“add constructor”一段，方法的描述符是<code>()V</code>，表示无参数，返回是<code>void</code>，这个与Java字节码文件规范保持一致。</li>
<li>然后类似的构造<code>main</code>方法，在<code>main</code>方法中，先使用<code>mw.visitVarInsn</code>创建两个临时变量，并用<code>mw.visitIntInsn</code>赋初始值6和7。</li>
<li>接下来，用<code>mw.visitInsn</code>完成加法和乘法，并将值赋给一个新的临时变量。</li>
<li>在<code>main</code>方法的结尾，调用<code>mw.visitFieldInsn</code>获取静态的<code>PrintStream</code>对象，调用<code>mw.visitMethodInsn</code>来完成<code>println</code>方法的调用，并结束方法<code>mw.visitEnd</code>。</li>
<li>以上步骤已经完成了字节码的生成，调用<code>cw.toByteArray</code>将其保存到内存中的一个<code>byte[]</code>对象里，然后调用<code>ClassLoader</code>对象的<code>loadClass</code>方法，加载这个类，注意，这里要重写<code>findClass</code>，在其中指明使用<code>byte[]</code>对象里的内容作为字节码来加载。</li>
<li>如果需要将字节码输出可以使用<code>FileOutputStream</code>的<code>write</code>方法，这里已经注释掉，这段代码对调试很有用，可以用class文件反编译工具来查看是否是想要的代码。</li>
<li>最后，使用Java的反射机制，分别调用<code>getMethod</code>和<code>invoke</code>来调用之前加载的class的<code>main</code>方法，输出<code>39</code>。</li>
</ol>
<p>注意，局部变量并不可以指定名称，只可以指定在操作数栈中的位置，因此变量名<code>i,j,k</code>并未出现在以上代码中。可以看到，基本上，ASM是对Java字节码指令的一个比较好用的封装，与写汇编代码有以一些相似之处。如果需要生成的代码有<code>static</code>域，例如这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">6</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">7</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    <span class="keyword">int</span> i = (a + b) * <span class="number">3</span>;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>同样可以使用ASM生成这段字节码，只是局部代码需要做一些改动，修改后的代码如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.MethodVisitor;</div><div class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 通过asm生成类的字节码</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @author</span> Administrator</div><div class="line"> *</div><div class="line"> * Decompiled Code:</div><div class="line">package my;</div><div class="line"></div><div class="line">import java.io.PrintStream;</div><div class="line"></div><div class="line">public class Example</div><div class="line">{</div><div class="line">  public static int a = 6;</div><div class="line">  public static int b = 7;</div><div class="line"></div><div class="line">  public static void main(String[] paramArrayOfString)</div><div class="line">  {</div><div class="line">    int i = (a + b) * 3;</div><div class="line">    System.out.println(i);</div><div class="line">  }</div><div class="line">}</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorClass</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException,</div><div class="line">			ClassNotFoundException, IllegalArgumentException,</div><div class="line">			SecurityException, IllegalAccessException,</div><div class="line">			InvocationTargetException, NoSuchMethodException {</div><div class="line">		ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_MAXS</div><div class="line">				| ClassWriter.COMPUTE_FRAMES);</div><div class="line">		cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">"my/Example"</span>, <span class="keyword">null</span>,</div><div class="line">				<span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// add constructor</span></div><div class="line">		MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>); <span class="comment">// this 入栈</span></div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>,</div><div class="line">				<span class="string">"()V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add 2 static int, a and b</span></div><div class="line">		cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"a"</span>, <span class="string">"I"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">6</span>)).visitEnd();</div><div class="line">		cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"b"</span>, <span class="string">"I"</span>,</div><div class="line">				<span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">7</span>)).visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// add main method</span></div><div class="line">		mw = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>,</div><div class="line">				<span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// read static variables</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"my/Example"</span>, <span class="string">"a"</span>, <span class="string">"I"</span>);</div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"my/Example"</span>, <span class="string">"b"</span>, <span class="string">"I"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// do calculation</span></div><div class="line">		mw.visitInsn(Opcodes.IADD);</div><div class="line">		mw.visitInsn(Opcodes.ICONST_3);</div><div class="line">		mw.visitInsn(Opcodes.IMUL);</div><div class="line">		mw.visitVarInsn(Opcodes.ISTORE, <span class="number">2</span>);</div><div class="line"></div><div class="line">		<span class="comment">// call println</span></div><div class="line">		mw.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>,</div><div class="line">				<span class="string">"Ljava/io/PrintStream;"</span>);</div><div class="line">		mw.visitVarInsn(Opcodes.ILOAD, <span class="number">2</span>);</div><div class="line">		mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>,</div><div class="line">				<span class="string">"println"</span>, <span class="string">"(I)V"</span>);</div><div class="line">		mw.visitInsn(Opcodes.RETURN);</div><div class="line">		mw.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		mw.visitEnd();</div><div class="line"></div><div class="line">		<span class="comment">// store and run code</span></div><div class="line">		<span class="keyword">final</span> <span class="keyword">byte</span>[] code = cw.toByteArray();</div><div class="line">		Class exampleClass = <span class="keyword">new</span> ClassLoader() {</div><div class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">			<span class="keyword">protected</span> Class <span class="title">findClass</span>(String name)</div><div class="line">					<span class="keyword">throws</span> ClassNotFoundException {</div><div class="line">				<span class="keyword">return</span> defineClass(name, code, <span class="number">0</span>, code.length);</div><div class="line">			}</div><div class="line">		}.loadClass(<span class="string">"my.Example"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        OutputStream out = new FileOutputStream("d:/Example.class");</span></div><div class="line"><span class="comment">//        out.write(code);</span></div><div class="line"><span class="comment">//        out.close();</span></div><div class="line"></div><div class="line">		Method method = exampleClass.getMethod(<span class="string">"main"</span>,</div><div class="line">				<span class="keyword">new</span> Class[] { String[].class });</div><div class="line">		method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] { <span class="keyword">null</span> });</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
多数的代码和之前的有重复，不同之处如下，
<ol>
<li>使用<code>cw.visitField</code>，新增静态对象a和b。</li>
<li>使用<code>mw.visitFieldInsn</code>将静态对象压入操作数栈。</li>
</ol>
<p>以上是使用ASM框架来操作Java字节码的例子，本文参考了以下文章，<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>，<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://asm.ow2.org/doc/tutorial.html" target="_blank" rel="external">http://asm.ow2.org/doc/tutorial.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://asm.ow2.org/doc/tutorial-asm-2.0.html" target="_blank" rel="external">http://asm.ow2.org/doc/tutorial-asm-2.0.html</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://victorzhzh.iteye.com/category/140253" target="_blank" rel="external">http://victorzhzh.iteye.com/category/140253</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.cnblogs.com/yezhenhan/archive/2011/05/01/2033739.html" target="_blank" rel="external">http://www.cnblogs.com/yezhenhan/archive/2011/05/01/2033739.html</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="http://www.cnblogs.com/liuling/archive/2013/05/25/asm.html" target="_blank" rel="external">http://www.cnblogs.com/liuling/archive/2013/05/25/asm.html</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>ASM字节码操作框架，是Java中用于字节码操作的很好用的一个库，是cglib等很多著名框架的基础，我们常用的Spring，Hibernate等都用到了cglib。ASM存在的基础是，JVM虚拟机未对Java的字节码（.class）文件做“只能是文件”的限制，只要是合法的字]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java class文件解析代码分析]]></title>
    <link href="http://valleylord.github.io/post/201410-java-class-file/"/>
    <id>http://valleylord.github.io/post/201410-java-class-file/</id>
    <published>2014-10-18T04:38:00.000Z</published>
    <updated>2014-12-03T01:16:25.000Z</updated>
    <content type="html"><![CDATA[<p>每一个Java类在经过编译后，都会生成.class文件，作为JVM执行的输入。.class文件的结构分析和示例可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。本文用Java代码分析.class文件的结构，获取类的定义，以及类中每一个域和方法的声明。</p>
<p>首先，.class文件是Java的字节码文件，需要逐个逐个字节的读入，因此需要一个读入文件的类，我对<code>DataInputStream</code>做一些简单封装，得到读入.class文件的类，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/* Class file reader wrapper</span></div><div class="line"> * Simple wrapper for DataInputStream</div><div class="line"> *</div><div class="line"> * u4 and u8 has problem when reading float and double</div><div class="line"> * but we do not use the value info of them</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassReader</span> </span>{</div><div class="line">	DataInputStream input;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ClassReader</span>(DataInputStream input) {</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.input = input;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 1 byte</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">u1</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readByte();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 2 byte as short</span></div><div class="line">	<span class="keyword">public</span> Short <span class="title">u2</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readShort();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 4 byte as int, cannot read float</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">u4</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readInt();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// read 8 byte as long, cannot read double</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">long</span> <span class="title">u8</span>() <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">return</span> input.readLong();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.readByte</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">readByte</span>() <span class="keyword">throws</span> IOException{</div><div class="line">		<span class="keyword">return</span> input.readByte();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.readFully</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFully</span>(<span class="keyword">byte</span>[] b) <span class="keyword">throws</span> IOException {</div><div class="line">		input.readFully(b);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// wrapper for DataInputStream.close</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() <span class="keyword">throws</span> IOException{</div><div class="line">		input.close();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>有了这个类，就可以使用<code>int magic = input.u4();</code>类似这样的代码来读入.class文件中4个byte的内容，并转换为<code>int</code>。还需要表示常量池内元素的类和常量池类，由于常量池内的元素种类比较多，所以对不同的种类要有不同的类来表示。所以，设计常量种类的枚举类型<code>EnumConstType</code>，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="comment">/* constant elem type</span></div><div class="line"> * tested under jdk 1.6.0_45</div><div class="line"> *</div><div class="line">CONSTANT_Utf8	1	UTF-8编码的Unicode字符串</div><div class="line">CONSTANT_Integer	3	int类型的字面值</div><div class="line">CONSTANT_Float	4	float类型的字面值</div><div class="line">CONSTANT_Long	5	long类型的字面值</div><div class="line">CONSTANT_Double	6	double类型的字面值</div><div class="line">CONSTANT_Class	7	对一个类或接口的符号引用</div><div class="line">CONSTANT_String	8	String类型字面值的引用</div><div class="line">CONSTANT_Fieldref	9	对一个字段的符号引用</div><div class="line">CONSTANT_Methodref	10	对一个类中方法的符号引用</div><div class="line">CONSTANT_InterfaceMethodref	11	对一个接口中方法的符号引用</div><div class="line">CONSTANT_NameAndType	12	对一个字段或方法的部分符号引用</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumConstType {</div><div class="line">	<span class="comment">// Enumerate each constant type for jdk 1.6</span></div><div class="line">	C_UTF8,    <span class="comment">//(1),</span></div><div class="line">	C_INTEGER, <span class="comment">//(3),</span></div><div class="line">	C_FLOAT,   <span class="comment">//(4),</span></div><div class="line">	C_LONG,    <span class="comment">//(5),</span></div><div class="line">	C_DOUBLE,  <span class="comment">//(6),</span></div><div class="line">	C_CLASS,   <span class="comment">//(7),</span></div><div class="line">	C_STRING,  <span class="comment">//(8),</span></div><div class="line">	C_FIELDREF,<span class="comment">//(9),</span></div><div class="line">	C_METHODREF,<span class="comment">//(10),</span></div><div class="line">	C_INTERFACEMETHODREF,<span class="comment">//(11),</span></div><div class="line">	C_NAMEANDTYPE;<span class="comment">//(12);</span></div><div class="line"></div><div class="line">	<span class="comment">/* generate EnumConstType from int read from class file</span></div><div class="line">	 */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumConstType <span class="title">generateByValue</span>(<span class="keyword">int</span> value){</div><div class="line">    	<span class="keyword">switch</span> (value){</div><div class="line">    	<span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_UTF8"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_INTEGER"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_FLOAT"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_LONG"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_DOUBLE"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_CLASS"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_STRING"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_FIELDREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_METHODREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">11</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_INTERFACEMETHODREF"</span>);</div><div class="line">    	<span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">return</span> EnumConstType.valueOf(<span class="string">"C_NAMEANDTYPE"</span>);</div><div class="line">    	<span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	}</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>此外，常量池内元素通用的元素都包括表示常量种类的<code>tag</code>，和常量在常量池中的索引编号<code>index</code>，因此，提取这两个域设计常量元素的超类<code>ConstElem</code>，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* super class for constant elem</span></div><div class="line"> * all constant elem class should extends this class</div><div class="line"> */</div><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	EnumConstType tag;  <span class="comment">// constant type</span></div><div class="line">	<span class="keyword">int</span> index;          <span class="comment">// index in constant pool</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ConstElem</span>(EnumConstType tag, <span class="keyword">int</span> index) {</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.tag = tag;</div><div class="line">		<span class="keyword">this</span>.index = index;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> EnumConstType <span class="title">getTag</span>() {</div><div class="line">		<span class="keyword">return</span> tag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTag</span>(EnumConstType tag) {</div><div class="line">		<span class="keyword">this</span>.tag = tag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span>() {</div><div class="line">		<span class="keyword">return</span> index;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span>(<span class="keyword">int</span> index) {</div><div class="line">		<span class="keyword">this</span>.index = index;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>对于jdk1.6的情况，可以将常量池元素的类别，<code>EnumConstType</code>中的不同类别结构，分成5类。类别1：CONSTANT_Utf8，包含1个字符串；类别2：CONSTANT_Integer, CONSTANT_Float，包含1个4 byte的数据；类别3：CONSTANT_Long, CONSTANT_Double，包含1个8 byte的数据；类别4：CONSTANT_Class, CONSTANT_String，包含1个2 byte的数据；类别5：CONSTANT_Fieldref, CONSTANT_Methodref, CONSTANT_NameAndType, CONSTANT_InterfaceMethodref，包含2个2 byte的数据。如果是jdk之后的版本，如jdk1.7，还包括MethodHandle, MethodType, InvokeDynamic, 分别取值为15, 16, 18的常量类别，不过在此不做考虑。根据以上5个类别设计的类，分别如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for UTF8</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemU</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* the text content for utf8 constant</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String utf8;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemU</span>(EnumConstType tag, <span class="keyword">int</span> index, String utf8) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.utf8 = utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String <span class="title">getUtf8</span>() {</div><div class="line">		<span class="keyword">return</span> utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtf8</span>(String utf8) {</div><div class="line">		<span class="keyword">this</span>.utf8 = utf8;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for int and float</span></div><div class="line"> * (not used)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemIF</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> vint;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemIF</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">int</span> vint) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">        <span class="keyword">this</span>.vint = vint;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVint</span>() {</div><div class="line">		<span class="keyword">return</span> vint;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVint</span>(<span class="keyword">int</span> vint) {</div><div class="line">		<span class="keyword">this</span>.vint = vint;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for long and double</span></div><div class="line"> * (not used)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemLD</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> vlong;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemLD</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">long</span> vlong) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">        <span class="keyword">this</span>.vlong = vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getVlong</span>() {</div><div class="line">		<span class="keyword">return</span> vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVlong</span>(<span class="keyword">long</span> vlong) {</div><div class="line">		<span class="keyword">this</span>.vlong = vlong;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for class and string</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemCS</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* for Class, point to class name</span></div><div class="line">	 * for String, point to string content</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> name;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ConstElemCS</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">short</span> name) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getName</span>() {</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="keyword">short</span> name) {</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1.constelem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.EnumConstType;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Element for Fieldref, Methodref,</span></div><div class="line"> * InterfaceMethodref, and NameandType</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstElemFMIN</span> <span class="keyword">extends</span> <span class="title">ConstElem</span> </span>{</div><div class="line">	<span class="comment">/* for Fieldref, Methodref, InterfaceMethodref, point to class info</span></div><div class="line">	 * for NameandType, point to name</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> index1;</div><div class="line">	<span class="comment">/* for Fieldref, Methodref, InterfaceMethodref, point to NameandType info</span></div><div class="line">	 * for NameandType, point to descriptor</div><div class="line">	 */</div><div class="line">    <span class="keyword">short</span> index2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ConstElemFMIN</span>(EnumConstType tag, <span class="keyword">int</span> index, <span class="keyword">short</span> index1, <span class="keyword">short</span> index2) {</div><div class="line">		<span class="keyword">super</span>(tag, index);</div><div class="line">		<span class="keyword">this</span>.index1 = index1;</div><div class="line">		<span class="keyword">this</span>.index2 = index2;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getIndex1</span>() {</div><div class="line">		<span class="keyword">return</span> index1;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex1</span>(<span class="keyword">short</span> index1) {</div><div class="line">		<span class="keyword">this</span>.index1 = index1;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getIndex2</span>() {</div><div class="line">		<span class="keyword">return</span> index2;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex2</span>(<span class="keyword">short</span> index2) {</div><div class="line">		<span class="keyword">this</span>.index2 = index2;</div><div class="line">	}</div><div class="line"></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>由于，本例中没有使用到float和double值的操作，所以读取这部分的数据只是简单的存成整型，实际上，值是有错误的，不过并不影响最后的结果。有了以上这些基础类了之后，就可以在这些基础上，完成常量池类的构建，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.constelem.*;</div><div class="line"></div><div class="line"><span class="comment">/* Constant Pools</span></div><div class="line"> * Use a List to store Constant Pool data in class file</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPool</span> </span>{</div><div class="line">	<span class="comment">// a list to keep each constant elem</span></div><div class="line">	<span class="keyword">public</span> List&lt;ConstElem&gt; constPool = <span class="keyword">new</span> ArrayList&lt;ConstElem&gt;(<span class="number">1024</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* append an element in constant pool</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span>(ConstElem a){</div><div class="line">		<span class="keyword">return</span> constPool.add(a);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get element for ConstElem.index = index</span></div><div class="line">	 * paras: index, index in class file, starts from 1</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> ConstElem <span class="title">getElemAt</span>(<span class="keyword">int</span> index){</div><div class="line">		ConstElem e = constPool.get(index-<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span> (e.getIndex() == index){</div><div class="line">			<span class="keyword">return</span> e;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (ConstElem e1:constPool){</div><div class="line">			<span class="keyword">if</span>(e1.getIndex() == index){</div><div class="line">				<span class="keyword">return</span> e1;</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* read an elem from constant pool</span></div><div class="line">	 * paras: input, ClassReader wrapper for class file</div><div class="line">	 *        index, index of elem in constant pool, starts from 1</div><div class="line">	 * return: type of elem</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> EnumConstType <span class="title">analyzeConstant</span>(ClassReader input, <span class="keyword">int</span> index)</div><div class="line">			<span class="keyword">throws</span> IOException {</div><div class="line">		<span class="keyword">short</span> n16, n16_1;</div><div class="line">		<span class="keyword">int</span> n32;</div><div class="line">		<span class="keyword">long</span> n64;</div><div class="line">		<span class="keyword">float</span> f;</div><div class="line">		<span class="keyword">double</span> d;</div><div class="line">		<span class="keyword">byte</span>[] buffer;</div><div class="line">		<span class="keyword">byte</span> tag = input.readByte(); <span class="comment">// read constant tag</span></div><div class="line">		EnumConstType ctag = EnumConstType.generateByValue((<span class="keyword">int</span>)tag);</div><div class="line">		<span class="keyword">switch</span> (ctag) {</div><div class="line">		<span class="keyword">case</span> C_UTF8: <span class="comment">// utf-8 string</span></div><div class="line">			n16 = input.u2();</div><div class="line">			buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[n16];</div><div class="line">			input.readFully(buffer); <span class="comment">// read until buffer is full</span></div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemU(ctag, index, <span class="keyword">new</span> String(buffer)));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_INTEGER: <span class="comment">// integer</span></div><div class="line">			n32 = input.u4();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemIF(ctag, index, n32));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_FLOAT: <span class="comment">// float</span></div><div class="line">			f = input.u4();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemIF(ctag, index, (<span class="keyword">int</span>)f));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_LONG: <span class="comment">// long</span></div><div class="line">			n64 = input.u8();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemLD(ctag, index, n64));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_DOUBLE: <span class="comment">// double</span></div><div class="line">			d = input.u8();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemLD(ctag, index, (<span class="keyword">long</span>)d));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_CLASS: <span class="comment">// class or interface reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemCS(ctag, index, n16));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_STRING: <span class="comment">// string</span></div><div class="line">			n16 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemCS(ctag, index, n16));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_FIELDREF: <span class="comment">// field reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_METHODREF: <span class="comment">// method reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_INTERFACEMETHODREF: <span class="comment">// interface method reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> C_NAMEANDTYPE: <span class="comment">// name and type reference</span></div><div class="line">			n16 = input.u2();</div><div class="line">			n16_1 = input.u2();</div><div class="line">			constPool.add(<span class="keyword">new</span> ConstElemFMIN(ctag, index, n16, n16_1));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid constant pool flag: "</span> + tag);</div><div class="line">		} <span class="comment">// end switch</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> ctag;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* print the list of constant pool</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printConstPool</span>(){</div><div class="line">		ConstElemU u1;</div><div class="line">		ConstElemIF if1;</div><div class="line">		ConstElemLD ld1;</div><div class="line">		ConstElemCS cs1;</div><div class="line">		ConstElemFMIN fmin1;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"\n[ Constant Pool Info ]:"</span>);</div><div class="line">		<span class="keyword">for</span> (ConstElem e:constPool){</div><div class="line">			System.out.println(<span class="string">"constant index = "</span> + e.getIndex() + <span class="string">", tag = "</span> + e.getTag());</div><div class="line">			<span class="keyword">switch</span>(e.getTag()){</div><div class="line">			<span class="keyword">case</span> C_UTF8:</div><div class="line">				u1 = (ConstElemU)e;</div><div class="line">				System.out.println(<span class="string">"  length = "</span> + u1.getUtf8().length() + <span class="string">" value = "</span> + u1.getUtf8());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_INTEGER:  <span class="comment">// INTENTIALLY left blank, same for following</span></div><div class="line">			<span class="keyword">case</span> C_FLOAT:</div><div class="line">				if1 = (ConstElemIF)e;</div><div class="line">				System.out.println(<span class="string">"  value = "</span> + if1.getVint());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_LONG:</div><div class="line">			<span class="keyword">case</span> C_DOUBLE:</div><div class="line">				ld1 = (ConstElemLD)e;</div><div class="line">				System.out.println(<span class="string">"  value = "</span> + ld1.getVlong());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_CLASS:</div><div class="line">			<span class="keyword">case</span> C_STRING:</div><div class="line">				cs1 = (ConstElemCS)e;</div><div class="line">				System.out.println(<span class="string">"  name at "</span> + cs1.getName());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_FIELDREF:</div><div class="line">			<span class="keyword">case</span> C_METHODREF:</div><div class="line">			<span class="keyword">case</span> C_INTERFACEMETHODREF:</div><div class="line">				fmin1 = (ConstElemFMIN)e;</div><div class="line">				System.out.println(<span class="string">"  classindex = "</span> + fmin1.getIndex1()</div><div class="line">						+ <span class="string">" nameandtype = "</span> + fmin1.getIndex2());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> C_NAMEANDTYPE:</div><div class="line">				fmin1 = (ConstElemFMIN)e;</div><div class="line">				System.out.println(<span class="string">"  nameindex = "</span> + fmin1.getIndex1()</div><div class="line">						+ <span class="string">" descriptor = "</span> + fmin1.getIndex2());</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">			;</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>对每一个读入的常量，调用<code>analyzeConstant</code>来将其添加到常量池中。有了这个类之后，在分析域和方法的时候，就可以根据域和方法中表示NameandType的索引找到它们的名称和类型。为了能方便的获取到这些名称和类型，设计一个工具类，来产生这些名称和类型的字符串表示，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> problem1.constelem.ConstElemCS;</div><div class="line"><span class="keyword">import</span> problem1.constelem.ConstElemU;</div><div class="line"></div><div class="line"><span class="comment">/* Analyze utilities</span></div><div class="line"> * to get the string representation of</div><div class="line"> * class, fields, methods, and access flags for them</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalyzeUtil</span> </span>{</div><div class="line">	<span class="comment">/* get name of Class, super class, and interfaces</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClassName</span>(ConstantPool cp, <span class="keyword">int</span> index){</div><div class="line">		<span class="keyword">try</span>{</div><div class="line">			ConstElemCS e = (ConstElemCS)cp.getElemAt(index);</div><div class="line">			ConstElemU  u = (ConstElemU)cp.getElemAt(e.getName());</div><div class="line">			<span class="keyword">return</span> u.getUtf8();</div><div class="line">		}<span class="keyword">catch</span>(Exception e){</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMethodString</span>(ConstantPool cp, <span class="keyword">int</span> idx, <span class="keyword">int</span> idesc){</div><div class="line">		ConstElemU  uName = (ConstElemU)cp.getElemAt(idx);</div><div class="line">		ConstElemU  uDesc = (ConstElemU)cp.getElemAt(idesc);</div><div class="line">		<span class="keyword">return</span> analyzeMethodRet(uDesc.getUtf8()) + <span class="string">" "</span></div><div class="line">			   + uName.getUtf8()</div><div class="line">			   + analyzeMethodParas(uDesc.getUtf8());</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a single type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeType</span>(String t){</div><div class="line">		<span class="keyword">switch</span>(t.charAt(<span class="number">0</span>)){</div><div class="line">		<span class="keyword">case</span> <span class="string">'B'</span>: <span class="keyword">return</span> <span class="string">"byte"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">return</span> <span class="string">"char"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="string">"double"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">return</span> <span class="string">"float"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">return</span> <span class="string">"int"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'J'</span>: <span class="keyword">return</span> <span class="string">"long"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'S'</span>: <span class="keyword">return</span> <span class="string">"short"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'Z'</span>: <span class="keyword">return</span> <span class="string">"boolean"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'V'</span>: <span class="keyword">return</span> <span class="string">"void"</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'L'</span>: <span class="keyword">return</span> t.substring(<span class="number">1</span>, t.indexOf(<span class="string">';'</span>, <span class="number">1</span>));</div><div class="line">		<span class="keyword">case</span> <span class="string">'['</span>: <span class="keyword">return</span> analyzeType(t.substring(<span class="number">1</span>)) + <span class="string">"[]"</span>;</div><div class="line">		<span class="keyword">default</span>:  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method's return type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeMethodRet</span>(String t){</div><div class="line">		String ret = t.substring(t.indexOf(<span class="string">')'</span>)+<span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span> analyzeType(ret);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get normal representation of a method's parameter type</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeMethodParas</span>(String t){</div><div class="line">		String paras = t.substring(t.indexOf(<span class="string">'('</span>)+<span class="number">1</span>, t.indexOf(<span class="string">')'</span>));</div><div class="line">		String s = <span class="string">""</span>;</div><div class="line">		<span class="keyword">while</span> (!paras.isEmpty()){</div><div class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (i&lt;paras.length()){</div><div class="line">				<span class="keyword">if</span> (paras.charAt(i) == <span class="string">'['</span>) {</div><div class="line">					++i;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">if</span> (paras.charAt(i) == <span class="string">'L'</span>) {</div><div class="line">					String para1 = paras.substring(<span class="number">0</span>, paras.indexOf(<span class="string">';'</span>)+<span class="number">1</span>);</div><div class="line">					s = s + analyzeType(para1) + <span class="string">", "</span>;</div><div class="line">					paras = paras.substring(paras.indexOf(<span class="string">';'</span>)+<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				}</div><div class="line">				s = s + analyzeType(paras.substring(<span class="number">0</span>, i+<span class="number">1</span>)) +<span class="string">", "</span>;</div><div class="line">				paras = paras.substring(<span class="number">1</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (s != <span class="string">""</span>){</div><div class="line">			s = s.substring(<span class="number">0</span>, s.length()-<span class="number">2</span>);</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="string">"("</span> + s + <span class="string">")"</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get name and description of field</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldString</span>(ConstantPool cp, <span class="keyword">int</span> in, <span class="keyword">int</span> id){</div><div class="line">		<span class="keyword">try</span>{</div><div class="line">			ConstElemU  uName = (ConstElemU)cp.getElemAt(in);</div><div class="line">			ConstElemU  uDesc = (ConstElemU)cp.getElemAt(id);</div><div class="line">			<span class="keyword">return</span> analyzeType(uDesc.getUtf8())+<span class="string">" "</span>+uName.getUtf8();</div><div class="line">		}<span class="keyword">catch</span>(Exception e){</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of class access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeClassAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0010</span>, <span class="number">0x0020</span>, <span class="number">0x0200</span>,</div><div class="line">						<span class="number">0x0400</span>, <span class="number">0x1000</span>, <span class="number">0x2000</span>, <span class="number">0x4000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"final"</span>, <span class="string">"super"</span>, <span class="string">"interface"</span>,</div><div class="line">								<span class="string">"abstract"</span>, <span class="string">"synthetic"</span>, <span class="string">"annotation"</span>, <span class="string">"enum"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of field access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeFieldAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0002</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>,</div><div class="line">				        <span class="number">0x0010</span>, <span class="number">0x0040</span>, <span class="number">0x0080</span>,</div><div class="line">				        <span class="number">0x1000</span>, <span class="number">0x4000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"private"</span>, <span class="string">"protected"</span>, <span class="string">"static"</span>,</div><div class="line">				                <span class="string">"final"</span>, <span class="string">"volatile"</span>, <span class="string">"transient"</span>,</div><div class="line">				                <span class="string">"synthetic"</span>, <span class="string">"enum"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of method access flags</span></div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyzeMethodAF</span>(<span class="keyword">short</span> access_flags){</div><div class="line">		<span class="keyword">int</span>[] access = { <span class="number">0x0001</span>, <span class="number">0x0002</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>,</div><div class="line">				        <span class="number">0x0010</span>, <span class="number">0x0020</span>, <span class="number">0x0040</span>, <span class="number">0x0080</span>,</div><div class="line">				        <span class="number">0x0100</span>, <span class="number">0x0400</span>, <span class="number">0x0800</span>,</div><div class="line">				        <span class="number">0x1000</span>};</div><div class="line">		String[] access_str = { <span class="string">"public"</span>, <span class="string">"private"</span>, <span class="string">"protected"</span>, <span class="string">"static"</span>,</div><div class="line">				                <span class="string">"final"</span>, <span class="string">"synchronized"</span>, <span class="string">"bridge"</span>, <span class="string">"varargs"</span>,</div><div class="line">				                <span class="string">"native"</span>, <span class="string">"abstract"</span>, <span class="string">"strctfp"</span>,</div><div class="line">				                <span class="string">"synthetic"</span> };</div><div class="line">		<span class="keyword">return</span> analyzeAF(access_flags, access, access_str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">/* get the String representation of access flags</span></div><div class="line">	 * general form of access flags for class, fields, and methods</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">analyzeAF</span>(<span class="keyword">short</span> access_flags, <span class="keyword">int</span>[] access,</div><div class="line">			String[] access_str){</div><div class="line">		String access_tmp = <span class="string">""</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; access.length; i++) {</div><div class="line">			<span class="keyword">if</span> ((access_flags & access[i]) == access[i]) {</div><div class="line">				<span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">					access_tmp += access_str[i];</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">2</span>)</div><div class="line">					access_tmp += <span class="string">" "</span> + access_str[i];</div><div class="line">			}</div><div class="line">		}</div><div class="line">        <span class="keyword">return</span> access_tmp;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码，多数都是解析字符串并转换为可以理解的Java代码的形式、其中，<code>public</code>的方法，如<code>getXXXX</code>方法，可以获取类名称，以及域和方法的字符串表示；<code>analyzeXXXXAF</code>方法，可以获取类，域，方法的访问权限。<code>private</code>的方法，如<code>analyzeXXXX</code>方法，都是公有方法中调用到的其他方法。有了以上这些代码之后，分析class文件就很简单了，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAnalyzer</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ConstantPool constPool = <span class="keyword">new</span> ConstantPool();</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String dir = <span class="string">"bin/problem1/constelem/"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String myClass = dir + <span class="string">"ConstElemU.class"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		ClassReader input = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// open class file</span></div><div class="line">			input = <span class="keyword">new</span> ClassReader(</div><div class="line">					<span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(</div><div class="line">					<span class="keyword">new</span> FileInputStream(myClass))));</div><div class="line">			<span class="comment">// analyze class file</span></div><div class="line">			analyze(input);</div><div class="line">		} <span class="keyword">catch</span> (Exception e) {</div><div class="line">			System.out.println(<span class="string">"fail to analyze!"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				input.close();</div><div class="line">				<span class="comment">//dataout.close();</span></div><div class="line">			} <span class="keyword">catch</span> (Exception e) {</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLog</span>(String str){</div><div class="line">		System.out.println(str);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">analyze</span>(ClassReader input) <span class="keyword">throws</span> IOException {</div><div class="line">		<span class="comment">// read magic number</span></div><div class="line">		<span class="keyword">int</span> magic = input.u4();</div><div class="line">		<span class="keyword">if</span> (magic == <span class="number">0xCAFEBABE</span>){</div><div class="line">			printLog(<span class="string">"[ General Info ]:"</span>);</div><div class="line">			printLog(<span class="string">"magic number = 0xCAFEBABE"</span>);</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"unknown magic number！"</span>);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read major version and minor version</span></div><div class="line">		<span class="keyword">int</span> minor_ver = input.u2();</div><div class="line">		<span class="keyword">int</span> major_ver = input.u2();</div><div class="line">		printLog(<span class="string">"Version = "</span> + major_ver + <span class="string">"."</span> + minor_ver);</div><div class="line"></div><div class="line">		<span class="comment">// read number of constant</span></div><div class="line">		<span class="keyword">short</span> const_pool_count = input.u2();</div><div class="line">		printLog(<span class="string">"constant pool size = "</span> + const_pool_count);</div><div class="line">        <span class="comment">// read each constant in constant pool</span></div><div class="line">		EnumConstType tp = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; const_pool_count; ++i){</div><div class="line">			 tp = constPool.analyzeConstant(input, i); <span class="comment">// analyze each constant</span></div><div class="line"></div><div class="line">			 <span class="comment">// for long and double, they use 2 constant index</span></div><div class="line">			 <span class="keyword">if</span> (tp == EnumConstType.C_LONG || tp == EnumConstType.C_DOUBLE){</div><div class="line">				 ++i;</div><div class="line">			 }</div><div class="line">		}</div><div class="line">		<span class="comment">// print Constant Pool when needed</span></div><div class="line">		constPool.printConstPool();</div><div class="line"></div><div class="line">		<span class="comment">// read access flags for class</span></div><div class="line">		<span class="keyword">short</span> access_flags = input.u2();</div><div class="line">		<span class="comment">// read class, and super class</span></div><div class="line">		<span class="keyword">short</span> this_class_index = input.u2();</div><div class="line">		<span class="keyword">short</span> super_class_index = input.u2();</div><div class="line">		<span class="comment">// print class, super class, and interface</span></div><div class="line">		<span class="comment">// print access flags for this class</span></div><div class="line">		printLog(<span class="string">"\n[ Class Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"This class index = "</span> + this_class_index +<span class="string">", name = "</span></div><div class="line">		        + AnalyzeUtil.getClassName(constPool, this_class_index));</div><div class="line"></div><div class="line">		System.out.print(<span class="string">"  access_flags = "</span> + String.format(<span class="string">"0x%04x"</span>, access_flags));</div><div class="line">		String access_tmp = AnalyzeUtil.analyzeClassAF(access_flags);</div><div class="line">		printLog(<span class="string">" [ "</span> + access_tmp + <span class="string">" ]"</span>);</div><div class="line"></div><div class="line">		printLog(<span class="string">"Super class index = "</span> + super_class_index +<span class="string">", name = "</span></div><div class="line">				+ AnalyzeUtil.getClassName(constPool, super_class_index));</div><div class="line"></div><div class="line">        <span class="comment">// read interfaces count:</span></div><div class="line">		<span class="keyword">short</span> inteCes_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Interface Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of interface = "</span> + inteCes_count);</div><div class="line">        <span class="comment">// read each interface:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= inteCes_count; i++) {</div><div class="line">			<span class="keyword">short</span> inteCe_index = input.u2();</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" interface index = "</span> + inteCe_index + <span class="string">", name = "</span></div><div class="line">					+ AnalyzeUtil.getClassName(constPool, inteCe_index));</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read field count:</span></div><div class="line">		<span class="keyword">short</span> field_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Field Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of field = "</span> + field_count);</div><div class="line">		<span class="comment">// read each field:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= field_count; i++) {</div><div class="line">			<span class="keyword">short</span> field_access_flag = input.u2();</div><div class="line">			<span class="keyword">short</span> field_name_index  = input.u2();</div><div class="line">			<span class="keyword">short</span> field_descriptor_index = input.u2();</div><div class="line">			<span class="keyword">short</span> field_attributes_count = input.u2();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=field_attributes_count; j++){</div><div class="line">				<span class="keyword">short</span> attribute_name_index = input.u2();</div><div class="line">				<span class="keyword">int</span>   attribute_length = input.u4();</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=attribute_length; k++){</div><div class="line">					input.u1(); <span class="comment">// not used attributes</span></div><div class="line">				}</div><div class="line">			}</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" access_flag = "</span></div><div class="line">			        + String.format(<span class="string">"0x%04x"</span>, field_access_flag)+ <span class="string">" name_index = "</span></div><div class="line">					+ field_name_index+ <span class="string">" descriptor_index = "</span></div><div class="line">					+ field_descriptor_index);</div><div class="line">			printLog(<span class="string">"  Original Form: "</span></div><div class="line">					+ AnalyzeUtil.analyzeFieldAF(field_access_flag) + <span class="string">" "</span></div><div class="line">					+ AnalyzeUtil.getFieldString(constPool, field_name_index,</div><div class="line">							field_descriptor_index) + <span class="string">";"</span>);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// read method count:</span></div><div class="line">		<span class="keyword">short</span> method_count = input.u2();</div><div class="line">		printLog(<span class="string">"\n[ Method Info ]:"</span>);</div><div class="line">		printLog(<span class="string">"number of method = "</span> + method_count);</div><div class="line">		<span class="comment">// read each method:</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= method_count; i++) {</div><div class="line">			<span class="keyword">short</span> method_access_flag = input.u2();</div><div class="line">			<span class="keyword">short</span> method_name_index  = input.u2();</div><div class="line">			<span class="keyword">short</span> method_descriptor_index = input.u2();</div><div class="line">			<span class="keyword">short</span> method_attributes_count = input.u2();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=method_attributes_count; j++){</div><div class="line">				<span class="keyword">short</span> attribute_name_index = input.u2();</div><div class="line">				<span class="keyword">int</span>   attribute_length = input.u4();</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=attribute_length; k++){</div><div class="line">					input.u1();  <span class="comment">// not used attributes</span></div><div class="line">				}</div><div class="line">			}</div><div class="line">			printLog(<span class="string">"No. "</span> + i + <span class="string">" access_flag = "</span></div><div class="line">			        + String.format(<span class="string">"0x%04x"</span>, method_access_flag)</div><div class="line">			        + <span class="string">" name_index = "</span></div><div class="line">					+ method_name_index+ <span class="string">" descriptor_index = "</span></div><div class="line">					+ method_descriptor_index);</div><div class="line">			printLog(<span class="string">"  Original Form: "</span></div><div class="line">					+ AnalyzeUtil.analyzeMethodAF(method_access_flag) + <span class="string">" "</span></div><div class="line">					+ AnalyzeUtil.getMethodString(constPool, method_name_index,</div><div class="line">							method_descriptor_index) + <span class="string">";"</span>);</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码的<code>main</code>入口读取class文件，并调用<code>analyze</code>来分析。<code>analyze</code>大致分两个步骤，到<code>printConstPool</code>之前，这一段主要是读取常量池的内容，构造常量池对象<code>constPool</code>，有一个小细节是，如果类型是long或者double，那么需要占用2个索引值index，其他情况都是占用1个；之后的部分，是读取类、域、方法的信息，然后从常量池中找到它们的索引值，并输出在屏幕上，输出的时候调用<code>AnalyzeUtil</code>中的方法，以便可以获取易于理解的输出。本例用的是之前的<code>ConstElemU</code>作为测试class，输入如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">[ General Info ]:</div><div class="line">magic <span class="variable">number =</span> <span class="number">0</span>xCAFEBABE</div><div class="line"><span class="variable">Version =</span> <span class="number">50.0</span></div><div class="line">constant pool <span class="variable">size =</span> <span class="number">29</span></div><div class="line"></div><div class="line">[ Constant Pool Info ]:</div><div class="line">constant <span class="variable">index =</span> <span class="number">1</span>, <span class="variable">tag =</span> C_CLASS</div><div class="line"> name at <span class="number">2</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">2</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">29</span> <span class="variable">value =</span> problem1/constelem/ConstElemU</div><div class="line">constant <span class="variable">index =</span> <span class="number">3</span>, <span class="variable">tag =</span> C_CLASS</div><div class="line"> name at <span class="number">4</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">4</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">28</span> <span class="variable">value =</span> problem1/constelem/ConstElem</div><div class="line">constant <span class="variable">index =</span> <span class="number">5</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> utf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">6</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">18</span> <span class="variable">value =</span> Ljava/lang/String;</div><div class="line">constant <span class="variable">index =</span> <span class="number">7</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">6</span> <span class="variable">value =</span> &lt;init&gt;</div><div class="line">constant <span class="variable">index =</span> <span class="number">8</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">46</span> <span class="variable">value =</span> (Lproblem1/EnumConstType;ILjava/lang/String;)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">9</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> Code</div><div class="line">constant <span class="variable">index =</span> <span class="number">10</span>, <span class="variable">tag =</span> C_METHODREF</div><div class="line"> <span class="variable">classindex =</span> <span class="number">3</span> <span class="variable">nameandtype =</span> <span class="number">11</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">11</span>, <span class="variable">tag =</span> C_NAMEANDTYPE</div><div class="line"> <span class="variable">nameindex =</span> <span class="number">7</span> <span class="variable">descriptor =</span> <span class="number">12</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">12</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">28</span> <span class="variable">value =</span> (Lproblem1/EnumConstType;I)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">13</span>, <span class="variable">tag =</span> C_FIELDREF</div><div class="line"> <span class="variable">classindex =</span> <span class="number">1</span> <span class="variable">nameandtype =</span> <span class="number">14</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">14</span>, <span class="variable">tag =</span> C_NAMEANDTYPE</div><div class="line"> <span class="variable">nameindex =</span> <span class="number">5</span> <span class="variable">descriptor =</span> <span class="number">6</span></div><div class="line">constant <span class="variable">index =</span> <span class="number">15</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">15</span> <span class="variable">value =</span> LineNumberTable</div><div class="line">constant <span class="variable">index =</span> <span class="number">16</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">18</span> <span class="variable">value =</span> LocalVariableTable</div><div class="line">constant <span class="variable">index =</span> <span class="number">17</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">4</span> <span class="variable">value =</span> this</div><div class="line">constant <span class="variable">index =</span> <span class="number">18</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">31</span> <span class="variable">value =</span> Lproblem1/constelem/ConstElemU;</div><div class="line">constant <span class="variable">index =</span> <span class="number">19</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">3</span> <span class="variable">value =</span> tag</div><div class="line">constant <span class="variable">index =</span> <span class="number">20</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">24</span> <span class="variable">value =</span> Lproblem1/EnumConstType;</div><div class="line">constant <span class="variable">index =</span> <span class="number">21</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">5</span> <span class="variable">value =</span> index</div><div class="line">constant <span class="variable">index =</span> <span class="number">22</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">1</span> <span class="variable">value =</span> I</div><div class="line">constant <span class="variable">index =</span> <span class="number">23</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">7</span> <span class="variable">value =</span> getUtf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">24</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">20</span> <span class="variable">value =</span> ()Ljava/lang/String;</div><div class="line">constant <span class="variable">index =</span> <span class="number">25</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">7</span> <span class="variable">value =</span> setUtf8</div><div class="line">constant <span class="variable">index =</span> <span class="number">26</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">21</span> <span class="variable">value =</span> (Ljava/lang/String;)V</div><div class="line">constant <span class="variable">index =</span> <span class="number">27</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">10</span> <span class="variable">value =</span> SourceFile</div><div class="line">constant <span class="variable">index =</span> <span class="number">28</span>, <span class="variable">tag =</span> C_UTF8</div><div class="line"> <span class="variable">length =</span> <span class="number">15</span> <span class="variable">value =</span> ConstElemU.java</div><div class="line"></div><div class="line">[ Class Info ]:</div><div class="line">This class <span class="variable">index =</span> <span class="number">1</span>, <span class="variable">name =</span> problem1/constelem/ConstElemU</div><div class="line">  <span class="variable">access_flags =</span> <span class="number">0</span>x0021 [ public ]</div><div class="line">Super class <span class="variable">index =</span> <span class="number">3</span>, <span class="variable">name =</span> problem1/constelem/ConstElem</div><div class="line"></div><div class="line">[ Interface Info ]:</div><div class="line">number of <span class="variable">interface =</span> <span class="number">0</span></div><div class="line"></div><div class="line">[ Field Info ]:</div><div class="line">number of <span class="variable">field =</span> <span class="number">1</span></div><div class="line">No. <span class="number">1</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0002 <span class="variable">name_index =</span> <span class="number">5</span> <span class="variable">descriptor_index =</span> <span class="number">6</span></div><div class="line">  Original Form:  private java/lang/String utf8;</div><div class="line"></div><div class="line">[ Method Info ]:</div><div class="line">number of <span class="variable">method =</span> <span class="number">3</span></div><div class="line">No. <span class="number">1</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">7</span> <span class="variable">descriptor_index =</span> <span class="number">8</span></div><div class="line">  Original Form: public void &lt;init&gt;(problem1/EnumConstType, int, java/lang/String);</div><div class="line">No. <span class="number">2</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">23</span> <span class="variable">descriptor_index =</span> <span class="number">24</span></div><div class="line">  Original Form: public java/lang/String getUtf8();</div><div class="line">No. <span class="number">3</span> <span class="variable">access_flag =</span> <span class="number">0</span>x0001 <span class="variable">name_index =</span> <span class="number">25</span> <span class="variable">descriptor_index =</span> <span class="number">26</span></div><div class="line">  Original Form: public void setUtf8(java/lang/String);</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-java-class-file/class-file-test.png"></p>
<p>输出的内容很多，前一段是输出整个常量池的内容，如果不看这部分，剩下的内容从<code>[ Class Info ]:</code>开始，就很少了。<code>[ Class Info ]:</code>部分，可以得知，class文件的类是<code>problem1/constelem/ConstElemU</code>，是<code>public</code>的，其超类是<code>problem1/constelem/ConstElem</code>；<code>[ Interface Info ]:</code>部分没有内容，因为该类没有实现接口；<code>[ Field Info ]:</code>部分，有1个域，可以写成<code>private java/lang/String utf8</code>，也就是<code>private String utf8</code>；<code>[ Method Info ]:</code>有3个方法，第1个是构造方法<code>public void &lt;init&gt;(problem1/EnumConstType, int, java/lang/String)</code>，构造方法的名称统一写成了<code>&lt;init&gt;</code>，需要替换为类名，并加了<code>void</code>返回值，实际不需要，略微改写为<code>public ConstElemU(EnumConstType, int, String)</code>，另外2个方法<code>public java/lang/String getUtf8()</code>和<code>public void setUtf8(java/lang/String)</code>，可以改写为<code>public String getUtf8()</code>和<code>public void setUtf8(String)</code>。对比原本的代码可以发现，以上输出，基本还原了<code>ConstElemU</code>的类定义。</p>
<p>本例的代码还可以进一步修改来支持float和double类型常数，代码参考了<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/oracle_microsoft/article/details/4417075" target="_blank" rel="external">http://blog.csdn.net/oracle_microsoft/article/details/4417075</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://developer.51cto.com/art/201203/321576.htm" target="_blank" rel="external">http://developer.51cto.com/art/201203/321576.htm</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://xmuzyq.iteye.com/blog/1779334" target="_blank" rel="external">http://xmuzyq.iteye.com/blog/1779334</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://wenku.baidu.com/link?url=f2ahIgyDjm4lu5BWuklxfTvErlwMe__AVPGckl4wXUebN6Q-Reco9PnjF-xODvDrGggNnG1dNJDjEonE5ujq2xRlt6ezcCs3wRi2NuchDYW" target="_blank" rel="external">http://wenku.baidu.com/link?url=f2ahIgyDjm4lu5BWuklxfTvErlwMe__AVPGckl4wXUebN6Q-Reco9PnjF-xODvDrGggNnG1dNJDjEonE5ujq2xRlt6ezcCs3wRi2NuchDYW</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>每一个Java类在经过编译后，都会生成.class文件，作为JVM执行的输入。.class文件的结构分析和示例可以参考<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2"]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL添加UUID扩展]]></title>
    <link href="http://valleylord.github.io/post/201410-postgres-uuid/"/>
    <id>http://valleylord.github.io/post/201410-postgres-uuid/</id>
    <published>2014-10-09T11:53:00.000Z</published>
    <updated>2014-12-03T01:16:42.000Z</updated>
    <content type="html"><![CDATA[<p>UUID是用于提供全局唯一编码的程序，可以将其添加到PostgreSQL中，<a href="http://www.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>是UUID的主页。</p>
<p>下载最新版本uuid-1.6.2.tar.gz的源码，解压，configure，编译安装，与一般的程序安装并无很大差异。也可以使用<code>yum install uuid uuid-devel</code>来安装，不过我的Centos6.5的源上面还是1.6.1版本的UUID。本文使用的是前者，主页上面的下载连接似乎已经坏了，<a href="http://www.mirrorservice.org/sites/ftp.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>提供的链接可以下载。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy Downloads]$ tar xzf uuid-<span class="number">1.6</span>.<span class="number">2</span>.tar.gz</div><div class="line">[postgres@anzhy Downloads]$ <span class="built_in">cd</span> uuid-<span class="number">1.6</span>.<span class="number">2</span></div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ ./configure</div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ make</div><div class="line">[postgres@anzhy uuid-<span class="number">1.6</span>.<span class="number">2</span>]$ make install</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/uuid-configure.png"></p>
<p><img src="/images/201410-postgres-uuid/uuid-make.png"></p>
<p><img src="/images/201410-postgres-uuid/uuid-make-install.png"></p>
<p>然后，PostgreSQL需要重新编译安装，PostgreSQL的安装可以参考我之前的博客，<a href="http://valleylord.sinaapp.com/post/201408-postgresql-install" target="_blank" rel="external">这里</a>和<a href="http://valleylord.sinaapp.com/post/201408-postgresql-dev-env" target="_blank" rel="external">这里</a>。先做PostgreSQL的configure，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ ./configure --prefix=<span class="variable">$HOME</span>/postgres --with-ossp-uuid --enable-depend --enable-cassert --enable-debug</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/postgres-configure.png"></p>
<p>注意，在configure的时候要增加<code>--with-ossp-uuid</code>选项，然后就可以用正常的步骤编译安装PostgreSQL，不再重复。安装完PostgreSQL之后，补上UUID扩展的安装，从PostgreSQL源码的根目录切换到uuid插件的目录，然后编译安装。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[postgres@anzhy postgresql]$ <span class="built_in">cd</span> contrib/uuid-ossp/</div><div class="line">[postgres@anzhy uuid-ossp]$ make</div><div class="line">[postgres@anzhy uuid-ossp]$ make install</div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/uuid-plugin-install.png"></p>
<p>由于uuid把库安装在了<code>/usr/local/lib</code>，所以我们需要把这个目录加入到<code>LD_LIBRARY_PATH</code>环境变量中</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=<span class="variable">$POSTGRESQLHOME</span>/lib:/usr/local/lib:<span class="variable">$LD_LIBRARY_PATH</span></div></pre></td></tr></table></figure></p>
<p>然后，启动PostgreSQL，进入psql，运行，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">postgres=# <span class="operator"><span class="keyword">create</span> extension <span class="string">"uuid-ossp"</span>;</span></div><div class="line">postgres=# <span class="operator"><span class="keyword">select</span> extname,extowner,extnamespace,extrelocatable,extversion <span class="keyword">from</span> pg_extension;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201410-postgres-uuid/create-extension.png"></p>
<p>可以看到，uuid扩展已经安装成功。</p>
<p>本文参考了以下文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.itpub.net/9697/viewspace-1046338/" target="_blank" rel="external">http://blog.itpub.net/9697/viewspace-1046338/</a><a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>UUID是用于提供全局唯一编码的程序，可以将其添加到PostgreSQL中，<a href="http://www.ossp.org/pkg/lib/uuid/" target="_blank" rel="external">这里</a>是UUID的主页。</p>
<p>下]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java锁性能分析]]></title>
    <link href="http://valleylord.github.io/post/201410-java-lock/"/>
    <id>http://valleylord.github.io/post/201410-java-lock/</id>
    <published>2014-10-09T06:54:00.000Z</published>
    <updated>2014-12-03T01:16:23.000Z</updated>
    <content type="html"><![CDATA[<p>Java的锁是多线程编程中必须理解的概念，其<code>synchronized</code>关键字本质上就是一个互斥锁的实现。</p>
<p>本文比较在Java中使用锁和使用atomic包中类型在多线程环境下的性能差异，并探讨JVM获取锁的一般步骤。</p>
<p>假设要对一个整数做++操作1000000次。在使用锁（本文使用的是<code>synchronized</code>关键字，也可以用Java中其他的锁Reentrantlock，Readwritelock等）的情况下，可以这样实现。先新建一个<code>MyInt</code>类，表示并发情况下的有数据竞争的对象，该对象需要加锁，代码如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInt</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> intValue;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">MyInt</span>(<span class="keyword">int</span> _intValue) {</div><div class="line">        intValue = _intValue;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span>(){</div><div class="line">    	<span class="keyword">synchronized</span>(<span class="keyword">this</span>) {</div><div class="line">    	    intValue ++;</div><div class="line">    	}</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">incWithLimit</span>(<span class="keyword">int</span> limit){</div><div class="line">    	<span class="keyword">synchronized</span>(<span class="keyword">this</span>) {</div><div class="line">			<span class="keyword">if</span>(intValue &lt; limit){</div><div class="line">			  intValue ++;</div><div class="line">			  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			}</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		}</div><div class="line">    }</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntValue</span>() {</div><div class="line">		<span class="keyword">return</span> intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValue</span>(<span class="keyword">int</span> intValue) {</div><div class="line">		<span class="keyword">this</span>.intValue = intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>注意，<code>inc</code>方法，虽然只有简单的一步++操作，也需要加锁，因为这个在JVM中是分成2步来做的，先读再做+1运算，即与<code>x=x+1</code>这样的代码等价。因为要限制<code>inc</code>的上限1000000次，实际使用的是<code>incWithLimit</code>方法。还要有一个类，用于包装<code>MyInt</code>，并设置上限，代码如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncWithLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">    <span class="keyword">private</span> MyInt intValue;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxM;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">IncWithLock</span>(MyInt _intValue) {</div><div class="line">        intValue = _intValue;</div><div class="line">        maxM     = <span class="number">1000000</span>;</div><div class="line">        count    = <span class="number">0</span>;</div><div class="line">      }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">IncWithLock</span>(MyInt _intValue, <span class="keyword">int</span> _maxM) {</div><div class="line">        intValue = _intValue;</div><div class="line">        maxM     = _maxM;</div><div class="line">        count    = <span class="number">0</span>;</div><div class="line">      }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line"><span class="comment">//	  	while(true) {</span></div><div class="line"><span class="comment">//		  synchronized(intValue) {</span></div><div class="line"><span class="comment">//			if(intValue.getIntValue() &lt; maxM){</span></div><div class="line"><span class="comment">//			  intValue.inc();</span></div><div class="line"><span class="comment">//			}else{</span></div><div class="line"><span class="comment">//			  break;</span></div><div class="line"><span class="comment">//			}</span></div><div class="line"><span class="comment">//		  }</span></div><div class="line"><span class="comment">//		}</span></div><div class="line"></div><div class="line">    	<span class="keyword">while</span>(intValue.incWithLimit(maxM)) {count++;}</div><div class="line"></div><div class="line"><span class="comment">//	  	String threadName = Thread.currentThread().getName();</span></div><div class="line"><span class="comment">//	  	System.out.println("Thread ["+threadName+"]'s value: "</span></div><div class="line"><span class="comment">//	  					+intValue.getIntValue()+"|"+count);</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntValue</span>() {</div><div class="line">		<span class="keyword">return</span> intValue.getIntValue();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValue</span>(MyInt intValue) {</div><div class="line">		<span class="keyword">this</span>.intValue = intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxM</span>() {</div><div class="line">		<span class="keyword">return</span> maxM;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码中，注释掉的<code>while(true)</code>那一段，是使用<code>inc</code>方法来实现的，测试中也是可用的。最后是<code>main</code>方法的代码，有了之前的准备，<code>main</code>的就很简单了，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem1</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        <span class="keyword">int</span> numN = <span class="number">3</span>;    <span class="comment">// could be 3,30,300,1000</span></div><div class="line">        MyInt intVal = <span class="keyword">new</span> MyInt(<span class="number">0</span>);</div><div class="line">        ExecutorService exec = Executors.newFixedThreadPool(numN);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numN; i++) {</div><div class="line">            exec.execute(<span class="keyword">new</span> IncWithLock(intVal));</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(!exec.isTerminated()) {</div><div class="line">            exec.shutdown();</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t = System.currentTimeMillis()-start;</div><div class="line">        System.out.println(<span class="string">"Use ["</span>+t+<span class="string">"] ms to get "</span>+intVal.getIntValue());</div><div class="line">        <span class="comment">//System.out.println(t);</span></div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>以上代码中，使用<code>ExecutorService</code>实现线程池，这样比较便于控制线程个数；<code>intVal</code>是有数据竞争的数据，将被N（N分别取值3,30,300,1000）个线程竞争；最后在全部分支线程执行完后，打印执行所需的时间。</p>
<p>上述的是有锁情况下的代码，使用atomic包中的<code>AtomicInteger</code>可以完全避免使用锁，<code>AtomicInteger</code>使用了<code>compareAndSet</code>方法，在一个指令中完成比对原值并设置新值，因此无需使用锁。<code>MyInt</code>的代码如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInt</span> </span>{</div><div class="line">    <span class="keyword">private</span> AtomicInteger intValue;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">MyInt</span>(AtomicInteger _intValue) {</div><div class="line">        intValue = _intValue;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span>(){</div><div class="line">    	<span class="keyword">int</span> curr = intValue.get();</div><div class="line">    	intValue.compareAndSet(curr, curr+<span class="number">1</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">incWithLimit</span>(<span class="keyword">int</span> limit){</div><div class="line">    	<span class="keyword">int</span> curr = intValue.get();</div><div class="line">    	<span class="keyword">while</span> (curr &lt; limit) {</div><div class="line">    	  <span class="keyword">if</span>(intValue.compareAndSet(curr, curr+<span class="number">1</span>)){</div><div class="line">    	    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    	  }<span class="keyword">else</span>{</div><div class="line">    		curr = intValue.get();</div><div class="line">    	  }</div><div class="line">    	}</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">	<span class="keyword">public</span> AtomicInteger <span class="title">getIntValue</span>() {</div><div class="line">		<span class="keyword">return</span> intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValue</span>(AtomicInteger intValue) {</div><div class="line">		<span class="keyword">this</span>.intValue = intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>无锁版本的<code>MyInt</code>与有锁版本的有一些差异。首先，对象不再是<code>Integer</code>类型，而是<code>AtomicInteger</code>类型；其次，没有再使用锁，<code>synchronized</code>关键字没有出现。由于很多实现已经包装在<code>MyInt</code>中，<code>MyInt</code>的包装类<code>IncWithoutLock</code>与有锁版本的<code>IncWithLock</code>差异很小，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem2;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncWithoutLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</div><div class="line">    <span class="keyword">private</span> MyInt intValue;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxM;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">IncWithoutLock</span>(MyInt _intValue) {</div><div class="line">        intValue = _intValue;</div><div class="line">        maxM     = <span class="number">1000000</span>;</div><div class="line">        count    = <span class="number">0</span>;</div><div class="line">      }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">IncWithoutLock</span>(MyInt _intValue, <span class="keyword">int</span> _maxM) {</div><div class="line">        intValue = _intValue;</div><div class="line">        maxM     = _maxM;</div><div class="line">        count    = <span class="number">0</span>;</div><div class="line">      }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">    	<span class="comment">// should not use following code,</span></div><div class="line">    	<span class="comment">// since get() and inc() are seperated, may cause data racing</span></div><div class="line"><span class="comment">//	  	while(true) {</span></div><div class="line"><span class="comment">//			if(intValue.getIntValue().get() &lt; maxM){</span></div><div class="line"><span class="comment">//			  intValue.inc();</span></div><div class="line"><span class="comment">//			}else{</span></div><div class="line"><span class="comment">//			  break;</span></div><div class="line"><span class="comment">//			}</span></div><div class="line"><span class="comment">//		}</span></div><div class="line"></div><div class="line">    	<span class="keyword">while</span>(intValue.incWithLimit(maxM)) {count++;}</div><div class="line"></div><div class="line"><span class="comment">//	  	String threadName = Thread.currentThread().getName();</span></div><div class="line"><span class="comment">//	  	System.out.println("Thread ["+threadName+"]'s value: "</span></div><div class="line"><span class="comment">//	  					+intValue.getIntValue()+"|"+count);</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Integer <span class="title">getIntValue</span>() {</div><div class="line">		<span class="keyword">return</span> intValue.getIntValue().get();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValue</span>(MyInt intValue) {</div><div class="line">		<span class="keyword">this</span>.intValue = intValue;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxM</span>() {</div><div class="line">		<span class="keyword">return</span> maxM;</div><div class="line">	}</div><div class="line"></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>注意，注释掉的<code>while(true)</code>那段代码，在无锁版本下是有可能会出错的，因为<code>get()</code>和<code>inc()</code>方法虽然本身都是线程安全的，但是它们被分别调用，其间可能插入其他的操作，因此，这段代码可能会有数据竞争的风险。所以，对于无锁版本，使用<code>incWithLimit</code>方法是唯一选择。<code>main</code>方法就几乎完全相同了，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem2</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        <span class="keyword">int</span> numN = <span class="number">3</span>;      <span class="comment">// could be 3,30,300,1000</span></div><div class="line">        MyInt intVal = <span class="keyword">new</span> MyInt(<span class="keyword">new</span> AtomicInteger(<span class="number">0</span>));</div><div class="line">        ExecutorService exec = Executors.newFixedThreadPool(numN);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numN; i++) {</div><div class="line">            exec.execute(<span class="keyword">new</span> IncWithoutLock(intVal));</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(!exec.isTerminated()) {</div><div class="line">            exec.shutdown();</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t = System.currentTimeMillis()-start;</div><div class="line">        System.out.println(<span class="string">"Use ["</span>+t+<span class="string">"] ms to get "</span>+intVal.getIntValue());</div><div class="line">        <span class="comment">//System.out.println(t);</span></div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>运行上述两个版本的程序，分别取线程数为3,30,300,1000，在我的机器上执行耗时（每一种情况执行5次取平均值）如下，</p>
<table>
<thead>
<tr class="header">
<th align="left">线程数</th>
<th align="right">有锁（ms）</th>
<th align="right">无锁（ms）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">3</td>
<td align="right">78.8</td>
<td align="right">59.8</td>
</tr>
<tr class="even">
<td align="left">30</td>
<td align="right">77.6</td>
<td align="right">62.4</td>
</tr>
<tr class="odd">
<td align="left">300</td>
<td align="right">184.2</td>
<td align="right">179.4</td>
</tr>
<tr class="even">
<td align="left">1000</td>
<td align="right">2186.0</td>
<td align="right">2077.6</td>
</tr>
</tbody>
</table>
<p><img src="/images/201410-java-lock/withlock.png"></p>
<p><img src="/images/201410-java-lock/withoutlock.png"></p>
<p>可见，无锁版本的程序始终要比有锁的略快一些，在线程较少（&lt;=CPU个数）的时候，尤其明显。同时，也可以看到，线程并不是越多越好，过多的线程本身就会有很多线程消耗，另外引起的锁竞争现象也会愈发明显。</p>
<p>以上是有锁和无锁情况下的程序性能对比。下面探讨JVM获取锁的一般步骤，主要的步骤是：偏向锁-&gt;轻量级锁-&gt;自旋锁-&gt;重量级锁。在执行过程中，还有执行期间的锁粗化和锁消除等优化。</p>
<p>首先说一下重量级锁，重量级锁类似于操作系统中的锁操作，不过是JVM的对象监视器Monitor实现的。当线程需要竞争某个资源的时候，先进入竞争队列，如果竞争不到锁，本线程就在竞争队列中等待下一次竞争锁；如果竞争到资源，就成为这个资源的Owner，并与其他获取资源的线程互斥；如果调用了wait，说明线程被阻塞，等待阻塞被notify，然后重新进入竞争队列。以上的竞争队列都是利用CAS实现的的无锁队列。由于需要维护多个队列，重量锁的性能消耗实际上是比较大的，但是也更加保险。</p>
<p>既然重量级锁资源消耗比较多，那么稍微轻量级一些的自旋锁就避免了维护多个队列的情况。自旋锁的实现原理是，在竞争不到对象的时候，线程空转几周，即忙等，然后重新尝试获取锁。如果另一个线程对锁的占用时间很短，那么第二次的尝试，很有可能就能拿到锁。过程中，没有复杂的数据结构，因此，在第二次可以拿到锁的情况下，性能要好于重量级锁。但是，对于自旋后仍然不能获取到锁的情况，就把任务交给重量级锁，这样，比普通的重量级锁要多出几次自旋的消耗。为了避免这样的问题，JDK 1.6中引入了自适应自旋锁，对第二次尝试的间隔时间做了自适应处理，比如，默认情况下自旋10次，但是这个对象被占用的时间较长，那么JDK会逐渐延长这个自适应的时间，比如100，发现获取到对象的成功率提高了，那么对这个对象就会间隔100次自旋再去获取。如果无论怎么调整自旋的次数获取到锁的概率都很低，那么就跳过获取自旋锁。</p>
<p>自旋锁的问题是每次仍然要去获取锁然后再进行对象的读写，轻量级锁用CAS操作进一步优化了锁获取。CAS（compareAndSet）在一个指令内完成了对象的读和写，轻量级锁在需要对象资源的时候，先去用CAS读写对象头的轻量级锁标志位，如果成功，说明对象没有被其他线程占用，那么本线程占有了这个资源，并设置本线程为对象的Owner和对象头指向本线程的栈帧，即线程栈和对象互相有指针指向对方，然后执行同步块；如果不成功，检查是否对象头指向本线程，如果是，那么说明本线程已经占有了这个对象，是可重入的锁，继续执行同步块；否则，说明该对象已经被其他线程占有，轻量级锁获取不成功，升级到上一级自旋锁来处理。</p>
<p>轻量级锁无论在有没有竞争的时候，都会需要CAS操作，并且在CAS失败之后，还需要检查是否可重入，偏向锁减少了这两部分的消耗。在获取竞争对象的时候，偏向锁会偏向第一个获取到这个锁的线程。第一个线程在首次获取到偏向锁的时候，将对象头设置为偏向锁模式，并写入本线程的线程号，在下次获取锁的时候，如果仍然是本线程的请求，那么本线程直接获取到竞争对象，无需做同步，也无需CAS操作；如果是另一个线程的请求，因为线程号和之前不同，偏向锁获取不成功，升级到轻量级锁模式来处理。偏向锁的使用也是自适应的，当JVM发现每次偏向锁的请求多数都会发生锁升级，那么就会禁止偏向锁。</p>
<p>由上述分析可以发现，越轻量级的锁，违反锁成立的条件也越容易达到。重量级锁，无法违反；自旋锁，第二次请求获取（自旋）失败即违反；轻量级锁，第一次请求获取对象失败即违反；偏向锁，有第二个线程请求资源即违反。每一次违反，都需要将锁升级到更重量级一级的锁来处理，这个步骤也叫做锁膨胀。</p>
<p>除去以上的各种锁，JVM还引入了锁消除和锁粗化技术，这两个技术都用到了JVM的即时编译器。锁消除是，在程序运行过程中，发现一些在同步块中的对象，不可能被外部的其他线程使用，那么就将这部分对象的代码移动到同步块外部执行，减少同步块的代码量。判定无法被其他线程使用的依据主要是来自逃逸分析，检查堆上的数据是否会逃逸出去被其他线程访问，该技术仍然在发展中。锁粗化是，在一系列连续操作中，发现对某个对象反复的加锁，因为加锁本身也有性能消耗，所以只加一次锁，把中间的代码都放入到同步块内，会减少加锁的次数，从而提高性能。锁粗化的思路和锁消除某种程度上是相反的。</p>
<p>本文主要参考了以下文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>，<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/chen77716/article/details/6618779" target="_blank" rel="external">http://blog.csdn.net/chen77716/article/details/6618779</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/chen77716/article/details/6641477" target="_blank" rel="external">http://blog.csdn.net/chen77716/article/details/6641477</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.majin163.com/2014/03/17/synchronized1/" target="_blank" rel="external">http://www.majin163.com/2014/03/17/synchronized1/</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.majin163.com/2014/03/17/synchronized2/" target="_blank" rel="external">http://www.majin163.com/2014/03/17/synchronized2/</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java的锁是多线程编程中必须理解的概念，其<code>synchronized</code>关键字本质上就是一个互斥锁的实现。</p>
<p>本文比较在Java中使用锁和使用atomic包中类型在多线程环境下的性能差异，并探讨JVM获取锁的一般步骤。</p>
<p>假设要]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL的createuser和pg_dump的过程分析]]></title>
    <link href="http://valleylord.github.io/post/201409-postgres-createuser-pgdump/"/>
    <id>http://valleylord.github.io/post/201409-postgres-createuser-pgdump/</id>
    <published>2014-09-27T08:15:00.000Z</published>
    <updated>2014-12-03T01:15:58.000Z</updated>
    <content type="html"><![CDATA[<p>本文以createuser和pg_dump两个过程为例，分析PostgreSQL的工具程序的一般设计方式。本文使用的是PostgreSQL 9.3.4版本。</p>
<p>所有这些工具过程的<code>main</code>函数代码都在源码目录的<code>src\bin</code>目录下面，例如，createuser和pg_dump就分别对应<code>src\bin\scripts\createuser.c</code>和<code>src\bin\pg_dump\pg_dump.c</code>。</p>
<p>首先，createuser.c的main入口附近，先是include一些头文件，并定义一些参数的默认值，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createuser1.png"></p>
<p>然后从86行开始，是解析参数，并给参数变量赋值，还有一些参数检查的工作，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createuser2.png"></p>
<p>一直到248行出现了<code>connectDatabase</code>调用，表示，过程要开始连接数据库了，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createuser3.png"></p>
<p>接下来，程序开始拼SQL，在309行的时候，程序执行之前拼出来的SQL，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createuser4.png"></p>
<p>最后，检查执行的返回，清除返回结果集，关闭连接，退出程序。</p>
<p>可以看出，createuser的主程序非常简单，其实scripts目录下的程序基本都是这个结构，就是为常用的SQL脚本做了一层简单的包装。那么这个程序的关键就变为，如何处理拼出来的SQL。从PostgreSQL的文档中可以找到，createuser实际上就是SQL命令CREATE ROLE的封装，两者并无差异，而CREATE ROLE的实现是在<code>src\backend\commands\user.c</code>的<code>CreateRole</code>函数中。实际上<code>src\backend\commands</code>目录下，存放了所有SQL命令执行的入口。</p>
<p><code>CreateRole</code>入口中，先是检查输入的SQL语句的参数，然后检查参数的合法性，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createrole1.png"></p>
<p>从第342行开始，根据输入的参数组成将要插入的数据，存在<code>new_record</code>中，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createrole2.png"></p>
<p>然后在378行，把<code>new_record</code>中的数据转换到<code>tuple</code>变量中，之后，使用tuple中的数据完成插入等一系列操作，如下</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createrole3.png"></p>
<p>其中最重要的一步应该是393行插入到<code>pg_authid</code>表（变量<code>pg_authid_rel</code>）这一步，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createrole4.png"></p>
<p>根据PostgreSQL的文档，<code>pg_authid</code>表是一个很关键而又很特别的系统表。</p>
<blockquote>
<p>系统表 pg_authid 包含有关数据库认证标识符（角色）的信息。 一个角色体现&quot;用户&quot;和&quot;组&quot;的概念。 一个用户实际上只是一个设置了 rolcanlogin 标志的角色。 任何角色（不管设置了 rolcanlogin 标志）都可以有其它角色做为成员。</p>
</blockquote>
<p>程序中也反应了这一点，在406行，设置其他角色和新建的角色的关系，应该就是在完成设置新建角色使用其他角色为成员的工作，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/createrole5.png"></p>
<p>完成上述步骤之后，程序的工作基本就完成了，在退出之前，调用<code>InvokeObjectPostCreateHook</code>完成新增角色引起的其他动作，然后关闭<code>pg_authid</code>表，即回收<code>pg_authid_rel</code>变量，最后return已创建角色的roleid，退出。</p>
<p>以上是createuser的分析，pg_dump过程的步骤不太一样，它不是通过单纯的调用SQL完成的。</p>
<p>pg_dump.c的main函数之前声明了很多函数，main函数的开头也一样是定义了很多参数的默认值，并获取输入参数，做参数的检查，然后在637行的时候连接数据库，并将连接存在<code>fout</code>变量，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump1.png"></p>
<p>连接之后，还会调用<code>pg_catalog.pg_is_in_recovery()</code>检查现在系统是否正处在恢复过程中，之后就是获取要导出对象的oid的集合，包括用户本身的oid，还有，根据输入schema和table的信息，匹配到符合条件的schema和table，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump2.png"></p>
<p>再接下来，获取schema的信息，获取table信息，获取Blob信息，获取依赖信息等等，还有一些辅助的dummy数据，这些函数都是形如getXXXXData，例如<code>getSchemaData</code>，这些函数定义在common.c中，很多表相关的信息保存在<code>tblinfo</code>变量中，还有一些存储过程相关的对象存在<code>dumpIdMap</code>中，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump3.png"></p>
<p>然后获取需要导出的对象（758行）的指针，并存储在<code>dobjs</code>和<code>numObjs</code>两个变量中，并将导出的过程对象根据依赖关系做排序，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump4.png"></p>
<p>一系列的准备工作和获取需要的信息都已经完成，从792行开始，正式导出数据，最先导出的是字符集信息，接下来数据库表的信息，然后是之前排序好的过程对象，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump5.png"></p>
<p>最后，设置一些归档的参数，关闭数据库连接，退出程序，如下，</p>
<p><img src="/images/201409-postgres-createuser-pgdump/pgdump6.png"></p>
<p>因此，整个步骤中，最关键的几个步骤是，获取导出对象，排序导出对象，和最后的执行导出对象这三个步骤。其中一些关键的函数的作用应该是这样的，</p>
<blockquote>
getSchemaData，获取导出数据库、表、以及过程相关对象等的信息；
sortDumpableObjects，根据过程的依赖关系，排序导出的先后；
dumpDatabase，导出数据库和表相关的信息；
<p>dumpDumpableObject，导出过程相关对象的信息；</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文以createuser和pg_dump两个过程为例，分析PostgreSQL的工具程序的一般设计方式。本文使用的是PostgreSQL 9.3.4版本。</p>
<p>所有这些工具过程的<code>main</code>函数代码都在源码目录的<code>src\bin<]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java堆dump文件分析]]></title>
    <link href="http://valleylord.github.io/post/201409-java-heap-dump/"/>
    <id>http://valleylord.github.io/post/201409-java-heap-dump/</id>
    <published>2014-09-27T01:02:00.000Z</published>
    <updated>2014-12-03T01:15:36.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要使用Eclipse的MAT工具和JDK自带的jvisualvm工具来分析程序运行异常之后的堆dump文件，以找到程序出错的原因。</p>
<p>Eclipse的MAT(Memory Analyzer Tool) 是基于heap dumps来进行分析的，它的分析速度比jhat快，分析结果是图形界面显示，比java内置jhat的可读性更高。<a href="http://www.eclipse.org/mat/" target="_blank" rel="external">官网</a>上有下载地址，也可以在Eclipse Marketplace中找到安装，安装可以参考<a href="http://jingyan.baidu.com/article/cb5d61053562ed005c2fe022.html" target="_blank" rel="external">这里</a>。</p>
<p>成功安装完之后，打开Eclipse，通过Window-&gt;Open Perspective-&gt;Memory Analysis，进入MAT的工作面板，如果看不到Memory Analysis，说明没有安装成功。然后就可以通过File-&gt;Open Heap Dump...来打开待分析的堆dump文件。</p>
<p>打开oom.prof（一般是.hprof扩展名）文件，产生该文件的程序在运行时报OOM，之后看到如下概览（Overview）界面，</p>
<p><img src="/images/201409-java-heap-dump/heap-dump-open.png"></p>
<p>直觉的反应是，堆的总大小是5.8M，但是有一个类的对象占用了其中的5.4M，很大概率，问题就在这个类上。切换到柱状图模式，并按照Shallow Heap<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>倒排序，如下</p>
<p><img src="/images/201409-java-heap-dump/heap-dump-histogram.png"></p>
<p>可以看到有一个<code>char[]</code>的类占用了过多的内存，有1026个对象，内存占用量第一，占用第二的对象所需内存不到它的1%。对这个类，右键-&gt;List objects-&gt;with outgoing reference，可以看到这个类的对象，和对象引用到的其他对象（如果选with incoming reference，则是这个类的对象，和引用到这些对象的其他对象），同样，也按照Shallow Heap倒排序，如下，</p>
<p><img src="/images/201409-java-heap-dump/heap-dump-objects.png"></p>
<p>可以看到有很多<code>char[40090]</code>的对象，大约70+个，每个大小都是80k（80,192 Byte），所以这些对象的总大小就是80k*70=5400k，也就是5.4M，和最初在概览界面里面看到的5.4M吻合，再向下翻页，发现还有一些其他的<code>char[]</code>对象，不过都占用空间比较小，不构成压力，如下，</p>
<p><img src="/images/201409-java-heap-dump/heap-dump-objects1.png"></p>
<p>这些比较小的<code>char[]</code>对象，看了一些内容，都是一些不太常见的字符，猜测可能是和程序字符集相关的字符编码。</p>
<p>下面猜测一下这个程序的逻辑和发生OOM的原因。首先，程序的堆文件大小总共是5.8M，可以猜测，该程序在运行时设置了JVM参数<code>-Xmx 6M</code>，也就是最大堆大小是6M，类似这样的选项。然后，程序处理的逻辑应该大致是这样，在一个循环中，不停的新增<code>char[]</code>，并且不做垃圾回收，所产生的对象内容是从0开始的整数序列toString的结果，因为可以明显看出，这些对象的内容是重复的。在循环重复执行了70+次的时候，再次新增<code>char[]</code>对象的时候，堆内存不足，发生了OOM，而图中的<code>char[36862]</code>对象，很可能就是最后发生内存不足的那个对象，因为这个对象的前部分内容是和其他对象的内容一致的，而长度却不足。如果的确是这样的话，这个<code>char[]</code>对象的长度实际上应该是不断增长的，那么这个对象很有可能是<code>String</code>类型，因为String是包含一个<code>char[]</code>对象的。</p>
<p>实际上，该文件的domain tree页面，也印证了上述想法，如下</p>
<p><img src="/images/201409-java-heap-dump/heap-dump-domain-tree.png"></p>
<p>可以很明显的看到在ArrayList对象下面有个Object[88]的对象，这是应为ArrayList是用数组方式实现的，而在Object[88]对象下，有很多个String对象，这些对象每个占用1.32%的内存，总共占用了93.45%的内存，有了这些信息，不难分析出发生OOM的代码，应该是类似下面这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用类似Java语法的伪代码</span></div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">String temp；</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">88</span>; i++){</div><div class="line">  temp = <span class="keyword">null</span>；</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">10240</span>; j++){   <span class="comment">// 10240这个数字是根据40090和产生的数据是从0开始的整数这个假设推算出来的</span></div><div class="line">    temp += Integer(i).toString;</div><div class="line">  }</div><div class="line">  list.add(temp);</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>到此，分析完毕。</p>
<p>下面，再用jvisualvm来分析一个Tomcat发生OOM的堆dump文件。</p>
<p>先运行jvisualvm，加载发生OOM的堆dump文件tomcat.hprof。可以看到概要视图，如下，</p>
<p><img src="/images/201409-java-heap-dump/jvisualvm-open.png"></p>
<p>Tomcat负责管理连接的类是<code>org.apache.catalina.session.StandardSession</code>，因此只需要关心这个类有多少个实例。在类视图中，可以发现连接有9963个，如下，</p>
<p><img src="/images/201409-java-heap-dump/jvisualvm-class.png"></p>
<p>对其右键-&gt;在实例视图中显示，可以看到具体的类结构</p>
<p><img src="/images/201409-java-heap-dump/jvisualvm-instance.png"></p>
<p>在OQL控制台视图中，可以使用OQL语言<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，观察这些Session分别是什么什么时候建立的，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> s.creationTime <span class="keyword">from</span> org.apache.catalina.<span class="keyword">session</span>.StandardSession s</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-heap-dump/jvisualvm-oql.png"></p>
<p>查询的<code>creationTime</code>列就是Session建立的时间，使用一个长整型来保存，单位是毫秒ms。查询得到的结果大概是下面这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1403324645728</span></div><div class="line"><span class="number">1403324645755</span></div><div class="line"><span class="number">1403324645759</span></div><div class="line"><span class="number">1403324645763</span></div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div></pre></td></tr></table></figure></p>
<p>然后，我们可以分析，1秒中内建立的最多的连接是多少个，也就是Tomcat处理每秒的峰值。可以写一个Java程序来协助求解，这个程序需要打开tomcat.hprof文件，并用OQL引擎，在这个dump文件上执行OQL才能获取全部的记录。需要使用visualvm的一些库，这些库在JDK的安装目录下，主要是以下一些目录，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$JAVA_HOME/<span class="keyword">lib</span>/visualvm/platform/<span class="keyword">lib</span>/*.jar</div><div class="line">$JAVA_HOME/<span class="keyword">lib</span>/visualvm/profiler/modules/*.jar</div><div class="line">$JAVA_HOME/<span class="keyword">lib</span>/visualvm/visualvm/modules/*.jar</div></pre></td></tr></table></figure></p>
<p>由于本例比较简单，实际上只用到了其中2个jar文件，分别是，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$JAVA_HOME/<span class="keyword">lib</span>/visualvm/profiler/modules/org-netbeans-<span class="keyword">lib</span>-profiler.jar</div><div class="line">$JAVA_HOME/<span class="keyword">lib</span>/visualvm/profiler/modules/org-netbeans-modules-profiler-oql.jar</div></pre></td></tr></table></figure></p>
<p>完整的Java程序如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem2;</div><div class="line"></div><div class="line"><span class="comment">/* Use OQL in Java</span></div><div class="line"> * should import follows to resolve dependencies</div><div class="line"> * $JAVA_HOME/lib/visualvm/profiler/modules/org-netbeans-lib-profiler.jar</div><div class="line"> * $JAVA_HOME/lib/visualvm/profiler/modules/org-netbeans-modules-profiler-oql.jar</div><div class="line"> * ($JAVA_HOME is where you install your JDK)</div><div class="line"> *</div><div class="line"> * Passed under JDK 1.8 and 1.6</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.netbeans.lib.profiler.heap.HeapFactory;</div><div class="line"><span class="keyword">import</span> org.netbeans.modules.profiler.oql.engine.api.OQLEngine;</div><div class="line"><span class="keyword">import</span> org.netbeans.modules.profiler.oql.engine.api.OQLEngine.ObjectVisitor;</div><div class="line"><span class="keyword">import</span> org.netbeans.modules.profiler.oql.engine.api.OQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem2</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args)</div><div class="line">          <span class="keyword">throws</span> FileNotFoundException, IOException, OQLException{</div><div class="line">        <span class="keyword">final</span> List&lt;Long&gt; listTimes = <span class="keyword">new</span> ArrayList&lt;Long&gt;(<span class="number">10000</span>);</div><div class="line">        List&lt;Integer&gt; listOccurs = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="number">10000</span>);</div><div class="line">        String query = <span class="string">"select s.creationTime from"</span></div><div class="line">                          + <span class="string">" org.apache.catalina.session.StandardSession s"</span>;</div><div class="line">        OQLEngine instance = <span class="keyword">new</span> OQLEngine(HeapFactory.createHeap(</div><div class="line">                                    <span class="keyword">new</span> File(<span class="string">"tomcat.hprof"</span>)));</div><div class="line"></div><div class="line">        ObjectVisitor visitor = <span class="keyword">new</span> ObjectVisitor(){</div><div class="line">            <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visit</span>(Object o){</div><div class="line">                listTimes.add(<span class="keyword">new</span> Long(o.toString()));</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            }</div><div class="line">        };</div><div class="line"></div><div class="line">        instance.executeQuery(query, visitor);</div><div class="line"></div><div class="line">        Collections.sort(listTimes);</div><div class="line">        <span class="keyword">int</span> distance;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;listTimes.size(); i++){</div><div class="line">        	distance = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;listTimes.size(); j++){</div><div class="line">                distance = j-i;</div><div class="line">                <span class="keyword">if</span> (listTimes.get(j)-listTimes.get(i) &gt; <span class="number">1000</span>){  <span class="comment">// in 1000ms</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            listOccurs.add(<span class="keyword">new</span> Integer(distance));</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxDistance = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;listOccurs.size(); i++){</div><div class="line">        	<span class="keyword">if</span>(listOccurs.get(i) &gt; maxDistance){</div><div class="line">        		maxDistance = listOccurs.get(i);</div><div class="line">        		maxIndex = i;</div><div class="line">        	}</div><div class="line">        }</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Between Time ["</span>+listTimes.get(maxIndex)</div><div class="line">        		+<span class="string">"] and ["</span>+(listTimes.get(maxIndex)+<span class="number">1000</span>)</div><div class="line">        		+<span class="string">"], Max Requests is "</span>+listOccurs.get(maxIndex)+<span class="string">"."</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>上述程序的处理步骤是：先打开堆dump文件，并构造OQL引擎，接下来在OQL引擎上运行OQL获取所有的新建Session的时间点，存入<code>listTimes</code>，并排序。然后，以每个新建Session的时间点为起始点，计算1秒内有多少个新建的连接。最后，找到最大的那个连接数，并返回对应的起始时间点即可。当然，这个算法并没有很优化，但是也可以得到问题的解。程序输出如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Between <span class="typename">Time</span> [<span class="number">1403324651641</span>] <span class="keyword">and</span> [<span class="number">1403324652641</span>], Max Requests <span class="keyword">is</span> <span class="number">865.</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-heap-dump/tomcat-max-requests.png"></p>
<p>因此，在时间点<code>1403324651641</code>和<code>1403324651641</code>之间，最大的请求数是865次，这是Tomcat在这次运行中达到的峰值。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p>Shallow Heap（浅堆）表示该对象本身占用的内存大小，Retained Heap（深堆）表示该对象释放之后，可以释放的所有内存。因为一个对象可能引用别的对象，当该对象释放的时候，被引用的对象可能不再被引用了，因此也会被释放，所以一般有，Retained Heap&gt;=Shallow Heap。具体Retained Heap会释放多少空间和JVM中的支配树概念有关，不再赘述。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://visualvm.java.net/oqlhelp.html" target="_blank" rel="external">http://visualvm.java.net/oqlhelp.html</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要使用Eclipse的MAT工具和JDK自带的jvisualvm工具来分析程序运行异常之后的堆dump文件，以找到程序出错的原因。</p>
<p>Eclipse的MAT(Memory Analyzer Tool) 是基于heap dumps来进行分析的，它的分析速度比]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java运行时死锁检测和分析]]></title>
    <link href="http://valleylord.github.io/post/201409-java-deadlock/"/>
    <id>http://valleylord.github.io/post/201409-java-deadlock/</id>
    <published>2014-09-19T09:39:00.000Z</published>
    <updated>2014-12-03T01:15:39.000Z</updated>
    <content type="html"><![CDATA[<p>SUN JDK提供了一系列的运行时分析工具<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>可以用于分析运行时的JVM状况，这些工具包括jps、jstack、jstat、jinfo、jmap、jconsole、jvisualvm等。</p>
<p>本文使用其中的部分工具来检测运行时是否发生死锁。先写一个运行时会发生死锁的程序，其实最经典的哲学家就餐问题<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>就是一个死锁的示例，以下程序对该程序略做修改，改成一个只要运行，就很容易（几乎是必然）发生死锁的版本。</p>
<p>首先是Resource类，表示多个进程需要竞争的资源，即哲学家就餐问题中的“筷子”，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> <span class="title">Resource</span>(<span class="keyword">int</span> id) { <span class="keyword">this</span>.id = id; }</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span>() { <span class="keyword">return</span> id; }</div><div class="line">    <span class="keyword">public</span> String <span class="title">toString</span>(){ <span class="keyword">return</span> <span class="string">""</span>+id; };</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>然后是DeadLockExp类，表示会引发死锁的多个线程，即哲学家就餐问题中的“哲学家”，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockExp</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">      <span class="keyword">private</span> Resource myOwn, myNeed;</div><div class="line"></div><div class="line">      <span class="keyword">public</span> <span class="title">DeadLockExp</span>(Resource myOwn, Resource myNeed) {</div><div class="line">        <span class="keyword">this</span>.myOwn = myOwn; <span class="keyword">this</span>.myNeed = myNeed;</div><div class="line">      }</div><div class="line"></div><div class="line">      <span class="annotation">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">    	String threadName = Thread.currentThread().getName();</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">          <span class="keyword">while</span>(<span class="keyword">true</span>) {</div><div class="line">            <span class="keyword">synchronized</span>(myOwn) {</div><div class="line">              System.out.println(<span class="string">"Thread "</span>+threadName+<span class="string">" has got Resource "</span>+myOwn);</div><div class="line">              Thread.sleep(<span class="number">1000</span>);</div><div class="line">              <span class="keyword">synchronized</span>(myNeed) {</div><div class="line">                System.out.println(<span class="string">"Thread "</span>+threadName+<span class="string">" has got Resource "</span>+myNeed);</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">                System.out.println(<span class="string">"Thread "</span>+threadName+<span class="string">"'s job has done."</span>);</div><div class="line">              }</div><div class="line">            }</div><div class="line">          }</div><div class="line">        } <span class="keyword">catch</span>(InterruptedException e) {}</div><div class="line">      }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>本文略作修改，把“哲学家”思考的时间和就餐的时间，这两段都去掉了。将问题中的两根筷子，改为<code>myOwn</code>和<code>myNeed</code>两个成员，表示本线程运行先后需要的资源。由于一定要引发死锁，将对两个成员加锁的间隔时间加长为1s。这样，所有线程同时启动，在1s内，每个线程都加锁了自己的资源，同时也都在请求别人的资源，就形成了死锁。而1s内，完成这些事情是几乎必然的，因此这个程序就一定会引发死锁。</p>
<p>下面在main方法中初始化相互依赖关系，确保出现环形依赖，如下，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem1</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        <span class="keyword">int</span> num = <span class="number">4</span>;</div><div class="line">        Resource[] res = <span class="keyword">new</span> Resource[num];</div><div class="line">        ExecutorService exec = Executors.newFixedThreadPool(num);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++){</div><div class="line">        	res[i] = <span class="keyword">new</span> Resource(i);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) {</div><div class="line">            exec.execute(<span class="keyword">new</span> DeadLockExp(res[i], res[(i+<span class="number">1</span>)%num]));</div><div class="line">        }</div><div class="line">        exec.shutdown();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>本例使用了4个线程（不是哲学家就餐问题中的5个），初始化<code>DeadLockExp</code>实例的时候，注意依赖关系为，DeadLockExp0-&gt;DeadLockExp1-&gt;DeadLockExp2-&gt;DeadLockExp3-&gt;DeadLockExp0。</p>
<p>于是，运行这段程序的时候就会发现每个线程的第一次循环内就进入了死锁，输出为</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Thread pool-<span class="number">1</span>-thread-<span class="number">1</span> <span class="built_in">has</span> got Resource <span class="number">0</span></div><div class="line">Thread pool-<span class="number">1</span>-thread-<span class="number">3</span> <span class="built_in">has</span> got Resource <span class="number">2</span></div><div class="line">Thread pool-<span class="number">1</span>-thread-<span class="number">2</span> <span class="built_in">has</span> got Resource <span class="number">1</span></div><div class="line">Thread pool-<span class="number">1</span>-thread-<span class="number">4</span> <span class="built_in">has</span> got Resource <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-deadlock/deadlock-run.png"></p>
<p>如果这4个线程有任何一个线程没有进入死锁的话，那应该会出现类似这样的输出，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">Thread</span> pool-<span class="number">1</span>-thread-<span class="number">4</span>'s job has done.</div></pre></td></tr></table></figure></p>
<p>本文是使用Eclipse来运行这个程序的，环境是Ubuntu Linux，下面开始用JDK提供的工具来检测这个死锁，先用jps，如下</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~$ jps <span class="operator">-l</span> -m -v</div><div class="line"><span class="number">4004</span> /home/program/eclipse//plugins/org.eclipse.equinox.launcher_1.<span class="number">3.0</span>.v20130327-<span class="number">1440</span>.jar -os linux -ws gtk -arch x86_64 -showsplash /home/program/eclipse//plugins/org.eclipse.platform_4.<span class="number">3.2</span>.v20140221-<span class="number">1700</span>/splash.bmp -launcher /home/program/eclipse/eclipse -name Eclipse --launcher.library /home/program/eclipse//plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.<span class="number">1.200</span>.v20140116-<span class="number">2212</span>/eclipse_1508.so -startup /home/program/eclipse//plugins/org.eclipse.equinox.launcher_1.<span class="number">3.0</span>.v20130327-<span class="number">1440</span>.jar --launcher.appendVmargs -exitdata <span class="number">22000</span>b -product org.eclipse.epp.package.standard.product -vm /home/program/jdk1.<span class="number">8.0</span>/bin/java -vmargs -Dosgi.requiredJavaVersion=<span class="number">1.6</span> -XX:MaxPermSize=<span class="number">256</span>m -Xms40m -Xmx512m -jar /home/program/eclipse//plugins/org.eclipse.equinox.launcher_1.<span class="number">3.0</span>.v20130327-<span class="number">1440</span>.jar -Dosgi.requiredJavaVersion=<span class="number">1.6</span> -XX:MaxPermSize=<span class="number">256</span>m -Xms40m -Xmx512m</div><div class="line"><span class="number">4633</span> sun.tools.jps.Jps <span class="operator">-l</span> -m -v -Denv.class.path=.:/home/program/jdk1.<span class="number">8.0</span>/lib:/home/program/jdk1.<span class="number">8.0</span>/lib/dt.jar:/home/program/jdk1.<span class="number">8.0</span>/lib/tools.jar -Dapplication.home=/home/program/jdk1.<span class="number">8.0</span> -Xms8m</div><div class="line"><span class="number">4607</span> problem1.Problem1 -Dfile.encoding=UTF-<span class="number">8</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-deadlock/jps.png"></p>
<p>可以发现发生死锁的进程是4607，用linux下的工具pidstat（需要安装sysstat）可以看到该进程的线程情况，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">~$ pidstat -p <span class="number">4607</span> -u <span class="number">1</span> <span class="number">1</span> -t</div><div class="line"></div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">15</span>秒      TGID       TID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒      <span class="number">4607</span>         -    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4607</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4609</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">2</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4610</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4611</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4612</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4613</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4618</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">3</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4620</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">2</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4621</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">3</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4622</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4623</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">2</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4624</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4625</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4626</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4627</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">1</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4628</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">2</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4629</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  |__java</div><div class="line"><span class="number">19</span>时<span class="number">22</span>分<span class="number">16</span>秒         -      <span class="number">4630</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0</span>  |__java</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-deadlock/pidstat.png"></p>
<p>用jstack打印线程的dump，如下</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~$ jstack <span class="number">4607</span> &gt;&gt; a.txt</div></pre></td></tr></table></figure></p>
<p>然后打开该文件，线程dump文件中的线程号用的是16进制，不利于分析，不过由于我们使用了<code>ExecutorService</code>，所以可以用线程名称来查找，线程名称以<code>pool-1-thread-</code>开头。文件的前一部分是每一个线程的状态和调用栈，在最后的地方，提示发现了一个死锁，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Java stack information <span class="keyword">for</span> <span class="keyword">the</span> threads listed <span class="keyword">above</span>:</div><div class="line">===================================================</div><div class="line"><span class="string">"pool-1-thread-4"</span>:</div><div class="line">        <span class="keyword">at</span> problem1.DeadLockExp.<span class="command">run</span>(DeadLockExp.java:<span class="number">19</span>)</div><div class="line">        - waiting <span class="keyword">to</span> lock &lt;<span class="number">0x00000000ebf96a00</span>&gt; (a problem1.Resource)</div><div class="line">        - locked &lt;<span class="number">0x00000000ebf96a30</span>&gt; (a problem1.Resource)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:<span class="number">895</span>)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">918</span>)</div><div class="line">        <span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">662</span>)</div><div class="line"><span class="string">"pool-1-thread-1"</span>:</div><div class="line">        <span class="keyword">at</span> problem1.DeadLockExp.<span class="command">run</span>(DeadLockExp.java:<span class="number">19</span>)</div><div class="line">        - waiting <span class="keyword">to</span> lock &lt;<span class="number">0x00000000ebf96a10</span>&gt; (a problem1.Resource)</div><div class="line">        - locked &lt;<span class="number">0x00000000ebf96a00</span>&gt; (a problem1.Resource)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:<span class="number">895</span>)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">918</span>)</div><div class="line">        <span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">662</span>)</div><div class="line"><span class="string">"pool-1-thread-2"</span>:</div><div class="line">        <span class="keyword">at</span> problem1.DeadLockExp.<span class="command">run</span>(DeadLockExp.java:<span class="number">19</span>)</div><div class="line">        - waiting <span class="keyword">to</span> lock &lt;<span class="number">0x00000000ebf96a20</span>&gt; (a problem1.Resource)</div><div class="line">        - locked &lt;<span class="number">0x00000000ebf96a10</span>&gt; (a problem1.Resource)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:<span class="number">895</span>)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">918</span>)</div><div class="line">        <span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">662</span>)</div><div class="line"><span class="string">"pool-1-thread-3"</span>:</div><div class="line">        <span class="keyword">at</span> problem1.DeadLockExp.<span class="command">run</span>(DeadLockExp.java:<span class="number">19</span>)</div><div class="line">        - waiting <span class="keyword">to</span> lock &lt;<span class="number">0x00000000ebf96a30</span>&gt; (a problem1.Resource)</div><div class="line">        - locked &lt;<span class="number">0x00000000ebf96a20</span>&gt; (a problem1.Resource)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:<span class="number">895</span>)</div><div class="line">        <span class="keyword">at</span> java.util.concurrent.ThreadPoolExecutor$Worker.<span class="command">run</span>(ThreadPoolExecutor.java:<span class="number">918</span>)</div><div class="line">        <span class="keyword">at</span> java.lang.Thread.<span class="command">run</span>(Thread.java:<span class="number">662</span>)</div><div class="line"></div><div class="line">Found <span class="number">1</span> deadlock.</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-java-deadlock/jstack-dump.png"></p>
<p>更加可视化的方式是用jvisualvm，在线程那一栏也可以看到有提示发现死锁，如下，</p>
<p><img src="/images/201409-java-deadlock/jvisualvm.png"></p>
<p>也可以点击线程dump，得到线程的dump文件，内容和我们之前用jstack得到几乎一样，</p>
<p><img src="/images/201409-java-deadlock/jvisualvm-dump.png"></p>
<p>这个线程dump文件和之前不同的地方在于多了一些jmx和rmi的线程，从此也可以看出来，jvisualvm这个工具是使用jmx做出来的。</p>
<p>至此，分析完毕。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.csdn.net/fenglibing/article/details/6411999" target="_blank" rel="external">http://blog.csdn.net/fenglibing/article/details/6411999</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>SUN JDK提供了一系列的运行时分析工具<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>可以用于分析运行时的JVM状况，这些工具包括jps、jstack、jstat、jinfo、jmap、jco]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL集群搭建（使用Postgres XL）]]></title>
    <link href="http://valleylord.github.io/post/201409-postgres-cluster-xl/"/>
    <id>http://valleylord.github.io/post/201409-postgres-cluster-xl/</id>
    <published>2014-09-14T00:04:00.000Z</published>
    <updated>2014-12-03T01:16:01.000Z</updated>
    <content type="html"><![CDATA[<p>Postgres XL（PGXL）和Postgres XC（pgxl）的架构很类似，安装步骤也很类似。</p>
<p>本文使用源码在单机上搭建PostgreSQL的最简单集群，1个GTM，协调节点和数据节点各2个。</p>
<p>先去下载PGXL的源码包，在官网上有最新版，本文使用的版本是<a href="http://sourceforge.net/projects/postgres-xl/files/Releases/Version_9.2rc/postgres-xl-v9.2-src.tar.gz/download" target="_blank" rel="external">postgres-xl-v9.2-src.tar.gz</a>。建立独立的用户pgxl用于管理集群，并用新的账号解压源码包。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@anzhy ~]<span class="comment"># adduser pgxl</span></div><div class="line">[root@anzhy ~]<span class="comment"># su - pgxl</span></div><div class="line">[pgxl@anzhy ~]$ <span class="keyword">exit</span></div><div class="line">logout</div><div class="line">[root@anzhy ~]<span class="comment"># cp Downloads/postgres-xl-v9.2-src.tar.gz ~pgxl/</span></div><div class="line">[root@anzhy ~]<span class="comment"># su - pgxl</span></div><div class="line">[pgxl@anzhy ~]$ ls</div><div class="line">postgres-xl-v9.<span class="number">2</span>-src.tar.gz</div><div class="line">[pgxl@anzhy ~]$ tar xzf postgres-xl-v9.<span class="number">2</span>-src.tar.gz</div><div class="line">[pgxl@anzhy ~]$ ls</div><div class="line">postgres-xl-v9.<span class="number">2</span>-src.tar.gz  postgres-xl</div></pre></td></tr></table></figure></p>
<p>解压后的源码需要编译，编译的过程和Postgres XC类似，具体可以参考<a href="http://valleylord.sinaapp.com/post/201408-postgres-cluster#content" target="_blank" rel="external">之前的文章</a>。不同的是，Postgres XL有其他的依赖需要安装，如jade等，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@anzhy ~]$ yum install jade docbook-style-dsssl</div></pre></td></tr></table></figure></p>
<p>不然会编译报错，如果之前没有安装这些依赖，在安装之后需要重新做<code>./configure</code>。以下只简单列一下编译的步骤，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ mkdir pg-xl</div><div class="line">[pgxl@anzhy ~]$ mkdir data</div><div class="line">[pgxl@anzhy ~]$ <span class="built_in">pwd</span></div><div class="line">/home/pgxl</div><div class="line">[pgxl@anzhy ~]$ <span class="built_in">cd</span> postgres-xl/</div><div class="line">......</div><div class="line">[pgxl@anzhy ~]$ ./configure --prefix=<span class="variable">$HOME</span>/pg-xl</div><div class="line">......</div><div class="line">[pgxl@anzhy ~]$ make</div><div class="line">......</div><div class="line">[pgxl@anzhy ~]$ make install</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>一切正常的话，上述每个步骤都会提示成功，Postgres XL最终会安装在<code>$HOME/pg-xl</code>目录下。下面在.bashrc中配置必要的环境变量，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> PGHOME=/home/pgxl/pg-xl</div><div class="line"><span class="keyword">export</span> PGPORT=<span class="number">25431</span></div><div class="line"><span class="keyword">export</span> PGDATA=<span class="variable">$PGHOME</span>/../data/db_1/data</div><div class="line"><span class="keyword">export</span> LANG=en_US.utf8</div><div class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=<span class="variable">$PGHOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line"><span class="keyword">export</span> PATH=<span class="variable">$PGHOME</span>/bin:<span class="variable">$PATH</span>:.</div><div class="line"><span class="keyword">export</span> MANPATH=<span class="variable">$PGHOME</span>/share/man:<span class="variable">$MANPATH</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-env.png"></p>
<p>接下来就可以初始化数据库了，由于是要模拟双机，所以需要创建db_1和db_2两个数据节点。同样使用initdb命令，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ initdb -D <span class="variable">$HOME</span>/data/db_1/data --nodename db_1</div><div class="line">[pgxl@anzhy ~]$ initdb -D <span class="variable">$HOME</span>/data/db_2/data --nodename db_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-initdb.png"></p>
<p>修改两个数据节点的postgresql.conf中的参数，主要是GTM的选项，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen_addresses = <span class="string">'*'</span></div><div class="line">port = <span class="number">25431</span>    # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">25432</span> <span class="keyword">for</span> db_2</div><div class="line">gtm_host = <span class="string">'192.168.1.7'</span></div><div class="line">gtm_port = <span class="number">7777</span></div><div class="line">pooler_port = <span class="number">35431</span> # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">35432</span> <span class="keyword">for</span> db_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-dn-setting1.png"></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-dn-setting2.png"></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-dn-setting4.png"></p>
<p>其中，port参数两个节点不能相同（分别为25431和25432），否则会出错，gtm的地址要写本机的ip地址，其实对于单机的情况写localhost也是可以的。然后修改pg_hba.conf的参数配置数据节点的连接和认证，在IPv4那一段加入以下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">192.168</span>.<span class="number">1.7</span>/<span class="number">32</span>          trust</div><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>               md5</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-dn-setting3.png"></p>
<p>配置完2个数据节点之后，然后去做GTM的初始化，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ initgtm -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-initgtm.png"></p>
<p>然后配置GTM的参数，gtm.conf中需要做如下修改，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">port </span>=<span class="string"> 7777</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-gtm-setting1.png"></p>
<p>接下来做协调器的配置，先做初始化，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy data]$ initdb -D <span class="variable">$HOME</span>/data/coor_1/data --nodename coor_1</div><div class="line">[pgxl@anzhy data]$ initdb -D <span class="variable">$HOME</span>/data/coor_2/data --nodename coor_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-initcoor.png"></p>
<p>从这个命令可以看出，其实协调器和数据节点是很相似的，他们的初始化命令是一样的。同样，也要配置协调器的参数，先是postgresql.conf中的参数，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen_addresses = <span class="string">'*'</span></div><div class="line">port = <span class="number">2921</span>    # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">2922</span> <span class="keyword">for</span> coor_2</div><div class="line">gtm_host = <span class="string">'192.168.1.7'</span></div><div class="line">gtm_port = <span class="number">7777</span></div><div class="line">pooler_port = <span class="number">7778</span> # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">7779</span> <span class="keyword">for</span> coor_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-coor-setting1.png"></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-coor-setting2.png"></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-coor-setting3.png"></p>
<p>pg_hba.conf的设置和数据节点一样，加入以下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">192.168</span>.<span class="number">1.7</span>/<span class="number">32</span>          trust</div><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>               md5</div></pre></td></tr></table></figure></p>
<p>接下来就可以启动集群了，启动的顺序是，GTM-&gt;数据节点-&gt;协调器，先启动GTM，并查看状态。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ gtm_ctl start -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/</div><div class="line">[pgxl@anzhy ~]$ gtm_ctl status -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data</div></pre></td></tr></table></figure></p>
<p>也可以简单的直接运行GTM，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ gtm -D <span class="variable">$HOME</span>/data/gtm/data/</div></pre></td></tr></table></figure></p>
<p>同样，数据节点的启动，也有两种方式，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line">[pgxl@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/db_1/data</div><div class="line">[pgxl@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/db_2/data</div></pre></td></tr></table></figure></p>
<p>协调器的启动和数据节点是类似的，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line">[pgxl@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/coor_1/data</div><div class="line">[pgxl@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/coor_2/data</div></pre></td></tr></table></figure></p>
<p>将上述启动步骤的前一种方法放在一个脚本中，这样就可以使用脚本启动，脚本如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/ start</div><div class="line">sleep <span class="number">3</span>s</div><div class="line"></div><div class="line">gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data status</div><div class="line"></div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div><div class="line">sleep <span class="number">2</span>s</div><div class="line"></div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-start.png"></p>
<p>关闭集群的顺序是相反的，协调器-&gt;数据节点-&gt;GTM，同样，将关闭的操作合也并成一个脚本，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line"></div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line"></div><div class="line">gtm_ctl stop -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-stop.png"></p>
<p>最后一步是注册各个节点，登陆协调者节点1和2，数据节点1和2，运行如下脚本，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">drop</span> node coor_1;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node coor_2;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node db_1;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node db_2;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node <span class="keyword">group</span> gp1;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node <span class="keyword">group</span> gp2;</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node coor_1 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">2921</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node coor_2 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">2922</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node db_1 <span class="keyword">with</span>(TYPE=<span class="string">'datanode'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">25431</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node db_2 <span class="keyword">with</span>(TYPE=<span class="string">'datanode'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">25432</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node coor_1 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">2921</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node coor_2 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">2922</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node db_1 <span class="keyword">with</span>(TYPE=<span class="string">'datanode'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">25431</span>,<span class="keyword">primary</span>=<span class="literal">true</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node db_2 <span class="keyword">with</span>(TYPE=<span class="string">'datanode'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">25432</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node <span class="keyword">group</span> gp1 <span class="keyword">with</span>(db_1);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node <span class="keyword">group</span> gp2 <span class="keyword">with</span>(db_2);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">select</span> pgxc_pool_reload();</span></div><div class="line"><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> pgxc_node;</span></div></pre></td></tr></table></figure></p>
<p>如果是第一次运行，drop相关的步骤也可以不运行，运行完之后，就可以看到多个节点正常的运行起来了。另外，可以将上述脚本保存成文件<code>pgxl_register.sql</code>，并在之前的启动脚本之后加上注册步骤，每次启动的时候即可自动完成，如下</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sleep <span class="number">2</span>s</div><div class="line"></div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">2921</span> <span class="operator">-f</span> pgxl_register.sql</div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">2922</span> <span class="operator">-f</span> pgxl_register.sql</div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">25431</span> <span class="operator">-f</span> pgxl_register.sql</div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">25432</span> <span class="operator">-f</span> pgxl_register.sql</div></pre></td></tr></table></figure></p>
<p>如果没有在数据节点上注册，会发生如下错误，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">postgres=# <span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> test;</span></div><div class="line">LOG:  Will fall back to local snapshot for XID = 22474, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line">ERROR:  node "coor_1_31452" does not exist</div><div class="line">STATEMENT:  <span class="operator"><span class="keyword">SET</span> global_session <span class="keyword">TO</span> coor_1_31452;</span></div><div class="line">LOG:  Will fall back to local snapshot for XID = 22475, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line">ERROR:  node "coor_1_31452" does not exist</div><div class="line">STATEMENT:  <span class="operator"><span class="keyword">SET</span> global_session <span class="keyword">TO</span> coor_1_31452;</span></div><div class="line">ERROR:  node "coor_1_31452" does not exist</div><div class="line">STATEMENT:  <span class="operator"><span class="keyword">SET</span> global_session <span class="keyword">TO</span> coor_1_31452;</span></div><div class="line">ERROR:  node "coor_1_31452" does not exist</div><div class="line">STATEMENT:  <span class="operator"><span class="keyword">SET</span> global_session <span class="keyword">TO</span> coor_1_31452;</span></div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span></span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-error1.png"></p>
<p>如果没有新建node group，则会发生如下的错误，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">postgres=# <span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> test;</span></div><div class="line">LOG:  Will fall back to local snapshot for XID = 22677, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line">LOG:  Will fall back to local snapshot for XID = 22678, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span></span></div><div class="line">postgres=# \c test;</div><div class="line">You are now connected to database "test" as user "pgxl".</div><div class="line">test=# <span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test_table(id <span class="built_in">int</span>);</span></div><div class="line">LOG:  Will fall back to local snapshot for XID = 22681, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line">LOG:  Will fall back to local snapshot for XID = 22682, source = 0, gxmin = 0, autovac launch = 0, autovac = 0, normProcMode = 0, postEnv = 1</div><div class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-error2.png"></p>
<p>下面做一些简单的建表测试，先登陆协调节点1，新增数据库，建表，并插入4笔数据，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[pgxl@anzhy ~]$ psql -d postgres -p 2922</div><div class="line">psql (PGXL 9.2.0, based on PG 9.2.4 (Postgres-XL 9.2.0))</div><div class="line">Type "<span class="operator"><span class="keyword">help</span><span class="string">" for help.</span></span></div><div class="line"></div><div class="line">postgres=# create database test;</div><div class="line">CREATE DATABASE</div><div class="line">postgres=# \c test;</div><div class="line">You are now connected to database "test<span class="string">" as user "</span>pgxl<span class="string">".</span></div><div class="line">test=# create table test_table(id int);</div><div class="line">CREATE TABLE</div><div class="line">test=# insert into test_table values(1);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(2);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(3);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(4);</div><div class="line">INSERT 0 1</div><div class="line">test=# select * from test_table;</div><div class="line"> id</div><div class="line">----</div><div class="line">  1</div><div class="line">  2</div><div class="line">  3</div><div class="line">  4</div><div class="line">(4 rows)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-test1.png"></p>
<p>然后登陆协调节点2，查询刚才新增的表中的数据，发现已经可以查到了，</p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-test2.png"></p>
<p>分别登陆数据节点1和2，发现数据分散在这2个节点上，每个节点上2条数据，</p>
<p><img src="/images/201409-postgres-cluster-xl/pgxl-test3.png"></p>
<p>至此，Postgres XL的集群搭建已经成功，可以与Postgres XC的集群搭建步骤做对比，主要差别有以下一些，</p>
<blockquote>
<ol>
<li>多几个依赖关系，需要用<code>yum install jade docbook-style-dsssl</code>解决；</li>
<li>配置数据节点的时候，也要配置<code>pooler_port</code>，虽然目前还不知道具体的用处；</li>
<li>注册节点的时候，需要加上<code>create node group</code>的步骤；</li>
<li>注册节点的时候，不仅要在协调节点上注册，也要在数据节点上注册；</li>
</ol>
</blockquote>
<p>以上是安装Postgres XL集群的要点，本文主要参考了以下一些文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.163.com/digoal@126/blog/static/16387704020146243755910/" target="_blank" rel="external">http://blog.163.com/digoal@126/blog/static/16387704020146243755910/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/lianshunke/article/details/38979711" target="_blank" rel="external">http://blog.csdn.net/lianshunke/article/details/38979711</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://blog.163.com/digoal@126/blog/static/163877040201441423449445/" target="_blank" rel="external">http://blog.163.com/digoal@126/blog/static/163877040201441423449445/</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Postgres XL（PGXL）和Postgres XC（pgxl）的架构很类似，安装步骤也很类似。</p>
<p>本文使用源码在单机上搭建PostgreSQL的最简单集群，1个GTM，协调节点和数据节点各2个。</p>
<p>先去下载PGXL的源码包，在官网上有最新版，]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM自定义classloader实现热替换]]></title>
    <link href="http://valleylord.github.io/post/201409-jvm-classloader/"/>
    <id>http://valleylord.github.io/post/201409-jvm-classloader/</id>
    <published>2014-09-13T12:26:00.000Z</published>
    <updated>2014-12-03T01:15:32.000Z</updated>
    <content type="html"><![CDATA[<p>通过自定义classloader和java的反射技术，可以自行控制类的加载。多数的Web容器，例如，Tomcat中就实现了自己的类加载器，在修改编译代码之后，可以在不停服务的情况下，运行新class文件中的代码；还有，OSGi中也实现了更加复杂的类加载器，被认为是控制类加载的经典代码。</p>
<p>本文试图用一个简单的可以控制类加载的示例，简单说明自定义类加载器的关键步骤。</p>
<p>假设我们有一个<code>GetInfo</code>类，为了简便起见，这个类只有一个static方法，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInfo</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Output</span>() {</div><div class="line">    System.out.println(<span class="string">"111111"</span>);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>另外一个程序不停循环调用该类的Output方法，并且，在Output方法发生变化之后，能够立刻调用到新的Output方法。本示例中，将简单的把print的内容替换为<code>222222</code>。简单的用伪代码表现这个思想可以是这样，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>){</div><div class="line">  clz = loadClass(<span class="string">"problem1.GetInfo"</span>);  <span class="comment">// 需要使用自定义classloader</span></div><div class="line">  clz.Output();                         <span class="comment">// 需要使用反射技术</span></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>写成可以运行的java代码可以是这样，</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> problem1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *  实现热替换，自定义ClassLoader，加载的是.class</div><div class="line"> */</div><div class="line">class HowswapCL extends ClassLoader {</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String basedir; <span class="comment">// 需要该类加载器直接加载的类文件的基目录</span></div><div class="line">	<span class="keyword">private</span> HashSet&lt;String&gt; dynaclazns; <span class="comment">// 需要由该类加载器直接加载的类名</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">HowswapCL</span>(String basedir, String[] clazns) {</div><div class="line">		<span class="keyword">super</span>(<span class="keyword">null</span>); <span class="comment">// 指定父类加载器为 null</span></div><div class="line">		<span class="keyword">this</span>.basedir = basedir;</div><div class="line">		dynaclazns = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">		loadClassByMe(clazns);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadClassByMe</span>(String[] clazns) {</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clazns.length; i++) {</div><div class="line">			loadDirectly(clazns[i]);</div><div class="line">			dynaclazns.add(clazns[i]);</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Class&lt;?&gt; <span class="title">loadDirectly</span>(String name) {</div><div class="line">		Class&lt;?&gt; cls = <span class="keyword">null</span>;</div><div class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer(basedir);</div><div class="line">		String classname = name.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</div><div class="line">		sb.append(File.separator + classname);</div><div class="line">		File classF = <span class="keyword">new</span> File(sb.toString());</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			cls = instantiateClass(name, <span class="keyword">new</span> FileInputStream(classF),</div><div class="line">					classF.length());</div><div class="line">		} <span class="keyword">catch</span> (FileNotFoundException e) {</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> cls;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Class&lt;?&gt; <span class="title">instantiateClass</span>(String name, InputStream fin, <span class="keyword">long</span> len) {</div><div class="line">		<span class="keyword">byte</span>[] raw = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) len];</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			fin.read(raw);</div><div class="line">			fin.close();</div><div class="line">		} <span class="keyword">catch</span> (IOException e) {</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">return</span> defineClass(name, raw, <span class="number">0</span>, raw.length);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> Class&lt;?&gt; <span class="title">loadClass</span>(String name, <span class="keyword">boolean</span> resolve)</div><div class="line">			<span class="keyword">throws</span> ClassNotFoundException {</div><div class="line">		Class&lt;?&gt; cls = <span class="keyword">null</span>;</div><div class="line">		cls = findLoadedClass(name);</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.dynaclazns.contains(name) && cls == <span class="keyword">null</span>)</div><div class="line">			cls = getSystemClassLoader().loadClass(name);</div><div class="line">		<span class="keyword">if</span> (cls == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">		<span class="keyword">if</span> (resolve)</div><div class="line">			resolveClass(cls);</div><div class="line">		<span class="keyword">return</span> cls;</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 每隔2s运行一次，不断加载class</div><div class="line"> */</div><div class="line">class Multirun implements Runnable {</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">				<span class="comment">// 每次都创建出一个新的类加载器</span></div><div class="line">				<span class="comment">// class需要放在自己package名字的文件夹下</span></div><div class="line">				String url = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/bin"</span>;<span class="comment">// "/bin/problem1/GetInfo.class";</span></div><div class="line">				HowswapCL cl = <span class="keyword">new</span> HowswapCL(url,</div><div class="line">						<span class="keyword">new</span> String[] { <span class="string">"problem1.GetInfo"</span> });</div><div class="line">				Class&lt;?&gt; cls = cl.loadClass(<span class="string">"problem1.GetInfo"</span>);</div><div class="line">				Object foo = cls.newInstance();</div><div class="line">				<span class="comment">// 被调用函数的参数</span></div><div class="line">				Method m = foo.getClass().getMethod(<span class="string">"Output"</span>, <span class="keyword">new</span> Class[] {});</div><div class="line">				m.invoke(foo, <span class="keyword">new</span> Object[] {});</div><div class="line">				Thread.sleep(<span class="number">2000</span>);</div><div class="line">			}</div><div class="line">		} <span class="keyword">catch</span> (Exception ex) {</div><div class="line">			ex.printStackTrace();</div><div class="line">		}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem1</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		<span class="comment">// 热替换测试代码</span></div><div class="line">		Thread t;</div><div class="line">		t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Multirun());</div><div class="line">		t.start();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>这段代码就是上述伪代码的实现。<code>HowswapCL</code>类是自定义的classloader，它有2个成员，<code>basedir</code>和<code>dynaclazns</code>，分别表示需要加载的类的所在目录，和已经加载了的类名，同时实现了ClassLoader的接口<code>loadClass</code>。<code>loadClass</code>根据类名称去加载类实例，它先调用<code>findLoadedClass</code>查找这个类是否已经被加载了，如果没有被加载，并且<code>dynaclazns</code>里面也没有记录，那么就使用系统加载器加载（<code>getSystemClassLoader().loadClass(name)</code>）；如果<code>dynaclazns</code>里面有记录，但是还是没有被加载，那么就抛出ClassNotFound异常。</p>
<p>那<code>dynaclazns</code>中的内容是在何时添加的呢？是在初始化classloader的时候，也就是初始化<code>HowswapCL</code>类的时候，初始化过程中，先对每个<code>basedir</code>路径下需要加载的类文件调用<code>loadDirectly</code>做加载，然后将类名加入到<code>dynaclazns</code>中。在<code>loadDirectly</code>做加载的时候，先通过<code>basedir</code>路径和类名拼出class文件的路径，然后将class文件以二进制形式读入到对象<code>raw</code>中，最后根据类名和<code>raw</code>中二进制信息，调用<code>defineClass</code>加载这个类。</p>
<p>另外，loadClass的resolve参数在本例中没有用到，其含义是：resolve=true时，则保证已经装载，而且已经连接了。resolve=false时，则仅仅是去装载这个类，不关心是否连接了，所以此时可能被连接了，也可能没有被连接，默认是false。</p>
<p>运行起来的示例截图如下，</p>
<p><img src="/images/201408-jvm-classloader/classloader-hotswap.png"></p>
<p>本文重点参考了这几篇文章<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。以上代码仅仅是测试代码，演示了自定义classloader实现热替换的基本原理，在设计上有诸多弊病。如果是实际项目的代码，一般会以接口的形式调用<code>Output</code>，而不会是静态方法；还有，每次调用都加载一次类，也的确很浪费性能，毕竟修改类的情况是少数，可以对指定路径下的类做一个监听，当发现class文件的修改时间或者是md5值发生改变的时候，就自动做一次重新加载，否则不做，这对性能有很好的提升，Eclipse的自动编译就是使用了类似这样的方法。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.ibm.com/developerworks/cn/java/j-lo-hotswapcls/index.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-lo-hotswapcls/index.html</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://blog.csdn.net/ozwarld/article/details/7440868" target="_blank" rel="external">http://blog.csdn.net/ozwarld/article/details/7440868</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://blog.csdn.net/iceman1952/article/details/1523025" target="_blank" rel="external">http://blog.csdn.net/iceman1952/article/details/1523025</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过自定义classloader和java的反射技术，可以自行控制类的加载。多数的Web容器，例如，Tomcat中就实现了自己的类加载器，在修改编译代码之后，可以在不停服务的情况下，运行新class文件中的代码；还有，OSGi中也实现了更加复杂的类加载器，被认为是控制类加载]]>
    </summary>
    
      <category term="JVM" scheme="http://valleylord.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://valleylord.github.io/tags/Java/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="JVM" scheme="http://valleylord.github.io/categories/JVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostgreSQL集群搭建（使用Postgres XC）]]></title>
    <link href="http://valleylord.github.io/post/201409-postgres-cluster/"/>
    <id>http://valleylord.github.io/post/201409-postgres-cluster/</id>
    <published>2014-09-13T01:21:00.000Z</published>
    <updated>2014-12-03T01:16:04.000Z</updated>
    <content type="html"><![CDATA[<p>PostgreSQL本身没有集群功能，但是有开源的第三方解决方案，比较成熟的有Postgres XC（PGXC）和Postgres XL（PGXL）。PGXC跟进PostgreSQl的版本相对比较快，PGXL的功能比较强大一些，主要多了MPP (Massively Parallel Processing) Parallelism。PGXC集群的架构主要分全局事务管理器、协调器和数据节点三个部分，通过全局事务管理器（GTM ，Global Transaction Manager）作为单点来控制多个协调器（Coordinator），由协调器来解析SQL并把SQL分到多个数据节点（Data Node）上，取回数据后合并数据集，返回给调用者。大致结构如下图，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-arch.png"></p>
<p>本文使用源码在单机上搭建PostgreSQL的集群，实际的集群环境应该是需要多台服务器，但搭建的操作步骤是类似的。实际上，安装过程本身和PostgreSQL也有很多相似之处。</p>
<p>先去下载PGXC的源码包，在sourceforge上有最新版，本文使用的版本是pgxc-v1.0.4.tar.gz。建立独立的用户pgxc用于管理集群，并用新的账号解压源码包。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@anzhy ~]<span class="comment"># adduser pgxc</span></div><div class="line">[root@anzhy ~]<span class="comment"># su - pgxc</span></div><div class="line">[pgxc@anzhy ~]$ <span class="keyword">exit</span></div><div class="line">logout</div><div class="line">[root@anzhy ~]<span class="comment"># cp Downloads/pgxc-v1.0.4.tar.gz ~pgxc/</span></div><div class="line">[root@anzhy ~]<span class="comment"># su - pgxc</span></div><div class="line">[pgxc@anzhy ~]$ ls</div><div class="line">pgxc-v1.<span class="number">0.4</span>.tar.gz</div><div class="line">[pgxc@anzhy ~]$ tar xzf pgxc-v1.<span class="number">0.4</span>.tar.gz</div><div class="line">[pgxc@anzhy ~]$ ls</div><div class="line">pgxc-v1.<span class="number">0.4</span>.tar.gz  postgres-xc-<span class="number">1.0</span>.<span class="number">4</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/add-user-pgxc.png"></p>
<p>解压后的源码需要编译，编译的过程和PostgreSQL类似，有一些依赖需要安装，由于之前这台机器在安装PostgreSQL的时候已经装过依赖程序了，所以不会提示缺少依赖的情况。具体可以参考<a href="http://valleylord.sinaapp.com/post/201408-postgres-dev-env#content" target="_blank" rel="external">之前的文章</a>。以下只简单列一下编译的步骤，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ mkdir postgres-xc</div><div class="line">[pgxc@anzhy ~]$ mkdir data</div><div class="line">[pgxc@anzhy ~]$ <span class="built_in">pwd</span></div><div class="line">/home/pgxc</div><div class="line">[pgxc@anzhy ~]$ <span class="built_in">cd</span> postgres-xc-<span class="number">1.0</span>.<span class="number">4</span>/</div><div class="line">......</div><div class="line">[pgxc@anzhy ~]$ ./configure --prefix=<span class="variable">$HOME</span>/postgres-xc</div><div class="line">......</div><div class="line">[pgxc@anzhy ~]$ make</div><div class="line">......</div><div class="line">[pgxc@anzhy ~]$ make install</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>一切正常的话，上述每个步骤都会提示成功，Postgres XC最终会安装在<code>$HOME/postgres-xc</code>目录下。下面在.bashrc中配置必要的环境变量，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> PGHOME=/home/pgxc/postgres-xc</div><div class="line"><span class="keyword">export</span> PGPORT=<span class="number">15431</span></div><div class="line"><span class="keyword">export</span> PGDATA=<span class="variable">$PGHOME</span>/../data/db_1/data</div><div class="line"><span class="keyword">export</span> LANG=en_US.utf8</div><div class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=<span class="variable">$PGHOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line"><span class="keyword">export</span> PATH=<span class="variable">$PGHOME</span>/bin:<span class="variable">$PATH</span>:.</div><div class="line"><span class="keyword">export</span> MANPATH=<span class="variable">$PGHOME</span>/share/man:<span class="variable">$MANPATH</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-env.png"></p>
<p>接下来就可以初始化数据库了，由于是要模拟双机，所以需要创建db_1和db_2两个数据节点。同样使用initdb命令，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ initdb -D <span class="variable">$HOME</span>/data/db_1/data --nodename db_1</div><div class="line">[pgxc@anzhy ~]$ initdb -D <span class="variable">$HOME</span>/data/db_2/data --nodename db_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-initdb.png"></p>
<p>修改两个数据节点的postgresql.conf中的参数，主要是GTM的选项，如下，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">listen_addresses = <span class="string">'*'</span></div><div class="line">port = <span class="number">15431</span>    # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">15432</span> <span class="keyword">for</span> db_2</div><div class="line">gtm_host = <span class="string">'192.168.1.7'</span></div><div class="line">gtm_port = <span class="number">6666</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-dn-setting1.png"></p>
<p><img src="/images/201409-postgres-cluster/pgxc-dn-setting2.png"></p>
<p>其中，port参数两个节点不能相同（分别为15431和15432），否则会出错，gtm的地址要写本机的ip地址，其实对于单机的情况写localhost也是可以的。然后修改pg_hba.conf的参数配置数据节点的连接和认证，在IPv4那一段加入以下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">192.168</span>.<span class="number">1.7</span>/<span class="number">32</span>          trust</div><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>               md5</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-dn-setting3.png"></p>
<p>配置完2个数据节点之后，然后去做GTM的初始化，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ initgtm -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-initgtm.png"></p>
<p>接下来做协调器的配置，先做初始化，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy data]$ initdb -D <span class="variable">$HOME</span>/data/coor_1/data --nodename coor_1</div><div class="line">[pgxc@anzhy data]$ initdb -D <span class="variable">$HOME</span>/data/coor_2/data --nodename coor_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-initcoor.png"></p>
<p>从这个命令可以看出，其实协调器和数据节点是很相似的，他们的初始化命令是一样的。同样，也要配置协调器的参数，先是postgresql.conf中的参数，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen_addresses = <span class="string">'*'</span></div><div class="line">port = <span class="number">1921</span>    # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">1922</span> <span class="keyword">for</span> coor_2</div><div class="line">gtm_host = <span class="string">'192.168.1.7'</span></div><div class="line">gtm_port = <span class="number">6666</span></div><div class="line">pooler_port = <span class="number">6667</span> # <span class="keyword">change</span> <span class="keyword">to</span> <span class="number">6668</span> <span class="keyword">for</span> coor_2</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-coor-setting1.png"></p>
<p><img src="/images/201409-postgres-cluster/pgxc-coor-setting2.png"></p>
<p><img src="/images/201409-postgres-cluster/pgxc-coor-setting3.png"></p>
<p>设置中要注意的地方和数据节点一样，协调器的设置中多了一个pooler_port的连接池相关设置，pg_hba.conf的设置和数据节点一样，加入以下配置，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">192.168</span>.<span class="number">1.7</span>/<span class="number">32</span>          trust</div><div class="line">host    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>               md5</div></pre></td></tr></table></figure></p>
<p>接下来就可以启动集群了，启动的顺序是，GTM-&gt;数据节点-&gt;协调器，先启动GTM，并查看状态。</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/ start</div><div class="line">server starting</div><div class="line">[pgxc@anzhy ~]$ gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data status</div><div class="line">gtm_ctl: server is running (PID: <span class="number">2884</span>)</div><div class="line"> <span class="string">"-D"</span> <span class="string">"/home/pgxc/data/gtm/data"</span></div><div class="line"><span class="number">1</span> master</div></pre></td></tr></table></figure></p>
<p>也可以简单的直接运行GTM，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ gtm -D <span class="variable">$HOME</span>/data/gtm/data/</div></pre></td></tr></table></figure></p>
<p>同样，数据节点的启动，也有两种方式，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line">[pgxc@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/db_1/data</div><div class="line">[pgxc@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/db_2/data</div></pre></td></tr></table></figure></p>
<p>协调器的启动和数据节点是类似的，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line">[pgxc@anzhy ~]$ pg_ctl start -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/coor_1/data</div><div class="line">[pgxc@anzhy ~]$ postgres -X -D <span class="variable">$HOME</span>/data/coor_2/data</div></pre></td></tr></table></figure></p>
<p>本文都是使用前一种方法启动的，截图如下，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-start.png"></p>
<p>启动后，可以用netstat和ps查看监听端口，和进程状态，如下图，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-status.png"></p>
<p>将上述启动步骤放在一个脚本中，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/ start</div><div class="line">sleep <span class="number">3</span>s</div><div class="line"></div><div class="line">gtm_ctl -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data status</div><div class="line"></div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div><div class="line">sleep <span class="number">2</span>s</div><div class="line"></div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line">pg_ctl start -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div></pre></td></tr></table></figure></p>
<p>关闭集群的顺序是相反的，协调器-&gt;数据节点-&gt;GTM，如下图，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-stop.png"></p>
<p>同样，将上述操作合并成一个脚本，如下，</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/coor_2/data -Z coordinator</div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/coor_1/data -Z coordinator</div><div class="line"></div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/db_2/data -Z datanode</div><div class="line">pg_ctl stop -D <span class="variable">$HOME</span>/data/db_1/data -Z datanode</div><div class="line"></div><div class="line">gtm_ctl stop -Z gtm -D <span class="variable">$HOME</span>/data/gtm/data/</div></pre></td></tr></table></figure></p>
<p>然后就可以登陆了，登陆其中一个协调者节点，如下，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-login.png"></p>
<p>最后一步是注册各个节点，如上登陆协调者节点1和2，运行如下脚本，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">drop</span> node coor_1;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node coor_2;</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node coor_1 <span class="keyword">with</span>(TYPE=coordinator,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">1921</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node coor_2 <span class="keyword">with</span>(TYPE=coordinator,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">1922</span>);</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node db_1;</span></div><div class="line"><span class="operator"><span class="keyword">drop</span> node db_2;</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node db_1 <span class="keyword">with</span>(TYPE=datanode,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">15431</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"><span class="operator"><span class="keyword">create</span> node db_2 <span class="keyword">with</span>(TYPE=datanode,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">15432</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node coor_1 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">1921</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node coor_2 <span class="keyword">with</span>(TYPE=<span class="string">'coordinator'</span>,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">1922</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node db_1 <span class="keyword">with</span>(TYPE=datanode,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">15431</span>,<span class="keyword">primary</span>=<span class="literal">true</span>);</span></div><div class="line"><span class="operator"><span class="keyword">alter</span> node db_2 <span class="keyword">with</span>(TYPE=datanode,HOST=<span class="string">'192.168.1.7'</span>,PORT=<span class="number">15432</span>,<span class="keyword">primary</span>=<span class="literal">false</span>);</span></div><div class="line"></div><div class="line"><span class="operator"><span class="keyword">select</span> pgxc_pool_reload();</span></div><div class="line"><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> pgxc_node;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-register.png"></p>
<p>如果是第一次运行，drop相关的步骤也可以不运行，运行完之后，就可以看到多个节点正常的运行起来了。<strong>注意，一定要每个协调者节点都运行如上的脚本，否则可能在建数据库的时候报错</strong><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>，<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>，</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# <span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> test;</span></div><div class="line">ERROR:  No Datanode defined in cluster</div><div class="line">HINT:  You need to define at least 1 Datanode with <span class="operator"><span class="keyword">CREATE</span> NODE.</span></div><div class="line">STATEMENT:  <span class="keyword">create</span> <span class="keyword">database</span> test;</div><div class="line">ERROR:  No Datanode defined in cluster</div><div class="line">STATEMENT:  <span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> test;</span></div><div class="line">ERROR:  No Datanode defined in cluster</div></pre></td></tr></table></figure></p>
<p>另外，可以将上述脚本保存成文件<code>pgxc_register.sql</code>，并在之前的启动脚本之后加上注册步骤，每次启动的时候即可自动完成，如下</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sleep <span class="number">2</span>s</div><div class="line"></div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">1921</span> <span class="operator">-f</span> pgxc_register.sql</div><div class="line">psql <span class="operator">-d</span> postgres -p <span class="number">1922</span> <span class="operator">-f</span> pgxc_register.sql</div></pre></td></tr></table></figure></p>
<p>下面做一些简单的建表测试，先登陆协调节点1，新增数据库，建表，并插入4笔数据，如下，</p>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[pgxc@anzhy ~]$ psql -d postgres -p 1921</div><div class="line">psql (PGXC 1.0.4, based on PG 9.1.13)</div><div class="line">Type "<span class="operator"><span class="keyword">help</span><span class="string">" for help.</span></span></div><div class="line"></div><div class="line">postgres=# create database test;</div><div class="line">CREATE DATABASE</div><div class="line">postgres=# \c test</div><div class="line">You are now connected to database "test<span class="string">" as user "</span>pgxc<span class="string">".</span></div><div class="line">test=# create table test_table(id int);</div><div class="line">CREATE TABLE</div><div class="line">test=# insert into test_table values(1);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(2);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(3);</div><div class="line">INSERT 0 1</div><div class="line">test=# insert into test_table values(4);</div><div class="line">INSERT 0 1</div><div class="line">test=# commit;</div><div class="line">COMMIT</div><div class="line">test=# select count(*) from test_table;</div><div class="line"> count</div><div class="line">-------</div><div class="line">     4</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<p><img src="/images/201409-postgres-cluster/pgxc-test1.png"></p>
<p>然后登陆协调节点2，查询刚才新增的表中的数据，发现已经可以查到了，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-test2.png"></p>
<p>分别登陆数据节点1和2，发现数据分散在这2个节点上，每个节点上2条数据，</p>
<p><img src="/images/201409-postgres-cluster/pgxc-test3.png"></p>
<p>至此，Postgres XC的集群搭建已经成功。如果要使用Postgres XL的话，步骤非常类似。</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://xmarker.blog.163.com/blog/static/2264840572013923552363/" target="_blank" rel="external">http://xmarker.blog.163.com/blog/static/2264840572013923552363/</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://francs3.blog.163.com/blog/static/405767272012532308480/" target="_blank" rel="external">http://francs3.blog.163.com/blog/static/405767272012532308480/</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>PostgreSQL本身没有集群功能，但是有开源的第三方解决方案，比较成熟的有Postgres XC（PGXC）和Postgres XL（PGXL）。PGXC跟进PostgreSQl的版本相对比较快，PGXL的功能比较强大一些，主要多了MPP (Massively Para]]>
    </summary>
    
      <category term="Postgres" scheme="http://valleylord.github.io/tags/Postgres/"/>
    
      <category term="Dataguru" scheme="http://valleylord.github.io/tags/Dataguru/"/>
    
      <category term="Postgres" scheme="http://valleylord.github.io/categories/Postgres/"/>
    
  </entry>
  
</feed>
